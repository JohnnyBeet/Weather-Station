
blackpill_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010484  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08010628  08010628  00020628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010be4  08010be4  000302d4  2**0
                  CONTENTS
  4 .ARM          00000008  08010be4  08010be4  00020be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010bec  08010bec  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010bec  08010bec  00020bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010bf0  08010bf0  00020bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08010bf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001568  200002d4  08010ec8  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000183c  08010ec8  0003183c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba25  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e09  00000000  00000000  0004bd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  0004fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  000512e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b48f  00000000  00000000  000528e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce97  00000000  00000000  0006dd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e6e  00000000  00000000  0008ac0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120a7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a94  00000000  00000000  00120acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801060c 	.word	0x0801060c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	0801060c 	.word	0x0801060c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <am2320_init>:
 */


#include "am2320.h"

AM2320_HandleTypeDef am2320_init(I2C_HandleTypeDef* i2c_handle, uint8_t sensor_address){
 80010a8:	b4b0      	push	{r4, r5, r7}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	4613      	mov	r3, r2
 80010b4:	71fb      	strb	r3, [r7, #7]
	AM2320_HandleTypeDef am2320_;
	am2320_.i2c_handle_ = i2c_handle;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	617b      	str	r3, [r7, #20]

	// left shift cause i2c is weird
	am2320_.sensor_address_ = sensor_address << 1;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	763b      	strb	r3, [r7, #24]
	am2320_.last_temperature = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	847b      	strh	r3, [r7, #34]	; 0x22
	am2320_.last_humidity = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	return am2320_;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	461d      	mov	r5, r3
 80010ce:	f107 0414 	add.w	r4, r7, #20
 80010d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	602b      	str	r3, [r5, #0]
}
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	372c      	adds	r7, #44	; 0x2c
 80010de:	46bd      	mov	sp, r7
 80010e0:	bcb0      	pop	{r4, r5, r7}
 80010e2:	4770      	bx	lr

080010e4 <am2320_crc_checker>:

// taken from sensor documentation
uint16_t am2320_crc_checker(uint8_t* data, uint8_t size){
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]

	uint16_t crc =0xFFFF;
 80010f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f4:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	while(size--)
 80010f6:	e023      	b.n	8001140 <am2320_crc_checker+0x5c>
	{
		crc ^=*data++;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b29a      	uxth	r2, r3
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	4053      	eors	r3, r2
 8001106:	81fb      	strh	r3, [r7, #14]
		for(i=0;i<8;i++)
 8001108:	2300      	movs	r3, #0
 800110a:	737b      	strb	r3, [r7, #13]
 800110c:	e015      	b.n	800113a <am2320_crc_checker+0x56>
		{
			if(crc & 0x01)
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00a      	beq.n	800112e <am2320_crc_checker+0x4a>
			{
				crc>>=1;
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	085b      	lsrs	r3, r3, #1
 800111c:	81fb      	strh	r3, [r7, #14]
				crc^=0xA001;
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001124:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001128:	43db      	mvns	r3, r3
 800112a:	81fb      	strh	r3, [r7, #14]
 800112c:	e002      	b.n	8001134 <am2320_crc_checker+0x50>
			}
			else
			{
				crc>>=1;
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	81fb      	strh	r3, [r7, #14]
		for(i=0;i<8;i++)
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	3301      	adds	r3, #1
 8001138:	737b      	strb	r3, [r7, #13]
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9e6      	bls.n	800110e <am2320_crc_checker+0x2a>
	while(size--)
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	70fa      	strb	r2, [r7, #3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1d6      	bne.n	80010f8 <am2320_crc_checker+0x14>
			}
		}
	}
	return crc;
 800114a:	89fb      	ldrh	r3, [r7, #14]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <am2320_read_temperature_and_humidity>:

uint8_t am2320_read_temperature_and_humidity(AM2320_HandleTypeDef* am2320){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
	/* regs:
	 * empty_reg for waking the sensor up
	 * read_regs for triggering measurements and reading from sensor registers
	 * */
	uint8_t empty_reg[1] = { 0x00 };
 8001160:	2300      	movs	r3, #0
 8001162:	743b      	strb	r3, [r7, #16]
	uint8_t read_regs[3] = { 0x03, 0x00, 0x04 };
 8001164:	4a41      	ldr	r2, [pc, #260]	; (800126c <am2320_read_temperature_and_humidity+0x114>)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4611      	mov	r1, r2
 800116e:	8019      	strh	r1, [r3, #0]
 8001170:	3302      	adds	r3, #2
 8001172:	0c12      	lsrs	r2, r2, #16
 8001174:	701a      	strb	r2, [r3, #0]
	 * sends address (empty reg and 0 size for not writing anything)
	 * returns HAL_ERROR cause sensor doesn't ACK waking up
	 * after sending address it should wait for <800us;3ms>,
	 * but either hardware or HAL library for i2c seems to manage this
	 * */
	HAL_I2C_Master_Transmit(am2320->i2c_handle_, am2320->sensor_address_, empty_reg, 0, 1000);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	b299      	uxth	r1, r3
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	f002 fd3a 	bl	8003c04 <HAL_I2C_Master_Transmit>

	/*TODO: comment properly
	 * prompts for measurement
	 * */
	if(HAL_I2C_Master_Transmit(am2320->i2c_handle_, am2320->sensor_address_, read_regs, 3, 1000) != HAL_OK){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	b299      	uxth	r1, r3
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2303      	movs	r3, #3
 80011a6:	f002 fd2d 	bl	8003c04 <HAL_I2C_Master_Transmit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d009      	beq.n	80011c4 <am2320_read_temperature_and_humidity+0x6c>
		printf("Prompting for measurement went wrong!\n");
 80011b0:	482f      	ldr	r0, [pc, #188]	; (8001270 <am2320_read_temperature_and_humidity+0x118>)
 80011b2:	f00b fc2f 	bl	800ca14 <puts>
		//TODO: this is tragic, need to rework this!!!
		HAL_I2C_Init(am2320->i2c_handle_);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fbde 	bl	800397c <HAL_I2C_Init>
		return 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e04e      	b.n	8001262 <am2320_read_temperature_and_humidity+0x10a>
	}

	/*TODO: comment properly
	 * receives am2320->sensor_data_
	 * */
	if(HAL_I2C_Master_Receive(am2320->i2c_handle_, am2320->sensor_address_, am2320->sensor_data_, 8, 1000) != HAL_OK){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1d5a      	adds	r2, r3, #5
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2308      	movs	r3, #8
 80011da:	f002 fe11 	bl	8003e00 <HAL_I2C_Master_Receive>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d009      	beq.n	80011f8 <am2320_read_temperature_and_humidity+0xa0>
		printf("Receiving am2320->sensor_data_ failed!\n");
 80011e4:	4823      	ldr	r0, [pc, #140]	; (8001274 <am2320_read_temperature_and_humidity+0x11c>)
 80011e6:	f00b fc15 	bl	800ca14 <puts>
		//TODO: this is tragic, need to rework this!!!
		HAL_I2C_Init(am2320->i2c_handle_);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fbc4 	bl	800397c <HAL_I2C_Init>
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e034      	b.n	8001262 <am2320_read_temperature_and_humidity+0x10a>
	}

	// check crc
	uint16_t sensor_crc = ((am2320->sensor_data_[7]<<8)+am2320->sensor_data_[6]);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7b1b      	ldrb	r3, [r3, #12]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7adb      	ldrb	r3, [r3, #11]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	82fb      	strh	r3, [r7, #22]
	uint16_t calculated_crc = am2320_crc_checker((am2320->sensor_data_), 6);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3305      	adds	r3, #5
 8001210:	2106      	movs	r1, #6
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff66 	bl	80010e4 <am2320_crc_checker>
 8001218:	4603      	mov	r3, r0
 800121a:	82bb      	strh	r3, [r7, #20]
	if(sensor_crc != calculated_crc){
 800121c:	8afa      	ldrh	r2, [r7, #22]
 800121e:	8abb      	ldrh	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	d004      	beq.n	800122e <am2320_read_temperature_and_humidity+0xd6>
		printf("Wrong CRC!\n");
 8001224:	4814      	ldr	r0, [pc, #80]	; (8001278 <am2320_read_temperature_and_humidity+0x120>)
 8001226:	f00b fbf5 	bl	800ca14 <puts>
		return 0;
 800122a:	2300      	movs	r3, #0
 800122c:	e019      	b.n	8001262 <am2320_read_temperature_and_humidity+0x10a>
	}

	// different types, because temperature may be negative
	am2320->last_temperature = (int16_t)((am2320->sensor_data_[4]<<8)+am2320->sensor_data_[5]);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7a5b      	ldrb	r3, [r3, #9]
 8001232:	b29b      	uxth	r3, r3
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7a9b      	ldrb	r3, [r3, #10]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	81da      	strh	r2, [r3, #14]
	am2320->last_humidity = ((am2320->sensor_data_[2]<<8)+am2320->sensor_data_[3]);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	79db      	ldrb	r3, [r3, #7]
 800124c:	b29b      	uxth	r3, r3
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7a1b      	ldrb	r3, [r3, #8]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4413      	add	r3, r2
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	821a      	strh	r2, [r3, #16]
	return 1;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08010684 	.word	0x08010684
 8001270:	08010628 	.word	0x08010628
 8001274:	08010650 	.word	0x08010650
 8001278:	08010678 	.word	0x08010678

0800127c <bmp280_read_reg16>:
#define BMP280_RESET_VALUE 0x86

/*
 * TODO: make two functions out of this: one for reading
 */
bool bmp280_read_reg16(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint16_t* reg_contents){
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af04      	add	r7, sp, #16
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	460b      	mov	r3, r1
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	72fb      	strb	r3, [r7, #11]
	uint8_t reg_temp[2];
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, reg_address, 1, reg_temp, 2, HAL_MAX_DELAY) == HAL_OK){
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	791b      	ldrb	r3, [r3, #4]
 8001292:	b299      	uxth	r1, r3
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b29a      	uxth	r2, r3
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2302      	movs	r3, #2
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	f003 f8c9 	bl	8004440 <HAL_I2C_Mem_Read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10b      	bne.n	80012cc <bmp280_read_reg16+0x50>
		*reg_contents = (reg_temp[1]<<8) | reg_temp[0];
 80012b4:	7d7b      	ldrb	r3, [r7, #21]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7d3b      	ldrb	r3, [r7, #20]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	801a      	strh	r2, [r3, #0]
		return 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <bmp280_read_reg16+0x52>
	}
	else{
		return 0;
 80012cc:	2300      	movs	r3, #0
	}
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <bmp280_read_reg8>:

bool bmp280_read_reg8(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint8_t* reg_contents){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b08a      	sub	sp, #40	; 0x28
 80012da:	af04      	add	r7, sp, #16
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	460b      	mov	r3, r1
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	72fb      	strb	r3, [r7, #11]
	uint8_t reg_temp;
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, reg_address, 1, &reg_temp, 1, HAL_MAX_DELAY) == HAL_OK){
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	b299      	uxth	r1, r3
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 0317 	add.w	r3, r7, #23
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	f003 f89c 	bl	8004440 <HAL_I2C_Mem_Read>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <bmp280_read_reg8+0x42>
		*reg_contents = reg_temp;
 800130e:	7dfa      	ldrb	r2, [r7, #23]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	701a      	strb	r2, [r3, #0]
		return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <bmp280_read_reg8+0x44>
	}
	else{
		return 0;
 8001318:	2300      	movs	r3, #0
	}
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <bmp280_write_reg8>:

bool bmp280_write_reg8(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint8_t* reg_contents){
 8001322:	b580      	push	{r7, lr}
 8001324:	b088      	sub	sp, #32
 8001326:	af04      	add	r7, sp, #16
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	460b      	mov	r3, r1
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	72fb      	strb	r3, [r7, #11]
	if(HAL_I2C_Mem_Write(bmp->i2c_handle_, bmp->address_, reg_address, 1, reg_contents, 1, HAL_MAX_DELAY) == HAL_OK){
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	b299      	uxth	r1, r3
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	b29a      	uxth	r2, r3
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	f002 ff7d 	bl	800424c <HAL_I2C_Mem_Write>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <bmp280_write_reg8+0x3a>
		return 1;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <bmp280_write_reg8+0x3c>
	}
	else{
		return 0;
 800135c:	2300      	movs	r3, #0
	}
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <bmp280_get_compensation_data>:

bool bmp280_get_compensation_data(BMP280_HandleTypedef* bmp){
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	if(bmp280_read_reg16(bmp, 0x88, &(bmp->compensation_params_.dig_T1)) &&
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3306      	adds	r3, #6
 8001372:	461a      	mov	r2, r3
 8001374:	2188      	movs	r1, #136	; 0x88
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff80 	bl	800127c <bmp280_read_reg16>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d06f      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8A, (uint16_t*) &(bmp->compensation_params_.dig_T2)) &&
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3308      	adds	r3, #8
 8001386:	461a      	mov	r2, r3
 8001388:	218a      	movs	r1, #138	; 0x8a
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff76 	bl	800127c <bmp280_read_reg16>
 8001390:	4603      	mov	r3, r0
	if(bmp280_read_reg16(bmp, 0x88, &(bmp->compensation_params_.dig_T1)) &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d065      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8C, (uint16_t*) &(bmp->compensation_params_.dig_T3)) &&
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	330a      	adds	r3, #10
 800139a:	461a      	mov	r2, r3
 800139c:	218c      	movs	r1, #140	; 0x8c
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff6c 	bl	800127c <bmp280_read_reg16>
 80013a4:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8A, (uint16_t*) &(bmp->compensation_params_.dig_T2)) &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d05b      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8E, &(bmp->compensation_params_.dig_P1)) &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	330c      	adds	r3, #12
 80013ae:	461a      	mov	r2, r3
 80013b0:	218e      	movs	r1, #142	; 0x8e
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff62 	bl	800127c <bmp280_read_reg16>
 80013b8:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8C, (uint16_t*) &(bmp->compensation_params_.dig_T3)) &&
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d051      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x90, (uint16_t*) &(bmp->compensation_params_.dig_P2)) &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	330e      	adds	r3, #14
 80013c2:	461a      	mov	r2, r3
 80013c4:	2190      	movs	r1, #144	; 0x90
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff58 	bl	800127c <bmp280_read_reg16>
 80013cc:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8E, &(bmp->compensation_params_.dig_P1)) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d047      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x92, (uint16_t*) &(bmp->compensation_params_.dig_P3)) &&
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3310      	adds	r3, #16
 80013d6:	461a      	mov	r2, r3
 80013d8:	2192      	movs	r1, #146	; 0x92
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff4e 	bl	800127c <bmp280_read_reg16>
 80013e0:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x90, (uint16_t*) &(bmp->compensation_params_.dig_P2)) &&
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d03d      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x94, (uint16_t*) &(bmp->compensation_params_.dig_P4)) &&
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3312      	adds	r3, #18
 80013ea:	461a      	mov	r2, r3
 80013ec:	2194      	movs	r1, #148	; 0x94
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff44 	bl	800127c <bmp280_read_reg16>
 80013f4:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x92, (uint16_t*) &(bmp->compensation_params_.dig_P3)) &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d033      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x96, (uint16_t*) &(bmp->compensation_params_.dig_P5)) &&
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3314      	adds	r3, #20
 80013fe:	461a      	mov	r2, r3
 8001400:	2196      	movs	r1, #150	; 0x96
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff3a 	bl	800127c <bmp280_read_reg16>
 8001408:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x94, (uint16_t*) &(bmp->compensation_params_.dig_P4)) &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d029      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x98, (uint16_t*) &(bmp->compensation_params_.dig_P6)) &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3316      	adds	r3, #22
 8001412:	461a      	mov	r2, r3
 8001414:	2198      	movs	r1, #152	; 0x98
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff30 	bl	800127c <bmp280_read_reg16>
 800141c:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x96, (uint16_t*) &(bmp->compensation_params_.dig_P5)) &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01f      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9A, (uint16_t*) &(bmp->compensation_params_.dig_P7)) &&
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3318      	adds	r3, #24
 8001426:	461a      	mov	r2, r3
 8001428:	219a      	movs	r1, #154	; 0x9a
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff26 	bl	800127c <bmp280_read_reg16>
 8001430:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x98, (uint16_t*) &(bmp->compensation_params_.dig_P6)) &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d015      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9C, (uint16_t*) &(bmp->compensation_params_.dig_P8)) &&
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	331a      	adds	r3, #26
 800143a:	461a      	mov	r2, r3
 800143c:	219c      	movs	r1, #156	; 0x9c
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff1c 	bl	800127c <bmp280_read_reg16>
 8001444:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x9A, (uint16_t*) &(bmp->compensation_params_.dig_P7)) &&
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9E, (uint16_t*) &(bmp->compensation_params_.dig_P9))){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	331c      	adds	r3, #28
 800144e:	461a      	mov	r2, r3
 8001450:	219e      	movs	r1, #158	; 0x9e
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff12 	bl	800127c <bmp280_read_reg16>
 8001458:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x9C, (uint16_t*) &(bmp->compensation_params_.dig_P8)) &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <bmp280_get_compensation_data+0xfc>
		return 1;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <bmp280_get_compensation_data+0xfe>
	}
	else{
		return 0;
 8001462:	2300      	movs	r3, #0
	}
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <bmp280_init_force_mode>:

bool bmp280_init_force_mode(BMP280_HandleTypedef* bmp){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	bmp->address_ = BMP280_ADDRESS_0 << 1;	// SDO connected to ground
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	22ec      	movs	r2, #236	; 0xec
 8001478:	711a      	strb	r2, [r3, #4]
	bmp->mode_ = BMP280_SLEEP_MODE;     // to read in force mode it needs to be in sleep first
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	715a      	strb	r2, [r3, #5]
	bmp->filter_ = BMP280_FILTER_OFF;	// according to documentation for weather monitoring
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	779a      	strb	r2, [r3, #30]
	bmp->temperature_oversampling_ = BMP280_oversampling_x1;	// according to documentation
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	77da      	strb	r2, [r3, #31]
	bmp->pressure_oversampling_ = BMP280_oversampling_x1;		// according to documentation
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2020 	strb.w	r2, [r3, #32]
	bmp->time_standby_ = BMP280_tsb_1000;	/* not relevant in forced mode, but dont want leave
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2205      	movs	r2, #5
 8001498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
											 * uninitialized
											 */

	// soft reset sensor
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_RESET, (uint8_t*) BMP280_RESET_VALUE)){
 800149c:	2286      	movs	r2, #134	; 0x86
 800149e:	21e0      	movs	r1, #224	; 0xe0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff3e 	bl	8001322 <bmp280_write_reg8>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f083 0301 	eor.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <bmp280_init_force_mode+0x4a>
		return 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e07c      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}

	// wait for NVM data to copy
	while(1){
		uint8_t im_update;
		if(bmp280_read_reg8(bmp, BMP280_REG_ADDR_STATUS, &im_update) && (im_update & 1) == 0){
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	461a      	mov	r2, r3
 80014bc:	21f3      	movs	r1, #243	; 0xf3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff09 	bl	80012d6 <bmp280_read_reg8>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f5      	beq.n	80014b6 <bmp280_init_force_mode+0x4a>
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <bmp280_init_force_mode+0x4a>
			break;
		}
	}

	// check if address is proper
	if((bmp->address_ >> 1) != BMP280_ADDRESS_0 && (bmp->address_ >> 1) != BMP280_ADDRESS_1){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b76      	cmp	r3, #118	; 0x76
 80014de:	d100      	bne.n	80014e2 <bmp280_init_force_mode+0x76>
 80014e0:	e007      	b.n	80014f2 <bmp280_init_force_mode+0x86>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	791b      	ldrb	r3, [r3, #4]
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b77      	cmp	r3, #119	; 0x77
 80014ec:	d001      	beq.n	80014f2 <bmp280_init_force_mode+0x86>
		return 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e05e      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}

	// read and check if proper id
	uint8_t read_id = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
	if(!bmp280_read_reg8(bmp, BMP280_REG_ADDR_ID, &read_id)){
 80014f6:	f107 030f 	add.w	r3, r7, #15
 80014fa:	461a      	mov	r2, r3
 80014fc:	21d0      	movs	r1, #208	; 0xd0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fee9 	bl	80012d6 <bmp280_read_reg8>
 8001504:	4603      	mov	r3, r0
 8001506:	f083 0301 	eor.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <bmp280_init_force_mode+0xa8>
		return 0;
 8001510:	2300      	movs	r3, #0
 8001512:	e04d      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}
	else if(read_id != BMP280_ID){
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	2b58      	cmp	r3, #88	; 0x58
 8001518:	d001      	beq.n	800151e <bmp280_init_force_mode+0xb2>
		return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e048      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}

	// get compensation data
	if(!bmp280_get_compensation_data(bmp)){
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff21 	bl	8001366 <bmp280_get_compensation_data>
 8001524:	4603      	mov	r3, r0
 8001526:	f083 0301 	eor.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <bmp280_init_force_mode+0xc8>
		return 0;
 8001530:	2300      	movs	r3, #0
 8001532:	e03d      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}

	// set config and control registers and write them
	uint8_t config_reg_settings = (bmp->time_standby_ << 5) | (bmp->filter_ << 2);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800153a:	015b      	lsls	r3, r3, #5
 800153c:	b25a      	sxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7f9b      	ldrb	r3, [r3, #30]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b25b      	sxtb	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	73bb      	strb	r3, [r7, #14]
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONFIG, &config_reg_settings)){
 800154e:	f107 030e 	add.w	r3, r7, #14
 8001552:	461a      	mov	r2, r3
 8001554:	21f5      	movs	r1, #245	; 0xf5
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fee3 	bl	8001322 <bmp280_write_reg8>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <bmp280_init_force_mode+0x100>
		return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e021      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}

	uint8_t control_reg_settings = (bmp->temperature_oversampling_ << 5) | (bmp->pressure_oversampling_ << 2) | bmp->mode_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7fdb      	ldrb	r3, [r3, #31]
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	b25a      	sxtb	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b25a      	sxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	795b      	ldrb	r3, [r3, #5]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b25b      	sxtb	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	737b      	strb	r3, [r7, #13]
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control_reg_settings)){
 8001590:	f107 030d 	add.w	r3, r7, #13
 8001594:	461a      	mov	r2, r3
 8001596:	21f4      	movs	r1, #244	; 0xf4
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fec2 	bl	8001322 <bmp280_write_reg8>
 800159e:	4603      	mov	r3, r0
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <bmp280_init_force_mode+0x142>
		return 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <bmp280_init_force_mode+0x144>
	}
	return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <bmp280_has_measurement_ended>:

bool bmp280_has_measurement_ended(BMP280_HandleTypedef* bmp){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	uint8_t measuring;
	if(bmp280_read_reg8(bmp, BMP280_REG_ADDR_STATUS, &measuring) && (measuring & 3) == 0){
 80015c0:	f107 030f 	add.w	r3, r7, #15
 80015c4:	461a      	mov	r2, r3
 80015c6:	21f3      	movs	r1, #243	; 0xf3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe84 	bl	80012d6 <bmp280_read_reg8>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <bmp280_has_measurement_ended+0x2a>
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <bmp280_has_measurement_ended+0x2a>
		return 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <bmp280_has_measurement_ended+0x2c>
	}
	else{
		return 0;
 80015e2:	2300      	movs	r3, #0
	}

}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef* bmp){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	//check if previous measurement has ended
	if(!bmp280_has_measurement_ended(bmp)){
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffdf 	bl	80015b8 <bmp280_has_measurement_ended>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f083 0301 	eor.w	r3, r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <bmp280_force_measurement+0x1e>
		return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	e028      	b.n	800165c <bmp280_force_measurement+0x70>
	}

	//read previous control settings
	uint8_t control;
	if(!bmp280_read_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control)){
 800160a:	f107 030f 	add.w	r3, r7, #15
 800160e:	461a      	mov	r2, r3
 8001610:	21f4      	movs	r1, #244	; 0xf4
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe5f 	bl	80012d6 <bmp280_read_reg8>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <bmp280_force_measurement+0x3c>
		return 0;
 8001624:	2300      	movs	r3, #0
 8001626:	e019      	b.n	800165c <bmp280_force_measurement+0x70>
	}

	//clears mode bits
	control &= ~0b11;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	73fb      	strb	r3, [r7, #15]

	//sets mode bits to FORCED
	control |= BMP280_FORCED_MODE;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	73fb      	strb	r3, [r7, #15]

	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control)){
 800163c:	f107 030f 	add.w	r3, r7, #15
 8001640:	461a      	mov	r2, r3
 8001642:	21f4      	movs	r1, #244	; 0xf4
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fe6c 	bl	8001322 <bmp280_write_reg8>
 800164a:	4603      	mov	r3, r0
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <bmp280_force_measurement+0x6e>
		return 0;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <bmp280_force_measurement+0x70>
	}

	return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <bmp280_compensate_T_int32>:

int32_t t_fine;		// global variable as defined in datasheet (used later in pressure measurement)
int32_t bmp280_compensate_T_int32(BMP280_HandleTypedef* bmp, int32_t adc_T)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)bmp->compensation_params_.dig_T1<<1))) * ((int32_t)bmp->compensation_params_.dig_T2)) >> 11;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	10da      	asrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	88db      	ldrh	r3, [r3, #6]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	12db      	asrs	r3, r3, #11
 8001686:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1)) * ((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1))) >> 12) *
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	111b      	asrs	r3, r3, #4
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	88d2      	ldrh	r2, [r2, #6]
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	1112      	asrs	r2, r2, #4
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	88c9      	ldrh	r1, [r1, #6]
 800169a:	1a52      	subs	r2, r2, r1
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	131b      	asrs	r3, r3, #12
	((int32_t)bmp->compensation_params_.dig_T3)) >> 14;
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
	var2 = (((((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1)) * ((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1))) >> 12) *
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	139b      	asrs	r3, r3, #14
 80016ae:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <bmp280_compensate_T_int32+0x74>)
 80016b8:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <bmp280_compensate_T_int32+0x74>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3380      	adds	r3, #128	; 0x80
 80016c6:	121b      	asrs	r3, r3, #8
 80016c8:	60fb      	str	r3, [r7, #12]
	return T;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200002f0 	.word	0x200002f0

080016dc <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(BMP280_HandleTypedef* bmp, int32_t adc_P)
{
 80016dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e0:	b0ca      	sub	sp, #296	; 0x128
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80016e8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80016ec:	4bb2      	ldr	r3, [pc, #712]	; (80019b8 <bmp280_compensate_P_int64+0x2dc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	17da      	asrs	r2, r3, #31
 80016f2:	461c      	mov	r4, r3
 80016f4:	4615      	mov	r5, r2
 80016f6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80016fa:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016fe:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)bmp->compensation_params_.dig_P6;
 8001702:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001706:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800170a:	fb03 f102 	mul.w	r1, r3, r2
 800170e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001712:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	18ca      	adds	r2, r1, r3
 800171c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001720:	fba3 8903 	umull	r8, r9, r3, r3
 8001724:	eb02 0309 	add.w	r3, r2, r9
 8001728:	4699      	mov	r9, r3
 800172a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800172e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001732:	b21b      	sxth	r3, r3
 8001734:	17da      	asrs	r2, r3, #31
 8001736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800173a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800173e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001742:	4603      	mov	r3, r0
 8001744:	fb03 f209 	mul.w	r2, r3, r9
 8001748:	460b      	mov	r3, r1
 800174a:	fb08 f303 	mul.w	r3, r8, r3
 800174e:	4413      	add	r3, r2
 8001750:	4602      	mov	r2, r0
 8001752:	fba8 1202 	umull	r1, r2, r8, r2
 8001756:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800175a:	460a      	mov	r2, r1
 800175c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001760:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001764:	4413      	add	r3, r2
 8001766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800176a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800176e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001772:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)bmp->compensation_params_.dig_P5)<<17);
 8001776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800177e:	b21b      	sxth	r3, r3
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001786:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800178a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001792:	462a      	mov	r2, r5
 8001794:	fb02 f203 	mul.w	r2, r2, r3
 8001798:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179c:	4621      	mov	r1, r4
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	441a      	add	r2, r3
 80017a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a8:	4621      	mov	r1, r4
 80017aa:	fba3 1301 	umull	r1, r3, r3, r1
 80017ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017b2:	460b      	mov	r3, r1
 80017b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80017b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80017ce:	462b      	mov	r3, r5
 80017d0:	0459      	lsls	r1, r3, #17
 80017d2:	4623      	mov	r3, r4
 80017d4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017d8:	4623      	mov	r3, r4
 80017da:	0458      	lsls	r0, r3, #17
 80017dc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017e0:	1814      	adds	r4, r2, r0
 80017e2:	643c      	str	r4, [r7, #64]	; 0x40
 80017e4:	414b      	adcs	r3, r1
 80017e6:	647b      	str	r3, [r7, #68]	; 0x44
 80017e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80017ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)bmp->compensation_params_.dig_P4)<<35);
 80017f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	17da      	asrs	r2, r3, #31
 80017fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001800:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001810:	00d9      	lsls	r1, r3, #3
 8001812:	2000      	movs	r0, #0
 8001814:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001818:	1814      	adds	r4, r2, r0
 800181a:	63bc      	str	r4, [r7, #56]	; 0x38
 800181c:	414b      	adcs	r3, r1
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001820:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001824:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)bmp->compensation_params_.dig_P3)>>8) + ((var1 * (int64_t)bmp->compensation_params_.dig_P2)<<12);
 8001828:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800182c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001830:	fb03 f102 	mul.w	r1, r3, r2
 8001834:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001838:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	18ca      	adds	r2, r1, r3
 8001842:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001846:	fba3 1303 	umull	r1, r3, r3, r3
 800184a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800184e:	460b      	mov	r3, r1
 8001850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800185e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001862:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001866:	b21b      	sxth	r3, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800186e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001872:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001876:	462b      	mov	r3, r5
 8001878:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800187c:	4642      	mov	r2, r8
 800187e:	fb02 f203 	mul.w	r2, r2, r3
 8001882:	464b      	mov	r3, r9
 8001884:	4621      	mov	r1, r4
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	4622      	mov	r2, r4
 800188e:	4641      	mov	r1, r8
 8001890:	fba2 1201 	umull	r1, r2, r2, r1
 8001894:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001898:	460a      	mov	r2, r1
 800189a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800189e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80018a2:	4413      	add	r3, r2
 80018a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80018b4:	4623      	mov	r3, r4
 80018b6:	0a18      	lsrs	r0, r3, #8
 80018b8:	462b      	mov	r3, r5
 80018ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018be:	462b      	mov	r3, r5
 80018c0:	1219      	asrs	r1, r3, #8
 80018c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018d2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018da:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80018de:	464a      	mov	r2, r9
 80018e0:	fb02 f203 	mul.w	r2, r2, r3
 80018e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018e8:	4644      	mov	r4, r8
 80018ea:	fb04 f303 	mul.w	r3, r4, r3
 80018ee:	441a      	add	r2, r3
 80018f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018f4:	4644      	mov	r4, r8
 80018f6:	fba3 4304 	umull	r4, r3, r3, r4
 80018fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80018fe:	4623      	mov	r3, r4
 8001900:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001904:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800191a:	464c      	mov	r4, r9
 800191c:	0323      	lsls	r3, r4, #12
 800191e:	4644      	mov	r4, r8
 8001920:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001924:	4644      	mov	r4, r8
 8001926:	0322      	lsls	r2, r4, #12
 8001928:	1884      	adds	r4, r0, r2
 800192a:	633c      	str	r4, [r7, #48]	; 0x30
 800192c:	eb41 0303 	adc.w	r3, r1, r3
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001936:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bmp->compensation_params_.dig_P1)>>33;
 800193a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800193e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001942:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001946:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800194a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800194e:	899b      	ldrh	r3, [r3, #12]
 8001950:	b29b      	uxth	r3, r3
 8001952:	2200      	movs	r2, #0
 8001954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001958:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800195c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001960:	462b      	mov	r3, r5
 8001962:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001966:	4642      	mov	r2, r8
 8001968:	fb02 f203 	mul.w	r2, r2, r3
 800196c:	464b      	mov	r3, r9
 800196e:	4621      	mov	r1, r4
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	4622      	mov	r2, r4
 8001978:	4641      	mov	r1, r8
 800197a:	fba2 1201 	umull	r1, r2, r2, r1
 800197e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001982:	460a      	mov	r2, r1
 8001984:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001988:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800198c:	4413      	add	r3, r2
 800198e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800199e:	4629      	mov	r1, r5
 80019a0:	104a      	asrs	r2, r1, #1
 80019a2:	4629      	mov	r1, r5
 80019a4:	17cb      	asrs	r3, r1, #31
 80019a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 80019aa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019ae:	4313      	orrs	r3, r2
 80019b0:	d104      	bne.n	80019bc <bmp280_compensate_P_int64+0x2e0>
	{
		return 0; // avoid exception caused by division by zero
 80019b2:	2300      	movs	r3, #0
 80019b4:	e14b      	b.n	8001c4e <bmp280_compensate_P_int64+0x572>
 80019b6:	bf00      	nop
 80019b8:	200002f0 	.word	0x200002f0
	}

	p = 1048576-adc_P;
 80019bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019c0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80019c4:	17da      	asrs	r2, r3, #31
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80019ce:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80019d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019d6:	105b      	asrs	r3, r3, #1
 80019d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019e0:	07db      	lsls	r3, r3, #31
 80019e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019ea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	67b9      	str	r1, [r7, #120]	; 0x78
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb61 0303 	sbc.w	r3, r1, r3
 80019fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019fc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a00:	4622      	mov	r2, r4
 8001a02:	462b      	mov	r3, r5
 8001a04:	1891      	adds	r1, r2, r2
 8001a06:	6239      	str	r1, [r7, #32]
 8001a08:	415b      	adcs	r3, r3
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a10:	4621      	mov	r1, r4
 8001a12:	1851      	adds	r1, r2, r1
 8001a14:	61b9      	str	r1, [r7, #24]
 8001a16:	4629      	mov	r1, r5
 8001a18:	414b      	adcs	r3, r1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a28:	4649      	mov	r1, r9
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4641      	mov	r1, r8
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4641      	mov	r1, r8
 8001a38:	1889      	adds	r1, r1, r2
 8001a3a:	6139      	str	r1, [r7, #16]
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	eb43 0101 	adc.w	r1, r3, r1
 8001a42:	6179      	str	r1, [r7, #20]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a50:	4649      	mov	r1, r9
 8001a52:	008b      	lsls	r3, r1, #2
 8001a54:	4641      	mov	r1, r8
 8001a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	008a      	lsls	r2, r1, #2
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	4622      	mov	r2, r4
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	462a      	mov	r2, r5
 8001a6e:	eb42 0303 	adc.w	r3, r2, r3
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a80:	4649      	mov	r1, r9
 8001a82:	008b      	lsls	r3, r1, #2
 8001a84:	4641      	mov	r1, r8
 8001a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	008a      	lsls	r2, r1, #2
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	4622      	mov	r2, r4
 8001a96:	189b      	adds	r3, r3, r2
 8001a98:	673b      	str	r3, [r7, #112]	; 0x70
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	eb42 0303 	adc.w	r3, r2, r3
 8001aa2:	677b      	str	r3, [r7, #116]	; 0x74
 8001aa4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001aa8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001aac:	f7ff f8f4 	bl	8000c98 <__aeabi_ldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)bmp->compensation_params_.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001abc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	17da      	asrs	r2, r3, #31
 8001ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ac6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ac8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	0b50      	lsrs	r0, r2, #13
 8001ad6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ada:	1359      	asrs	r1, r3, #13
 8001adc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	fb00 f203 	mul.w	r2, r0, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	fb03 f301 	mul.w	r3, r3, r1
 8001aec:	4413      	add	r3, r2
 8001aee:	4622      	mov	r2, r4
 8001af0:	fba2 1200 	umull	r1, r2, r2, r0
 8001af4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001af8:	460a      	mov	r2, r1
 8001afa:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001afe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001b02:	4413      	add	r3, r2
 8001b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b08:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	0b50      	lsrs	r0, r2, #13
 8001b16:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b1a:	1359      	asrs	r1, r3, #13
 8001b1c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001b20:	462b      	mov	r3, r5
 8001b22:	fb00 f203 	mul.w	r2, r0, r3
 8001b26:	4623      	mov	r3, r4
 8001b28:	fb03 f301 	mul.w	r3, r3, r1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4622      	mov	r2, r4
 8001b30:	fba2 1200 	umull	r1, r2, r2, r0
 8001b34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b38:	460a      	mov	r2, r1
 8001b3a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001b3e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001b42:	4413      	add	r3, r2
 8001b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001b54:	4621      	mov	r1, r4
 8001b56:	0e4a      	lsrs	r2, r1, #25
 8001b58:	4629      	mov	r1, r5
 8001b5a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b5e:	4629      	mov	r1, r5
 8001b60:	164b      	asrs	r3, r1, #25
 8001b62:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)bmp->compensation_params_.dig_P8) * p) >> 19;
 8001b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b6a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	17da      	asrs	r2, r3, #31
 8001b72:	663b      	str	r3, [r7, #96]	; 0x60
 8001b74:	667a      	str	r2, [r7, #100]	; 0x64
 8001b76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b7a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b7e:	462a      	mov	r2, r5
 8001b80:	fb02 f203 	mul.w	r2, r2, r3
 8001b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b88:	4621      	mov	r1, r4
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001b94:	4621      	mov	r1, r4
 8001b96:	fba2 1201 	umull	r1, r2, r2, r1
 8001b9a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001b9e:	460a      	mov	r2, r1
 8001ba0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001ba4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001bba:	4621      	mov	r1, r4
 8001bbc:	0cca      	lsrs	r2, r1, #19
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	14cb      	asrs	r3, r1, #19
 8001bc8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)bmp->compensation_params_.dig_P7)<<4);
 8001bcc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001bd0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bd4:	1884      	adds	r4, r0, r2
 8001bd6:	65bc      	str	r4, [r7, #88]	; 0x58
 8001bd8:	eb41 0303 	adc.w	r3, r1, r3
 8001bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001be2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001be6:	4621      	mov	r1, r4
 8001be8:	1889      	adds	r1, r1, r2
 8001bea:	6539      	str	r1, [r7, #80]	; 0x50
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb43 0101 	adc.w	r1, r3, r1
 8001bf2:	6579      	str	r1, [r7, #84]	; 0x54
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001c00:	4623      	mov	r3, r4
 8001c02:	0a18      	lsrs	r0, r3, #8
 8001c04:	462b      	mov	r3, r5
 8001c06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	1219      	asrs	r1, r3, #8
 8001c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c12:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	17da      	asrs	r2, r3, #31
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001c2a:	464c      	mov	r4, r9
 8001c2c:	0123      	lsls	r3, r4, #4
 8001c2e:	4644      	mov	r4, r8
 8001c30:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c34:	4644      	mov	r4, r8
 8001c36:	0122      	lsls	r2, r4, #4
 8001c38:	1884      	adds	r4, r0, r2
 8001c3a:	603c      	str	r4, [r7, #0]
 8001c3c:	eb41 0303 	adc.w	r3, r1, r3
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c46:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001c4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001c54:	46bd      	mov	sp, r7
 8001c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5a:	bf00      	nop

08001c5c <bmp280_get_measurements>:

bool bmp280_get_measurements(BMP280_HandleTypedef* bmp,
			uint32_t* pressure, int32_t* temperature){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	//check if measurement has ended
	if(!bmp280_has_measurement_ended(bmp)){
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff fca5 	bl	80015b8 <bmp280_has_measurement_ended>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <bmp280_get_measurements+0x22>
		return 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e039      	b.n	8001cf2 <bmp280_get_measurements+0x96>
	uint8_t raw_data[6];
	uint32_t raw_pressure;
	int32_t raw_temperature;

	//read data in burst
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, BMP280_REG_ADDR_PRESS, 1, raw_data, 6, HAL_MAX_DELAY) != HAL_OK){
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	791b      	ldrb	r3, [r3, #4]
 8001c86:	b299      	uxth	r1, r3
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2306      	movs	r3, #6
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	22f7      	movs	r2, #247	; 0xf7
 8001c9c:	f002 fbd0 	bl	8004440 <HAL_I2C_Mem_Read>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <bmp280_get_measurements+0x4e>
		return 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e023      	b.n	8001cf2 <bmp280_get_measurements+0x96>
	}

	raw_pressure = raw_data[0] << 12 | raw_data[1] << 4 | raw_data[3] >> 4;
 8001caa:	7c3b      	ldrb	r3, [r7, #16]
 8001cac:	031a      	lsls	r2, r3, #12
 8001cae:	7c7b      	ldrb	r3, [r7, #17]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	7cfa      	ldrb	r2, [r7, #19]
 8001cb6:	0912      	lsrs	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]
	raw_temperature = raw_data[3] << 12 | raw_data[4] << 4 | raw_data[5] >> 4;
 8001cbe:	7cfb      	ldrb	r3, [r7, #19]
 8001cc0:	031a      	lsls	r2, r3, #12
 8001cc2:	7d3b      	ldrb	r3, [r7, #20]
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	7d7a      	ldrb	r2, [r7, #21]
 8001cca:	0912      	lsrs	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]

	*pressure = bmp280_compensate_P_int64(bmp, raw_pressure);
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fd00 	bl	80016dc <bmp280_compensate_P_int64>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	601a      	str	r2, [r3, #0]
	*temperature = bmp280_compensate_T_int32(bmp, raw_temperature);
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff fcbd 	bl	8001664 <bmp280_compensate_T_int32>
 8001cea:	4602      	mov	r2, r0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
	return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b096      	sub	sp, #88	; 0x58
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f001 fadd 	bl	80032c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f93f 	bl	8001f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 fa5f 	bl	80021cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001d0e:	f009 fa65 	bl	800b1dc <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001d12:	f000 f9a5 	bl	8002060 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001d16:	f000 f9d1 	bl	80020bc <MX_I2C3_Init>
  MX_SPI2_Init();
 8001d1a:	f000 f9fd 	bl	8002118 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001d1e:	f000 fa31 	bl	8002184 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001d22:	488e      	ldr	r0, [pc, #568]	; (8001f5c <main+0x260>)
 8001d24:	f005 fc64 	bl	80075f0 <HAL_TIM_Base_Start_IT>

  AM2320_HandleTypeDef am2320 = am2320_init(&hi2c1, AM2320_ADDRESS);
 8001d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d2c:	225c      	movs	r2, #92	; 0x5c
 8001d2e:	498c      	ldr	r1, [pc, #560]	; (8001f60 <main+0x264>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f9b9 	bl	80010a8 <am2320_init>

  BMP280_HandleTypedef bmp280;
  bmp280.i2c_handle_ = &hi2c3;
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <main+0x268>)
 8001d38:	61fb      	str	r3, [r7, #28]
  bmp280_init_force_mode(&bmp280);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fb94 	bl	800146c <bmp280_init_force_mode>

  uint8_t status = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   // initialize nrf handle
   NRF_HandleTypedef nrf;
   if(!NRF_Init(&nrf)){
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fbfc 	bl	800254c <NRF_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <main+0x68>
 	  Error_Handler();
 8001d60:	f000 fb5a 	bl	8002418 <Error_Handler>
   }
   // pipe configuration
   // address will be clocked from last to first
   // need to clock same address for rx and tx pipe for transmitter
   static uint8_t nrf_addr[] = {0x69, 0x21, 0x37};
   if(!NRF_SET_PipeAddress(RX_PIPE_0, nrf_addr)){
 8001d64:	4980      	ldr	r1, [pc, #512]	; (8001f68 <main+0x26c>)
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 fe09 	bl	800297e <NRF_SET_PipeAddress>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <main+0x80>
 	  return NRF_ERROR;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e0eb      	b.n	8001f54 <main+0x258>
   }
   if(!NRF_SET_PipeAddress(TX_PIPE, nrf_addr)){
 8001d7c:	497a      	ldr	r1, [pc, #488]	; (8001f68 <main+0x26c>)
 8001d7e:	2006      	movs	r0, #6
 8001d80:	f000 fdfd 	bl	800297e <NRF_SET_PipeAddress>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <main+0x98>
 	  return NRF_ERROR;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e0df      	b.n	8001f54 <main+0x258>
   }

   // preapre pipe RX 0 for auto ack
   if(!NRF_SET_PipeRX(RX_PIPE_0, AA_ON, 0)){
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 fe41 	bl	8002a20 <NRF_SET_PipeRX>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f083 0301 	eor.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <main+0xb2>
 	  return NRF_ERROR;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e0d2      	b.n	8001f54 <main+0x258>
   }

   // prepare pipe TX
   if(!NRF_SET_PipeTX(RX_PIPE_0, AA_ON)){
 8001dae:	2101      	movs	r1, #1
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 fec5 	bl	8002b40 <NRF_SET_PipeTX>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <main+0xca>
 	  return NRF_ERROR;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e0c6      	b.n	8001f54 <main+0x258>
   }

   // set mode to transmitter
   if(!NRF_SET_Mode(TX)){
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 fcbe 	bl	8002748 <NRF_SET_Mode>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f083 0301 	eor.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <main+0xe0>
 	  return NRF_ERROR;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e0bb      	b.n	8001f54 <main+0x258>
   }

   // turn transmitter on and wait for at least 1.5 ms
   if(!NRF_SET_PowerMode(PWR_UP)){
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 fce5 	bl	80027ac <NRF_SET_PowerMode>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <main+0xf6>
 	  return NRF_ERROR;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e0b0      	b.n	8001f54 <main+0x258>
   }

   HAL_Delay(2);
 8001df2:	2002      	movs	r0, #2
 8001df4:	f001 fad6 	bl	80033a4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(startMeasFlag){
 8001df8:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <main+0x270>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0fb      	beq.n	8001df8 <main+0xfc>
//	  HAL_Delay(5000);
		  if(am2320_read_temperature_and_humidity(&am2320)){
 8001e00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f9a7 	bl	8001158 <am2320_read_temperature_and_humidity>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <main+0x13e>
			  payload[0] = am2320.last_temperature >> 8;
 8001e10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001e14:	121b      	asrs	r3, r3, #8
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	713b      	strb	r3, [r7, #4]
			  payload[1] = am2320.last_temperature;
 8001e1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	717b      	strb	r3, [r7, #5]
			  payload[2] = am2320.last_humidity >> 8;
 8001e24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	71bb      	strb	r3, [r7, #6]
			  payload[3] = am2320.last_humidity;
 8001e30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	e007      	b.n	8001e4a <main+0x14e>
		  }
		  else{
			  payload[0] = 255 >> 8;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	713b      	strb	r3, [r7, #4]
			  payload[1] = 255;
 8001e3e:	23ff      	movs	r3, #255	; 0xff
 8001e40:	717b      	strb	r3, [r7, #5]
			  payload[2] = 255 >> 8;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71bb      	strb	r3, [r7, #6]
			  payload[3] = 255;
 8001e46:	23ff      	movs	r3, #255	; 0xff
 8001e48:	71fb      	strb	r3, [r7, #7]
		  }
		  if(bmp280_force_measurement(&bmp280)){
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fbcc 	bl	80015ec <bmp280_force_measurement>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d041      	beq.n	8001ede <main+0x1e2>
			  if(bmp280_get_measurements(&bmp280, &bmp280_press, &bmp280_temp)){
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4a44      	ldr	r2, [pc, #272]	; (8001f70 <main+0x274>)
 8001e60:	4944      	ldr	r1, [pc, #272]	; (8001f74 <main+0x278>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fefa 	bl	8001c5c <bmp280_get_measurements>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d026      	beq.n	8001ebc <main+0x1c0>
				  payload[4] = bmp280_temp >> 24;
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <main+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	161b      	asrs	r3, r3, #24
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	723b      	strb	r3, [r7, #8]
				  payload[5] = bmp280_temp >> 16;
 8001e78:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <main+0x274>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	141b      	asrs	r3, r3, #16
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	727b      	strb	r3, [r7, #9]
				  payload[6] = bmp280_temp >> 8;
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <main+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	121b      	asrs	r3, r3, #8
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	72bb      	strb	r3, [r7, #10]
				  payload[7] = bmp280_temp;
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <main+0x274>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	72fb      	strb	r3, [r7, #11]
				  payload[8] = bmp280_press >> 24;
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <main+0x278>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e1b      	lsrs	r3, r3, #24
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	733b      	strb	r3, [r7, #12]
				  payload[9] = bmp280_press >> 16;
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <main+0x278>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	737b      	strb	r3, [r7, #13]
				  payload[10] = bmp280_press >> 8;
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <main+0x278>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	73bb      	strb	r3, [r7, #14]
				  payload[11] = bmp280_press;
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <main+0x278>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e020      	b.n	8001efe <main+0x202>
			  }
			  else{
				  payload[4] = 255 >> 24;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	723b      	strb	r3, [r7, #8]
				  payload[5] = 255 >> 16;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	727b      	strb	r3, [r7, #9]
				  payload[6] = 255 >> 8;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	72bb      	strb	r3, [r7, #10]
				  payload[7] = 255;
 8001ec8:	23ff      	movs	r3, #255	; 0xff
 8001eca:	72fb      	strb	r3, [r7, #11]
				  payload[8] = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	733b      	strb	r3, [r7, #12]
				  payload[9] = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	737b      	strb	r3, [r7, #13]
				  payload[10] = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73bb      	strb	r3, [r7, #14]
				  payload[11] = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e00f      	b.n	8001efe <main+0x202>
			  }
		  }
		  else{
			  payload[4] = 255 >> 24;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	723b      	strb	r3, [r7, #8]
			  payload[5] = 255 >> 16;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	727b      	strb	r3, [r7, #9]
			  payload[6] = 255 >> 8;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	72bb      	strb	r3, [r7, #10]
			  payload[7] = 255;
 8001eea:	23ff      	movs	r3, #255	; 0xff
 8001eec:	72fb      	strb	r3, [r7, #11]
			  payload[8] = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	733b      	strb	r3, [r7, #12]
			  payload[9] = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	737b      	strb	r3, [r7, #13]
			  payload[10] = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73bb      	strb	r3, [r7, #14]
			  payload[11] = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
		  }
		  nRF24_TXResult tx_res = NRF_Transmit(payload, (uint8_t)12);
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	210c      	movs	r1, #12
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fa26 	bl	8002354 <NRF_Transmit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		  switch (tx_res) {
 8001f0e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d00e      	beq.n	8001f34 <main+0x238>
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	dc14      	bgt.n	8001f44 <main+0x248>
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d002      	beq.n	8001f24 <main+0x228>
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d004      	beq.n	8001f2c <main+0x230>
 8001f22:	e00f      	b.n	8001f44 <main+0x248>
		  case nRF24_TX_SUCCESS:
			  printf("OK\n");
 8001f24:	4814      	ldr	r0, [pc, #80]	; (8001f78 <main+0x27c>)
 8001f26:	f00a fd75 	bl	800ca14 <puts>
			  break;
 8001f2a:	e00f      	b.n	8001f4c <main+0x250>
		  case nRF24_TX_TIMEOUT:
			  printf("TIMEOUT\n");
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <main+0x280>)
 8001f2e:	f00a fd71 	bl	800ca14 <puts>
			  break;
 8001f32:	e00b      	b.n	8001f4c <main+0x250>
		  case nRF24_TX_MAXRT:
			  printf("MAX RETRANSMIT\n");
 8001f34:	4812      	ldr	r0, [pc, #72]	; (8001f80 <main+0x284>)
 8001f36:	f00a fd6d 	bl	800ca14 <puts>
			  NRF_ResetPlos();
 8001f3a:	f000 ff1e 	bl	8002d7a <NRF_ResetPlos>
			  NRF_FlushTXFifo();
 8001f3e:	f000 fe99 	bl	8002c74 <NRF_FlushTXFifo>
			  break;
 8001f42:	e003      	b.n	8001f4c <main+0x250>
		  default:
			  printf("ERROR\n");
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <main+0x288>)
 8001f46:	f00a fd65 	bl	800ca14 <puts>
			  break;
 8001f4a:	bf00      	nop
		  }
		  startMeasFlag = 0;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <main+0x270>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
	  if(startMeasFlag){
 8001f52:	e751      	b.n	8001df8 <main+0xfc>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3758      	adds	r7, #88	; 0x58
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200003f4 	.word	0x200003f4
 8001f60:	200002f4 	.word	0x200002f4
 8001f64:	20000348 	.word	0x20000348
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000446 	.word	0x20000446
 8001f70:	2000043c 	.word	0x2000043c
 8001f74:	20000440 	.word	0x20000440
 8001f78:	08010688 	.word	0x08010688
 8001f7c:	0801068c 	.word	0x0801068c
 8001f80:	08010694 	.word	0x08010694
 8001f84:	080106a4 	.word	0x080106a4

08001f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	; 0x50
 8001f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	2230      	movs	r2, #48	; 0x30
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f009 fe34 	bl	800bc04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <SystemClock_Config+0xd0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <SystemClock_Config+0xd0>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <SystemClock_Config+0xd0>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <SystemClock_Config+0xd4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <SystemClock_Config+0xd4>)
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SystemClock_Config+0xd4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ffc:	2319      	movs	r3, #25
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002000:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002006:	2304      	movs	r3, #4
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800200a:	2307      	movs	r3, #7
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fb62 	bl	80066dc <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800201e:	f000 f9fb 	bl	8002418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2302      	movs	r3, #2
 8002028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fdc4 	bl	8006bcc <HAL_RCC_ClockConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800204a:	f000 f9e5 	bl	8002418 <Error_Handler>
  }
}
 800204e:	bf00      	nop
 8002050:	3750      	adds	r7, #80	; 0x50
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_I2C1_Init+0x50>)
 8002066:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <MX_I2C1_Init+0x54>)
 8002068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_I2C1_Init+0x50>)
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <MX_I2C1_Init+0x58>)
 800206e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_I2C1_Init+0x50>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_I2C1_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_I2C1_Init+0x50>)
 800207e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_I2C1_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_I2C1_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_I2C1_Init+0x50>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_I2C1_Init+0x50>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_I2C1_Init+0x50>)
 800209e:	f001 fc6d 	bl	800397c <HAL_I2C_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020a8:	f000 f9b6 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200002f4 	.word	0x200002f4
 80020b4:	40005400 	.word	0x40005400
 80020b8:	000186a0 	.word	0x000186a0

080020bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_I2C3_Init+0x50>)
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <MX_I2C3_Init+0x54>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_I2C3_Init+0x50>)
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <MX_I2C3_Init+0x58>)
 80020ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_I2C3_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_I2C3_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_I2C3_Init+0x50>)
 80020da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <MX_I2C3_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_I2C3_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <MX_I2C3_Init+0x50>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_I2C3_Init+0x50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_I2C3_Init+0x50>)
 80020fa:	f001 fc3f 	bl	800397c <HAL_I2C_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002104:	f000 f988 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000348 	.word	0x20000348
 8002110:	40005c00 	.word	0x40005c00
 8002114:	000186a0 	.word	0x000186a0

08002118 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_SPI2_Init+0x64>)
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <MX_SPI2_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_SPI2_Init+0x64>)
 8002124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_SPI2_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_SPI2_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_SPI2_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_SPI2_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_SPI2_Init+0x64>)
 8002144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002148:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_SPI2_Init+0x64>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_SPI2_Init+0x64>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_SPI2_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_SPI2_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_SPI2_Init+0x64>)
 8002164:	220a      	movs	r2, #10
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_SPI2_Init+0x64>)
 800216a:	f004 fefb 	bl	8006f64 <HAL_SPI_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002174:	f000 f950 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000039c 	.word	0x2000039c
 8002180:	40003800 	.word	0x40003800

08002184 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_TIM10_Init+0x40>)
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <MX_TIM10_Init+0x44>)
 800218c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000-1;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MX_TIM10_Init+0x40>)
 8002190:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002194:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_TIM10_Init+0x40>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 60000-1;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_TIM10_Init+0x40>)
 800219e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80021a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <MX_TIM10_Init+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_TIM10_Init+0x40>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <MX_TIM10_Init+0x40>)
 80021b2:	f005 f9cd 	bl	8007550 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80021bc:	f000 f92c 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200003f4 	.word	0x200003f4
 80021c8:	40014400 	.word	0x40014400

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <MX_GPIO_Init+0x10c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <MX_GPIO_Init+0x10c>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <MX_GPIO_Init+0x10c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <MX_GPIO_Init+0x10c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <MX_GPIO_Init+0x10c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <MX_GPIO_Init+0x10c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002258:	4820      	ldr	r0, [pc, #128]	; (80022dc <MX_GPIO_Init+0x110>)
 800225a:	f001 fb5d 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f242 0101 	movw	r1, #8193	; 0x2001
 8002264:	481e      	ldr	r0, [pc, #120]	; (80022e0 <MX_GPIO_Init+0x114>)
 8002266:	f001 fb57 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800226a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4816      	ldr	r0, [pc, #88]	; (80022dc <MX_GPIO_Init+0x110>)
 8002284:	f001 f9c4 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8002288:	f242 0301 	movw	r3, #8193	; 0x2001
 800228c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	480f      	ldr	r0, [pc, #60]	; (80022e0 <MX_GPIO_Init+0x114>)
 80022a2:	f001 f9b5 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80022a6:	2302      	movs	r3, #2
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <MX_GPIO_Init+0x114>)
 80022bc:	f001 f9a8 	bl	8003610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2007      	movs	r0, #7
 80022c6:	f001 f96c 	bl	80035a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022ca:	2007      	movs	r0, #7
 80022cc:	f001 f985 	bl	80035da <HAL_NVIC_EnableIRQ>

}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020400 	.word	0x40020400

080022e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin){
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d102      	bne.n	80022fa <HAL_GPIO_EXTI_Callback+0x16>
		// if interrupt comes from IRQ pin, then set flag
		nrfInterrupt = 1;
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <HAL_GPIO_EXTI_Callback+0x24>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
	}
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000444 	.word	0x20000444

0800230c <HAL_TIM_PeriodElapsedCallback>:

// minute timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d10f      	bne.n	800233c <HAL_TIM_PeriodElapsedCallback+0x30>
		timerElapsedFlag++;
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002326:	701a      	strb	r2, [r3, #0]
		if(timerElapsedFlag == 4){
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d105      	bne.n	800233c <HAL_TIM_PeriodElapsedCallback+0x30>
			startMeasFlag = 1;
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
			timerElapsedFlag = 0;
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	200003f4 	.word	0x200003f4
 800234c:	20000445 	.word	0x20000445
 8002350:	20000446 	.word	0x20000446

08002354 <NRF_Transmit>:

static nRF24_TXResult NRF_Transmit(uint8_t* data, uint8_t length){
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	72fb      	strb	r3, [r7, #11]
	uint32_t wait = 0xFFFF;
 8002364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002368:	60fb      	str	r3, [r7, #12]
	NRF_CE_SET_LOW;
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002370:	4827      	ldr	r0, [pc, #156]	; (8002410 <NRF_Transmit+0xbc>)
 8002372:	f001 fad1 	bl	8003918 <HAL_GPIO_WritePin>

	// write tx payload
	if(!NRF_WriteTxPayload(data, length)){
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fc9a 	bl	8002cb4 <NRF_WriteTxPayload>
 8002380:	4603      	mov	r3, r0
 8002382:	f083 0301 	eor.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <NRF_Transmit+0x3c>
		return NRF_ERROR;
 800238c:	2300      	movs	r3, #0
 800238e:	e03b      	b.n	8002408 <NRF_Transmit+0xb4>
	}

	NRF_CE_SET_HIGH;
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002396:	481e      	ldr	r0, [pc, #120]	; (8002410 <NRF_Transmit+0xbc>)
 8002398:	f001 fabe 	bl	8003918 <HAL_GPIO_WritePin>

	do{
		NRF_ReadRegs(NRF_REG_STATUS, &status, 1);
 800239c:	f107 030b 	add.w	r3, r7, #11
 80023a0:	2201      	movs	r2, #1
 80023a2:	4619      	mov	r1, r3
 80023a4:	2007      	movs	r0, #7
 80023a6:	f000 f859 	bl	800245c <NRF_ReadRegs>
		if (status & (NRF_MASK_TX_DS | NRF_MASK_MAX_RT)) {
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <NRF_Transmit+0x6c>
			break;
		}
	}while(wait--);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e5a      	subs	r2, r3, #1
 80023b8:	60fa      	str	r2, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ee      	bne.n	800239c <NRF_Transmit+0x48>
 80023be:	e000      	b.n	80023c2 <NRF_Transmit+0x6e>
			break;
 80023c0:	bf00      	nop

	//deassert ce pin
	NRF_CE_SET_LOW;
 80023c2:	2200      	movs	r2, #0
 80023c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c8:	4811      	ldr	r0, [pc, #68]	; (8002410 <NRF_Transmit+0xbc>)
 80023ca:	f001 faa5 	bl	8003918 <HAL_GPIO_WritePin>

	if(!wait){
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <NRF_Transmit+0x84>
		//timeout
		return NRF_ERROR;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e017      	b.n	8002408 <NRF_Transmit+0xb4>
	}

	printf("Status inside of transmit function: %d\n", status);
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	4619      	mov	r1, r3
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <NRF_Transmit+0xc0>)
 80023de:	f00a fa93 	bl	800c908 <iprintf>

	// Clear pending IRQ flags
	NRF_ClearIRQFlags();
 80023e2:	f000 fca1 	bl	8002d28 <NRF_ClearIRQFlags>

	if (status & NRF_MASK_MAX_RT) {
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <NRF_Transmit+0xa0>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e009      	b.n	8002408 <NRF_Transmit+0xb4>
	}

	if (status & NRF_MASK_TX_DS) {
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <NRF_Transmit+0xae>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80023fe:	2301      	movs	r3, #1
 8002400:	e002      	b.n	8002408 <NRF_Transmit+0xb4>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	NRF_FlushTXFifo();
 8002402:	f000 fc37 	bl	8002c74 <NRF_FlushTXFifo>

	return nRF24_TX_ERROR;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40020400 	.word	0x40020400
 8002414:	080106ac 	.word	0x080106ac

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	e7fe      	b.n	8002420 <Error_Handler+0x8>
	...

08002424 <NRF_SPI_RW>:
 */


#include "nrf/nrf.h"

uint8_t NRF_SPI_RW(uint8_t transmit_buff, uint8_t* receive_buff){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_TransmitReceive(&hspi2, &transmit_buff, receive_buff, 1, 1000) != HAL_OK){
 8002430:	1df9      	adds	r1, r7, #7
 8002432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	4806      	ldr	r0, [pc, #24]	; (8002458 <NRF_SPI_RW+0x34>)
 800243e:	f004 fe1a 	bl	8007076 <HAL_SPI_TransmitReceive>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <NRF_SPI_RW+0x28>
		return NRF_ERROR;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <NRF_SPI_RW+0x2a>
	}
	return NRF_OK;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000039c 	.word	0x2000039c

0800245c <NRF_ReadRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return data from given register
 * @retval 1 in case of successful read , 0 in case of failure
 */
bool NRF_ReadRegs(uint8_t address, uint8_t* data, uint8_t length){
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
 8002468:	4613      	mov	r3, r2
 800246a:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8002470:	2200      	movs	r2, #0
 8002472:	2101      	movs	r1, #1
 8002474:	4814      	ldr	r0, [pc, #80]	; (80024c8 <NRF_ReadRegs+0x6c>)
 8002476:	f001 fa4f 	bl	8003918 <HAL_GPIO_WritePin>
	// send read command
	if(!NRF_SPI_RW(NRF_CMD_R_REGISTER | address, &address_rx)){
 800247a:	f107 020f 	add.w	r2, r7, #15
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffce 	bl	8002424 <NRF_SPI_RW>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <NRF_ReadRegs+0x4e>
		return NRF_ERROR;
 800248e:	2300      	movs	r3, #0
 8002490:	e016      	b.n	80024c0 <NRF_ReadRegs+0x64>
	}
	// command is locked by csn, so it will read bytes until length is 0
	while(length--){
		// passing NOP to not write anything
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	f7ff ffc5 	bl	8002424 <NRF_SPI_RW>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <NRF_ReadRegs+0x48>
			return NRF_ERROR;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e00d      	b.n	80024c0 <NRF_ReadRegs+0x64>
		}
		++data;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	603b      	str	r3, [r7, #0]
	while(length--){
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	71ba      	strb	r2, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ee      	bne.n	8002492 <NRF_ReadRegs+0x36>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 80024b4:	2201      	movs	r2, #1
 80024b6:	2101      	movs	r1, #1
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <NRF_ReadRegs+0x6c>)
 80024ba:	f001 fa2d 	bl	8003918 <HAL_GPIO_WritePin>
	return NRF_OK;
 80024be:	2301      	movs	r3, #1

}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020400 	.word	0x40020400

080024cc <NRF_WriteRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return None
 * @retval 1 in case of successful write, 0 in case of failure
 */
bool NRF_WriteRegs(uint8_t address, uint8_t* data, uint8_t length){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 80024e0:	2200      	movs	r2, #0
 80024e2:	2101      	movs	r1, #1
 80024e4:	4818      	ldr	r0, [pc, #96]	; (8002548 <NRF_WriteRegs+0x7c>)
 80024e6:	f001 fa17 	bl	8003918 <HAL_GPIO_WritePin>
	// send write command
	if(!NRF_SPI_RW(NRF_CMD_W_REGISTER | address, &address_rx)){
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f107 020f 	add.w	r2, r7, #15
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff93 	bl	8002424 <NRF_SPI_RW>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d111      	bne.n	8002528 <NRF_WriteRegs+0x5c>
		return NRF_ERROR;
 8002504:	2300      	movs	r3, #0
 8002506:	e01a      	b.n	800253e <NRF_WriteRegs+0x72>
	}
	// command is locked by csn, so it will write bytes until length is 0
	while(length--){
		if(!NRF_SPI_RW(*data, &address_rx)){
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f107 020f 	add.w	r2, r7, #15
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff86 	bl	8002424 <NRF_SPI_RW>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <NRF_WriteRegs+0x56>
			return NRF_ERROR;
 800251e:	2300      	movs	r3, #0
 8002520:	e00d      	b.n	800253e <NRF_WriteRegs+0x72>
		}
		++data;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	603b      	str	r3, [r7, #0]
	while(length--){
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	71ba      	strb	r2, [r7, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ea      	bne.n	8002508 <NRF_WriteRegs+0x3c>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8002532:	2201      	movs	r2, #1
 8002534:	2101      	movs	r1, #1
 8002536:	4804      	ldr	r0, [pc, #16]	; (8002548 <NRF_WriteRegs+0x7c>)
 8002538:	f001 f9ee 	bl	8003918 <HAL_GPIO_WritePin>
	return NRF_OK;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020400 	.word	0x40020400

0800254c <NRF_Init>:
 * @brief Init function. Defines basic configuration:
 * - only one pipe, enabled enhanced shockburst, up to 5 retransmits
 * - rest of parameters defined in function body
 * @param[in] nrf : pointer to transciever handler
 */
bool NRF_Init(NRF_HandleTypedef* nrf){
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	// below parameters are configurable, wanted to keep them in one place
	nrf->rate_ = RATE_1Mbps;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
	nrf->frequency_ = (uint8_t)10;	// channel frequency 2410MHz
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	220a      	movs	r2, #10
 800255e:	705a      	strb	r2, [r3, #1]
	nrf->power_amp_ = dBm_0; 	// max power, TX only
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	709a      	strb	r2, [r3, #2]
	nrf->lna_ = LNA_HIGH;	// rx only
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	70da      	strb	r2, [r3, #3]
	nrf->dpl_ = DPL_OFF;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	715a      	strb	r2, [r3, #5]
	nrf->crc_ = CRC_ENABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	719a      	strb	r2, [r3, #6]
	nrf->crc_bytes_ = CRCB_ONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	71da      	strb	r2, [r3, #7]
	nrf->address_width_ = ADR_THREE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	721a      	strb	r2, [r3, #8]
	nrf->retransmissions_ = ARC_TEN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	220a      	movs	r2, #10
 8002588:	725a      	strb	r2, [r3, #9]
	nrf->ret_delay_ = DELAY_2000uS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2207      	movs	r2, #7
 800258e:	729a      	strb	r2, [r3, #10]

	if(!NRF_SET_RadioParams(nrf->rate_, nrf->power_amp_, nrf->lna_)){
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7818      	ldrb	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7899      	ldrb	r1, [r3, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	78db      	ldrb	r3, [r3, #3]
 800259c:	461a      	mov	r2, r3
 800259e:	f000 f872 	bl	8002686 <NRF_SET_RadioParams>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <NRF_Init+0x66>
		return NRF_ERROR;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e065      	b.n	800267e <NRF_Init+0x132>
	}
	if(!NRF_SET_Frequency(nrf->frequency_)){
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f8a8 	bl	800270c <NRF_SET_Frequency>
 80025bc:	4603      	mov	r3, r0
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <NRF_Init+0x80>
		return NRF_ERROR;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e058      	b.n	800267e <NRF_Init+0x132>
	}
	if(!NRF_SET_DynamicPayload(nrf->dpl_)){
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	795b      	ldrb	r3, [r3, #5]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 f921 	bl	8002818 <NRF_SET_DynamicPayload>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <NRF_Init+0x9a>
		return NRF_ERROR;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e04b      	b.n	800267e <NRF_Init+0x132>
	}
	if(!NRF_SET_CRC(nrf->crc_, nrf->crc_bytes_)){
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	799a      	ldrb	r2, [r3, #6]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	79db      	ldrb	r3, [r3, #7]
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f000 f943 	bl	800287c <NRF_SET_CRC>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f083 0301 	eor.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <NRF_Init+0xba>
		return NRF_ERROR;
 8002602:	2300      	movs	r3, #0
 8002604:	e03b      	b.n	800267e <NRF_Init+0x132>
//	uint8_t reg=0;
//		NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1);
//		printf("RF_SETUP: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
//				(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	if(!NRF_SET_PipeAddressWidth(nrf->address_width_)){
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7a1b      	ldrb	r3, [r3, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f974 	bl	80028f8 <NRF_SET_PipeAddressWidth>
 8002610:	4603      	mov	r3, r0
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <NRF_Init+0xd4>
		return NRF_ERROR;
 800261c:	2300      	movs	r3, #0
 800261e:	e02e      	b.n	800267e <NRF_Init+0x132>
	}
	if(!NRF_SET_Retransmission(nrf->ret_delay_,  nrf->retransmissions_)){
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7a9a      	ldrb	r2, [r3, #10]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7a5b      	ldrb	r3, [r3, #9]
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f000 f982 	bl	8002934 <NRF_SET_Retransmission>
 8002630:	4603      	mov	r3, r0
 8002632:	f083 0301 	eor.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <NRF_Init+0xf4>
		return NRF_ERROR;
 800263c:	2300      	movs	r3, #0
 800263e:	e01e      	b.n	800267e <NRF_Init+0x132>
	}
	// flush fifos
	if(!NRF_FlushTXFifo()){
 8002640:	f000 fb18 	bl	8002c74 <NRF_FlushTXFifo>
 8002644:	4603      	mov	r3, r0
 8002646:	f083 0301 	eor.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <NRF_Init+0x108>
		return NRF_ERROR;
 8002650:	2300      	movs	r3, #0
 8002652:	e014      	b.n	800267e <NRF_Init+0x132>
	}
	if(!NRF_FlushRXFifo()){
 8002654:	f000 faee 	bl	8002c34 <NRF_FlushRXFifo>
 8002658:	4603      	mov	r3, r0
 800265a:	f083 0301 	eor.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <NRF_Init+0x11c>
		return NRF_ERROR;
 8002664:	2300      	movs	r3, #0
 8002666:	e00a      	b.n	800267e <NRF_Init+0x132>
	}

	// clear irq flags
	if(!NRF_ClearIRQFlags()){
 8002668:	f000 fb5e 	bl	8002d28 <NRF_ClearIRQFlags>
 800266c:	4603      	mov	r3, r0
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <NRF_Init+0x130>
		return NRF_ERROR;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <NRF_Init+0x132>
	}
	return NRF_OK;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <NRF_SET_RadioParams>:
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */

bool NRF_SET_RadioParams(NRF_AirDataRate rate, NRF_PowerAmplifier amp, NRF_LNAsetup lna){
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	460b      	mov	r3, r1
 8002692:	71bb      	strb	r3, [r7, #6]
 8002694:	4613      	mov	r3, r2
 8002696:	717b      	strb	r3, [r7, #5]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8002698:	f107 030f 	add.w	r3, r7, #15
 800269c:	2201      	movs	r2, #1
 800269e:	4619      	mov	r1, r3
 80026a0:	2006      	movs	r0, #6
 80026a2:	f7ff fedb 	bl	800245c <NRF_ReadRegs>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <NRF_SET_RadioParams+0x30>
		return NRF_ERROR;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e026      	b.n	8002704 <NRF_SET_RadioParams+0x7e>
	}
	reg &= ~(NRF_MASK_RF_DR  | NRF_MASK_RF_PWR | NRF_MASK_LNA);		// sets bits to 0
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	f023 030f 	bic.w	r3, r3, #15
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	73fb      	strb	r3, [r7, #15]
	reg |= ((rate << 3) | (amp << 1) | lna);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	b25a      	sxtb	r2, r3
 80026c6:	79bb      	ldrb	r3, [r7, #6]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b25a      	sxtb	r2, r3
 80026d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b25a      	sxtb	r2, r3
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	b25b      	sxtb	r3, r3
 80026dc:	4313      	orrs	r3, r2
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_SETUP, &reg, 1)){
 80026e4:	f107 030f 	add.w	r3, r7, #15
 80026e8:	2201      	movs	r2, #1
 80026ea:	4619      	mov	r1, r3
 80026ec:	2006      	movs	r0, #6
 80026ee:	f7ff feed 	bl	80024cc <NRF_WriteRegs>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f083 0301 	eor.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <NRF_SET_RadioParams+0x7c>
		return NRF_ERROR;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <NRF_SET_RadioParams+0x7e>
	}
	return NRF_OK;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <NRF_SET_Frequency>:
 * @param[in] rate : uint8_t, range 0-125
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Frequency(NRF_Frequency freq){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_freq = freq & NRF_MASK_RF_CH;
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800271c:	b2db      	uxtb	r3, r3
 800271e:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_CH, &safe_freq, 1)){
 8002720:	f107 030f 	add.w	r3, r7, #15
 8002724:	2201      	movs	r2, #1
 8002726:	4619      	mov	r1, r3
 8002728:	2005      	movs	r0, #5
 800272a:	f7ff fecf 	bl	80024cc <NRF_WriteRegs>
 800272e:	4603      	mov	r3, r0
 8002730:	f083 0301 	eor.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <NRF_SET_Frequency+0x32>
		return NRF_ERROR;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <NRF_SET_Frequency+0x34>
	}
	return NRF_OK;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <NRF_SET_Mode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Mode(NRF_Mode mode){
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8002752:	f107 030f 	add.w	r3, r7, #15
 8002756:	2201      	movs	r2, #1
 8002758:	4619      	mov	r1, r3
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fe7e 	bl	800245c <NRF_ReadRegs>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <NRF_SET_Mode+0x28>
		return NRF_ERROR;
 800276c:	2300      	movs	r3, #0
 800276e:	e019      	b.n	80027a4 <NRF_SET_Mode+0x5c>
	}
	reg &= ~NRF_MASK_MODE;		// sets bit to 0
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73fb      	strb	r3, [r7, #15]
	reg |= mode;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	4313      	orrs	r3, r2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8002784:	f107 030f 	add.w	r3, r7, #15
 8002788:	2201      	movs	r2, #1
 800278a:	4619      	mov	r1, r3
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff fe9d 	bl	80024cc <NRF_WriteRegs>
 8002792:	4603      	mov	r3, r0
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <NRF_SET_Mode+0x5a>
		return NRF_ERROR;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <NRF_SET_Mode+0x5c>
	}
	return NRF_OK;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <NRF_SET_PowerMode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PowerMode(NRF_PowerMode pwr){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 80027b6:	f107 030f 	add.w	r3, r7, #15
 80027ba:	2201      	movs	r2, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	2000      	movs	r0, #0
 80027c0:	f7ff fe4c 	bl	800245c <NRF_ReadRegs>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <NRF_SET_PowerMode+0x28>
		return NRF_ERROR;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e01d      	b.n	8002810 <NRF_SET_PowerMode+0x64>
	}
	reg &= ~NRF_MASK_PWR_MODE;		// sets bit to 0
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	f023 0302 	bic.w	r3, r3, #2
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	73fb      	strb	r3, [r7, #15]
	reg |= pwr << 1;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	b25a      	sxtb	r2, r3
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 80027f0:	f107 030f 	add.w	r3, r7, #15
 80027f4:	2201      	movs	r2, #1
 80027f6:	4619      	mov	r1, r3
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fe67 	bl	80024cc <NRF_WriteRegs>
 80027fe:	4603      	mov	r3, r0
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <NRF_SET_PowerMode+0x62>
		return NRF_ERROR;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <NRF_SET_PowerMode+0x64>
	}
	return NRF_OK;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <NRF_SET_DynamicPayload>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_DynamicPayload(NRF_DynamicPayload dpl){
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_FEATURE, &reg, 1)){
 8002822:	f107 030f 	add.w	r3, r7, #15
 8002826:	2201      	movs	r2, #1
 8002828:	4619      	mov	r1, r3
 800282a:	201d      	movs	r0, #29
 800282c:	f7ff fe16 	bl	800245c <NRF_ReadRegs>
 8002830:	4603      	mov	r3, r0
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <NRF_SET_DynamicPayload+0x28>
		return NRF_ERROR;
 800283c:	2300      	movs	r3, #0
 800283e:	e019      	b.n	8002874 <NRF_SET_DynamicPayload+0x5c>
	}
	reg &= ~NRF_MASK_EN_DPL;		// sets bit to 0
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	b2db      	uxtb	r3, r3
 8002848:	73fb      	strb	r3, [r7, #15]
	reg |= dpl;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4313      	orrs	r3, r2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_FEATURE, &reg, 1)){
 8002854:	f107 030f 	add.w	r3, r7, #15
 8002858:	2201      	movs	r2, #1
 800285a:	4619      	mov	r1, r3
 800285c:	201d      	movs	r0, #29
 800285e:	f7ff fe35 	bl	80024cc <NRF_WriteRegs>
 8002862:	4603      	mov	r3, r0
 8002864:	f083 0301 	eor.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <NRF_SET_DynamicPayload+0x5a>
		return NRF_ERROR;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <NRF_SET_DynamicPayload+0x5c>
	}
	return NRF_OK;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <NRF_SET_CRC>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_CRC(NRF_CRC crc, NRF_CRCbytes bytes){
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 800288c:	f107 030f 	add.w	r3, r7, #15
 8002890:	2201      	movs	r2, #1
 8002892:	4619      	mov	r1, r3
 8002894:	2000      	movs	r0, #0
 8002896:	f7ff fde1 	bl	800245c <NRF_ReadRegs>
 800289a:	4603      	mov	r3, r0
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <NRF_SET_CRC+0x2e>
		return NRF_ERROR;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e022      	b.n	80028f0 <NRF_SET_CRC+0x74>
	}
	reg &= ~NRF_MASK_CRC;		// sets bits to 0
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	f023 030c 	bic.w	r3, r3, #12
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	73fb      	strb	r3, [r7, #15]
	reg |= ((crc << 3) | (bytes << 2));
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	b25a      	sxtb	r2, r3
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b25a      	sxtb	r2, r3
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 80028d0:	f107 030f 	add.w	r3, r7, #15
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff fdf7 	bl	80024cc <NRF_WriteRegs>
 80028de:	4603      	mov	r3, r0
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <NRF_SET_CRC+0x72>
		return NRF_ERROR;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <NRF_SET_CRC+0x74>
	}
	return NRF_OK;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <NRF_SET_PipeAddressWidth>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddressWidth(NRF_AddressWidth width){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_width = width & NRF_MASK_AW;
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_AW, &safe_width, 1)){
 800290c:	f107 030f 	add.w	r3, r7, #15
 8002910:	2201      	movs	r2, #1
 8002912:	4619      	mov	r1, r3
 8002914:	2003      	movs	r0, #3
 8002916:	f7ff fdd9 	bl	80024cc <NRF_WriteRegs>
 800291a:	4603      	mov	r3, r0
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <NRF_SET_PipeAddressWidth+0x32>
		return NRF_ERROR;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <NRF_SET_PipeAddressWidth+0x34>
	}
	return NRF_OK;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <NRF_SET_Retransmission>:
 * @param[in] arc : how many retransmissions allowed
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Retransmission(NRF_RetransmitDelay ard, NRF_RetransmitCount arc){
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	460a      	mov	r2, r1
 800293e:	71fb      	strb	r3, [r7, #7]
 8002940:	4613      	mov	r3, r2
 8002942:	71bb      	strb	r3, [r7, #6]
	uint8_t retransmit_data = (ard << 4) | arc;
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	b25a      	sxtb	r2, r3
 800294a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800294e:	4313      	orrs	r3, r2
 8002950:	b25b      	sxtb	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_RETR, &retransmit_data, 1)){
 8002956:	f107 030f 	add.w	r3, r7, #15
 800295a:	2201      	movs	r2, #1
 800295c:	4619      	mov	r1, r3
 800295e:	2004      	movs	r0, #4
 8002960:	f7ff fdb4 	bl	80024cc <NRF_WriteRegs>
 8002964:	4603      	mov	r3, r0
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <NRF_SET_Retransmission+0x40>
		return NRF_ERROR;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <NRF_SET_Retransmission+0x42>
	}
	return NRF_OK;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <NRF_SET_PipeAddress>:
 * @param[in] address : pointer to array with address (LSB first, its pretty crucial)
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddress(NRF_Pipe pipe, uint8_t* address){
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	6039      	str	r1, [r7, #0]
 8002988:	71fb      	strb	r3, [r7, #7]
	uint8_t address_width;
	if(!NRF_ReadRegs(NRF_REG_SETUP_AW, &address_width, 1)){
 800298a:	f107 030f 	add.w	r3, r7, #15
 800298e:	2201      	movs	r2, #1
 8002990:	4619      	mov	r1, r3
 8002992:	2003      	movs	r0, #3
 8002994:	f7ff fd62 	bl	800245c <NRF_ReadRegs>
 8002998:	4603      	mov	r3, r0
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <NRF_SET_PipeAddress+0x2a>
		return NRF_ERROR;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e037      	b.n	8002a18 <NRF_SET_PipeAddress+0x9a>
	}

	switch(pipe){
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d00a      	beq.n	80029c4 <NRF_SET_PipeAddress+0x46>
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	dc2c      	bgt.n	8002a0c <NRF_SET_PipeAddress+0x8e>
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	dc02      	bgt.n	80029bc <NRF_SET_PipeAddress+0x3e>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da04      	bge.n	80029c4 <NRF_SET_PipeAddress+0x46>
 80029ba:	e027      	b.n	8002a0c <NRF_SET_PipeAddress+0x8e>
 80029bc:	3b02      	subs	r3, #2
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d824      	bhi.n	8002a0c <NRF_SET_PipeAddress+0x8e>
 80029c2:	e013      	b.n	80029ec <NRF_SET_PipeAddress+0x6e>
		case RX_PIPE_0:
		case RX_PIPE_1:
		case TX_PIPE:
			address_width += 2;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	3302      	adds	r3, #2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	73fb      	strb	r3, [r7, #15]
			// for pipe 0-1 send all three bytes
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, address_width)){
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	330a      	adds	r3, #10
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd78 	bl	80024cc <NRF_WriteRegs>
 80029dc:	4603      	mov	r3, r0
 80029de:	f083 0301 	eor.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <NRF_SET_PipeAddress+0x92>
				return NRF_ERROR;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e015      	b.n	8002a18 <NRF_SET_PipeAddress+0x9a>
		case RX_PIPE_2:
		case RX_PIPE_3:
		case RX_PIPE_4:
		case RX_PIPE_5:
			// for pipe 2-5 and tx send only LSB
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, 1)){
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	330a      	adds	r3, #10
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2201      	movs	r2, #1
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fd68 	bl	80024cc <NRF_WriteRegs>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <NRF_SET_PipeAddress+0x96>
				return NRF_ERROR;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e005      	b.n	8002a18 <NRF_SET_PipeAddress+0x9a>
			}
			break;
		default:
			// some different value, return error
			return NRF_ERROR;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e003      	b.n	8002a18 <NRF_SET_PipeAddress+0x9a>
			break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <NRF_SET_PipeAddress+0x98>
			break;
 8002a14:	bf00      	nop
	}
	return NRF_OK;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <NRF_SET_PipeRX>:
 * @param[in]] payload_length : length (in bytes) of data packets send through pipe
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeRX(NRF_Pipe pipe, NRF_AutoAcknowledge auto_ack, uint8_t payload_length){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	71bb      	strb	r3, [r7, #6]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	717b      	strb	r3, [r7, #5]
	// enable pipe
	uint8_t pipe_en;
	if(!NRF_ReadRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8002a32:	f107 030f 	add.w	r3, r7, #15
 8002a36:	2201      	movs	r2, #1
 8002a38:	4619      	mov	r1, r3
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f7ff fd0e 	bl	800245c <NRF_ReadRegs>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <NRF_SET_PipeRX+0x30>
		return NRF_ERROR;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e073      	b.n	8002b38 <NRF_SET_PipeRX+0x118>
	}
	pipe_en &= ~(NRF_MASK_EN_BASE << pipe);
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2201      	movs	r2, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	b25a      	sxtb	r2, r3
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	4013      	ands	r3, r2
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	73fb      	strb	r3, [r7, #15]
	pipe_en |= 1 << pipe;
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	b25a      	sxtb	r2, r3
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8002a80:	f107 030f 	add.w	r3, r7, #15
 8002a84:	2201      	movs	r2, #1
 8002a86:	4619      	mov	r1, r3
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f7ff fd1f 	bl	80024cc <NRF_WriteRegs>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <NRF_SET_PipeRX+0x7e>
		return NRF_ERROR;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e04c      	b.n	8002b38 <NRF_SET_PipeRX+0x118>
	}


	// set auto acknowledge
	uint8_t aa_en;
	if(!NRF_ReadRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8002a9e:	f107 030e 	add.w	r3, r7, #14
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7ff fcd8 	bl	800245c <NRF_ReadRegs>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f083 0301 	eor.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <NRF_SET_PipeRX+0x9c>
		return NRF_ERROR;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e03d      	b.n	8002b38 <NRF_SET_PipeRX+0x118>
	}
	aa_en &= ~(NRF_MASK_EN_BASE << pipe);
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	b25a      	sxtb	r2, r3
 8002aca:	7bbb      	ldrb	r3, [r7, #14]
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	73bb      	strb	r3, [r7, #14]
	aa_en |= 1 << pipe;
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	b25a      	sxtb	r2, r3
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	73bb      	strb	r3, [r7, #14]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8002aec:	f107 030e 	add.w	r3, r7, #14
 8002af0:	2201      	movs	r2, #1
 8002af2:	4619      	mov	r1, r3
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7ff fce9 	bl	80024cc <NRF_WriteRegs>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <NRF_SET_PipeRX+0xea>
		return NRF_ERROR;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e016      	b.n	8002b38 <NRF_SET_PipeRX+0x118>
	}

	// set payload length (used when dpl is disabled)
	uint8_t safe_pl_len = NRF_MASK_RX_PW_P & payload_length;
 8002b0a:	797b      	ldrb	r3, [r7, #5]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	737b      	strb	r3, [r7, #13]
	if(!NRF_WriteRegs(NRF_REG_RX_PW_BASE+pipe, &safe_pl_len, 1)){
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	3311      	adds	r3, #17
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f107 010d 	add.w	r1, r7, #13
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fcd3 	bl	80024cc <NRF_WriteRegs>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <NRF_SET_PipeRX+0x116>
		return NRF_ERROR;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <NRF_SET_PipeRX+0x118>
	}

	// if everything passed return ok
	return NRF_OK;
 8002b36:	2301      	movs	r3, #1
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <NRF_SET_PipeTX>:
 * @param[in] auto_ack : enable enhanced shockburst for given pipe
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeTX(NRF_Pipe pipe, NRF_AutoAcknowledge auto_ack){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
//	if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
//		return NRF_ERROR;
//	}
	// enable pipe
		uint8_t pipe_en;
		if(!NRF_ReadRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8002b50:	f107 030f 	add.w	r3, r7, #15
 8002b54:	2201      	movs	r2, #1
 8002b56:	4619      	mov	r1, r3
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7ff fc7f 	bl	800245c <NRF_ReadRegs>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f083 0301 	eor.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <NRF_SET_PipeTX+0x2e>
			return NRF_ERROR;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e05d      	b.n	8002c2a <NRF_SET_PipeTX+0xea>
		}
		pipe_en &= ~(NRF_MASK_EN_BASE << pipe);
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	b25a      	sxtb	r2, r3
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	4013      	ands	r3, r2
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	73fb      	strb	r3, [r7, #15]
		pipe_en |= 1 << pipe;
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	b25a      	sxtb	r2, r3
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	73fb      	strb	r3, [r7, #15]
		if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8002b9e:	f107 030f 	add.w	r3, r7, #15
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f7ff fc90 	bl	80024cc <NRF_WriteRegs>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <NRF_SET_PipeTX+0x7c>
			return NRF_ERROR;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e036      	b.n	8002c2a <NRF_SET_PipeTX+0xea>
		}

	// set auto acknowledge
	uint8_t aa_en;
	if(!NRF_ReadRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8002bbc:	f107 030e 	add.w	r3, r7, #14
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f7ff fc49 	bl	800245c <NRF_ReadRegs>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <NRF_SET_PipeTX+0x9a>
		return NRF_ERROR;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e027      	b.n	8002c2a <NRF_SET_PipeTX+0xea>
	}
	aa_en &= ~(NRF_MASK_EN_BASE << pipe);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	b25a      	sxtb	r2, r3
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	73bb      	strb	r3, [r7, #14]
	aa_en |= 1 << pipe;
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	b25a      	sxtb	r2, r3
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	73bb      	strb	r3, [r7, #14]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8002c0a:	f107 030e 	add.w	r3, r7, #14
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4619      	mov	r1, r3
 8002c12:	2001      	movs	r0, #1
 8002c14:	f7ff fc5a 	bl	80024cc <NRF_WriteRegs>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f083 0301 	eor.w	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <NRF_SET_PipeTX+0xe8>
		return NRF_ERROR;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <NRF_SET_PipeTX+0xea>
	}

	// if everything passed return ok
	return NRF_OK;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <NRF_FlushRXFifo>:
 * @brief flush rx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushRXFifo(void){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2101      	movs	r1, #1
 8002c42:	480b      	ldr	r0, [pc, #44]	; (8002c70 <NRF_FlushRXFifo+0x3c>)
 8002c44:	f000 fe68 	bl	8003918 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_RX, &rx_buff)){
 8002c48:	1dfb      	adds	r3, r7, #7
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	20e2      	movs	r0, #226	; 0xe2
 8002c4e:	f7ff fbe9 	bl	8002424 <NRF_SPI_RW>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <NRF_FlushRXFifo+0x28>
		return NRF_ERROR;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e005      	b.n	8002c68 <NRF_FlushRXFifo+0x34>
	}
	NRF_CSN_SET_HIGH;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4803      	ldr	r0, [pc, #12]	; (8002c70 <NRF_FlushRXFifo+0x3c>)
 8002c62:	f000 fe59 	bl	8003918 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40020400 	.word	0x40020400

08002c74 <NRF_FlushTXFifo>:
 * @brief flush tx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushTXFifo(void){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2101      	movs	r1, #1
 8002c82:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <NRF_FlushTXFifo+0x3c>)
 8002c84:	f000 fe48 	bl	8003918 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_TX, &rx_buff)){
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	20e1      	movs	r0, #225	; 0xe1
 8002c8e:	f7ff fbc9 	bl	8002424 <NRF_SPI_RW>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <NRF_FlushTXFifo+0x28>
		return NRF_ERROR;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e005      	b.n	8002ca8 <NRF_FlushTXFifo+0x34>
	}
	NRF_CSN_SET_HIGH;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <NRF_FlushTXFifo+0x3c>)
 8002ca2:	f000 fe39 	bl	8003918 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40020400 	.word	0x40020400

08002cb4 <NRF_WriteTxPayload>:
 * @param[in] length : data length
 *
 * @return nothing
 * @retval 1 if successfully written, 0 if something went wrong
 */
bool NRF_WriteTxPayload(uint8_t* data, uint8_t length){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buff = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_SET_LOW;
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4816      	ldr	r0, [pc, #88]	; (8002d24 <NRF_WriteTxPayload+0x70>)
 8002cca:	f000 fe25 	bl	8003918 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_W_TX_PAYLOAD, &rx_buff)){
 8002cce:	f107 030f 	add.w	r3, r7, #15
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	20a0      	movs	r0, #160	; 0xa0
 8002cd6:	f7ff fba5 	bl	8002424 <NRF_SPI_RW>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d111      	bne.n	8002d04 <NRF_WriteTxPayload+0x50>
		return NRF_ERROR;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e01a      	b.n	8002d1a <NRF_WriteTxPayload+0x66>
	}
	while(length--){
		if(!NRF_SPI_RW(*data, &rx_buff)){
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f107 020f 	add.w	r2, r7, #15
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fb98 	bl	8002424 <NRF_SPI_RW>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <NRF_WriteTxPayload+0x4a>
			return NRF_ERROR;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e00d      	b.n	8002d1a <NRF_WriteTxPayload+0x66>
		}
		data++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3301      	adds	r3, #1
 8002d02:	607b      	str	r3, [r7, #4]
	while(length--){
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	70fa      	strb	r2, [r7, #3]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ea      	bne.n	8002ce4 <NRF_WriteTxPayload+0x30>
	}
	NRF_CSN_SET_HIGH;
 8002d0e:	2201      	movs	r2, #1
 8002d10:	2101      	movs	r1, #1
 8002d12:	4804      	ldr	r0, [pc, #16]	; (8002d24 <NRF_WriteTxPayload+0x70>)
 8002d14:	f000 fe00 	bl	8003918 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40020400 	.word	0x40020400

08002d28 <NRF_ClearIRQFlags>:
 * @brief clear irq bits in status register
 *
 * @return nothing
 * @retval 1 if successfully cleared, 0 if something went wrong
 */
bool NRF_ClearIRQFlags(void){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
	uint8_t status_reg;
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	2007      	movs	r0, #7
 8002d36:	f7ff fb91 	bl	800245c <NRF_ReadRegs>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <NRF_ClearIRQFlags+0x22>
		return NRF_ERROR;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e013      	b.n	8002d72 <NRF_ClearIRQFlags+0x4a>
	}

	// write 1 to clear bits
	status_reg |= (NRF_MASK_RX_DR | NRF_MASK_TX_DS | NRF_MASK_MAX_RT);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	71fb      	strb	r3, [r7, #7]
	if(!NRF_WriteRegs(NRF_REG_STATUS, &status_reg, 1)){
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2007      	movs	r0, #7
 8002d5c:	f7ff fbb6 	bl	80024cc <NRF_WriteRegs>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <NRF_ClearIRQFlags+0x48>
		return NRF_ERROR;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <NRF_ClearIRQFlags+0x4a>
	}
	return NRF_OK;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <NRF_ResetPlos>:
}

/*
 * comment properly
 */
bool NRF_ResetPlos(){
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
	uint8_t rf_ch_reg = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	71fb      	strb	r3, [r7, #7]
	if(!NRF_ReadRegs(NRF_REG_RF_CH, &rf_ch_reg, 1)){
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	2201      	movs	r2, #1
 8002d88:	4619      	mov	r1, r3
 8002d8a:	2005      	movs	r0, #5
 8002d8c:	f7ff fb66 	bl	800245c <NRF_ReadRegs>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f083 0301 	eor.w	r3, r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <NRF_ResetPlos+0x26>
		return NRF_ERROR;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e00e      	b.n	8002dbe <NRF_ResetPlos+0x44>
	}
	if(!NRF_WriteRegs(NRF_REG_RF_CH, &rf_ch_reg, 1)){
 8002da0:	1dfb      	adds	r3, r7, #7
 8002da2:	2201      	movs	r2, #1
 8002da4:	4619      	mov	r1, r3
 8002da6:	2005      	movs	r0, #5
 8002da8:	f7ff fb90 	bl	80024cc <NRF_WriteRegs>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <NRF_ResetPlos+0x42>
		return NRF_ERROR;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <NRF_ResetPlos+0x44>
	}
	return NRF_OK;
 8002dbc:	2301      	movs	r3, #1
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_MspInit+0x4c>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <HAL_MspInit+0x4c>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_MspInit+0x4c>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_MspInit+0x4c>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_MspInit+0x4c>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_MspInit+0x4c>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800

08002e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a41      	ldr	r2, [pc, #260]	; (8002f3c <HAL_I2C_MspInit+0x124>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d12c      	bne.n	8002e94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a3f      	ldr	r2, [pc, #252]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AM2320_SCL_Pin|AM2320_SDA_Pin;
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e5a:	2312      	movs	r3, #18
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e66:	2304      	movs	r3, #4
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4834      	ldr	r0, [pc, #208]	; (8002f44 <HAL_I2C_MspInit+0x12c>)
 8002e72:	f000 fbcd 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e92:	e04f      	b.n	8002f34 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_I2C_MspInit+0x130>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d14a      	bne.n	8002f34 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BMP280_SCL_Pin;
 8002ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002edc:	2312      	movs	r3, #18
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ee8:	2304      	movs	r3, #4
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BMP280_SCL_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4816      	ldr	r0, [pc, #88]	; (8002f4c <HAL_I2C_MspInit+0x134>)
 8002ef4:	f000 fb8c 	bl	8003610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP280_SDA_Pin;
 8002ef8:	2310      	movs	r3, #16
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efc:	2312      	movs	r3, #18
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002f08:	2309      	movs	r3, #9
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BMP280_SDA_GPIO_Port, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	480c      	ldr	r0, [pc, #48]	; (8002f44 <HAL_I2C_MspInit+0x12c>)
 8002f14:	f000 fb7c 	bl	8003610 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002f22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_I2C_MspInit+0x128>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
}
 8002f34:	bf00      	nop
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40005400 	.word	0x40005400
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40005c00 	.word	0x40005c00
 8002f4c:	40020000 	.word	0x40020000

08002f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_SPI_MspInit+0x84>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12c      	bne.n	8002fcc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_SPI_MspInit+0x88>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_SPI_MspInit+0x88>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_SPI_MspInit+0x88>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_SPI_MspInit+0x88>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_SPI_MspInit+0x88>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_SPI_MspInit+0x88>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 8002faa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fbc:	2305      	movs	r3, #5
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <HAL_SPI_MspInit+0x8c>)
 8002fc8:	f000 fb22 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fcc:	bf00      	nop
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40003800 	.word	0x40003800
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020400 	.word	0x40020400

08002fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_TIM_Base_MspInit+0x48>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d115      	bne.n	800301e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_TIM_Base_MspInit+0x4c>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_TIM_Base_MspInit+0x4c>)
 8002ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_TIM_Base_MspInit+0x4c>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2019      	movs	r0, #25
 8003014:	f000 fac5 	bl	80035a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003018:	2019      	movs	r0, #25
 800301a:	f000 fade 	bl	80035da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40014400 	.word	0x40014400
 800302c:	40023800 	.word	0x40023800

08003030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <NMI_Handler+0x4>

08003036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <HardFault_Handler+0x4>

0800303c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <MemManage_Handler+0x4>

08003042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003046:	e7fe      	b.n	8003046 <BusFault_Handler+0x4>

08003048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800304c:	e7fe      	b.n	800304c <UsageFault_Handler+0x4>

0800304e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800307c:	f000 f972 	bl	8003364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8003088:	2002      	movs	r0, #2
 800308a:	f000 fc5f 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800309a:	f004 fb0b 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200003f4 	.word	0x200003f4

080030a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <OTG_FS_IRQHandler+0x10>)
 80030ae:	f002 f9e8 	bl	8005482 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20001100 	.word	0x20001100

080030bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
	return 1;
 80030c0:	2301      	movs	r3, #1
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_kill>:

int _kill(int pid, int sig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030d6:	f008 fd6b 	bl	800bbb0 <__errno>
 80030da:	4603      	mov	r3, r0
 80030dc:	2216      	movs	r2, #22
 80030de:	601a      	str	r2, [r3, #0]
	return -1;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_exit>:

void _exit (int status)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030f4:	f04f 31ff 	mov.w	r1, #4294967295
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ffe7 	bl	80030cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80030fe:	e7fe      	b.n	80030fe <_exit+0x12>

08003100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e00a      	b.n	8003128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003112:	f3af 8000 	nop.w
 8003116:	4601      	mov	r1, r0
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	60ba      	str	r2, [r7, #8]
 800311e:	b2ca      	uxtb	r2, r1
 8003120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	dbf0      	blt.n	8003112 <_read+0x12>
	}

return len;
 8003130:	687b      	ldr	r3, [r7, #4]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e009      	b.n	8003160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	60ba      	str	r2, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	dbf1      	blt.n	800314c <_write+0x12>
	}
	return len;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_close>:

int _close(int file)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	return -1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800319a:	605a      	str	r2, [r3, #4]
	return 0;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_isatty>:

int _isatty(int file)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
	return 1;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
	return 0;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <_sbrk+0x5c>)
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <_sbrk+0x60>)
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <_sbrk+0x64>)
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <_sbrk+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	d207      	bcs.n	800321c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800320c:	f008 fcd0 	bl	800bbb0 <__errno>
 8003210:	4603      	mov	r3, r0
 8003212:	220c      	movs	r2, #12
 8003214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e009      	b.n	8003230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <_sbrk+0x64>)
 800322c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20010000 	.word	0x20010000
 800323c:	00000400 	.word	0x00000400
 8003240:	20000448 	.word	0x20000448
 8003244:	20001840 	.word	0x20001840

08003248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <SystemInit+0x20>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <SystemInit+0x20>)
 8003254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800326c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003270:	480d      	ldr	r0, [pc, #52]	; (80032a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003272:	490e      	ldr	r1, [pc, #56]	; (80032ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003274:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003278:	e002      	b.n	8003280 <LoopCopyDataInit>

0800327a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800327c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327e:	3304      	adds	r3, #4

08003280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003284:	d3f9      	bcc.n	800327a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003286:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003288:	4c0b      	ldr	r4, [pc, #44]	; (80032b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800328a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800328c:	e001      	b.n	8003292 <LoopFillZerobss>

0800328e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003290:	3204      	adds	r2, #4

08003292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003294:	d3fb      	bcc.n	800328e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003296:	f7ff ffd7 	bl	8003248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800329a:	f008 fc8f 	bl	800bbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800329e:	f7fe fd2d 	bl	8001cfc <main>
  bx  lr    
 80032a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80032a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032ac:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80032b0:	08010bf4 	.word	0x08010bf4
  ldr r2, =_sbss
 80032b4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80032b8:	2000183c 	.word	0x2000183c

080032bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032bc:	e7fe      	b.n	80032bc <ADC_IRQHandler>
	...

080032c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <HAL_Init+0x40>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <HAL_Init+0x40>)
 80032ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_Init+0x40>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_Init+0x40>)
 80032d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_Init+0x40>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_Init+0x40>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e8:	2003      	movs	r0, #3
 80032ea:	f000 f94f 	bl	800358c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ee:	200f      	movs	r0, #15
 80032f0:	f000 f808 	bl	8003304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f4:	f7ff fd68 	bl	8002dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00

08003304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_InitTick+0x54>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_InitTick+0x58>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800331a:	fbb3 f3f1 	udiv	r3, r3, r1
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f967 	bl	80035f6 <HAL_SYSTICK_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00e      	b.n	8003350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d80a      	bhi.n	800334e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f000 f92f 	bl	80035a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003344:	4a06      	ldr	r2, [pc, #24]	; (8003360 <HAL_InitTick+0x5c>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000004 	.word	0x20000004
 800335c:	2000000c 	.word	0x2000000c
 8003360:	20000008 	.word	0x20000008

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000000c 	.word	0x2000000c
 8003388:	2000044c 	.word	0x2000044c

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	2000044c 	.word	0x2000044c

080033a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff ffee 	bl	800338c <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d005      	beq.n	80033ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_Delay+0x44>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ca:	bf00      	nop
 80033cc:	f7ff ffde 	bl	800338c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8f7      	bhi.n	80033cc <HAL_Delay+0x28>
  {
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000000c 	.word	0x2000000c

080033ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60d3      	str	r3, [r2, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4907      	ldr	r1, [pc, #28]	; (8003488 <__NVIC_EnableIRQ+0x38>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	; (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	; (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003558:	d301      	bcc.n	800355e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <SysTick_Config+0x40>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003566:	210f      	movs	r1, #15
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f7ff ff8e 	bl	800348c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <SysTick_Config+0x40>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <SysTick_Config+0x40>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000e010 	.word	0xe000e010

0800358c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff29 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b4:	f7ff ff3e 	bl	8003434 <__NVIC_GetPriorityGrouping>
 80035b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff ff8e 	bl	80034e0 <NVIC_EncodePriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff5d 	bl	800348c <__NVIC_SetPriority>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff31 	bl	8003450 <__NVIC_EnableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffa2 	bl	8003548 <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e159      	b.n	80038e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800362c:	2201      	movs	r2, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	429a      	cmp	r2, r3
 8003646:	f040 8148 	bne.w	80038da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d005      	beq.n	8003662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365e:	2b02      	cmp	r3, #2
 8003660:	d130      	bne.n	80036c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	2203      	movs	r2, #3
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 0201 	and.w	r2, r3, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d017      	beq.n	8003700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d123      	bne.n	8003754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a2 	beq.w	80038da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_GPIO_Init+0x2e8>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_GPIO_Init+0x2e8>)
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a4:	6453      	str	r3, [r2, #68]	; 0x44
 80037a6:	4b54      	ldr	r3, [pc, #336]	; (80038f8 <HAL_GPIO_Init+0x2e8>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037b2:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_GPIO_Init+0x2ec>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a49      	ldr	r2, [pc, #292]	; (8003900 <HAL_GPIO_Init+0x2f0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d019      	beq.n	8003812 <HAL_GPIO_Init+0x202>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a48      	ldr	r2, [pc, #288]	; (8003904 <HAL_GPIO_Init+0x2f4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_GPIO_Init+0x1fe>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a47      	ldr	r2, [pc, #284]	; (8003908 <HAL_GPIO_Init+0x2f8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_GPIO_Init+0x1fa>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a46      	ldr	r2, [pc, #280]	; (800390c <HAL_GPIO_Init+0x2fc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <HAL_GPIO_Init+0x1f6>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a45      	ldr	r2, [pc, #276]	; (8003910 <HAL_GPIO_Init+0x300>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_GPIO_Init+0x1f2>
 80037fe:	2304      	movs	r3, #4
 8003800:	e008      	b.n	8003814 <HAL_GPIO_Init+0x204>
 8003802:	2307      	movs	r3, #7
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x204>
 8003806:	2303      	movs	r3, #3
 8003808:	e004      	b.n	8003814 <HAL_GPIO_Init+0x204>
 800380a:	2302      	movs	r3, #2
 800380c:	e002      	b.n	8003814 <HAL_GPIO_Init+0x204>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x204>
 8003812:	2300      	movs	r3, #0
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f002 0203 	and.w	r2, r2, #3
 800381a:	0092      	lsls	r2, r2, #2
 800381c:	4093      	lsls	r3, r2
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003824:	4935      	ldr	r1, [pc, #212]	; (80038fc <HAL_GPIO_Init+0x2ec>)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	3302      	adds	r3, #2
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <HAL_GPIO_Init+0x304>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003856:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <HAL_GPIO_Init+0x304>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_GPIO_Init+0x304>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003880:	4a24      	ldr	r2, [pc, #144]	; (8003914 <HAL_GPIO_Init+0x304>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_GPIO_Init+0x304>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d4:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <HAL_GPIO_Init+0x304>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3301      	adds	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	f67f aea2 	bls.w	800362c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40013800 	.word	0x40013800
 8003900:	40020000 	.word	0x40020000
 8003904:	40020400 	.word	0x40020400
 8003908:	40020800 	.word	0x40020800
 800390c:	40020c00 	.word	0x40020c00
 8003910:	40021000 	.word	0x40021000
 8003914:	40013c00 	.word	0x40013c00

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003934:	e003      	b.n	800393e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fcba 	bl	80022e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40013c00 	.word	0x40013c00

0800397c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e12b      	b.n	8003be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fa38 	bl	8002e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e0:	f003 faac 	bl	8006f3c <HAL_RCC_GetPCLK1Freq>
 80039e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4a81      	ldr	r2, [pc, #516]	; (8003bf0 <HAL_I2C_Init+0x274>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d807      	bhi.n	8003a00 <HAL_I2C_Init+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a80      	ldr	r2, [pc, #512]	; (8003bf4 <HAL_I2C_Init+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e006      	b.n	8003a0e <HAL_I2C_Init+0x92>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a7d      	ldr	r2, [pc, #500]	; (8003bf8 <HAL_I2C_Init+0x27c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0e7      	b.n	8003be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a78      	ldr	r2, [pc, #480]	; (8003bfc <HAL_I2C_Init+0x280>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0c9b      	lsrs	r3, r3, #18
 8003a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a6a      	ldr	r2, [pc, #424]	; (8003bf0 <HAL_I2C_Init+0x274>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d802      	bhi.n	8003a50 <HAL_I2C_Init+0xd4>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	e009      	b.n	8003a64 <HAL_I2C_Init+0xe8>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	4a69      	ldr	r2, [pc, #420]	; (8003c00 <HAL_I2C_Init+0x284>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	3301      	adds	r3, #1
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	495c      	ldr	r1, [pc, #368]	; (8003bf0 <HAL_I2C_Init+0x274>)
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d819      	bhi.n	8003ab8 <HAL_I2C_Init+0x13c>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e59      	subs	r1, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a98:	400b      	ands	r3, r1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_I2C_Init+0x138>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e59      	subs	r1, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	e051      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	e04f      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <HAL_I2C_Init+0x168>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e58      	subs	r0, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e012      	b.n	8003b0a <HAL_I2C_Init+0x18e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1e58      	subs	r0, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x196>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e022      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_I2C_Init+0x1bc>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e58      	subs	r0, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	440b      	add	r3, r1
 8003b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b36:	e00f      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	6809      	ldr	r1, [r1, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6911      	ldr	r1, [r2, #16]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	4311      	orrs	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	000186a0 	.word	0x000186a0
 8003bf4:	001e847f 	.word	0x001e847f
 8003bf8:	003d08ff 	.word	0x003d08ff
 8003bfc:	431bde83 	.word	0x431bde83
 8003c00:	10624dd3 	.word	0x10624dd3

08003c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	460b      	mov	r3, r1
 8003c12:	817b      	strh	r3, [r7, #10]
 8003c14:	4613      	mov	r3, r2
 8003c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff fbb8 	bl	800338c <HAL_GetTick>
 8003c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	f040 80e0 	bne.w	8003dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2319      	movs	r3, #25
 8003c32:	2201      	movs	r2, #1
 8003c34:	4970      	ldr	r1, [pc, #448]	; (8003df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f001 f8f6 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0d3      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x50>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0cc      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d007      	beq.n	8003c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2210      	movs	r2, #16
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a50      	ldr	r2, [pc, #320]	; (8003dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cbc:	8979      	ldrh	r1, [r7, #10]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fde2 	bl	800488c <I2C_MasterRequestWrite>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e08d      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ce8:	e066      	b.n	8003db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f001 f970 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d11b      	bne.n	8003d8c <HAL_I2C_Master_Transmit+0x188>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d017      	beq.n	8003d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	6a39      	ldr	r1, [r7, #32]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f001 f960 	bl	8005056 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e01a      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d194      	bne.n	8003cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	00100002 	.word	0x00100002
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
 8003e10:	4613      	mov	r3, r2
 8003e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e14:	f7ff faba 	bl	800338c <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	f040 820b 	bne.w	800423e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2319      	movs	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	497c      	ldr	r1, [pc, #496]	; (8004024 <HAL_I2C_Master_Receive+0x224>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fff8 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e1fe      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x50>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e1f7      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d007      	beq.n	8003e76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2222      	movs	r2, #34	; 0x22
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2210      	movs	r2, #16
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	893a      	ldrh	r2, [r7, #8]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a5c      	ldr	r2, [pc, #368]	; (8004028 <HAL_I2C_Master_Receive+0x228>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eb8:	8979      	ldrh	r1, [r7, #10]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fd66 	bl	8004990 <I2C_MasterRequestRead>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1b8      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e18c      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d11b      	bne.n	8003f3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e16c      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d11b      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	e14c      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fa4:	e138      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 80f1 	bhi.w	8004192 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d123      	bne.n	8004000 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f001 f88b 	bl	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e139      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffe:	e10b      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b02      	cmp	r3, #2
 8004006:	d14e      	bne.n	80040a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2200      	movs	r2, #0
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <HAL_I2C_Master_Receive+0x22c>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 ff08 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e10e      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000
 800402c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a4:	e0b8      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2200      	movs	r2, #0
 80040ae:	4966      	ldr	r1, [pc, #408]	; (8004248 <HAL_I2C_Master_Receive+0x448>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 feb9 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0bf      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2200      	movs	r2, #0
 800410a:	494f      	ldr	r1, [pc, #316]	; (8004248 <HAL_I2C_Master_Receive+0x448>)
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fe8b 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e091      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004190:	e042      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 ff9e 	bl	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e04c      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d118      	bne.n	8004218 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f aec2 	bne.w	8003fa6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	; 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	00010004 	.word	0x00010004

0800424c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004266:	f7ff f891 	bl	800338c <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	f040 80d9 	bne.w	800442c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2319      	movs	r3, #25
 8004280:	2201      	movs	r2, #1
 8004282:	496d      	ldr	r1, [pc, #436]	; (8004438 <HAL_I2C_Mem_Write+0x1ec>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fdcf 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	e0cc      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Mem_Write+0x56>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0c5      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d007      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2221      	movs	r2, #33	; 0x21
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2240      	movs	r2, #64	; 0x40
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a4d      	ldr	r2, [pc, #308]	; (800443c <HAL_I2C_Mem_Write+0x1f0>)
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430a:	88f8      	ldrh	r0, [r7, #6]
 800430c:	893a      	ldrh	r2, [r7, #8]
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fc06 	bl	8004b2c <I2C_RequestMemoryWrite>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d052      	beq.n	80043cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e081      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fe50 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06b      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d11b      	bne.n	80043cc <HAL_I2C_Mem_Write+0x180>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1aa      	bne.n	800432a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fe3c 	bl	8005056 <I2C_WaitOnBTFFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d107      	bne.n	80043fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e016      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	00100002 	.word	0x00100002
 800443c:	ffff0000 	.word	0xffff0000

08004440 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	; 0x30
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7fe ff97 	bl	800338c <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	f040 8208 	bne.w	800487e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2319      	movs	r3, #25
 8004474:	2201      	movs	r2, #1
 8004476:	497b      	ldr	r1, [pc, #492]	; (8004664 <HAL_I2C_Mem_Read+0x224>)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fcd5 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	e1fb      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_I2C_Mem_Read+0x56>
 8004492:	2302      	movs	r3, #2
 8004494:	e1f4      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d007      	beq.n	80044bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2222      	movs	r2, #34	; 0x22
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a5b      	ldr	r2, [pc, #364]	; (8004668 <HAL_I2C_Mem_Read+0x228>)
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044fe:	88f8      	ldrh	r0, [r7, #6]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	8979      	ldrh	r1, [r7, #10]
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fba2 	bl	8004c58 <I2C_RequestMemoryRead>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1b0      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d113      	bne.n	800454e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e184      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	2b01      	cmp	r3, #1
 8004554:	d11b      	bne.n	800458e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e164      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	2b02      	cmp	r3, #2
 8004594:	d11b      	bne.n	80045ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	e144      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e4:	e138      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	f200 80f1 	bhi.w	80047d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d123      	bne.n	8004640 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fd6b 	bl	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e139      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800463e:	e10b      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d14e      	bne.n	80046e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	2200      	movs	r2, #0
 8004650:	4906      	ldr	r1, [pc, #24]	; (800466c <HAL_I2C_Mem_Read+0x22c>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fbe8 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e10e      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
 8004662:	bf00      	nop
 8004664:	00100002 	.word	0x00100002
 8004668:	ffff0000 	.word	0xffff0000
 800466c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e4:	e0b8      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	2200      	movs	r2, #0
 80046ee:	4966      	ldr	r1, [pc, #408]	; (8004888 <HAL_I2C_Mem_Read+0x448>)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fb99 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0bf      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	2200      	movs	r2, #0
 800474a:	494f      	ldr	r1, [pc, #316]	; (8004888 <HAL_I2C_Mem_Read+0x448>)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fb6b 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e091      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d0:	e042      	b.n	8004858 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fc7e 	bl	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e04c      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d118      	bne.n	8004858 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f aec2 	bne.w	80045e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e000      	b.n	8004880 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	; 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	00010004 	.word	0x00010004

0800488c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d006      	beq.n	80048b6 <I2C_MasterRequestWrite+0x2a>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d003      	beq.n	80048b6 <I2C_MasterRequestWrite+0x2a>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e00b      	b.n	80048e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b12      	cmp	r3, #18
 80048ce:	d107      	bne.n	80048e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fa9b 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004906:	d103      	bne.n	8004910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e035      	b.n	8004980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491c:	d108      	bne.n	8004930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	e01b      	b.n	8004968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004930:	897b      	ldrh	r3, [r7, #10]
 8004932:	11db      	asrs	r3, r3, #7
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0306 	and.w	r3, r3, #6
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f063 030f 	orn	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	490e      	ldr	r1, [pc, #56]	; (8004988 <I2C_MasterRequestWrite+0xfc>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fac1 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e010      	b.n	8004980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4907      	ldr	r1, [pc, #28]	; (800498c <I2C_MasterRequestWrite+0x100>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fab1 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	00010008 	.word	0x00010008
 800498c:	00010002 	.word	0x00010002

08004990 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	460b      	mov	r3, r1
 800499e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d006      	beq.n	80049ca <I2C_MasterRequestRead+0x3a>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d003      	beq.n	80049ca <I2C_MasterRequestRead+0x3a>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049c8:	d108      	bne.n	80049dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e00b      	b.n	80049f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	2b11      	cmp	r3, #17
 80049e2:	d107      	bne.n	80049f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fa11 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1a:	d103      	bne.n	8004a24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e079      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a30:	d108      	bne.n	8004a44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a32:	897b      	ldrh	r3, [r7, #10]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]
 8004a42:	e05f      	b.n	8004b04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a44:	897b      	ldrh	r3, [r7, #10]
 8004a46:	11db      	asrs	r3, r3, #7
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 0306 	and.w	r3, r3, #6
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f063 030f 	orn	r3, r3, #15
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4930      	ldr	r1, [pc, #192]	; (8004b24 <I2C_MasterRequestRead+0x194>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa37 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e054      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4929      	ldr	r1, [pc, #164]	; (8004b28 <I2C_MasterRequestRead+0x198>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa27 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e044      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f9af 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00d      	beq.n	8004aec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ade:	d103      	bne.n	8004ae8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e017      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004aec:	897b      	ldrh	r3, [r7, #10]
 8004aee:	11db      	asrs	r3, r3, #7
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0306 	and.w	r3, r3, #6
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f063 030e 	orn	r3, r3, #14
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4907      	ldr	r1, [pc, #28]	; (8004b28 <I2C_MasterRequestRead+0x198>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f9e3 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	00010008 	.word	0x00010008
 8004b28:	00010002 	.word	0x00010002

08004b2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	817b      	strh	r3, [r7, #10]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	813b      	strh	r3, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f960 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d103      	bne.n	8004b86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e05f      	b.n	8004c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	492d      	ldr	r1, [pc, #180]	; (8004c54 <I2C_RequestMemoryWrite+0x128>)
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f998 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e04c      	b.n	8004c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fa02 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d107      	bne.n	8004bee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e02b      	b.n	8004c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf8:	893b      	ldrh	r3, [r7, #8]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	611a      	str	r2, [r3, #16]
 8004c02:	e021      	b.n	8004c48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c04:	893b      	ldrh	r3, [r7, #8]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	6a39      	ldr	r1, [r7, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f9dc 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d107      	bne.n	8004c3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e005      	b.n	8004c4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3e:	893b      	ldrh	r3, [r7, #8]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	00010002 	.word	0x00010002

08004c58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	817b      	strh	r3, [r7, #10]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	813b      	strh	r3, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8c2 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb8:	d103      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0aa      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cc6:	897b      	ldrh	r3, [r7, #10]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	4952      	ldr	r1, [pc, #328]	; (8004e24 <I2C_RequestMemoryRead+0x1cc>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f8fa 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e097      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	6a39      	ldr	r1, [r7, #32]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f964 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d107      	bne.n	8004d2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e076      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d34:	893b      	ldrh	r3, [r7, #8]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	611a      	str	r2, [r3, #16]
 8004d3e:	e021      	b.n	8004d84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d40:	893b      	ldrh	r3, [r7, #8]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	6a39      	ldr	r1, [r7, #32]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f93e 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d107      	bne.n	8004d76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e050      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7a:	893b      	ldrh	r3, [r7, #8]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d86:	6a39      	ldr	r1, [r7, #32]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f923 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00d      	beq.n	8004db0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d107      	bne.n	8004dac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004daa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e035      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f82b 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00d      	beq.n	8004df4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de6:	d103      	bne.n	8004df0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e013      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004df4:	897b      	ldrh	r3, [r7, #10]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	6a3a      	ldr	r2, [r7, #32]
 8004e08:	4906      	ldr	r1, [pc, #24]	; (8004e24 <I2C_RequestMemoryRead+0x1cc>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f863 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	00010002 	.word	0x00010002

08004e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e38:	e025      	b.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d021      	beq.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fe faa3 	bl	800338c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e023      	b.n	8004ece <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10d      	bne.n	8004eac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	e00c      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d0b6      	beq.n	8004e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ee4:	e051      	b.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef4:	d123      	bne.n	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e046      	b.n	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d021      	beq.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fe fa21 	bl	800338c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d116      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e020      	b.n	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10c      	bne.n	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e00b      	b.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d18d      	bne.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe0:	e02d      	b.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8ce 	bl	8005184 <I2C_IsAcknowledgeFailed>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02d      	b.n	800504e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d021      	beq.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7fe f9c7 	bl	800338c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d116      	bne.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e007      	b.n	800504e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	2b80      	cmp	r3, #128	; 0x80
 800504a:	d1ca      	bne.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005062:	e02d      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f88d 	bl	8005184 <I2C_IsAcknowledgeFailed>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e02d      	b.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d021      	beq.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507c:	f7fe f986 	bl	800338c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d116      	bne.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e007      	b.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d1ca      	bne.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050e4:	e042      	b.n	800516c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d119      	bne.n	8005128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0210 	mvn.w	r2, #16
 80050fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e029      	b.n	800517c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005128:	f7fe f930 	bl	800338c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d116      	bne.n	800516c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e007      	b.n	800517c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d1b5      	bne.n	80050e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519a:	d11b      	bne.n	80051d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0204 	orr.w	r2, r3, #4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e4:	b08f      	sub	sp, #60	; 0x3c
 80051e6:	af0a      	add	r7, sp, #40	; 0x28
 80051e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e10f      	b.n	8005414 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f006 f9c4 	bl	800b59c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2203      	movs	r2, #3
 8005218:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fd17 	bl	8007c66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	687e      	ldr	r6, [r7, #4]
 8005240:	466d      	mov	r5, sp
 8005242:	f106 0410 	add.w	r4, r6, #16
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800524c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005252:	e885 0003 	stmia.w	r5, {r0, r1}
 8005256:	1d33      	adds	r3, r6, #4
 8005258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f002 fbee 	bl	8007a3c <USB_CoreInit>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0d0      	b.n	8005414 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f002 fd05 	bl	8007c88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
 8005282:	e04a      	b.n	800531a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	333d      	adds	r3, #61	; 0x3d
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	333c      	adds	r3, #60	; 0x3c
 80052a8:	7bfa      	ldrb	r2, [r7, #15]
 80052aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052ac:	7bfa      	ldrb	r2, [r7, #15]
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	b298      	uxth	r0, r3
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3344      	adds	r3, #68	; 0x44
 80052c0:	4602      	mov	r2, r0
 80052c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	3340      	adds	r3, #64	; 0x40
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052d8:	7bfa      	ldrb	r2, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	3348      	adds	r3, #72	; 0x48
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	334c      	adds	r3, #76	; 0x4c
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005300:	7bfa      	ldrb	r2, [r7, #15]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	3354      	adds	r3, #84	; 0x54
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	3301      	adds	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d3af      	bcc.n	8005284 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e044      	b.n	80053b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800532a:	7bfa      	ldrb	r2, [r7, #15]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005356:	7bfa      	ldrb	r2, [r7, #15]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800536c:	7bfa      	ldrb	r2, [r7, #15]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005382:	7bfa      	ldrb	r2, [r7, #15]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	3301      	adds	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3b5      	bcc.n	800532a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	687e      	ldr	r6, [r7, #4]
 80053c6:	466d      	mov	r5, sp
 80053c8:	f106 0410 	add.w	r4, r6, #16
 80053cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80053dc:	1d33      	adds	r3, r6, #4
 80053de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053e0:	6838      	ldr	r0, [r7, #0]
 80053e2:	f002 fc9d 	bl	8007d20 <USB_DevInit>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e00d      	b.n	8005414 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f003 fdec 	bl	8008fea <USB_DevDisconnect>

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800541c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_PCD_Start+0x1c>
 8005434:	2302      	movs	r3, #2
 8005436:	e020      	b.n	800547a <HAL_PCD_Start+0x5e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	2b01      	cmp	r3, #1
 8005446:	d109      	bne.n	800545c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800544c:	2b01      	cmp	r3, #1
 800544e:	d005      	beq.n	800545c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f002 fbef 	bl	8007c44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f003 fd9c 	bl	8008fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005482:	b590      	push	{r4, r7, lr}
 8005484:	b08d      	sub	sp, #52	; 0x34
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f003 fe5a 	bl	8009152 <USB_GetMode>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 848a 	bne.w	8005dba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f003 fdbe 	bl	800902c <USB_ReadInterrupts>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8480 	beq.w	8005db8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f003 fdab 	bl	800902c <USB_ReadInterrupts>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d107      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f002 0202 	and.w	r2, r2, #2
 80054ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f003 fd99 	bl	800902c <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b10      	cmp	r3, #16
 8005502:	d161      	bne.n	80055c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0210 	bic.w	r2, r2, #16
 8005512:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	3304      	adds	r3, #4
 8005532:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	0c5b      	lsrs	r3, r3, #17
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	2b02      	cmp	r3, #2
 800553e:	d124      	bne.n	800558a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d035      	beq.n	80055b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6a38      	ldr	r0, [r7, #32]
 8005560:	f003 fbd0 	bl	8008d04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005570:	441a      	add	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005582:	441a      	add	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
 8005588:	e016      	b.n	80055b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	0c5b      	lsrs	r3, r3, #17
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	2b06      	cmp	r3, #6
 8005594:	d110      	bne.n	80055b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800559c:	2208      	movs	r2, #8
 800559e:	4619      	mov	r1, r3
 80055a0:	6a38      	ldr	r0, [r7, #32]
 80055a2:	f003 fbaf 	bl	8008d04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	6a1a      	ldr	r2, [r3, #32]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055b2:	441a      	add	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0210 	orr.w	r2, r2, #16
 80055c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f003 fd2d 	bl	800902c <USB_ReadInterrupts>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055dc:	f040 80a7 	bne.w	800572e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f003 fd32 	bl	8009052 <USB_ReadDevAllOutEpInterrupt>
 80055ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80055f0:	e099      	b.n	8005726 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 808e 	beq.w	800571a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f003 fd56 	bl	80090ba <USB_ReadDevOutEPInterrupt>
 800560e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	461a      	mov	r2, r3
 8005628:	2301      	movs	r3, #1
 800562a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800562c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fec2 	bl	80063b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	2308      	movs	r3, #8
 800564e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 ff98 	bl	8006588 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	461a      	mov	r2, r3
 8005670:	2310      	movs	r3, #16
 8005672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d030      	beq.n	80056e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d109      	bne.n	800569e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800569c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	3304      	adds	r3, #4
 80056b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	78db      	ldrb	r3, [r3, #3]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d108      	bne.n	80056ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f006 f863 	bl	800b794 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	461a      	mov	r2, r3
 80056dc:	2302      	movs	r3, #2
 80056de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	2320      	movs	r3, #32
 80056fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005718:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	3301      	adds	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f af62 	bne.w	80055f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f003 fc7a 	bl	800902c <USB_ReadInterrupts>
 8005738:	4603      	mov	r3, r0
 800573a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800573e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005742:	f040 80db 	bne.w	80058fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f003 fc9b 	bl	8009086 <USB_ReadDevAllInEpInterrupt>
 8005750:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005756:	e0cd      	b.n	80058f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80c2 	beq.w	80058e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f003 fcc1 	bl	80090f6 <USB_ReadDevInEPInterrupt>
 8005774:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d057      	beq.n	8005830 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	2201      	movs	r2, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	43db      	mvns	r3, r3
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057a0:	4013      	ands	r3, r2
 80057a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	2301      	movs	r3, #1
 80057b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d132      	bne.n	8005824 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	334c      	adds	r3, #76	; 0x4c
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4403      	add	r3, r0
 80057de:	3348      	adds	r3, #72	; 0x48
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4419      	add	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4403      	add	r3, r0
 80057f2:	334c      	adds	r3, #76	; 0x4c
 80057f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d113      	bne.n	8005824 <HAL_PCD_IRQHandler+0x3a2>
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	3354      	adds	r3, #84	; 0x54
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d108      	bne.n	8005824 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800581c:	461a      	mov	r2, r3
 800581e:	2101      	movs	r1, #1
 8005820:	f003 fcc8 	bl	80091b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	b2db      	uxtb	r3, r3
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f005 ff37 	bl	800b69e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	461a      	mov	r2, r3
 8005848:	2308      	movs	r3, #8
 800584a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	461a      	mov	r2, r3
 8005864:	2310      	movs	r3, #16
 8005866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	461a      	mov	r2, r3
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d023      	beq.n	80058d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800588e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005890:	6a38      	ldr	r0, [r7, #32]
 8005892:	f002 fba9 	bl	8007fe8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	3338      	adds	r3, #56	; 0x38
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4413      	add	r3, r2
 80058a6:	3304      	adds	r3, #4
 80058a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	78db      	ldrb	r3, [r3, #3]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d108      	bne.n	80058c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f005 ff7a 	bl	800b7b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	461a      	mov	r2, r3
 80058d2:	2302      	movs	r3, #2
 80058d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fcdb 	bl	800629e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	3301      	adds	r3, #1
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f47f af2e 	bne.w	8005758 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f003 fb93 	bl	800902c <USB_ReadInterrupts>
 8005906:	4603      	mov	r3, r0
 8005908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800590c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005910:	d122      	bne.n	8005958 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800592c:	2b01      	cmp	r3, #1
 800592e:	d108      	bne.n	8005942 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005938:	2100      	movs	r1, #0
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fec2 	bl	80066c4 <HAL_PCDEx_LPM_Callback>
 8005940:	e002      	b.n	8005948 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f005 ff18 	bl	800b778 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695a      	ldr	r2, [r3, #20]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f003 fb65 	bl	800902c <USB_ReadInterrupts>
 8005962:	4603      	mov	r3, r0
 8005964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596c:	d112      	bne.n	8005994 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f005 fed4 	bl	800b72c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005992:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f003 fb47 	bl	800902c <USB_ReadInterrupts>
 800599e:	4603      	mov	r3, r0
 80059a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a8:	f040 80b7 	bne.w	8005b1a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2110      	movs	r1, #16
 80059c6:	4618      	mov	r0, r3
 80059c8:	f002 fb0e 	bl	8007fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d0:	e046      	b.n	8005a60 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	461a      	mov	r2, r3
 80059e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3b3      	bcc.n	80059d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d016      	beq.n	8005ab4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a96:	f043 030b 	orr.w	r3, r3, #11
 8005a9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aac:	f043 030b 	orr.w	r3, r3, #11
 8005ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ab2:	e015      	b.n	8005ae0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ac6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005aca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ada:	f043 030b 	orr.w	r3, r3, #11
 8005ade:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005af2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b04:	461a      	mov	r2, r3
 8005b06:	f003 fb55 	bl	80091b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f003 fa84 	bl	800902c <USB_ReadInterrupts>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2e:	d124      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f003 fb1a 	bl	800916e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 facf 	bl	80080e2 <USB_GetDevSpeed>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681c      	ldr	r4, [r3, #0]
 8005b50:	f001 f9e8 	bl	8006f24 <HAL_RCC_GetHCLKFreq>
 8005b54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f001 ffce 	bl	8007b00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f005 fdc2 	bl	800b6ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f003 fa54 	bl	800902c <USB_ReadInterrupts>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f005 fd9f 	bl	800b6d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f002 0208 	and.w	r2, r2, #8
 8005ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f003 fa3f 	bl	800902c <USB_ReadInterrupts>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d122      	bne.n	8005bfe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	e014      	b.n	8005bf4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fb27 	bl	800623c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d3e5      	bcc.n	8005bca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f003 fa12 	bl	800902c <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c12:	d13b      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c14:	2301      	movs	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
 8005c18:	e02b      	b.n	8005c72 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	3340      	adds	r3, #64	; 0x40
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d115      	bne.n	8005c6c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da12      	bge.n	8005c6c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	333f      	adds	r3, #63	; 0x3f
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fae8 	bl	800623c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3301      	adds	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3ce      	bcc.n	8005c1a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f003 f9cb 	bl	800902c <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ca0:	d155      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	e045      	b.n	8005d34 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d12e      	bne.n	8005d2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da2b      	bge.n	8005d2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005ce2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d121      	bne.n	8005d2e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	4613      	mov	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d2a:	6053      	str	r3, [r2, #4]
            break;
 8005d2c:	e007      	b.n	8005d3e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	3301      	adds	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3b4      	bcc.n	8005ca8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f003 f96a 	bl	800902c <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d10a      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f005 fd39 	bl	800b7dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f003 f954 	bl	800902c <USB_ReadInterrupts>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d115      	bne.n	8005dba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f005 fd29 	bl	800b7f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	e000      	b.n	8005dba <HAL_PCD_IRQHandler+0x938>
      return;
 8005db8:	bf00      	nop
    }
  }
}
 8005dba:	3734      	adds	r7, #52	; 0x34
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd90      	pop	{r4, r7, pc}

08005dc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_PCD_SetAddress+0x1a>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e013      	b.n	8005e02 <HAL_PCD_SetAddress+0x42>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f003 f8b2 	bl	8008f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	70fb      	strb	r3, [r7, #3]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	803b      	strh	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da0f      	bge.n	8005e50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3338      	adds	r3, #56	; 0x38
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	3304      	adds	r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	705a      	strb	r2, [r3, #1]
 8005e4e:	e00f      	b.n	8005e70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	f003 020f 	and.w	r2, r3, #15
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	3304      	adds	r3, #4
 8005e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e7c:	883a      	ldrh	r2, [r7, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	78ba      	ldrb	r2, [r7, #2]
 8005e86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e9a:	78bb      	ldrb	r3, [r7, #2]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d102      	bne.n	8005ea6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_PCD_EP_Open+0xaa>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e00e      	b.n	8005ed2 <HAL_PCD_EP_Open+0xc8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f002 f932 	bl	800812c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da0f      	bge.n	8005f0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	3338      	adds	r3, #56	; 0x38
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	3304      	adds	r3, #4
 8005f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	705a      	strb	r2, [r3, #1]
 8005f0c:	e00f      	b.n	8005f2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 020f 	and.w	r2, r3, #15
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4413      	add	r3, r2
 8005f24:	3304      	adds	r3, #4
 8005f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_PCD_EP_Close+0x6e>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e00e      	b.n	8005f66 <HAL_PCD_EP_Close+0x8c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68f9      	ldr	r1, [r7, #12]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f002 f970 	bl	800823c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	3304      	adds	r3, #4
 8005f96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2200      	movs	r2, #0
 8005fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6979      	ldr	r1, [r7, #20]
 8005fe2:	f002 fc4f 	bl	8008884 <USB_EP0StartXfer>
 8005fe6:	e008      	b.n	8005ffa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6979      	ldr	r1, [r7, #20]
 8005ff6:	f002 f9fd 	bl	80083f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	460b      	mov	r3, r1
 8006042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	3338      	adds	r3, #56	; 0x38
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	3304      	adds	r3, #4
 800605a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2201      	movs	r2, #1
 8006072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	b2da      	uxtb	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	6979      	ldr	r1, [r7, #20]
 80060a6:	f002 fbed 	bl	8008884 <USB_EP0StartXfer>
 80060aa:	e008      	b.n	80060be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	6979      	ldr	r1, [r7, #20]
 80060ba:	f002 f99b 	bl	80083f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	460b      	mov	r3, r1
 80060d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 020f 	and.w	r2, r3, #15
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d901      	bls.n	80060e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e050      	b.n	8006188 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da0f      	bge.n	800610e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	f003 020f 	and.w	r2, r3, #15
 80060f4:	4613      	mov	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	3338      	adds	r3, #56	; 0x38
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	3304      	adds	r3, #4
 8006104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	705a      	strb	r2, [r3, #1]
 800610c:	e00d      	b.n	800612a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	3304      	adds	r3, #4
 8006122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_PCD_EP_SetStall+0x82>
 8006146:	2302      	movs	r3, #2
 8006148:	e01e      	b.n	8006188 <HAL_PCD_EP_SetStall+0xc0>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	4618      	mov	r0, r3
 800615a:	f002 fe2b 	bl	8008db4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	b2d9      	uxtb	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006178:	461a      	mov	r2, r3
 800617a:	f003 f81b 	bl	80091b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	f003 020f 	and.w	r2, r3, #15
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d901      	bls.n	80061ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e042      	b.n	8006234 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da0f      	bge.n	80061d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 020f 	and.w	r2, r3, #15
 80061bc:	4613      	mov	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	3338      	adds	r3, #56	; 0x38
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	705a      	strb	r2, [r3, #1]
 80061d4:	e00f      	b.n	80061f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	4613      	mov	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	3304      	adds	r3, #4
 80061ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	b2da      	uxtb	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_PCD_EP_ClrStall+0x86>
 8006212:	2302      	movs	r3, #2
 8006214:	e00e      	b.n	8006234 <HAL_PCD_EP_ClrStall+0xa4>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fe33 	bl	8008e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800624c:	2b00      	cmp	r3, #0
 800624e:	da0c      	bge.n	800626a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	3338      	adds	r3, #56	; 0x38
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	3304      	adds	r3, #4
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e00c      	b.n	8006284 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3304      	adds	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68f9      	ldr	r1, [r7, #12]
 800628a:	4618      	mov	r0, r3
 800628c:	f002 fc52 	bl	8008b34 <USB_EPStopXfer>
 8006290:	4603      	mov	r3, r0
 8006292:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006294:	7afb      	ldrb	r3, [r7, #11]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b08a      	sub	sp, #40	; 0x28
 80062a2:	af02      	add	r7, sp, #8
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	3338      	adds	r3, #56	; 0x38
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	3304      	adds	r3, #4
 80062c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a1a      	ldr	r2, [r3, #32]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d901      	bls.n	80062d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e06c      	b.n	80063b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d902      	bls.n	80062f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3303      	adds	r3, #3
 80062f6:	089b      	lsrs	r3, r3, #2
 80062f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062fa:	e02b      	b.n	8006354 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	429a      	cmp	r2, r3
 8006310:	d902      	bls.n	8006318 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3303      	adds	r3, #3
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6919      	ldr	r1, [r3, #16]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	b2da      	uxtb	r2, r3
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006330:	b2db      	uxtb	r3, r3
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4603      	mov	r3, r0
 8006336:	6978      	ldr	r0, [r7, #20]
 8006338:	f002 fca6 	bl	8008c88 <USB_WritePacket>

    ep->xfer_buff  += len;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	441a      	add	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	b29b      	uxth	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d809      	bhi.n	800637e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006372:	429a      	cmp	r2, r3
 8006374:	d203      	bcs.n	800637e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1be      	bne.n	80062fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	429a      	cmp	r2, r3
 8006388:	d811      	bhi.n	80063ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	2201      	movs	r2, #1
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	6939      	ldr	r1, [r7, #16]
 80063a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063aa:	4013      	ands	r3, r2
 80063ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	333c      	adds	r3, #60	; 0x3c
 80063d0:	3304      	adds	r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d17b      	bne.n	80064e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4a61      	ldr	r2, [pc, #388]	; (8006580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	f240 80b9 	bls.w	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80b3 	beq.w	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	461a      	mov	r2, r3
 800641c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006420:	6093      	str	r3, [r2, #8]
 8006422:	e0a7      	b.n	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	2320      	movs	r3, #32
 800643e:	6093      	str	r3, [r2, #8]
 8006440:	e098      	b.n	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 8093 	bne.w	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d90f      	bls.n	8006476 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	6093      	str	r3, [r2, #8]
 8006474:	e07e      	b.n	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	3304      	adds	r3, #4
 800648a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	0159      	lsls	r1, r3, #5
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	440b      	add	r3, r1
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d114      	bne.n	80064d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064c0:	461a      	mov	r2, r3
 80064c2:	2101      	movs	r1, #1
 80064c4:	f002 fe76 	bl	80091b4 <USB_EP0_OutStart>
 80064c8:	e006      	b.n	80064d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f005 f8c2 	bl	800b668 <HAL_PCD_DataOutStageCallback>
 80064e4:	e046      	b.n	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	4a26      	ldr	r2, [pc, #152]	; (8006584 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d124      	bne.n	8006538 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	461a      	mov	r2, r3
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	6093      	str	r3, [r2, #8]
 800650c:	e032      	b.n	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d008      	beq.n	800652a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	461a      	mov	r2, r3
 8006526:	2320      	movs	r3, #32
 8006528:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f005 f899 	bl	800b668 <HAL_PCD_DataOutStageCallback>
 8006536:	e01d      	b.n	8006574 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d114      	bne.n	8006568 <PCD_EP_OutXfrComplete_int+0x1b0>
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d108      	bne.n	8006568 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006560:	461a      	mov	r2, r3
 8006562:	2100      	movs	r1, #0
 8006564:	f002 fe26 	bl	80091b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f005 f87a 	bl	800b668 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	4f54300a 	.word	0x4f54300a
 8006584:	4f54310a 	.word	0x4f54310a

08006588 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	333c      	adds	r3, #60	; 0x3c
 80065a0:	3304      	adds	r3, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <PCD_EP_OutSetupPacket_int+0x88>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d90e      	bls.n	80065dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f005 f831 	bl	800b644 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <PCD_EP_OutSetupPacket_int+0x88>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d90c      	bls.n	8006604 <PCD_EP_OutSetupPacket_int+0x7c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d108      	bne.n	8006604 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065fc:	461a      	mov	r2, r3
 80065fe:	2101      	movs	r1, #1
 8006600:	f002 fdd8 	bl	80091b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	4f54300a 	.word	0x4f54300a

08006614 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
 8006620:	4613      	mov	r3, r2
 8006622:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d107      	bne.n	8006642 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006632:	883b      	ldrh	r3, [r7, #0]
 8006634:	0419      	lsls	r1, r3, #16
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	430a      	orrs	r2, r1
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
 8006640:	e028      	b.n	8006694 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	0c1b      	lsrs	r3, r3, #16
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	4413      	add	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
 8006654:	e00d      	b.n	8006672 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	3340      	adds	r3, #64	; 0x40
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	3301      	adds	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	3b01      	subs	r3, #1
 8006678:	429a      	cmp	r2, r3
 800667a:	d3ec      	bcc.n	8006656 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800667c:	883b      	ldrh	r3, [r7, #0]
 800667e:	0418      	lsls	r0, r3, #16
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	3b01      	subs	r3, #1
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	4302      	orrs	r2, r0
 800668c:	3340      	adds	r3, #64	; 0x40
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	887a      	ldrh	r2, [r7, #2]
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e267      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d075      	beq.n	80067e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066fa:	4b88      	ldr	r3, [pc, #544]	; (800691c <HAL_RCC_OscConfig+0x240>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 030c 	and.w	r3, r3, #12
 8006702:	2b04      	cmp	r3, #4
 8006704:	d00c      	beq.n	8006720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006706:	4b85      	ldr	r3, [pc, #532]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800670e:	2b08      	cmp	r3, #8
 8006710:	d112      	bne.n	8006738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006712:	4b82      	ldr	r3, [pc, #520]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800671a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671e:	d10b      	bne.n	8006738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006720:	4b7e      	ldr	r3, [pc, #504]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05b      	beq.n	80067e4 <HAL_RCC_OscConfig+0x108>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d157      	bne.n	80067e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e242      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d106      	bne.n	8006750 <HAL_RCC_OscConfig+0x74>
 8006742:	4b76      	ldr	r3, [pc, #472]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a75      	ldr	r2, [pc, #468]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e01d      	b.n	800678c <HAL_RCC_OscConfig+0xb0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006758:	d10c      	bne.n	8006774 <HAL_RCC_OscConfig+0x98>
 800675a:	4b70      	ldr	r3, [pc, #448]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a6f      	ldr	r2, [pc, #444]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	4b6d      	ldr	r3, [pc, #436]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a6c      	ldr	r2, [pc, #432]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800676c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e00b      	b.n	800678c <HAL_RCC_OscConfig+0xb0>
 8006774:	4b69      	ldr	r3, [pc, #420]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a68      	ldr	r2, [pc, #416]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800677a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	4b66      	ldr	r3, [pc, #408]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a65      	ldr	r2, [pc, #404]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800678a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d013      	beq.n	80067bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fc fdfa 	bl	800338c <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800679c:	f7fc fdf6 	bl	800338c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b64      	cmp	r3, #100	; 0x64
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e207      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ae:	4b5b      	ldr	r3, [pc, #364]	; (800691c <HAL_RCC_OscConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f0      	beq.n	800679c <HAL_RCC_OscConfig+0xc0>
 80067ba:	e014      	b.n	80067e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067bc:	f7fc fde6 	bl	800338c <HAL_GetTick>
 80067c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c4:	f7fc fde2 	bl	800338c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b64      	cmp	r3, #100	; 0x64
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e1f3      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067d6:	4b51      	ldr	r3, [pc, #324]	; (800691c <HAL_RCC_OscConfig+0x240>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f0      	bne.n	80067c4 <HAL_RCC_OscConfig+0xe8>
 80067e2:	e000      	b.n	80067e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d063      	beq.n	80068ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067f2:	4b4a      	ldr	r3, [pc, #296]	; (800691c <HAL_RCC_OscConfig+0x240>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067fe:	4b47      	ldr	r3, [pc, #284]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006806:	2b08      	cmp	r3, #8
 8006808:	d11c      	bne.n	8006844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800680a:	4b44      	ldr	r3, [pc, #272]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d116      	bne.n	8006844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006816:	4b41      	ldr	r3, [pc, #260]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_RCC_OscConfig+0x152>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d001      	beq.n	800682e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e1c7      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682e:	4b3b      	ldr	r3, [pc, #236]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4937      	ldr	r1, [pc, #220]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800683e:	4313      	orrs	r3, r2
 8006840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006842:	e03a      	b.n	80068ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d020      	beq.n	800688e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800684c:	4b34      	ldr	r3, [pc, #208]	; (8006920 <HAL_RCC_OscConfig+0x244>)
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006852:	f7fc fd9b 	bl	800338c <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800685a:	f7fc fd97 	bl	800338c <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e1a8      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686c:	4b2b      	ldr	r3, [pc, #172]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCC_OscConfig+0x240>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4925      	ldr	r1, [pc, #148]	; (800691c <HAL_RCC_OscConfig+0x240>)
 8006888:	4313      	orrs	r3, r2
 800688a:	600b      	str	r3, [r1, #0]
 800688c:	e015      	b.n	80068ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_RCC_OscConfig+0x244>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006894:	f7fc fd7a 	bl	800338c <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689c:	f7fc fd76 	bl	800338c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e187      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ae:	4b1b      	ldr	r3, [pc, #108]	; (800691c <HAL_RCC_OscConfig+0x240>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d036      	beq.n	8006934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <HAL_RCC_OscConfig+0x248>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fc fd5a 	bl	800338c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068dc:	f7fc fd56 	bl	800338c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e167      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <HAL_RCC_OscConfig+0x240>)
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0x200>
 80068fa:	e01b      	b.n	8006934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_RCC_OscConfig+0x248>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006902:	f7fc fd43 	bl	800338c <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006908:	e00e      	b.n	8006928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800690a:	f7fc fd3f 	bl	800338c <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d907      	bls.n	8006928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e150      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
 800691c:	40023800 	.word	0x40023800
 8006920:	42470000 	.word	0x42470000
 8006924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006928:	4b88      	ldr	r3, [pc, #544]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 800692a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ea      	bne.n	800690a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8097 	beq.w	8006a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006946:	4b81      	ldr	r3, [pc, #516]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10f      	bne.n	8006972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006952:	2300      	movs	r3, #0
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	4b7d      	ldr	r3, [pc, #500]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	4a7c      	ldr	r2, [pc, #496]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006960:	6413      	str	r3, [r2, #64]	; 0x40
 8006962:	4b7a      	ldr	r3, [pc, #488]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696a:	60bb      	str	r3, [r7, #8]
 800696c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006972:	4b77      	ldr	r3, [pc, #476]	; (8006b50 <HAL_RCC_OscConfig+0x474>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d118      	bne.n	80069b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800697e:	4b74      	ldr	r3, [pc, #464]	; (8006b50 <HAL_RCC_OscConfig+0x474>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a73      	ldr	r2, [pc, #460]	; (8006b50 <HAL_RCC_OscConfig+0x474>)
 8006984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800698a:	f7fc fcff 	bl	800338c <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006992:	f7fc fcfb 	bl	800338c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e10c      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a4:	4b6a      	ldr	r3, [pc, #424]	; (8006b50 <HAL_RCC_OscConfig+0x474>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d106      	bne.n	80069c6 <HAL_RCC_OscConfig+0x2ea>
 80069b8:	4b64      	ldr	r3, [pc, #400]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	4a63      	ldr	r2, [pc, #396]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	; 0x70
 80069c4:	e01c      	b.n	8006a00 <HAL_RCC_OscConfig+0x324>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCC_OscConfig+0x30c>
 80069ce:	4b5f      	ldr	r3, [pc, #380]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a5e      	ldr	r2, [pc, #376]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069d4:	f043 0304 	orr.w	r3, r3, #4
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
 80069da:	4b5c      	ldr	r3, [pc, #368]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	4a5b      	ldr	r2, [pc, #364]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6713      	str	r3, [r2, #112]	; 0x70
 80069e6:	e00b      	b.n	8006a00 <HAL_RCC_OscConfig+0x324>
 80069e8:	4b58      	ldr	r3, [pc, #352]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	4a57      	ldr	r2, [pc, #348]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	6713      	str	r3, [r2, #112]	; 0x70
 80069f4:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	4a54      	ldr	r2, [pc, #336]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 80069fa:	f023 0304 	bic.w	r3, r3, #4
 80069fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d015      	beq.n	8006a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a08:	f7fc fcc0 	bl	800338c <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0e:	e00a      	b.n	8006a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a10:	f7fc fcbc 	bl	800338c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e0cb      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a26:	4b49      	ldr	r3, [pc, #292]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ee      	beq.n	8006a10 <HAL_RCC_OscConfig+0x334>
 8006a32:	e014      	b.n	8006a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a34:	f7fc fcaa 	bl	800338c <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a3c:	f7fc fca6 	bl	800338c <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e0b5      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a52:	4b3e      	ldr	r3, [pc, #248]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ee      	bne.n	8006a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a64:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	4a38      	ldr	r2, [pc, #224]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80a1 	beq.w	8006bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a7a:	4b34      	ldr	r3, [pc, #208]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d05c      	beq.n	8006b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d141      	bne.n	8006b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <HAL_RCC_OscConfig+0x478>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a94:	f7fc fc7a 	bl	800338c <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a9c:	f7fc fc76 	bl	800338c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e087      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aae:	4b27      	ldr	r3, [pc, #156]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69da      	ldr	r2, [r3, #28]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	019b      	lsls	r3, r3, #6
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	041b      	lsls	r3, r3, #16
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	061b      	lsls	r3, r3, #24
 8006ade:	491b      	ldr	r1, [pc, #108]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_RCC_OscConfig+0x478>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aea:	f7fc fc4f 	bl	800338c <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af2:	f7fc fc4b 	bl	800338c <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e05c      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b04:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCC_OscConfig+0x416>
 8006b10:	e054      	b.n	8006bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b12:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <HAL_RCC_OscConfig+0x478>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b18:	f7fc fc38 	bl	800338c <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b20:	f7fc fc34 	bl	800338c <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e045      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <HAL_RCC_OscConfig+0x470>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f0      	bne.n	8006b20 <HAL_RCC_OscConfig+0x444>
 8006b3e:	e03d      	b.n	8006bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e038      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	40007000 	.word	0x40007000
 8006b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b58:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <HAL_RCC_OscConfig+0x4ec>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d028      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d121      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d11a      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d111      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d107      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40023800 	.word	0x40023800

08006bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0cc      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be0:	4b68      	ldr	r3, [pc, #416]	; (8006d84 <HAL_RCC_ClockConfig+0x1b8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d90c      	bls.n	8006c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b65      	ldr	r3, [pc, #404]	; (8006d84 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf6:	4b63      	ldr	r3, [pc, #396]	; (8006d84 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0b8      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d020      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c20:	4b59      	ldr	r3, [pc, #356]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4a58      	ldr	r2, [pc, #352]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c38:	4b53      	ldr	r3, [pc, #332]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	4a52      	ldr	r2, [pc, #328]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c44:	4b50      	ldr	r3, [pc, #320]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	494d      	ldr	r1, [pc, #308]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d044      	beq.n	8006cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d107      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c6a:	4b47      	ldr	r3, [pc, #284]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d119      	bne.n	8006caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e07f      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d003      	beq.n	8006c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d107      	bne.n	8006c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c8a:	4b3f      	ldr	r3, [pc, #252]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e06f      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c9a:	4b3b      	ldr	r3, [pc, #236]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e067      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006caa:	4b37      	ldr	r3, [pc, #220]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 0203 	bic.w	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	4934      	ldr	r1, [pc, #208]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cbc:	f7fc fb66 	bl	800338c <HAL_GetTick>
 8006cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc4:	f7fc fb62 	bl	800338c <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e04f      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cda:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 020c 	and.w	r2, r3, #12
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d1eb      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cec:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d20c      	bcs.n	8006d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfa:	4b22      	ldr	r3, [pc, #136]	; (8006d84 <HAL_RCC_ClockConfig+0x1b8>)
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d02:	4b20      	ldr	r3, [pc, #128]	; (8006d84 <HAL_RCC_ClockConfig+0x1b8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d001      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e032      	b.n	8006d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d20:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4916      	ldr	r1, [pc, #88]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d3e:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	490e      	ldr	r1, [pc, #56]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d52:	f000 f821 	bl	8006d98 <HAL_RCC_GetSysClockFreq>
 8006d56:	4602      	mov	r2, r0
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	490a      	ldr	r1, [pc, #40]	; (8006d8c <HAL_RCC_ClockConfig+0x1c0>)
 8006d64:	5ccb      	ldrb	r3, [r1, r3]
 8006d66:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <HAL_RCC_ClockConfig+0x1c8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fc fac6 	bl	8003304 <HAL_InitTick>

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40023c00 	.word	0x40023c00
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	0801071c 	.word	0x0801071c
 8006d90:	20000004 	.word	0x20000004
 8006d94:	20000008 	.word	0x20000008

08006d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d9c:	b090      	sub	sp, #64	; 0x40
 8006d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da8:	2300      	movs	r3, #0
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006db0:	4b59      	ldr	r3, [pc, #356]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d00d      	beq.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	f200 80a1 	bhi.w	8006f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x34>
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d003      	beq.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dca:	e09b      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dcc:	4b53      	ldr	r3, [pc, #332]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8006dce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006dd0:	e09b      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dd2:	4b53      	ldr	r3, [pc, #332]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dd6:	e098      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dd8:	4b4f      	ldr	r3, [pc, #316]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006de2:	4b4d      	ldr	r3, [pc, #308]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d028      	beq.n	8006e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dee:	4b4a      	ldr	r3, [pc, #296]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	099b      	lsrs	r3, r3, #6
 8006df4:	2200      	movs	r2, #0
 8006df6:	623b      	str	r3, [r7, #32]
 8006df8:	627a      	str	r2, [r7, #36]	; 0x24
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e00:	2100      	movs	r1, #0
 8006e02:	4b47      	ldr	r3, [pc, #284]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e04:	fb03 f201 	mul.w	r2, r3, r1
 8006e08:	2300      	movs	r3, #0
 8006e0a:	fb00 f303 	mul.w	r3, r0, r3
 8006e0e:	4413      	add	r3, r2
 8006e10:	4a43      	ldr	r2, [pc, #268]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e12:	fba0 1202 	umull	r1, r2, r0, r2
 8006e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e18:	460a      	mov	r2, r1
 8006e1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1e:	4413      	add	r3, r2
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	2200      	movs	r2, #0
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	61fa      	str	r2, [r7, #28]
 8006e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e32:	f7f9 ff81 	bl	8000d38 <__aeabi_uldivmod>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3e:	e053      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e40:	4b35      	ldr	r3, [pc, #212]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	099b      	lsrs	r3, r3, #6
 8006e46:	2200      	movs	r2, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	617a      	str	r2, [r7, #20]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e52:	f04f 0b00 	mov.w	fp, #0
 8006e56:	4652      	mov	r2, sl
 8006e58:	465b      	mov	r3, fp
 8006e5a:	f04f 0000 	mov.w	r0, #0
 8006e5e:	f04f 0100 	mov.w	r1, #0
 8006e62:	0159      	lsls	r1, r3, #5
 8006e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e68:	0150      	lsls	r0, r2, #5
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8006e72:	eb63 090b 	sbc.w	r9, r3, fp
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8006e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	00eb      	lsls	r3, r5, #3
 8006e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ea0:	00e2      	lsls	r2, r4, #3
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	eb14 030a 	adds.w	r3, r4, sl
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	eb45 030b 	adc.w	r3, r5, fp
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	028b      	lsls	r3, r1, #10
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec8:	4621      	mov	r1, r4
 8006eca:	028a      	lsls	r2, r1, #10
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	60fa      	str	r2, [r7, #12]
 8006ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006edc:	f7f9 ff2c 	bl	8000d38 <__aeabi_uldivmod>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f02:	e002      	b.n	8006f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3740      	adds	r7, #64	; 0x40
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f16:	bf00      	nop
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	00f42400 	.word	0x00f42400
 8006f20:	017d7840 	.word	0x017d7840

08006f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f28:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000004 	.word	0x20000004

08006f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f40:	f7ff fff0 	bl	8006f24 <HAL_RCC_GetHCLKFreq>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0a9b      	lsrs	r3, r3, #10
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	4903      	ldr	r1, [pc, #12]	; (8006f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f52:	5ccb      	ldrb	r3, [r1, r3]
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	0801072c 	.word	0x0801072c

08006f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e07b      	b.n	800706e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d108      	bne.n	8006f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f86:	d009      	beq.n	8006f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	61da      	str	r2, [r3, #28]
 8006f8e:	e005      	b.n	8006f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fb ffca 	bl	8002f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	ea42 0103 	orr.w	r1, r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	f003 0104 	and.w	r1, r3, #4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0210 	and.w	r2, r3, #16
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800705c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b08c      	sub	sp, #48	; 0x30
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007084:	2301      	movs	r3, #1
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_SPI_TransmitReceive+0x26>
 8007098:	2302      	movs	r3, #2
 800709a:	e18a      	b.n	80073b2 <HAL_SPI_TransmitReceive+0x33c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a4:	f7fc f972 	bl	800338c <HAL_GetTick>
 80070a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070ba:	887b      	ldrh	r3, [r7, #2]
 80070bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d00f      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x70>
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070cc:	d107      	bne.n	80070de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <HAL_SPI_TransmitReceive+0x68>
 80070d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d003      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070de:	2302      	movs	r3, #2
 80070e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070e4:	e15b      	b.n	800739e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0x82>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <HAL_SPI_TransmitReceive+0x82>
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070fe:	e14e      	b.n	800739e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b04      	cmp	r3, #4
 800710a:	d003      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2205      	movs	r2, #5
 8007110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	887a      	ldrh	r2, [r7, #2]
 8007124:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	887a      	ldrh	r2, [r7, #2]
 800712a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	887a      	ldrh	r2, [r7, #2]
 8007136:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	887a      	ldrh	r2, [r7, #2]
 800713c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d007      	beq.n	8007168 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007170:	d178      	bne.n	8007264 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x10a>
 800717a:	8b7b      	ldrh	r3, [r7, #26]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d166      	bne.n	800724e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	1c9a      	adds	r2, r3, #2
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a4:	e053      	b.n	800724e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d11b      	bne.n	80071ec <HAL_SPI_TransmitReceive+0x176>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d016      	beq.n	80071ec <HAL_SPI_TransmitReceive+0x176>
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d113      	bne.n	80071ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	881a      	ldrh	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	1c9a      	adds	r2, r3, #2
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d119      	bne.n	800722e <HAL_SPI_TransmitReceive+0x1b8>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d014      	beq.n	800722e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	b292      	uxth	r2, r2
 8007210:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800722a:	2301      	movs	r3, #1
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800722e:	f7fc f8ad 	bl	800338c <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800723a:	429a      	cmp	r2, r3
 800723c:	d807      	bhi.n	800724e <HAL_SPI_TransmitReceive+0x1d8>
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d003      	beq.n	800724e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800724c:	e0a7      	b.n	800739e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1a6      	bne.n	80071a6 <HAL_SPI_TransmitReceive+0x130>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1a1      	bne.n	80071a6 <HAL_SPI_TransmitReceive+0x130>
 8007262:	e07c      	b.n	800735e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x1fc>
 800726c:	8b7b      	ldrh	r3, [r7, #26]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d16b      	bne.n	800734a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	330c      	adds	r3, #12
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007298:	e057      	b.n	800734a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d11c      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x26c>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x26c>
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d114      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	7812      	ldrb	r2, [r2, #0]
 80072c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d119      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x2ae>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d014      	beq.n	8007324 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007320:	2301      	movs	r3, #1
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007324:	f7fc f832 	bl	800338c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007330:	429a      	cmp	r2, r3
 8007332:	d803      	bhi.n	800733c <HAL_SPI_TransmitReceive+0x2c6>
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d102      	bne.n	8007342 <HAL_SPI_TransmitReceive+0x2cc>
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007348:	e029      	b.n	800739e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1a2      	bne.n	800729a <HAL_SPI_TransmitReceive+0x224>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d19d      	bne.n	800729a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800735e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007360:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f8b2 	bl	80074cc <SPI_EndRxTxTransaction>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d006      	beq.n	800737c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800737a:	e010      	b.n	800739e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e000      	b.n	800739e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800739c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3730      	adds	r7, #48	; 0x30
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073cc:	f7fb ffde 	bl	800338c <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4413      	add	r3, r2
 80073da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073dc:	f7fb ffd6 	bl	800338c <HAL_GetTick>
 80073e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073e2:	4b39      	ldr	r3, [pc, #228]	; (80074c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	015b      	lsls	r3, r3, #5
 80073e8:	0d1b      	lsrs	r3, r3, #20
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073f2:	e054      	b.n	800749e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d050      	beq.n	800749e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073fc:	f7fb ffc6 	bl	800338c <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	429a      	cmp	r2, r3
 800740a:	d902      	bls.n	8007412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d13d      	bne.n	800748e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800742a:	d111      	bne.n	8007450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007434:	d004      	beq.n	8007440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743e:	d107      	bne.n	8007450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007458:	d10f      	bne.n	800747a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e017      	b.n	80074be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	3b01      	subs	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4013      	ands	r3, r2
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d19b      	bne.n	80073f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000004 	.word	0x20000004

080074cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074d8:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <SPI_EndRxTxTransaction+0x7c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1b      	ldr	r2, [pc, #108]	; (800754c <SPI_EndRxTxTransaction+0x80>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	0d5b      	lsrs	r3, r3, #21
 80074e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074e8:	fb02 f303 	mul.w	r3, r2, r3
 80074ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f6:	d112      	bne.n	800751e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	2180      	movs	r1, #128	; 0x80
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff ff5a 	bl	80073bc <SPI_WaitFlagStateUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d016      	beq.n	800753c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e00f      	b.n	800753e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	3b01      	subs	r3, #1
 8007528:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007534:	2b80      	cmp	r3, #128	; 0x80
 8007536:	d0f2      	beq.n	800751e <SPI_EndRxTxTransaction+0x52>
 8007538:	e000      	b.n	800753c <SPI_EndRxTxTransaction+0x70>
        break;
 800753a:	bf00      	nop
  }

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000004 	.word	0x20000004
 800754c:	165e9f81 	.word	0x165e9f81

08007550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e041      	b.n	80075e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fb fd32 	bl	8002fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f000 f9c0 	bl	8007914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e044      	b.n	8007692 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x6c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007632:	d013      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x6c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x6c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x6c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <HAL_TIM_Base_Start_IT+0xbc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x6c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d111      	bne.n	8007680 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b06      	cmp	r3, #6
 800766c:	d010      	beq.n	8007690 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0201 	orr.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767e:	e007      	b.n	8007690 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40014000 	.word	0x40014000

080076b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d122      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d11b      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0202 	mvn.w	r2, #2
 80076e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f8ee 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8e0 	bl	80078c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8f1 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b04      	cmp	r3, #4
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0204 	mvn.w	r2, #4
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8c4 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8b6 	bl	80078c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f8c7 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b08      	cmp	r3, #8
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0208 	mvn.w	r2, #8
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2204      	movs	r2, #4
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f89a 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f88c 	bl	80078c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f89d 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0210 	mvn.w	r2, #16
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2208      	movs	r2, #8
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f870 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f862 	bl	80078c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f873 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10e      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d107      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0201 	mvn.w	r2, #1
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fa fd6a 	bl	800230c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d10e      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d107      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800785c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f8e2 	bl	8007a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	d10e      	bne.n	8007890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d107      	bne.n	8007890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f838 	bl	8007900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b20      	cmp	r3, #32
 800789c:	d10e      	bne.n	80078bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d107      	bne.n	80078bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0220 	mvn.w	r2, #32
 80078b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f8ac 	bl	8007a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a34      	ldr	r2, [pc, #208]	; (80079f8 <TIM_Base_SetConfig+0xe4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_Base_SetConfig+0x38>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007932:	d00b      	beq.n	800794c <TIM_Base_SetConfig+0x38>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a31      	ldr	r2, [pc, #196]	; (80079fc <TIM_Base_SetConfig+0xe8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_Base_SetConfig+0x38>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a30      	ldr	r2, [pc, #192]	; (8007a00 <TIM_Base_SetConfig+0xec>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_Base_SetConfig+0x38>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <TIM_Base_SetConfig+0xf0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d108      	bne.n	800795e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a25      	ldr	r2, [pc, #148]	; (80079f8 <TIM_Base_SetConfig+0xe4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d01b      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796c:	d017      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a22      	ldr	r2, [pc, #136]	; (80079fc <TIM_Base_SetConfig+0xe8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d013      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a21      	ldr	r2, [pc, #132]	; (8007a00 <TIM_Base_SetConfig+0xec>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00f      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a20      	ldr	r2, [pc, #128]	; (8007a04 <TIM_Base_SetConfig+0xf0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00b      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a1f      	ldr	r2, [pc, #124]	; (8007a08 <TIM_Base_SetConfig+0xf4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d007      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a1e      	ldr	r2, [pc, #120]	; (8007a0c <TIM_Base_SetConfig+0xf8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d003      	beq.n	800799e <TIM_Base_SetConfig+0x8a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a1d      	ldr	r2, [pc, #116]	; (8007a10 <TIM_Base_SetConfig+0xfc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d108      	bne.n	80079b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <TIM_Base_SetConfig+0xe4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d103      	bne.n	80079e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	615a      	str	r2, [r3, #20]
}
 80079ea:	bf00      	nop
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800

08007a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	f107 001c 	add.w	r0, r7, #28
 8007a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d122      	bne.n	8007a9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d105      	bne.n	8007a8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fbee 	bl	8009270 <USB_CoreReset>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
 8007a98:	e01a      	b.n	8007ad0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fbe2 	bl	8009270 <USB_CoreReset>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ac2:	e005      	b.n	8007ad0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10b      	bne.n	8007aee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f043 0206 	orr.w	r2, r3, #6
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007afa:	b004      	add	sp, #16
 8007afc:	4770      	bx	lr
	...

08007b00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d165      	bne.n	8007be0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a41      	ldr	r2, [pc, #260]	; (8007c1c <USB_SetTurnaroundTime+0x11c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d906      	bls.n	8007b2a <USB_SetTurnaroundTime+0x2a>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a40      	ldr	r2, [pc, #256]	; (8007c20 <USB_SetTurnaroundTime+0x120>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d202      	bcs.n	8007b2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b24:	230f      	movs	r3, #15
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e062      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4a3c      	ldr	r2, [pc, #240]	; (8007c20 <USB_SetTurnaroundTime+0x120>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d306      	bcc.n	8007b40 <USB_SetTurnaroundTime+0x40>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4a3b      	ldr	r2, [pc, #236]	; (8007c24 <USB_SetTurnaroundTime+0x124>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d202      	bcs.n	8007b40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b3a:	230e      	movs	r3, #14
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	e057      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4a38      	ldr	r2, [pc, #224]	; (8007c24 <USB_SetTurnaroundTime+0x124>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d306      	bcc.n	8007b56 <USB_SetTurnaroundTime+0x56>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4a37      	ldr	r2, [pc, #220]	; (8007c28 <USB_SetTurnaroundTime+0x128>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d202      	bcs.n	8007b56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b50:	230d      	movs	r3, #13
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e04c      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4a33      	ldr	r2, [pc, #204]	; (8007c28 <USB_SetTurnaroundTime+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d306      	bcc.n	8007b6c <USB_SetTurnaroundTime+0x6c>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4a32      	ldr	r2, [pc, #200]	; (8007c2c <USB_SetTurnaroundTime+0x12c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d802      	bhi.n	8007b6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b66:	230c      	movs	r3, #12
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	e041      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4a2f      	ldr	r2, [pc, #188]	; (8007c2c <USB_SetTurnaroundTime+0x12c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d906      	bls.n	8007b82 <USB_SetTurnaroundTime+0x82>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4a2e      	ldr	r2, [pc, #184]	; (8007c30 <USB_SetTurnaroundTime+0x130>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d802      	bhi.n	8007b82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b7c:	230b      	movs	r3, #11
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	e036      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	4a2a      	ldr	r2, [pc, #168]	; (8007c30 <USB_SetTurnaroundTime+0x130>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d906      	bls.n	8007b98 <USB_SetTurnaroundTime+0x98>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	4a29      	ldr	r2, [pc, #164]	; (8007c34 <USB_SetTurnaroundTime+0x134>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d802      	bhi.n	8007b98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b92:	230a      	movs	r3, #10
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	e02b      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4a26      	ldr	r2, [pc, #152]	; (8007c34 <USB_SetTurnaroundTime+0x134>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d906      	bls.n	8007bae <USB_SetTurnaroundTime+0xae>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4a25      	ldr	r2, [pc, #148]	; (8007c38 <USB_SetTurnaroundTime+0x138>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d202      	bcs.n	8007bae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ba8:	2309      	movs	r3, #9
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e020      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <USB_SetTurnaroundTime+0x138>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d306      	bcc.n	8007bc4 <USB_SetTurnaroundTime+0xc4>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <USB_SetTurnaroundTime+0x13c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d802      	bhi.n	8007bc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bbe:	2308      	movs	r3, #8
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	e015      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4a1d      	ldr	r2, [pc, #116]	; (8007c3c <USB_SetTurnaroundTime+0x13c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d906      	bls.n	8007bda <USB_SetTurnaroundTime+0xda>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4a1c      	ldr	r2, [pc, #112]	; (8007c40 <USB_SetTurnaroundTime+0x140>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d202      	bcs.n	8007bda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007bd4:	2307      	movs	r3, #7
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	e00a      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007bda:	2306      	movs	r3, #6
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e007      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d102      	bne.n	8007bec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007be6:	2309      	movs	r3, #9
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e001      	b.n	8007bf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007bec:	2309      	movs	r3, #9
 8007bee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	029b      	lsls	r3, r3, #10
 8007c04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	00d8acbf 	.word	0x00d8acbf
 8007c20:	00e4e1c0 	.word	0x00e4e1c0
 8007c24:	00f42400 	.word	0x00f42400
 8007c28:	01067380 	.word	0x01067380
 8007c2c:	011a499f 	.word	0x011a499f
 8007c30:	01312cff 	.word	0x01312cff
 8007c34:	014ca43f 	.word	0x014ca43f
 8007c38:	016e3600 	.word	0x016e3600
 8007c3c:	01a6ab1f 	.word	0x01a6ab1f
 8007c40:	01e84800 	.word	0x01e84800

08007c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f043 0201 	orr.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f023 0201 	bic.w	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d115      	bne.n	8007cd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	f7fb fb74 	bl	80033a4 <HAL_Delay>
      ms++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fa45 	bl	8009152 <USB_GetMode>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d01e      	beq.n	8007d0c <USB_SetCurrentMode+0x84>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b31      	cmp	r3, #49	; 0x31
 8007cd2:	d9f0      	bls.n	8007cb6 <USB_SetCurrentMode+0x2e>
 8007cd4:	e01a      	b.n	8007d0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d115      	bne.n	8007d08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7fb fb5b 	bl	80033a4 <HAL_Delay>
      ms++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fa2c 	bl	8009152 <USB_GetMode>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <USB_SetCurrentMode+0x84>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b31      	cmp	r3, #49	; 0x31
 8007d04:	d9f0      	bls.n	8007ce8 <USB_SetCurrentMode+0x60>
 8007d06:	e001      	b.n	8007d0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e005      	b.n	8007d18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b32      	cmp	r3, #50	; 0x32
 8007d10:	d101      	bne.n	8007d16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d20:	b084      	sub	sp, #16
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
 8007d3e:	e009      	b.n	8007d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3340      	adds	r3, #64	; 0x40
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3301      	adds	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b0e      	cmp	r3, #14
 8007d58:	d9f2      	bls.n	8007d40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11c      	bne.n	8007d9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6e:	f043 0302 	orr.w	r3, r3, #2
 8007d72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
 8007d98:	e00b      	b.n	8007db2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db8:	461a      	mov	r2, r3
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dcc:	461a      	mov	r2, r3
 8007dce:	680b      	ldr	r3, [r1, #0]
 8007dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d10c      	bne.n	8007df2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dde:	2100      	movs	r1, #0
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f965 	bl	80080b0 <USB_SetDevSpeed>
 8007de6:	e008      	b.n	8007dfa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007de8:	2101      	movs	r1, #1
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f960 	bl	80080b0 <USB_SetDevSpeed>
 8007df0:	e003      	b.n	8007dfa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007df2:	2103      	movs	r1, #3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f95b 	bl	80080b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dfa:	2110      	movs	r1, #16
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f8f3 	bl	8007fe8 <USB_FlushTxFifo>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f91f 	bl	8008050 <USB_FlushRxFifo>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e22:	461a      	mov	r2, r3
 8007e24:	2300      	movs	r3, #0
 8007e26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	e043      	b.n	8007ece <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e5c:	d118      	bne.n	8007e90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	461a      	mov	r2, r3
 8007e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	e013      	b.n	8007ea2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e008      	b.n	8007ea2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d3b7      	bcc.n	8007e46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	e043      	b.n	8007f64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef2:	d118      	bne.n	8007f26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10a      	bne.n	8007f10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e013      	b.n	8007f38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	e008      	b.n	8007f38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f32:	461a      	mov	r2, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	461a      	mov	r2, r3
 8007f46:	2300      	movs	r3, #0
 8007f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	461a      	mov	r2, r3
 8007f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	3301      	adds	r3, #1
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3b7      	bcc.n	8007edc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f043 0210 	orr.w	r2, r3, #16
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <USB_DevInit+0x2c4>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	f043 0208 	orr.w	r2, r3, #8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d107      	bne.n	8007fd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fcc:	f043 0304 	orr.w	r3, r3, #4
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fe0:	b004      	add	sp, #16
 8007fe2:	4770      	bx	lr
 8007fe4:	803c3800 	.word	0x803c3800

08007fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <USB_FlushTxFifo+0x64>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d901      	bls.n	8008008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e01b      	b.n	8008040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	daf2      	bge.n	8007ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	019b      	lsls	r3, r3, #6
 8008018:	f043 0220 	orr.w	r2, r3, #32
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4a08      	ldr	r2, [pc, #32]	; (800804c <USB_FlushTxFifo+0x64>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d901      	bls.n	8008032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e006      	b.n	8008040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b20      	cmp	r3, #32
 800803c:	d0f0      	beq.n	8008020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	00030d40 	.word	0x00030d40

08008050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4a11      	ldr	r2, [pc, #68]	; (80080ac <USB_FlushRxFifo+0x5c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d901      	bls.n	800806e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e018      	b.n	80080a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	daf2      	bge.n	800805c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2210      	movs	r2, #16
 800807e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a08      	ldr	r2, [pc, #32]	; (80080ac <USB_FlushRxFifo+0x5c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d901      	bls.n	8008092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e006      	b.n	80080a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b10      	cmp	r3, #16
 800809c:	d0f0      	beq.n	8008080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	00030d40 	.word	0x00030d40

080080b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	68f9      	ldr	r1, [r7, #12]
 80080cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080d0:	4313      	orrs	r3, r2
 80080d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0306 	and.w	r3, r3, #6
 80080fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d102      	bne.n	8008108 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]
 8008106:	e00a      	b.n	800811e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d002      	beq.n	8008114 <USB_GetDevSpeed+0x32>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b06      	cmp	r3, #6
 8008112:	d102      	bne.n	800811a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008114:	2302      	movs	r3, #2
 8008116:	75fb      	strb	r3, [r7, #23]
 8008118:	e001      	b.n	800811e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800811a:	230f      	movs	r3, #15
 800811c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008120:	4618      	mov	r0, r3
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d13a      	bne.n	80081be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	2101      	movs	r1, #1
 800815a:	fa01 f303 	lsl.w	r3, r1, r3
 800815e:	b29b      	uxth	r3, r3
 8008160:	68f9      	ldr	r1, [r7, #12]
 8008162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008166:	4313      	orrs	r3, r2
 8008168:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d155      	bne.n	800822c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	791b      	ldrb	r3, [r3, #4]
 800819a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800819c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	059b      	lsls	r3, r3, #22
 80081a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081a4:	4313      	orrs	r3, r2
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	e036      	b.n	800822c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c4:	69da      	ldr	r2, [r3, #28]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	2101      	movs	r1, #1
 80081d0:	fa01 f303 	lsl.w	r3, r1, r3
 80081d4:	041b      	lsls	r3, r3, #16
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081dc:	4313      	orrs	r3, r2
 80081de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d11a      	bne.n	800822c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	791b      	ldrb	r3, [r3, #4]
 8008210:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008212:	430b      	orrs	r3, r1
 8008214:	4313      	orrs	r3, r2
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d161      	bne.n	800831c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800826a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800826e:	d11f      	bne.n	80082b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800828e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	2101      	movs	r1, #1
 80082c2:	fa01 f303 	lsl.w	r3, r1, r3
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d0:	4013      	ands	r3, r2
 80082d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f4:	4013      	ands	r3, r2
 80082f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	0159      	lsls	r1, r3, #5
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	440b      	add	r3, r1
 800830e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008312:	4619      	mov	r1, r3
 8008314:	4b35      	ldr	r3, [pc, #212]	; (80083ec <USB_DeactivateEndpoint+0x1b0>)
 8008316:	4013      	ands	r3, r2
 8008318:	600b      	str	r3, [r1, #0]
 800831a:	e060      	b.n	80083de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800832e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008332:	d11f      	bne.n	8008374 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008352:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	440a      	add	r2, r1
 800836a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	041b      	lsls	r3, r3, #16
 800838c:	43db      	mvns	r3, r3
 800838e:	68f9      	ldr	r1, [r7, #12]
 8008390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008394:	4013      	ands	r3, r2
 8008396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	69da      	ldr	r2, [r3, #28]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	2101      	movs	r1, #1
 80083aa:	fa01 f303 	lsl.w	r3, r1, r3
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	43db      	mvns	r3, r3
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b8:	4013      	ands	r3, r2
 80083ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	0159      	lsls	r1, r3, #5
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	440b      	add	r3, r1
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	4619      	mov	r1, r3
 80083d8:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <USB_DeactivateEndpoint+0x1b4>)
 80083da:	4013      	ands	r3, r2
 80083dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	ec337800 	.word	0xec337800
 80083f0:	eff37800 	.word	0xeff37800

080083f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	; 0x28
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	f040 815c 	bne.w	80086ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d132      	bne.n	8008484 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	440a      	add	r2, r1
 8008434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800843c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800845c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	69fa      	ldr	r2, [r7, #28]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847c:	0cdb      	lsrs	r3, r3, #19
 800847e:	04db      	lsls	r3, r3, #19
 8008480:	6113      	str	r3, [r2, #16]
 8008482:	e074      	b.n	800856e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849e:	0cdb      	lsrs	r3, r3, #19
 80084a0:	04db      	lsls	r3, r3, #19
 80084a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6999      	ldr	r1, [r3, #24]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	440b      	add	r3, r1
 80084e0:	1e59      	subs	r1, r3, #1
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80084ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084ec:	4b9d      	ldr	r3, [pc, #628]	; (8008764 <USB_EPStartXfer+0x370>)
 80084ee:	400b      	ands	r3, r1
 80084f0:	69b9      	ldr	r1, [r7, #24]
 80084f2:	0148      	lsls	r0, r1, #5
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	4401      	add	r1, r0
 80084f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084fc:	4313      	orrs	r3, r2
 80084fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008516:	69b9      	ldr	r1, [r7, #24]
 8008518:	0148      	lsls	r0, r1, #5
 800851a:	69f9      	ldr	r1, [r7, #28]
 800851c:	4401      	add	r1, r0
 800851e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008522:	4313      	orrs	r3, r2
 8008524:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	791b      	ldrb	r3, [r3, #4]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d11f      	bne.n	800856e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800854c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	440a      	add	r2, r1
 8008564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800856c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d14b      	bne.n	800860c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d009      	beq.n	8008590 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	461a      	mov	r2, r3
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	791b      	ldrb	r3, [r3, #4]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d128      	bne.n	80085ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d110      	bne.n	80085ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	e00f      	b.n	80085ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	e133      	b.n	8008874 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800862a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d015      	beq.n	8008660 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 811b 	beq.w	8008874 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	2101      	movs	r1, #1
 8008650:	fa01 f303 	lsl.w	r3, r1, r3
 8008654:	69f9      	ldr	r1, [r7, #28]
 8008656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800865a:	4313      	orrs	r3, r2
 800865c:	634b      	str	r3, [r1, #52]	; 0x34
 800865e:	e109      	b.n	8008874 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866c:	2b00      	cmp	r3, #0
 800866e:	d110      	bne.n	8008692 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	440a      	add	r2, r1
 8008686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	e00f      	b.n	80086b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6919      	ldr	r1, [r3, #16]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	781a      	ldrb	r2, [r3, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	b298      	uxth	r0, r3
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4603      	mov	r3, r0
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fade 	bl	8008c88 <USB_WritePacket>
 80086cc:	e0d2      	b.n	8008874 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e8:	0cdb      	lsrs	r3, r3, #19
 80086ea:	04db      	lsls	r3, r3, #19
 80086ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	440a      	add	r2, r1
 8008704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800870c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d126      	bne.n	8008768 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008730:	69b9      	ldr	r1, [r7, #24]
 8008732:	0148      	lsls	r0, r1, #5
 8008734:	69f9      	ldr	r1, [r7, #28]
 8008736:	4401      	add	r1, r0
 8008738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800873c:	4313      	orrs	r3, r2
 800873e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	440a      	add	r2, r1
 8008756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800875a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800875e:	6113      	str	r3, [r2, #16]
 8008760:	e03a      	b.n	80087d8 <USB_EPStartXfer+0x3e4>
 8008762:	bf00      	nop
 8008764:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	699a      	ldr	r2, [r3, #24]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	4413      	add	r3, r2
 8008772:	1e5a      	subs	r2, r3, #1
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	fbb2 f3f3 	udiv	r3, r2, r3
 800877c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	8afa      	ldrh	r2, [r7, #22]
 8008784:	fb03 f202 	mul.w	r2, r3, r2
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	8afb      	ldrh	r3, [r7, #22]
 800879c:	04d9      	lsls	r1, r3, #19
 800879e:	4b38      	ldr	r3, [pc, #224]	; (8008880 <USB_EPStartXfer+0x48c>)
 80087a0:	400b      	ands	r3, r1
 80087a2:	69b9      	ldr	r1, [r7, #24]
 80087a4:	0148      	lsls	r0, r1, #5
 80087a6:	69f9      	ldr	r1, [r7, #28]
 80087a8:	4401      	add	r1, r0
 80087aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087ae:	4313      	orrs	r3, r2
 80087b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087c8:	69b9      	ldr	r1, [r7, #24]
 80087ca:	0148      	lsls	r0, r1, #5
 80087cc:	69f9      	ldr	r1, [r7, #28]
 80087ce:	4401      	add	r1, r0
 80087d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087d4:	4313      	orrs	r3, r2
 80087d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d10d      	bne.n	80087fa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6919      	ldr	r1, [r3, #16]
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f6:	460a      	mov	r2, r1
 80087f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	791b      	ldrb	r3, [r3, #4]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d128      	bne.n	8008854 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d110      	bne.n	8008834 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	0151      	lsls	r1, r2, #5
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	440a      	add	r2, r1
 8008828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800882c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e00f      	b.n	8008854 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	440a      	add	r2, r1
 800884a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800884e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008852:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	440a      	add	r2, r1
 800886a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3720      	adds	r7, #32
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	1ff80000 	.word	0x1ff80000

08008884 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4613      	mov	r3, r2
 8008890:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	f040 80ce 	bne.w	8008a42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d132      	bne.n	8008914 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	0151      	lsls	r1, r2, #5
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	440a      	add	r2, r1
 80088e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890c:	0cdb      	lsrs	r3, r3, #19
 800890e:	04db      	lsls	r3, r3, #19
 8008910:	6113      	str	r3, [r2, #16]
 8008912:	e04e      	b.n	80089b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800892e:	0cdb      	lsrs	r3, r3, #19
 8008930:	04db      	lsls	r3, r3, #19
 8008932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800894e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008956:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d903      	bls.n	800896c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800898a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	691a      	ldr	r2, [r3, #16]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a2:	6939      	ldr	r1, [r7, #16]
 80089a4:	0148      	lsls	r0, r1, #5
 80089a6:	6979      	ldr	r1, [r7, #20]
 80089a8:	4401      	add	r1, r0
 80089aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089ae:	4313      	orrs	r3, r2
 80089b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d11e      	bne.n	80089f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089cc:	461a      	mov	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	e097      	b.n	8008b26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	0151      	lsls	r1, r2, #5
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	440a      	add	r2, r1
 8008a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 8083 	beq.w	8008b26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	2101      	movs	r1, #1
 8008a32:	fa01 f303 	lsl.w	r3, r1, r3
 8008a36:	6979      	ldr	r1, [r7, #20]
 8008a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	634b      	str	r3, [r1, #52]	; 0x34
 8008a40:	e071      	b.n	8008b26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a5c:	0cdb      	lsrs	r3, r3, #19
 8008a5e:	04db      	lsls	r3, r3, #19
 8008a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ad4:	6939      	ldr	r1, [r7, #16]
 8008ad6:	0148      	lsls	r0, r1, #5
 8008ad8:	6979      	ldr	r1, [r7, #20]
 8008ada:	4401      	add	r1, r0
 8008adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d10d      	bne.n	8008b06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6919      	ldr	r1, [r3, #16]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b02:	460a      	mov	r2, r1
 8008b04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d14a      	bne.n	8008be8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b6a:	f040 8086 	bne.w	8008c7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d902      	bls.n	8008bcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8008bca:	e056      	b.n	8008c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be4:	d0e7      	beq.n	8008bb6 <USB_EPStopXfer+0x82>
 8008be6:	e048      	b.n	8008c7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c00:	d13b      	bne.n	8008c7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	7812      	ldrb	r2, [r2, #0]
 8008c16:	0151      	lsls	r1, r2, #5
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	440a      	add	r2, r1
 8008c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	7812      	ldrb	r2, [r2, #0]
 8008c3a:	0151      	lsls	r1, r2, #5
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	440a      	add	r2, r1
 8008c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d902      	bls.n	8008c60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c5e:	e00c      	b.n	8008c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c78:	d0e7      	beq.n	8008c4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b089      	sub	sp, #36	; 0x24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4611      	mov	r1, r2
 8008c94:	461a      	mov	r2, r3
 8008c96:	460b      	mov	r3, r1
 8008c98:	71fb      	strb	r3, [r7, #7]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d123      	bne.n	8008cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cae:	88bb      	ldrh	r3, [r7, #4]
 8008cb0:	3303      	adds	r3, #3
 8008cb2:	089b      	lsrs	r3, r3, #2
 8008cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	e018      	b.n	8008cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	031a      	lsls	r2, r3, #12
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc8:	461a      	mov	r2, r3
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	3301      	adds	r3, #1
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d3e2      	bcc.n	8008cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3724      	adds	r7, #36	; 0x24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b08b      	sub	sp, #44	; 0x2c
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	089b      	lsrs	r3, r3, #2
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d22:	88fb      	ldrh	r3, [r7, #6]
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	623b      	str	r3, [r7, #32]
 8008d2e:	e014      	b.n	8008d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	3301      	adds	r3, #1
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	3301      	adds	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	3301      	adds	r3, #1
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	3301      	adds	r3, #1
 8008d58:	623b      	str	r3, [r7, #32]
 8008d5a:	6a3a      	ldr	r2, [r7, #32]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d3e6      	bcc.n	8008d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d62:	8bfb      	ldrh	r3, [r7, #30]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01e      	beq.n	8008da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	461a      	mov	r2, r3
 8008d74:	f107 0310 	add.w	r3, r7, #16
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	3301      	adds	r3, #1
 8008d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	3301      	adds	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d9a:	8bfb      	ldrh	r3, [r7, #30]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008da0:	8bfb      	ldrh	r3, [r7, #30]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1ea      	bne.n	8008d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	372c      	adds	r7, #44	; 0x2c
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d12c      	bne.n	8008e2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	db12      	blt.n	8008e08 <USB_EPSetStall+0x54>
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00f      	beq.n	8008e08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	0151      	lsls	r1, r2, #5
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	440a      	add	r2, r1
 8008e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	e02b      	b.n	8008e82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	db12      	blt.n	8008e62 <USB_EPSetStall+0xae>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00f      	beq.n	8008e62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	0151      	lsls	r1, r2, #5
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	440a      	add	r2, r1
 8008e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	0151      	lsls	r1, r2, #5
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	440a      	add	r2, r1
 8008e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d128      	bne.n	8008efe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	791b      	ldrb	r3, [r3, #4]
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d003      	beq.n	8008edc <USB_EPClearStall+0x4c>
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	791b      	ldrb	r3, [r3, #4]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d138      	bne.n	8008f4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e027      	b.n	8008f4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	791b      	ldrb	r3, [r3, #4]
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d003      	beq.n	8008f2e <USB_EPClearStall+0x9e>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	791b      	ldrb	r3, [r3, #4]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d10f      	bne.n	8008f4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f90:	68f9      	ldr	r1, [r7, #12]
 8008f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f96:	4313      	orrs	r3, r2
 8008f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fd6:	f023 0302 	bic.w	r3, r3, #2
 8008fda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009004:	f023 0303 	bic.w	r3, r3, #3
 8009008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009018:	f043 0302 	orr.w	r3, r3, #2
 800901c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4013      	ands	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009044:	68fb      	ldr	r3, [r7, #12]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	4013      	ands	r3, r2
 8009074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	0c1b      	lsrs	r3, r3, #16
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4013      	ands	r3, r2
 80090a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	b29b      	uxth	r3, r3
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	460b      	mov	r3, r1
 80090c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4013      	ands	r3, r2
 80090e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090e8:	68bb      	ldr	r3, [r7, #8]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009118:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	fa22 f303 	lsr.w	r3, r2, r3
 8009126:	01db      	lsls	r3, r3, #7
 8009128:	b2db      	uxtb	r3, r3
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	4313      	orrs	r3, r2
 800912e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4013      	ands	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009144:	68bb      	ldr	r3, [r7, #8]
}
 8009146:	4618      	mov	r0, r3
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	f003 0301 	and.w	r3, r3, #1
}
 8009162:	4618      	mov	r0, r3
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800916e:	b480      	push	{r7}
 8009170:	b085      	sub	sp, #20
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009188:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800918c:	f023 0307 	bic.w	r3, r3, #7
 8009190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	460b      	mov	r3, r1
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	333c      	adds	r3, #60	; 0x3c
 80091ca:	3304      	adds	r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4a26      	ldr	r2, [pc, #152]	; (800926c <USB_EP0_OutStart+0xb8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d90a      	bls.n	80091ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e8:	d101      	bne.n	80091ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e037      	b.n	800925e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	461a      	mov	r2, r3
 80091f6:	2300      	movs	r3, #0
 80091f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800920c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800921c:	f043 0318 	orr.w	r3, r3, #24
 8009220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009230:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009234:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009236:	7afb      	ldrb	r3, [r7, #11]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d10f      	bne.n	800925c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	461a      	mov	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009256:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800925a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	4f54300a 	.word	0x4f54300a

08009270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <USB_CoreReset+0x64>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d901      	bls.n	800928e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e01b      	b.n	80092c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	daf2      	bge.n	800927c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f043 0201 	orr.w	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a09      	ldr	r2, [pc, #36]	; (80092d4 <USB_CoreReset+0x64>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d901      	bls.n	80092b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e006      	b.n	80092c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d0f0      	beq.n	80092a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	00030d40 	.word	0x00030d40

080092d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80092e8:	f002 fc1e 	bl	800bb28 <USBD_static_malloc>
 80092ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	32b0      	adds	r2, #176	; 0xb0
 80092fe:	2100      	movs	r1, #0
 8009300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009304:	2302      	movs	r3, #2
 8009306:	e0d4      	b.n	80094b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009308:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800930c:	2100      	movs	r1, #0
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f002 fc78 	bl	800bc04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	32b0      	adds	r2, #176	; 0xb0
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32b0      	adds	r2, #176	; 0xb0
 800932e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7c1b      	ldrb	r3, [r3, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d138      	bne.n	80093b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009340:	4b5e      	ldr	r3, [pc, #376]	; (80094bc <USBD_CDC_Init+0x1e4>)
 8009342:	7819      	ldrb	r1, [r3, #0]
 8009344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009348:	2202      	movs	r2, #2
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f002 fac9 	bl	800b8e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009350:	4b5a      	ldr	r3, [pc, #360]	; (80094bc <USBD_CDC_Init+0x1e4>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	3324      	adds	r3, #36	; 0x24
 8009366:	2201      	movs	r2, #1
 8009368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800936a:	4b55      	ldr	r3, [pc, #340]	; (80094c0 <USBD_CDC_Init+0x1e8>)
 800936c:	7819      	ldrb	r1, [r3, #0]
 800936e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009372:	2202      	movs	r2, #2
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f002 fab4 	bl	800b8e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800937a:	4b51      	ldr	r3, [pc, #324]	; (80094c0 <USBD_CDC_Init+0x1e8>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f003 020f 	and.w	r2, r3, #15
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009392:	2201      	movs	r2, #1
 8009394:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009396:	4b4b      	ldr	r3, [pc, #300]	; (80094c4 <USBD_CDC_Init+0x1ec>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 020f 	and.w	r2, r3, #15
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	3326      	adds	r3, #38	; 0x26
 80093ac:	2210      	movs	r2, #16
 80093ae:	801a      	strh	r2, [r3, #0]
 80093b0:	e035      	b.n	800941e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093b2:	4b42      	ldr	r3, [pc, #264]	; (80094bc <USBD_CDC_Init+0x1e4>)
 80093b4:	7819      	ldrb	r1, [r3, #0]
 80093b6:	2340      	movs	r3, #64	; 0x40
 80093b8:	2202      	movs	r2, #2
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f002 fa91 	bl	800b8e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093c0:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <USBD_CDC_Init+0x1e4>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	f003 020f 	and.w	r2, r3, #15
 80093c8:	6879      	ldr	r1, [r7, #4]
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	440b      	add	r3, r1
 80093d4:	3324      	adds	r3, #36	; 0x24
 80093d6:	2201      	movs	r2, #1
 80093d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093da:	4b39      	ldr	r3, [pc, #228]	; (80094c0 <USBD_CDC_Init+0x1e8>)
 80093dc:	7819      	ldrb	r1, [r3, #0]
 80093de:	2340      	movs	r3, #64	; 0x40
 80093e0:	2202      	movs	r2, #2
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 fa7d 	bl	800b8e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093e8:	4b35      	ldr	r3, [pc, #212]	; (80094c0 <USBD_CDC_Init+0x1e8>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009400:	2201      	movs	r2, #1
 8009402:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009404:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <USBD_CDC_Init+0x1ec>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 020f 	and.w	r2, r3, #15
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	3326      	adds	r3, #38	; 0x26
 800941a:	2210      	movs	r2, #16
 800941c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800941e:	4b29      	ldr	r3, [pc, #164]	; (80094c4 <USBD_CDC_Init+0x1ec>)
 8009420:	7819      	ldrb	r1, [r3, #0]
 8009422:	2308      	movs	r3, #8
 8009424:	2203      	movs	r2, #3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f002 fa5b 	bl	800b8e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800942c:	4b25      	ldr	r3, [pc, #148]	; (80094c4 <USBD_CDC_Init+0x1ec>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	2201      	movs	r2, #1
 8009444:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	33b0      	adds	r3, #176	; 0xb0
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800947c:	2302      	movs	r3, #2
 800947e:	e018      	b.n	80094b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7c1b      	ldrb	r3, [r3, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <USBD_CDC_Init+0x1e8>)
 800948a:	7819      	ldrb	r1, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 fb12 	bl	800bac0 <USBD_LL_PrepareReceive>
 800949c:	e008      	b.n	80094b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800949e:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <USBD_CDC_Init+0x1e8>)
 80094a0:	7819      	ldrb	r1, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094a8:	2340      	movs	r3, #64	; 0x40
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f002 fb08 	bl	800bac0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000097 	.word	0x20000097
 80094c0:	20000098 	.word	0x20000098
 80094c4:	20000099 	.word	0x20000099

080094c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <USBD_CDC_DeInit+0xf8>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f002 fa27 	bl	800b92e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80094e0:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <USBD_CDC_DeInit+0xf8>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f003 020f 	and.w	r2, r3, #15
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	3324      	adds	r3, #36	; 0x24
 80094f6:	2200      	movs	r2, #0
 80094f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80094fa:	4b32      	ldr	r3, [pc, #200]	; (80095c4 <USBD_CDC_DeInit+0xfc>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f002 fa14 	bl	800b92e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009506:	4b2f      	ldr	r3, [pc, #188]	; (80095c4 <USBD_CDC_DeInit+0xfc>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f003 020f 	and.w	r2, r3, #15
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800951e:	2200      	movs	r2, #0
 8009520:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009522:	4b29      	ldr	r3, [pc, #164]	; (80095c8 <USBD_CDC_DeInit+0x100>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f002 fa00 	bl	800b92e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800952e:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <USBD_CDC_DeInit+0x100>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f003 020f 	and.w	r2, r3, #15
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	2200      	movs	r2, #0
 8009546:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009548:	4b1f      	ldr	r3, [pc, #124]	; (80095c8 <USBD_CDC_DeInit+0x100>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 020f 	and.w	r2, r3, #15
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	440b      	add	r3, r1
 800955c:	3326      	adds	r3, #38	; 0x26
 800955e:	2200      	movs	r2, #0
 8009560:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	32b0      	adds	r2, #176	; 0xb0
 800956c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d01f      	beq.n	80095b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	33b0      	adds	r3, #176	; 0xb0
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	32b0      	adds	r2, #176	; 0xb0
 8009592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009596:	4618      	mov	r0, r3
 8009598:	f002 fad4 	bl	800bb44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	32b0      	adds	r2, #176	; 0xb0
 80095a6:	2100      	movs	r1, #0
 80095a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000097 	.word	0x20000097
 80095c4:	20000098 	.word	0x20000098
 80095c8:	20000099 	.word	0x20000099

080095cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	32b0      	adds	r2, #176	; 0xb0
 80095e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e0bf      	b.n	800977c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009604:	2b00      	cmp	r3, #0
 8009606:	d050      	beq.n	80096aa <USBD_CDC_Setup+0xde>
 8009608:	2b20      	cmp	r3, #32
 800960a:	f040 80af 	bne.w	800976c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d03a      	beq.n	800968c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b25b      	sxtb	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	da1b      	bge.n	8009658 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	33b0      	adds	r3, #176	; 0xb0
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009636:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	88d2      	ldrh	r2, [r2, #6]
 800963c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	88db      	ldrh	r3, [r3, #6]
 8009642:	2b07      	cmp	r3, #7
 8009644:	bf28      	it	cs
 8009646:	2307      	movcs	r3, #7
 8009648:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	89fa      	ldrh	r2, [r7, #14]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 fd43 	bl	800b0dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009656:	e090      	b.n	800977a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	785a      	ldrb	r2, [r3, #1]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	88db      	ldrh	r3, [r3, #6]
 8009666:	2b3f      	cmp	r3, #63	; 0x3f
 8009668:	d803      	bhi.n	8009672 <USBD_CDC_Setup+0xa6>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	88db      	ldrh	r3, [r3, #6]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	e000      	b.n	8009674 <USBD_CDC_Setup+0xa8>
 8009672:	2240      	movs	r2, #64	; 0x40
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800967a:	6939      	ldr	r1, [r7, #16]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009682:	461a      	mov	r2, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 fd55 	bl	800b134 <USBD_CtlPrepareRx>
      break;
 800968a:	e076      	b.n	800977a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	33b0      	adds	r3, #176	; 0xb0
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	7850      	ldrb	r0, [r2, #1]
 80096a2:	2200      	movs	r2, #0
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	4798      	blx	r3
      break;
 80096a8:	e067      	b.n	800977a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b0b      	cmp	r3, #11
 80096b0:	d851      	bhi.n	8009756 <USBD_CDC_Setup+0x18a>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <USBD_CDC_Setup+0xec>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	080096e9 	.word	0x080096e9
 80096bc:	08009765 	.word	0x08009765
 80096c0:	08009757 	.word	0x08009757
 80096c4:	08009757 	.word	0x08009757
 80096c8:	08009757 	.word	0x08009757
 80096cc:	08009757 	.word	0x08009757
 80096d0:	08009757 	.word	0x08009757
 80096d4:	08009757 	.word	0x08009757
 80096d8:	08009757 	.word	0x08009757
 80096dc:	08009757 	.word	0x08009757
 80096e0:	08009713 	.word	0x08009713
 80096e4:	0800973d 	.word	0x0800973d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d107      	bne.n	8009704 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80096f4:	f107 030a 	add.w	r3, r7, #10
 80096f8:	2202      	movs	r2, #2
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 fced 	bl	800b0dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009702:	e032      	b.n	800976a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fc77 	bl	800affa <USBD_CtlError>
            ret = USBD_FAIL;
 800970c:	2303      	movs	r3, #3
 800970e:	75fb      	strb	r3, [r7, #23]
          break;
 8009710:	e02b      	b.n	800976a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b03      	cmp	r3, #3
 800971c:	d107      	bne.n	800972e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800971e:	f107 030d 	add.w	r3, r7, #13
 8009722:	2201      	movs	r2, #1
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fcd8 	bl	800b0dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800972c:	e01d      	b.n	800976a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fc62 	bl	800affa <USBD_CtlError>
            ret = USBD_FAIL;
 8009736:	2303      	movs	r3, #3
 8009738:	75fb      	strb	r3, [r7, #23]
          break;
 800973a:	e016      	b.n	800976a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b03      	cmp	r3, #3
 8009746:	d00f      	beq.n	8009768 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fc55 	bl	800affa <USBD_CtlError>
            ret = USBD_FAIL;
 8009750:	2303      	movs	r3, #3
 8009752:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009754:	e008      	b.n	8009768 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 fc4e 	bl	800affa <USBD_CtlError>
          ret = USBD_FAIL;
 800975e:	2303      	movs	r3, #3
 8009760:	75fb      	strb	r3, [r7, #23]
          break;
 8009762:	e002      	b.n	800976a <USBD_CDC_Setup+0x19e>
          break;
 8009764:	bf00      	nop
 8009766:	e008      	b.n	800977a <USBD_CDC_Setup+0x1ae>
          break;
 8009768:	bf00      	nop
      }
      break;
 800976a:	e006      	b.n	800977a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 fc43 	bl	800affa <USBD_CtlError>
      ret = USBD_FAIL;
 8009774:	2303      	movs	r3, #3
 8009776:	75fb      	strb	r3, [r7, #23]
      break;
 8009778:	bf00      	nop
  }

  return (uint8_t)ret;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009796:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32b0      	adds	r2, #176	; 0xb0
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e065      	b.n	800987a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32b0      	adds	r2, #176	; 0xb0
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	f003 020f 	and.w	r2, r3, #15
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	3318      	adds	r3, #24
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d02f      	beq.n	8009838 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	f003 020f 	and.w	r2, r3, #15
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	3318      	adds	r3, #24
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	f003 010f 	and.w	r1, r3, #15
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	460b      	mov	r3, r1
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	440b      	add	r3, r1
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4403      	add	r3, r0
 8009800:	3348      	adds	r3, #72	; 0x48
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	fbb2 f1f3 	udiv	r1, r2, r3
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800980e:	2b00      	cmp	r3, #0
 8009810:	d112      	bne.n	8009838 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3318      	adds	r3, #24
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800982a:	78f9      	ldrb	r1, [r7, #3]
 800982c:	2300      	movs	r3, #0
 800982e:	2200      	movs	r2, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f002 f924 	bl	800ba7e <USBD_LL_Transmit>
 8009836:	e01f      	b.n	8009878 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	33b0      	adds	r3, #176	; 0xb0
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d010      	beq.n	8009878 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	33b0      	adds	r3, #176	; 0xb0
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	32b0      	adds	r2, #176	; 0xb0
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	32b0      	adds	r2, #176	; 0xb0
 80098a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e01a      	b.n	80098ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f002 f922 	bl	800bb02 <USBD_LL_GetRxDataSize>
 80098be:	4602      	mov	r2, r0
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	33b0      	adds	r3, #176	; 0xb0
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80098e4:	4611      	mov	r1, r2
 80098e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	32b0      	adds	r2, #176	; 0xb0
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	e025      	b.n	8009960 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	33b0      	adds	r3, #176	; 0xb0
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01a      	beq.n	800995e <USBD_CDC_EP0_RxReady+0x6c>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800992e:	2bff      	cmp	r3, #255	; 0xff
 8009930:	d015      	beq.n	800995e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	33b0      	adds	r3, #176	; 0xb0
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800994a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009952:	b292      	uxth	r2, r2
 8009954:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	22ff      	movs	r2, #255	; 0xff
 800995a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009970:	2182      	movs	r1, #130	; 0x82
 8009972:	4818      	ldr	r0, [pc, #96]	; (80099d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009974:	f000 fd09 	bl	800a38a <USBD_GetEpDesc>
 8009978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800997a:	2101      	movs	r1, #1
 800997c:	4815      	ldr	r0, [pc, #84]	; (80099d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800997e:	f000 fd04 	bl	800a38a <USBD_GetEpDesc>
 8009982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009984:	2181      	movs	r1, #129	; 0x81
 8009986:	4813      	ldr	r0, [pc, #76]	; (80099d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009988:	f000 fcff 	bl	800a38a <USBD_GetEpDesc>
 800998c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2210      	movs	r2, #16
 8009998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d006      	beq.n	80099ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a8:	711a      	strb	r2, [r3, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d006      	beq.n	80099c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099bc:	711a      	strb	r2, [r3, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2243      	movs	r2, #67	; 0x43
 80099c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099c8:	4b02      	ldr	r3, [pc, #8]	; (80099d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000054 	.word	0x20000054

080099d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099e0:	2182      	movs	r1, #130	; 0x82
 80099e2:	4818      	ldr	r0, [pc, #96]	; (8009a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099e4:	f000 fcd1 	bl	800a38a <USBD_GetEpDesc>
 80099e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099ea:	2101      	movs	r1, #1
 80099ec:	4815      	ldr	r0, [pc, #84]	; (8009a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099ee:	f000 fccc 	bl	800a38a <USBD_GetEpDesc>
 80099f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099f4:	2181      	movs	r1, #129	; 0x81
 80099f6:	4813      	ldr	r0, [pc, #76]	; (8009a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099f8:	f000 fcc7 	bl	800a38a <USBD_GetEpDesc>
 80099fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2210      	movs	r2, #16
 8009a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d006      	beq.n	8009a1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2200      	movs	r2, #0
 8009a14:	711a      	strb	r2, [r3, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f042 0202 	orr.w	r2, r2, #2
 8009a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	711a      	strb	r2, [r3, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f042 0202 	orr.w	r2, r2, #2
 8009a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2243      	movs	r2, #67	; 0x43
 8009a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a38:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000054 	.word	0x20000054

08009a48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a50:	2182      	movs	r1, #130	; 0x82
 8009a52:	4818      	ldr	r0, [pc, #96]	; (8009ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a54:	f000 fc99 	bl	800a38a <USBD_GetEpDesc>
 8009a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	4815      	ldr	r0, [pc, #84]	; (8009ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a5e:	f000 fc94 	bl	800a38a <USBD_GetEpDesc>
 8009a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a64:	2181      	movs	r1, #129	; 0x81
 8009a66:	4813      	ldr	r0, [pc, #76]	; (8009ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a68:	f000 fc8f 	bl	800a38a <USBD_GetEpDesc>
 8009a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2210      	movs	r2, #16
 8009a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d006      	beq.n	8009a8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a88:	711a      	strb	r2, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a9c:	711a      	strb	r2, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2243      	movs	r2, #67	; 0x43
 8009aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000054 	.word	0x20000054

08009ab8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	220a      	movs	r2, #10
 8009ac4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ac6:	4b03      	ldr	r3, [pc, #12]	; (8009ad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	20000010 	.word	0x20000010

08009ad8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e009      	b.n	8009b00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	33b0      	adds	r3, #176	; 0xb0
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	32b0      	adds	r2, #176	; 0xb0
 8009b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e008      	b.n	8009b44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	32b0      	adds	r2, #176	; 0xb0
 8009b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e004      	b.n	8009b7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
	...

08009b8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	32b0      	adds	r2, #176	; 0xb0
 8009b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32b0      	adds	r2, #176	; 0xb0
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e018      	b.n	8009bec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7c1b      	ldrb	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10a      	bne.n	8009bd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <USBD_CDC_ReceivePacket+0x68>)
 8009bc4:	7819      	ldrb	r1, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 ff75 	bl	800bac0 <USBD_LL_PrepareReceive>
 8009bd6:	e008      	b.n	8009bea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <USBD_CDC_ReceivePacket+0x68>)
 8009bda:	7819      	ldrb	r1, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009be2:	2340      	movs	r3, #64	; 0x40
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 ff6b 	bl	800bac0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20000098 	.word	0x20000098

08009bf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e01f      	b.n	8009c50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	79fa      	ldrb	r2, [r7, #7]
 8009c42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f001 fde5 	bl	800b814 <USBD_LL_Init>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e025      	b.n	8009cbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	32ae      	adds	r2, #174	; 0xae
 8009c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00f      	beq.n	8009cac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	32ae      	adds	r2, #174	; 0xae
 8009c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	f107 020e 	add.w	r2, r7, #14
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 fded 	bl	800b8ac <USBD_LL_Start>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d009      	beq.n	8009d20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4611      	mov	r1, r2
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	4798      	blx	r3
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	78fa      	ldrb	r2, [r7, #3]
 8009d44:	4611      	mov	r1, r2
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	4798      	blx	r3
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 f908 	bl	800af86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d84:	461a      	mov	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d92:	f003 031f 	and.w	r3, r3, #31
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d01a      	beq.n	8009dd0 <USBD_LL_SetupStage+0x72>
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d822      	bhi.n	8009de4 <USBD_LL_SetupStage+0x86>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <USBD_LL_SetupStage+0x4a>
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d00a      	beq.n	8009dbc <USBD_LL_SetupStage+0x5e>
 8009da6:	e01d      	b.n	8009de4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fb5f 	bl	800a474 <USBD_StdDevReq>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dba:	e020      	b.n	8009dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fbc7 	bl	800a558 <USBD_StdItfReq>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dce:	e016      	b.n	8009dfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fc29 	bl	800a630 <USBD_StdEPReq>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
      break;
 8009de2:	e00c      	b.n	8009dfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 fdba 	bl	800b96c <USBD_LL_StallEP>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8009dfc:	bf00      	nop
  }

  return ret;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	460b      	mov	r3, r1
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e1a:	7afb      	ldrb	r3, [r7, #11]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d16e      	bne.n	8009efe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	f040 8098 	bne.w	8009f64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d913      	bls.n	8009e68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	1ad2      	subs	r2, r2, r3
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	bf28      	it	cs
 8009e5a:	4613      	movcs	r3, r2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f001 f984 	bl	800b16e <USBD_CtlContinueRx>
 8009e66:	e07d      	b.n	8009f64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d014      	beq.n	8009ea0 <USBD_LL_DataOutStage+0x98>
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d81d      	bhi.n	8009eb6 <USBD_LL_DataOutStage+0xae>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <USBD_LL_DataOutStage+0x7c>
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d003      	beq.n	8009e8a <USBD_LL_DataOutStage+0x82>
 8009e82:	e018      	b.n	8009eb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75bb      	strb	r3, [r7, #22]
            break;
 8009e88:	e018      	b.n	8009ebc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	4619      	mov	r1, r3
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 fa5e 	bl	800a356 <USBD_CoreFindIF>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75bb      	strb	r3, [r7, #22]
            break;
 8009e9e:	e00d      	b.n	8009ebc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 fa60 	bl	800a370 <USBD_CoreFindEP>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75bb      	strb	r3, [r7, #22]
            break;
 8009eb4:	e002      	b.n	8009ebc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	75bb      	strb	r3, [r7, #22]
            break;
 8009eba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ebc:	7dbb      	ldrb	r3, [r7, #22]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d119      	bne.n	8009ef6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d113      	bne.n	8009ef6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009ece:	7dba      	ldrb	r2, [r7, #22]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	32ae      	adds	r2, #174	; 0xae
 8009ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009ede:	7dba      	ldrb	r2, [r7, #22]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009ee6:	7dba      	ldrb	r2, [r7, #22]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	32ae      	adds	r2, #174	; 0xae
 8009eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f001 f94a 	bl	800b190 <USBD_CtlSendStatus>
 8009efc:	e032      	b.n	8009f64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009efe:	7afb      	ldrb	r3, [r7, #11]
 8009f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	4619      	mov	r1, r3
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fa31 	bl	800a370 <USBD_CoreFindEP>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f12:	7dbb      	ldrb	r3, [r7, #22]
 8009f14:	2bff      	cmp	r3, #255	; 0xff
 8009f16:	d025      	beq.n	8009f64 <USBD_LL_DataOutStage+0x15c>
 8009f18:	7dbb      	ldrb	r3, [r7, #22]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d122      	bne.n	8009f64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d117      	bne.n	8009f5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f2a:	7dba      	ldrb	r2, [r7, #22]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	32ae      	adds	r2, #174	; 0xae
 8009f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00f      	beq.n	8009f5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f3a:	7dba      	ldrb	r2, [r7, #22]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f42:	7dba      	ldrb	r2, [r7, #22]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	32ae      	adds	r2, #174	; 0xae
 8009f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	7afa      	ldrb	r2, [r7, #11]
 8009f50:	4611      	mov	r1, r2
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	4798      	blx	r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	e000      	b.n	8009f66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b086      	sub	sp, #24
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	460b      	mov	r3, r1
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d16f      	bne.n	800a062 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3314      	adds	r3, #20
 8009f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d15a      	bne.n	800a048 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d914      	bls.n	8009fc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	689a      	ldr	r2, [r3, #8]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f001 f8ac 	bl	800b112 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f001 fd7d 	bl	800bac0 <USBD_LL_PrepareReceive>
 8009fc6:	e03f      	b.n	800a048 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d11c      	bne.n	800a00e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d316      	bcc.n	800a00e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d20f      	bcs.n	800a00e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f001 f88d 	bl	800b112 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a000:	2300      	movs	r3, #0
 800a002:	2200      	movs	r2, #0
 800a004:	2100      	movs	r1, #0
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 fd5a 	bl	800bac0 <USBD_LL_PrepareReceive>
 800a00c:	e01c      	b.n	800a048 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b03      	cmp	r3, #3
 800a018:	d10f      	bne.n	800a03a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a03a:	2180      	movs	r1, #128	; 0x80
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f001 fc95 	bl	800b96c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f001 f8b7 	bl	800b1b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d03a      	beq.n	800a0c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7ff fe42 	bl	8009cdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a060:	e032      	b.n	800a0c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a062:	7afb      	ldrb	r3, [r7, #11]
 800a064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	4619      	mov	r1, r3
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 f97f 	bl	800a370 <USBD_CoreFindEP>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	2bff      	cmp	r3, #255	; 0xff
 800a07a:	d025      	beq.n	800a0c8 <USBD_LL_DataInStage+0x15a>
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d122      	bne.n	800a0c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d11c      	bne.n	800a0c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a08e:	7dfa      	ldrb	r2, [r7, #23]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	32ae      	adds	r2, #174	; 0xae
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d014      	beq.n	800a0c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a09e:	7dfa      	ldrb	r2, [r7, #23]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a0a6:	7dfa      	ldrb	r2, [r7, #23]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	32ae      	adds	r2, #174	; 0xae
 800a0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	7afa      	ldrb	r2, [r7, #11]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	4798      	blx	r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a0be:	7dbb      	ldrb	r3, [r7, #22]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a0c4:	7dbb      	ldrb	r3, [r7, #22]
 800a0c6:	e000      	b.n	800a0ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d014      	beq.n	800a138 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00e      	beq.n	800a138 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6852      	ldr	r2, [r2, #4]
 800a126:	b2d2      	uxtb	r2, r2
 800a128:	4611      	mov	r1, r2
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a134:	2303      	movs	r3, #3
 800a136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a138:	2340      	movs	r3, #64	; 0x40
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 fbcf 	bl	800b8e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2240      	movs	r2, #64	; 0x40
 800a150:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	2200      	movs	r2, #0
 800a158:	2180      	movs	r1, #128	; 0x80
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 fbc1 	bl	800b8e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2240      	movs	r2, #64	; 0x40
 800a16a:	621a      	str	r2, [r3, #32]

  return ret;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	78fa      	ldrb	r2, [r7, #3]
 800a186:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d106      	bne.n	800a1e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b03      	cmp	r3, #3
 800a204:	d110      	bne.n	800a228 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	32ae      	adds	r2, #174	; 0xae
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	e01c      	b.n	800a28e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d115      	bne.n	800a28c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	32ae      	adds	r2, #174	; 0xae
 800a26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	32ae      	adds	r2, #174	; 0xae
 800a27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	78fa      	ldrb	r2, [r7, #3]
 800a286:	4611      	mov	r1, r2
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	32ae      	adds	r2, #174	; 0xae
 800a2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e01c      	b.n	800a2f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d115      	bne.n	800a2f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	32ae      	adds	r2, #174	; 0xae
 800a2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	32ae      	adds	r2, #174	; 0xae
 800a2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	78fa      	ldrb	r2, [r7, #3]
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00e      	beq.n	800a34c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6852      	ldr	r2, [r2, #4]
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	4611      	mov	r1, r2
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	4798      	blx	r3
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a348:	2303      	movs	r3, #3
 800a34a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a362:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a37c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a37e:	4618      	mov	r0, r3
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	885b      	ldrh	r3, [r3, #2]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d920      	bls.n	800a3f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a3ba:	e013      	b.n	800a3e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a3bc:	f107 030a 	add.w	r3, r7, #10
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6978      	ldr	r0, [r7, #20]
 800a3c4:	f000 f81b 	bl	800a3fe <USBD_GetNextDesc>
 800a3c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	785b      	ldrb	r3, [r3, #1]
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d108      	bne.n	800a3e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	789b      	ldrb	r3, [r3, #2]
 800a3da:	78fa      	ldrb	r2, [r7, #3]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d008      	beq.n	800a3f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	885b      	ldrh	r3, [r3, #2]
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	897b      	ldrh	r3, [r7, #10]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d8e5      	bhi.n	800a3bc <USBD_GetEpDesc+0x32>
 800a3f0:	e000      	b.n	800a3f4 <USBD_GetEpDesc+0x6a>
          break;
 800a3f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a3f4:	693b      	ldr	r3, [r7, #16]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	4413      	add	r3, r2
 800a418:	b29a      	uxth	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4413      	add	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a42a:	68fb      	ldr	r3, [r7, #12]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	3301      	adds	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a456:	8a3b      	ldrh	r3, [r7, #16]
 800a458:	021b      	lsls	r3, r3, #8
 800a45a:	b21a      	sxth	r2, r3
 800a45c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a460:	4313      	orrs	r3, r2
 800a462:	b21b      	sxth	r3, r3
 800a464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a466:	89fb      	ldrh	r3, [r7, #14]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	371c      	adds	r7, #28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a48a:	2b40      	cmp	r3, #64	; 0x40
 800a48c:	d005      	beq.n	800a49a <USBD_StdDevReq+0x26>
 800a48e:	2b40      	cmp	r3, #64	; 0x40
 800a490:	d857      	bhi.n	800a542 <USBD_StdDevReq+0xce>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00f      	beq.n	800a4b6 <USBD_StdDevReq+0x42>
 800a496:	2b20      	cmp	r3, #32
 800a498:	d153      	bne.n	800a542 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	32ae      	adds	r2, #174	; 0xae
 800a4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	4798      	blx	r3
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b4:	e04a      	b.n	800a54c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b09      	cmp	r3, #9
 800a4bc:	d83b      	bhi.n	800a536 <USBD_StdDevReq+0xc2>
 800a4be:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <USBD_StdDevReq+0x50>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a519 	.word	0x0800a519
 800a4c8:	0800a52d 	.word	0x0800a52d
 800a4cc:	0800a537 	.word	0x0800a537
 800a4d0:	0800a523 	.word	0x0800a523
 800a4d4:	0800a537 	.word	0x0800a537
 800a4d8:	0800a4f7 	.word	0x0800a4f7
 800a4dc:	0800a4ed 	.word	0x0800a4ed
 800a4e0:	0800a537 	.word	0x0800a537
 800a4e4:	0800a50f 	.word	0x0800a50f
 800a4e8:	0800a501 	.word	0x0800a501
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa3c 	bl	800a96c <USBD_GetDescriptor>
          break;
 800a4f4:	e024      	b.n	800a540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fba1 	bl	800ac40 <USBD_SetAddress>
          break;
 800a4fe:	e01f      	b.n	800a540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fbe0 	bl	800acc8 <USBD_SetConfig>
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]
          break;
 800a50c:	e018      	b.n	800a540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fc83 	bl	800ae1c <USBD_GetConfig>
          break;
 800a516:	e013      	b.n	800a540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fcb4 	bl	800ae88 <USBD_GetStatus>
          break;
 800a520:	e00e      	b.n	800a540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fce3 	bl	800aef0 <USBD_SetFeature>
          break;
 800a52a:	e009      	b.n	800a540 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fd07 	bl	800af42 <USBD_ClrFeature>
          break;
 800a534:	e004      	b.n	800a540 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fd5e 	bl	800affa <USBD_CtlError>
          break;
 800a53e:	bf00      	nop
      }
      break;
 800a540:	e004      	b.n	800a54c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fd58 	bl	800affa <USBD_CtlError>
      break;
 800a54a:	bf00      	nop
  }

  return ret;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop

0800a558 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a56e:	2b40      	cmp	r3, #64	; 0x40
 800a570:	d005      	beq.n	800a57e <USBD_StdItfReq+0x26>
 800a572:	2b40      	cmp	r3, #64	; 0x40
 800a574:	d852      	bhi.n	800a61c <USBD_StdItfReq+0xc4>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <USBD_StdItfReq+0x26>
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	d14e      	bne.n	800a61c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a584:	b2db      	uxtb	r3, r3
 800a586:	3b01      	subs	r3, #1
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d840      	bhi.n	800a60e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	889b      	ldrh	r3, [r3, #4]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b01      	cmp	r3, #1
 800a594:	d836      	bhi.n	800a604 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	889b      	ldrh	r3, [r3, #4]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff fed9 	bl	800a356 <USBD_CoreFindIF>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2bff      	cmp	r3, #255	; 0xff
 800a5ac:	d01d      	beq.n	800a5ea <USBD_StdItfReq+0x92>
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d11a      	bne.n	800a5ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a5b4:	7bba      	ldrb	r2, [r7, #14]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	32ae      	adds	r2, #174	; 0xae
 800a5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00f      	beq.n	800a5e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a5c4:	7bba      	ldrb	r2, [r7, #14]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5cc:	7bba      	ldrb	r2, [r7, #14]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	32ae      	adds	r2, #174	; 0xae
 800a5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5e2:	e004      	b.n	800a5ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a5e8:	e001      	b.n	800a5ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	88db      	ldrh	r3, [r3, #6]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d110      	bne.n	800a618 <USBD_StdItfReq+0xc0>
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10d      	bne.n	800a618 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fdc7 	bl	800b190 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a602:	e009      	b.n	800a618 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fcf7 	bl	800affa <USBD_CtlError>
          break;
 800a60c:	e004      	b.n	800a618 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fcf2 	bl	800affa <USBD_CtlError>
          break;
 800a616:	e000      	b.n	800a61a <USBD_StdItfReq+0xc2>
          break;
 800a618:	bf00      	nop
      }
      break;
 800a61a:	e004      	b.n	800a626 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fceb 	bl	800affa <USBD_CtlError>
      break;
 800a624:	bf00      	nop
  }

  return ret;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	889b      	ldrh	r3, [r3, #4]
 800a642:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d007      	beq.n	800a660 <USBD_StdEPReq+0x30>
 800a650:	2b40      	cmp	r3, #64	; 0x40
 800a652:	f200 817f 	bhi.w	800a954 <USBD_StdEPReq+0x324>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d02a      	beq.n	800a6b0 <USBD_StdEPReq+0x80>
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	f040 817a 	bne.w	800a954 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff fe83 	bl	800a370 <USBD_CoreFindEP>
 800a66a:	4603      	mov	r3, r0
 800a66c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a66e:	7b7b      	ldrb	r3, [r7, #13]
 800a670:	2bff      	cmp	r3, #255	; 0xff
 800a672:	f000 8174 	beq.w	800a95e <USBD_StdEPReq+0x32e>
 800a676:	7b7b      	ldrb	r3, [r7, #13]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f040 8170 	bne.w	800a95e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a67e:	7b7a      	ldrb	r2, [r7, #13]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a686:	7b7a      	ldrb	r2, [r7, #13]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	32ae      	adds	r2, #174	; 0xae
 800a68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 8163 	beq.w	800a95e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a698:	7b7a      	ldrb	r2, [r7, #13]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	32ae      	adds	r2, #174	; 0xae
 800a69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6ae:	e156      	b.n	800a95e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d008      	beq.n	800a6ca <USBD_StdEPReq+0x9a>
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	f300 8145 	bgt.w	800a948 <USBD_StdEPReq+0x318>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 809b 	beq.w	800a7fa <USBD_StdEPReq+0x1ca>
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d03c      	beq.n	800a742 <USBD_StdEPReq+0x112>
 800a6c8:	e13e      	b.n	800a948 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d002      	beq.n	800a6dc <USBD_StdEPReq+0xac>
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d016      	beq.n	800a708 <USBD_StdEPReq+0xd8>
 800a6da:	e02c      	b.n	800a736 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <USBD_StdEPReq+0xce>
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b80      	cmp	r3, #128	; 0x80
 800a6e6:	d00a      	beq.n	800a6fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 f93d 	bl	800b96c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6f2:	2180      	movs	r1, #128	; 0x80
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 f939 	bl	800b96c <USBD_LL_StallEP>
 800a6fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6fc:	e020      	b.n	800a740 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fc7a 	bl	800affa <USBD_CtlError>
              break;
 800a706:	e01b      	b.n	800a740 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	885b      	ldrh	r3, [r3, #2]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10e      	bne.n	800a72e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <USBD_StdEPReq+0xfe>
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b80      	cmp	r3, #128	; 0x80
 800a71a:	d008      	beq.n	800a72e <USBD_StdEPReq+0xfe>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	88db      	ldrh	r3, [r3, #6]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 f91f 	bl	800b96c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fd2e 	bl	800b190 <USBD_CtlSendStatus>

              break;
 800a734:	e004      	b.n	800a740 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fc5e 	bl	800affa <USBD_CtlError>
              break;
 800a73e:	bf00      	nop
          }
          break;
 800a740:	e107      	b.n	800a952 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d002      	beq.n	800a754 <USBD_StdEPReq+0x124>
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d016      	beq.n	800a780 <USBD_StdEPReq+0x150>
 800a752:	e04b      	b.n	800a7ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00d      	beq.n	800a776 <USBD_StdEPReq+0x146>
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b80      	cmp	r3, #128	; 0x80
 800a75e:	d00a      	beq.n	800a776 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 f901 	bl	800b96c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 f8fd 	bl	800b96c <USBD_LL_StallEP>
 800a772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a774:	e040      	b.n	800a7f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fc3e 	bl	800affa <USBD_CtlError>
              break;
 800a77e:	e03b      	b.n	800a7f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	885b      	ldrh	r3, [r3, #2]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d136      	bne.n	800a7f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a788:	7bbb      	ldrb	r3, [r7, #14]
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	4619      	mov	r1, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 f907 	bl	800b9aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fcf7 	bl	800b190 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fde2 	bl	800a370 <USBD_CoreFindEP>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7b0:	7b7b      	ldrb	r3, [r7, #13]
 800a7b2:	2bff      	cmp	r3, #255	; 0xff
 800a7b4:	d01f      	beq.n	800a7f6 <USBD_StdEPReq+0x1c6>
 800a7b6:	7b7b      	ldrb	r3, [r7, #13]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d11c      	bne.n	800a7f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a7bc:	7b7a      	ldrb	r2, [r7, #13]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a7c4:	7b7a      	ldrb	r2, [r7, #13]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	32ae      	adds	r2, #174	; 0xae
 800a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d010      	beq.n	800a7f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7d4:	7b7a      	ldrb	r2, [r7, #13]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	32ae      	adds	r2, #174	; 0xae
 800a7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a7ea:	e004      	b.n	800a7f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fc03 	bl	800affa <USBD_CtlError>
              break;
 800a7f4:	e000      	b.n	800a7f8 <USBD_StdEPReq+0x1c8>
              break;
 800a7f6:	bf00      	nop
          }
          break;
 800a7f8:	e0ab      	b.n	800a952 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b02      	cmp	r3, #2
 800a804:	d002      	beq.n	800a80c <USBD_StdEPReq+0x1dc>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d032      	beq.n	800a870 <USBD_StdEPReq+0x240>
 800a80a:	e097      	b.n	800a93c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d007      	beq.n	800a822 <USBD_StdEPReq+0x1f2>
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b80      	cmp	r3, #128	; 0x80
 800a816:	d004      	beq.n	800a822 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fbed 	bl	800affa <USBD_CtlError>
                break;
 800a820:	e091      	b.n	800a946 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a826:	2b00      	cmp	r3, #0
 800a828:	da0b      	bge.n	800a842 <USBD_StdEPReq+0x212>
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	3310      	adds	r3, #16
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	3304      	adds	r3, #4
 800a840:	e00b      	b.n	800a85a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	4413      	add	r3, r2
 800a858:	3304      	adds	r3, #4
 800a85a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2202      	movs	r2, #2
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fc37 	bl	800b0dc <USBD_CtlSendData>
              break;
 800a86e:	e06a      	b.n	800a946 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a874:	2b00      	cmp	r3, #0
 800a876:	da11      	bge.n	800a89c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	f003 020f 	and.w	r2, r3, #15
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	3324      	adds	r3, #36	; 0x24
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d117      	bne.n	800a8c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fbb0 	bl	800affa <USBD_CtlError>
                  break;
 800a89a:	e054      	b.n	800a946 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	f003 020f 	and.w	r2, r3, #15
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d104      	bne.n	800a8c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fb9d 	bl	800affa <USBD_CtlError>
                  break;
 800a8c0:	e041      	b.n	800a946 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	da0b      	bge.n	800a8e2 <USBD_StdEPReq+0x2b2>
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	3310      	adds	r3, #16
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	3304      	adds	r3, #4
 800a8e0:	e00b      	b.n	800a8fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <USBD_StdEPReq+0x2d8>
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	2b80      	cmp	r3, #128	; 0x80
 800a906:	d103      	bne.n	800a910 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	e00e      	b.n	800a92e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 f867 	bl	800b9e8 <USBD_LL_IsStallEP>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2201      	movs	r2, #1
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	e002      	b.n	800a92e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2202      	movs	r2, #2
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fbd1 	bl	800b0dc <USBD_CtlSendData>
              break;
 800a93a:	e004      	b.n	800a946 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fb5b 	bl	800affa <USBD_CtlError>
              break;
 800a944:	bf00      	nop
          }
          break;
 800a946:	e004      	b.n	800a952 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fb55 	bl	800affa <USBD_CtlError>
          break;
 800a950:	bf00      	nop
      }
      break;
 800a952:	e005      	b.n	800a960 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fb4f 	bl	800affa <USBD_CtlError>
      break;
 800a95c:	e000      	b.n	800a960 <USBD_StdEPReq+0x330>
      break;
 800a95e:	bf00      	nop
  }

  return ret;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	0a1b      	lsrs	r3, r3, #8
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3b01      	subs	r3, #1
 800a98c:	2b06      	cmp	r3, #6
 800a98e:	f200 8128 	bhi.w	800abe2 <USBD_GetDescriptor+0x276>
 800a992:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <USBD_GetDescriptor+0x2c>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800a9b5 	.word	0x0800a9b5
 800a99c:	0800a9cd 	.word	0x0800a9cd
 800a9a0:	0800aa0d 	.word	0x0800aa0d
 800a9a4:	0800abe3 	.word	0x0800abe3
 800a9a8:	0800abe3 	.word	0x0800abe3
 800a9ac:	0800ab83 	.word	0x0800ab83
 800a9b0:	0800abaf 	.word	0x0800abaf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	7c12      	ldrb	r2, [r2, #16]
 800a9c0:	f107 0108 	add.w	r1, r7, #8
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4798      	blx	r3
 800a9c8:	60f8      	str	r0, [r7, #12]
      break;
 800a9ca:	e112      	b.n	800abf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7c1b      	ldrb	r3, [r3, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10d      	bne.n	800a9f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9dc:	f107 0208 	add.w	r2, r7, #8
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	4798      	blx	r3
 800a9e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a9ee:	e100      	b.n	800abf2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	f107 0208 	add.w	r2, r7, #8
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
 800aa00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	2202      	movs	r2, #2
 800aa08:	701a      	strb	r2, [r3, #0]
      break;
 800aa0a:	e0f2      	b.n	800abf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	885b      	ldrh	r3, [r3, #2]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b05      	cmp	r3, #5
 800aa14:	f200 80ac 	bhi.w	800ab70 <USBD_GetDescriptor+0x204>
 800aa18:	a201      	add	r2, pc, #4	; (adr r2, 800aa20 <USBD_GetDescriptor+0xb4>)
 800aa1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1e:	bf00      	nop
 800aa20:	0800aa39 	.word	0x0800aa39
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aaa1 	.word	0x0800aaa1
 800aa2c:	0800aad5 	.word	0x0800aad5
 800aa30:	0800ab09 	.word	0x0800ab09
 800aa34:	0800ab3d 	.word	0x0800ab3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	7c12      	ldrb	r2, [r2, #16]
 800aa50:	f107 0108 	add.w	r1, r7, #8
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
 800aa58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa5a:	e091      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 facb 	bl	800affa <USBD_CtlError>
            err++;
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	3301      	adds	r3, #1
 800aa68:	72fb      	strb	r3, [r7, #11]
          break;
 800aa6a:	e089      	b.n	800ab80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	7c12      	ldrb	r2, [r2, #16]
 800aa84:	f107 0108 	add.w	r1, r7, #8
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3
 800aa8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa8e:	e077      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fab1 	bl	800affa <USBD_CtlError>
            err++;
 800aa98:	7afb      	ldrb	r3, [r7, #11]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa9e:	e06f      	b.n	800ab80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	7c12      	ldrb	r2, [r2, #16]
 800aab8:	f107 0108 	add.w	r1, r7, #8
 800aabc:	4610      	mov	r0, r2
 800aabe:	4798      	blx	r3
 800aac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac2:	e05d      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fa97 	bl	800affa <USBD_CtlError>
            err++;
 800aacc:	7afb      	ldrb	r3, [r7, #11]
 800aace:	3301      	adds	r3, #1
 800aad0:	72fb      	strb	r3, [r7, #11]
          break;
 800aad2:	e055      	b.n	800ab80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	7c12      	ldrb	r2, [r2, #16]
 800aaec:	f107 0108 	add.w	r1, r7, #8
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	4798      	blx	r3
 800aaf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaf6:	e043      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fa7d 	bl	800affa <USBD_CtlError>
            err++;
 800ab00:	7afb      	ldrb	r3, [r7, #11]
 800ab02:	3301      	adds	r3, #1
 800ab04:	72fb      	strb	r3, [r7, #11]
          break;
 800ab06:	e03b      	b.n	800ab80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	7c12      	ldrb	r2, [r2, #16]
 800ab20:	f107 0108 	add.w	r1, r7, #8
 800ab24:	4610      	mov	r0, r2
 800ab26:	4798      	blx	r3
 800ab28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab2a:	e029      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa63 	bl	800affa <USBD_CtlError>
            err++;
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	3301      	adds	r3, #1
 800ab38:	72fb      	strb	r3, [r7, #11]
          break;
 800ab3a:	e021      	b.n	800ab80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	7c12      	ldrb	r2, [r2, #16]
 800ab54:	f107 0108 	add.w	r1, r7, #8
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab5e:	e00f      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa49 	bl	800affa <USBD_CtlError>
            err++;
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab6e:	e007      	b.n	800ab80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fa41 	bl	800affa <USBD_CtlError>
          err++;
 800ab78:	7afb      	ldrb	r3, [r7, #11]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab7e:	bf00      	nop
      }
      break;
 800ab80:	e037      	b.n	800abf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	7c1b      	ldrb	r3, [r3, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d109      	bne.n	800ab9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab92:	f107 0208 	add.w	r2, r7, #8
 800ab96:	4610      	mov	r0, r2
 800ab98:	4798      	blx	r3
 800ab9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab9c:	e029      	b.n	800abf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fa2a 	bl	800affa <USBD_CtlError>
        err++;
 800aba6:	7afb      	ldrb	r3, [r7, #11]
 800aba8:	3301      	adds	r3, #1
 800abaa:	72fb      	strb	r3, [r7, #11]
      break;
 800abac:	e021      	b.n	800abf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	7c1b      	ldrb	r3, [r3, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10d      	bne.n	800abd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbe:	f107 0208 	add.w	r2, r7, #8
 800abc2:	4610      	mov	r0, r2
 800abc4:	4798      	blx	r3
 800abc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3301      	adds	r3, #1
 800abcc:	2207      	movs	r2, #7
 800abce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abd0:	e00f      	b.n	800abf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fa10 	bl	800affa <USBD_CtlError>
        err++;
 800abda:	7afb      	ldrb	r3, [r7, #11]
 800abdc:	3301      	adds	r3, #1
 800abde:	72fb      	strb	r3, [r7, #11]
      break;
 800abe0:	e007      	b.n	800abf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fa08 	bl	800affa <USBD_CtlError>
      err++;
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	3301      	adds	r3, #1
 800abee:	72fb      	strb	r3, [r7, #11]
      break;
 800abf0:	bf00      	nop
  }

  if (err != 0U)
 800abf2:	7afb      	ldrb	r3, [r7, #11]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d11e      	bne.n	800ac36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	88db      	ldrh	r3, [r3, #6]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d016      	beq.n	800ac2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac00:	893b      	ldrh	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00e      	beq.n	800ac24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	88da      	ldrh	r2, [r3, #6]
 800ac0a:	893b      	ldrh	r3, [r7, #8]
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	bf28      	it	cs
 800ac10:	4613      	movcs	r3, r2
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac16:	893b      	ldrh	r3, [r7, #8]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	68f9      	ldr	r1, [r7, #12]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fa5d 	bl	800b0dc <USBD_CtlSendData>
 800ac22:	e009      	b.n	800ac38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f9e7 	bl	800affa <USBD_CtlError>
 800ac2c:	e004      	b.n	800ac38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 faae 	bl	800b190 <USBD_CtlSendStatus>
 800ac34:	e000      	b.n	800ac38 <USBD_GetDescriptor+0x2cc>
    return;
 800ac36:	bf00      	nop
  }
}
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop

0800ac40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	889b      	ldrh	r3, [r3, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d131      	bne.n	800acb6 <USBD_SetAddress+0x76>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	88db      	ldrh	r3, [r3, #6]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d12d      	bne.n	800acb6 <USBD_SetAddress+0x76>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ac60:	d829      	bhi.n	800acb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	885b      	ldrh	r3, [r3, #2]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d104      	bne.n	800ac84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f9bc 	bl	800affa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac82:	e01d      	b.n	800acc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7bfa      	ldrb	r2, [r7, #15]
 800ac88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fed5 	bl	800ba40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fa7a 	bl	800b190 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d004      	beq.n	800acac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2202      	movs	r2, #2
 800aca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acaa:	e009      	b.n	800acc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb4:	e004      	b.n	800acc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f99e 	bl	800affa <USBD_CtlError>
  }
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	885b      	ldrh	r3, [r3, #2]
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	4b4e      	ldr	r3, [pc, #312]	; (800ae18 <USBD_SetConfig+0x150>)
 800acde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ace0:	4b4d      	ldr	r3, [pc, #308]	; (800ae18 <USBD_SetConfig+0x150>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d905      	bls.n	800acf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f985 	bl	800affa <USBD_CtlError>
    return USBD_FAIL;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e08c      	b.n	800ae0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d002      	beq.n	800ad06 <USBD_SetConfig+0x3e>
 800ad00:	2b03      	cmp	r3, #3
 800ad02:	d029      	beq.n	800ad58 <USBD_SetConfig+0x90>
 800ad04:	e075      	b.n	800adf2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad06:	4b44      	ldr	r3, [pc, #272]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d020      	beq.n	800ad50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad0e:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad18:	4b3f      	ldr	r3, [pc, #252]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7fe ffe7 	bl	8009cf2 <USBD_SetClassConfig>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d008      	beq.n	800ad40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f962 	bl	800affa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2202      	movs	r2, #2
 800ad3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad3e:	e065      	b.n	800ae0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fa25 	bl	800b190 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2203      	movs	r2, #3
 800ad4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad4e:	e05d      	b.n	800ae0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fa1d 	bl	800b190 <USBD_CtlSendStatus>
      break;
 800ad56:	e059      	b.n	800ae0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad58:	4b2f      	ldr	r3, [pc, #188]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d112      	bne.n	800ad86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ad68:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad72:	4b29      	ldr	r3, [pc, #164]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fe ffd6 	bl	8009d2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa06 	bl	800b190 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad84:	e042      	b.n	800ae0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad86:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <USBD_SetConfig+0x150>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d02a      	beq.n	800adea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe ffc4 	bl	8009d2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ada2:	4b1d      	ldr	r3, [pc, #116]	; (800ae18 <USBD_SetConfig+0x150>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adac:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <USBD_SetConfig+0x150>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7fe ff9d 	bl	8009cf2 <USBD_SetClassConfig>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00f      	beq.n	800ade2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f918 	bl	800affa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7fe ffa9 	bl	8009d2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2202      	movs	r2, #2
 800addc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ade0:	e014      	b.n	800ae0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f9d4 	bl	800b190 <USBD_CtlSendStatus>
      break;
 800ade8:	e010      	b.n	800ae0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f9d0 	bl	800b190 <USBD_CtlSendStatus>
      break;
 800adf0:	e00c      	b.n	800ae0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f900 	bl	800affa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <USBD_SetConfig+0x150>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fe ff92 	bl	8009d2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae06:	2303      	movs	r3, #3
 800ae08:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0a:	bf00      	nop
  }

  return ret;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20000450 	.word	0x20000450

0800ae1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	88db      	ldrh	r3, [r3, #6]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d004      	beq.n	800ae38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f8e2 	bl	800affa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae36:	e023      	b.n	800ae80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	dc02      	bgt.n	800ae4a <USBD_GetConfig+0x2e>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dc03      	bgt.n	800ae50 <USBD_GetConfig+0x34>
 800ae48:	e015      	b.n	800ae76 <USBD_GetConfig+0x5a>
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d00b      	beq.n	800ae66 <USBD_GetConfig+0x4a>
 800ae4e:	e012      	b.n	800ae76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f93c 	bl	800b0dc <USBD_CtlSendData>
        break;
 800ae64:	e00c      	b.n	800ae80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f934 	bl	800b0dc <USBD_CtlSendData>
        break;
 800ae74:	e004      	b.n	800ae80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f8be 	bl	800affa <USBD_CtlError>
        break;
 800ae7e:	bf00      	nop
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d81e      	bhi.n	800aede <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	88db      	ldrh	r3, [r3, #6]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d004      	beq.n	800aeb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f8a5 	bl	800affa <USBD_CtlError>
        break;
 800aeb0:	e01a      	b.n	800aee8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d005      	beq.n	800aece <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f043 0202 	orr.w	r2, r3, #2
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	330c      	adds	r3, #12
 800aed2:	2202      	movs	r2, #2
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f900 	bl	800b0dc <USBD_CtlSendData>
      break;
 800aedc:	e004      	b.n	800aee8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f88a 	bl	800affa <USBD_CtlError>
      break;
 800aee6:	bf00      	nop
  }
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	885b      	ldrh	r3, [r3, #2]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d107      	bne.n	800af12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f940 	bl	800b190 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af10:	e013      	b.n	800af3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	885b      	ldrh	r3, [r3, #2]
 800af16:	2b02      	cmp	r3, #2
 800af18:	d10b      	bne.n	800af32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	889b      	ldrh	r3, [r3, #4]
 800af1e:	0a1b      	lsrs	r3, r3, #8
 800af20:	b29b      	uxth	r3, r3
 800af22:	b2da      	uxtb	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f930 	bl	800b190 <USBD_CtlSendStatus>
}
 800af30:	e003      	b.n	800af3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f860 	bl	800affa <USBD_CtlError>
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af52:	b2db      	uxtb	r3, r3
 800af54:	3b01      	subs	r3, #1
 800af56:	2b02      	cmp	r3, #2
 800af58:	d80b      	bhi.n	800af72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	885b      	ldrh	r3, [r3, #2]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d10c      	bne.n	800af7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f910 	bl	800b190 <USBD_CtlSendStatus>
      }
      break;
 800af70:	e004      	b.n	800af7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f840 	bl	800affa <USBD_CtlError>
      break;
 800af7a:	e000      	b.n	800af7e <USBD_ClrFeature+0x3c>
      break;
 800af7c:	bf00      	nop
  }
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	781a      	ldrb	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	781a      	ldrb	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	3301      	adds	r3, #1
 800afae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff fa41 	bl	800a438 <SWAPBYTE>
 800afb6:	4603      	mov	r3, r0
 800afb8:	461a      	mov	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3301      	adds	r3, #1
 800afc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3301      	adds	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f7ff fa34 	bl	800a438 <SWAPBYTE>
 800afd0:	4603      	mov	r3, r0
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3301      	adds	r3, #1
 800afdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3301      	adds	r3, #1
 800afe2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f7ff fa27 	bl	800a438 <SWAPBYTE>
 800afea:	4603      	mov	r3, r0
 800afec:	461a      	mov	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	80da      	strh	r2, [r3, #6]
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b004:	2180      	movs	r1, #128	; 0x80
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fcb0 	bl	800b96c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b00c:	2100      	movs	r1, #0
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fcac 	bl	800b96c <USBD_LL_StallEP>
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d036      	beq.n	800b0a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b036:	6938      	ldr	r0, [r7, #16]
 800b038:	f000 f836 	bl	800b0a8 <USBD_GetLen>
 800b03c:	4603      	mov	r3, r0
 800b03e:	3301      	adds	r3, #1
 800b040:	b29b      	uxth	r3, r3
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	4413      	add	r3, r2
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	7812      	ldrb	r2, [r2, #0]
 800b054:	701a      	strb	r2, [r3, #0]
  idx++;
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	3301      	adds	r3, #1
 800b05a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	4413      	add	r3, r2
 800b062:	2203      	movs	r2, #3
 800b064:	701a      	strb	r2, [r3, #0]
  idx++;
 800b066:	7dfb      	ldrb	r3, [r7, #23]
 800b068:	3301      	adds	r3, #1
 800b06a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b06c:	e013      	b.n	800b096 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	4413      	add	r3, r2
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	7812      	ldrb	r2, [r2, #0]
 800b078:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	3301      	adds	r3, #1
 800b07e:	613b      	str	r3, [r7, #16]
    idx++;
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	3301      	adds	r3, #1
 800b084:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	4413      	add	r3, r2
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	3301      	adds	r3, #1
 800b094:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e7      	bne.n	800b06e <USBD_GetString+0x52>
 800b09e:	e000      	b.n	800b0a2 <USBD_GetString+0x86>
    return;
 800b0a0:	bf00      	nop
  }
}
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b0b8:	e005      	b.n	800b0c6 <USBD_GetLen+0x1e>
  {
    len++;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1f5      	bne.n	800b0ba <USBD_GetLen+0x12>
  }

  return len;
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	2100      	movs	r1, #0
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 fcbb 	bl	800ba7e <USBD_LL_Transmit>

  return USBD_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	2100      	movs	r1, #0
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 fcaa 	bl	800ba7e <USBD_LL_Transmit>

  return USBD_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2203      	movs	r2, #3
 800b144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	2100      	movs	r1, #0
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f000 fcae 	bl	800bac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	2100      	movs	r1, #0
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 fc9d 	bl	800bac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2204      	movs	r2, #4
 800b19c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fc69 	bl	800ba7e <USBD_LL_Transmit>

  return USBD_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2205      	movs	r2, #5
 800b1c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fc77 	bl	800bac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4912      	ldr	r1, [pc, #72]	; (800b22c <MX_USB_DEVICE_Init+0x50>)
 800b1e4:	4812      	ldr	r0, [pc, #72]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1e6:	f7fe fd07 	bl	8009bf8 <USBD_Init>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1f0:	f7f7 f912 	bl	8002418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1f4:	490f      	ldr	r1, [pc, #60]	; (800b234 <MX_USB_DEVICE_Init+0x58>)
 800b1f6:	480e      	ldr	r0, [pc, #56]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1f8:	f7fe fd2e 	bl	8009c58 <USBD_RegisterClass>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b202:	f7f7 f909 	bl	8002418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b206:	490c      	ldr	r1, [pc, #48]	; (800b238 <MX_USB_DEVICE_Init+0x5c>)
 800b208:	4809      	ldr	r0, [pc, #36]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b20a:	f7fe fc65 	bl	8009ad8 <USBD_CDC_RegisterInterface>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b214:	f7f7 f900 	bl	8002418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b218:	4805      	ldr	r0, [pc, #20]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b21a:	f7fe fd53 	bl	8009cc4 <USBD_Start>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b224:	f7f7 f8f8 	bl	8002418 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b228:	bf00      	nop
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	200000b0 	.word	0x200000b0
 800b230:	20000454 	.word	0x20000454
 800b234:	2000001c 	.word	0x2000001c
 800b238:	2000009c 	.word	0x2000009c

0800b23c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b240:	2200      	movs	r2, #0
 800b242:	4905      	ldr	r1, [pc, #20]	; (800b258 <CDC_Init_FS+0x1c>)
 800b244:	4805      	ldr	r0, [pc, #20]	; (800b25c <CDC_Init_FS+0x20>)
 800b246:	f7fe fc61 	bl	8009b0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b24a:	4905      	ldr	r1, [pc, #20]	; (800b260 <CDC_Init_FS+0x24>)
 800b24c:	4803      	ldr	r0, [pc, #12]	; (800b25c <CDC_Init_FS+0x20>)
 800b24e:	f7fe fc7f 	bl	8009b50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b254:	4618      	mov	r0, r3
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20000b18 	.word	0x20000b18
 800b25c:	20000454 	.word	0x20000454
 800b260:	20000730 	.word	0x20000730

0800b264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
 800b280:	4613      	mov	r3, r2
 800b282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	2b23      	cmp	r3, #35	; 0x23
 800b288:	d84a      	bhi.n	800b320 <CDC_Control_FS+0xac>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <CDC_Control_FS+0x1c>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b321 	.word	0x0800b321
 800b294:	0800b321 	.word	0x0800b321
 800b298:	0800b321 	.word	0x0800b321
 800b29c:	0800b321 	.word	0x0800b321
 800b2a0:	0800b321 	.word	0x0800b321
 800b2a4:	0800b321 	.word	0x0800b321
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b321 	.word	0x0800b321
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b321 	.word	0x0800b321
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b321 	.word	0x0800b321
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b321 	.word	0x0800b321
 800b2dc:	0800b321 	.word	0x0800b321
 800b2e0:	0800b321 	.word	0x0800b321
 800b2e4:	0800b321 	.word	0x0800b321
 800b2e8:	0800b321 	.word	0x0800b321
 800b2ec:	0800b321 	.word	0x0800b321
 800b2f0:	0800b321 	.word	0x0800b321
 800b2f4:	0800b321 	.word	0x0800b321
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b321 	.word	0x0800b321
 800b308:	0800b321 	.word	0x0800b321
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b321 	.word	0x0800b321
 800b318:	0800b321 	.word	0x0800b321
 800b31c:	0800b321 	.word	0x0800b321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b320:	bf00      	nop
  }

  return (USBD_OK);
 800b322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4805      	ldr	r0, [pc, #20]	; (800b354 <CDC_Receive_FS+0x24>)
 800b33e:	f7fe fc07 	bl	8009b50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b342:	4804      	ldr	r0, [pc, #16]	; (800b354 <CDC_Receive_FS+0x24>)
 800b344:	f7fe fc22 	bl	8009b8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b348:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20000454 	.word	0x20000454

0800b358 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	4613      	mov	r3, r2
 800b364:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
	...

0800b37c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2212      	movs	r2, #18
 800b38c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b38e:	4b03      	ldr	r3, [pc, #12]	; (800b39c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	200000cc 	.word	0x200000cc

0800b3a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	200000e0 	.word	0x200000e0

0800b3c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	6039      	str	r1, [r7, #0]
 800b3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d105      	bne.n	800b3e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4907      	ldr	r1, [pc, #28]	; (800b3f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3da:	4808      	ldr	r0, [pc, #32]	; (800b3fc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3dc:	f7ff fe1e 	bl	800b01c <USBD_GetString>
 800b3e0:	e004      	b.n	800b3ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4904      	ldr	r1, [pc, #16]	; (800b3f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3e6:	4805      	ldr	r0, [pc, #20]	; (800b3fc <USBD_FS_ProductStrDescriptor+0x38>)
 800b3e8:	f7ff fe18 	bl	800b01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3ec:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000f00 	.word	0x20000f00
 800b3fc:	080106d4 	.word	0x080106d4

0800b400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	4904      	ldr	r1, [pc, #16]	; (800b420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b410:	4804      	ldr	r0, [pc, #16]	; (800b424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b412:	f7ff fe03 	bl	800b01c <USBD_GetString>
  return USBD_StrDesc;
 800b416:	4b02      	ldr	r3, [pc, #8]	; (800b420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20000f00 	.word	0x20000f00
 800b424:	080106ec 	.word	0x080106ec

0800b428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	221a      	movs	r2, #26
 800b438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b43a:	f000 f843 	bl	800b4c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b43e:	4b02      	ldr	r3, [pc, #8]	; (800b448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	200000e4 	.word	0x200000e4

0800b44c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	4907      	ldr	r1, [pc, #28]	; (800b480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b462:	4808      	ldr	r0, [pc, #32]	; (800b484 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b464:	f7ff fdda 	bl	800b01c <USBD_GetString>
 800b468:	e004      	b.n	800b474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4904      	ldr	r1, [pc, #16]	; (800b480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b46e:	4805      	ldr	r0, [pc, #20]	; (800b484 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b470:	f7ff fdd4 	bl	800b01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000f00 	.word	0x20000f00
 800b484:	08010700 	.word	0x08010700

0800b488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	6039      	str	r1, [r7, #0]
 800b492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d105      	bne.n	800b4a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	4907      	ldr	r1, [pc, #28]	; (800b4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b49e:	4808      	ldr	r0, [pc, #32]	; (800b4c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4a0:	f7ff fdbc 	bl	800b01c <USBD_GetString>
 800b4a4:	e004      	b.n	800b4b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	4904      	ldr	r1, [pc, #16]	; (800b4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4aa:	4805      	ldr	r0, [pc, #20]	; (800b4c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4ac:	f7ff fdb6 	bl	800b01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4b0:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000f00 	.word	0x20000f00
 800b4c0:	0801070c 	.word	0x0801070c

0800b4c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	; (800b508 <Get_SerialNum+0x44>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <Get_SerialNum+0x48>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <Get_SerialNum+0x4c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d009      	beq.n	800b4fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4ea:	2208      	movs	r2, #8
 800b4ec:	4909      	ldr	r1, [pc, #36]	; (800b514 <Get_SerialNum+0x50>)
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 f814 	bl	800b51c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4f4:	2204      	movs	r2, #4
 800b4f6:	4908      	ldr	r1, [pc, #32]	; (800b518 <Get_SerialNum+0x54>)
 800b4f8:	68b8      	ldr	r0, [r7, #8]
 800b4fa:	f000 f80f 	bl	800b51c <IntToUnicode>
  }
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	1fff7a10 	.word	0x1fff7a10
 800b50c:	1fff7a14 	.word	0x1fff7a14
 800b510:	1fff7a18 	.word	0x1fff7a18
 800b514:	200000e6 	.word	0x200000e6
 800b518:	200000f6 	.word	0x200000f6

0800b51c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	4613      	mov	r3, r2
 800b528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b52e:	2300      	movs	r3, #0
 800b530:	75fb      	strb	r3, [r7, #23]
 800b532:	e027      	b.n	800b584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	0f1b      	lsrs	r3, r3, #28
 800b538:	2b09      	cmp	r3, #9
 800b53a:	d80b      	bhi.n	800b554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	0f1b      	lsrs	r3, r3, #28
 800b540:	b2da      	uxtb	r2, r3
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	4619      	mov	r1, r3
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	440b      	add	r3, r1
 800b54c:	3230      	adds	r2, #48	; 0x30
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	e00a      	b.n	800b56a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	0f1b      	lsrs	r3, r3, #28
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4619      	mov	r1, r3
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	440b      	add	r3, r1
 800b564:	3237      	adds	r2, #55	; 0x37
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	3301      	adds	r3, #1
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	4413      	add	r3, r2
 800b57a:	2200      	movs	r2, #0
 800b57c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	3301      	adds	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
 800b584:	7dfa      	ldrb	r2, [r7, #23]
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d3d3      	bcc.n	800b534 <IntToUnicode+0x18>
  }
}
 800b58c:	bf00      	nop
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
	...

0800b59c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	; 0x28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5a4:	f107 0314 	add.w	r3, r7, #20
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	605a      	str	r2, [r3, #4]
 800b5ae:	609a      	str	r2, [r3, #8]
 800b5b0:	60da      	str	r2, [r3, #12]
 800b5b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5bc:	d13a      	bne.n	800b634 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5be:	2300      	movs	r3, #0
 800b5c0:	613b      	str	r3, [r7, #16]
 800b5c2:	4b1e      	ldr	r3, [pc, #120]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c6:	4a1d      	ldr	r2, [pc, #116]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ce:	4b1b      	ldr	r3, [pc, #108]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5ec:	230a      	movs	r3, #10
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5f0:	f107 0314 	add.w	r3, r7, #20
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4812      	ldr	r0, [pc, #72]	; (800b640 <HAL_PCD_MspInit+0xa4>)
 800b5f8:	f7f8 f80a 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b600:	4a0e      	ldr	r2, [pc, #56]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b606:	6353      	str	r3, [r2, #52]	; 0x34
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b610:	4a0a      	ldr	r2, [pc, #40]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b616:	6453      	str	r3, [r2, #68]	; 0x44
 800b618:	4b08      	ldr	r3, [pc, #32]	; (800b63c <HAL_PCD_MspInit+0xa0>)
 800b61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b624:	2200      	movs	r2, #0
 800b626:	2100      	movs	r1, #0
 800b628:	2043      	movs	r0, #67	; 0x43
 800b62a:	f7f7 ffba 	bl	80035a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b62e:	2043      	movs	r0, #67	; 0x43
 800b630:	f7f7 ffd3 	bl	80035da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b634:	bf00      	nop
 800b636:	3728      	adds	r7, #40	; 0x28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	40023800 	.word	0x40023800
 800b640:	40020000 	.word	0x40020000

0800b644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b658:	4619      	mov	r1, r3
 800b65a:	4610      	mov	r0, r2
 800b65c:	f7fe fb7f 	bl	8009d5e <USBD_LL_SetupStage>
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b67a:	78fa      	ldrb	r2, [r7, #3]
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4613      	mov	r3, r2
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	4413      	add	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	440b      	add	r3, r1
 800b688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	4619      	mov	r1, r3
 800b692:	f7fe fbb9 	bl	8009e08 <USBD_LL_DataOutStage>
}
 800b696:	bf00      	nop
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b6b0:	78fa      	ldrb	r2, [r7, #3]
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	4413      	add	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	440b      	add	r3, r1
 800b6be:	334c      	adds	r3, #76	; 0x4c
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	78fb      	ldrb	r3, [r7, #3]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f7fe fc52 	bl	8009f6e <USBD_LL_DataInStage>
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fd86 	bl	800a1f2 <USBD_LL_SOF>
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d001      	beq.n	800b706 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b702:	f7f6 fe89 	bl	8002418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b70c:	7bfa      	ldrb	r2, [r7, #15]
 800b70e:	4611      	mov	r1, r2
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fd30 	bl	800a176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fcd8 	bl	800a0d2 <USBD_LL_Reset>
}
 800b722:	bf00      	nop
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fe fd2b 	bl	800a196 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6812      	ldr	r2, [r2, #0]
 800b74e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d005      	beq.n	800b76c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <HAL_PCD_SuspendCallback+0x48>)
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	4a03      	ldr	r2, [pc, #12]	; (800b774 <HAL_PCD_SuspendCallback+0x48>)
 800b766:	f043 0306 	orr.w	r3, r3, #6
 800b76a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	e000ed00 	.word	0xe000ed00

0800b778 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe fd1b 	bl	800a1c2 <USBD_LL_Resume>
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7a6:	78fa      	ldrb	r2, [r7, #3]
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fd73 	bl	800a296 <USBD_LL_IsoOUTIncomplete>
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ca:	78fa      	ldrb	r2, [r7, #3]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fd2f 	bl	800a232 <USBD_LL_IsoINIncomplete>
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fd85 	bl	800a2fa <USBD_LL_DevConnected>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fd82 	bl	800a310 <USBD_LL_DevDisconnected>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d13c      	bne.n	800b89e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b824:	4a20      	ldr	r2, [pc, #128]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a1e      	ldr	r2, [pc, #120]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b830:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b834:	4b1c      	ldr	r3, [pc, #112]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b83a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b83c:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b83e:	2204      	movs	r2, #4
 800b840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b842:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b844:	2202      	movs	r2, #2
 800b846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b848:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b84e:	4b16      	ldr	r3, [pc, #88]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b850:	2202      	movs	r2, #2
 800b852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b854:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b856:	2200      	movs	r2, #0
 800b858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b85a:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b860:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b862:	2200      	movs	r2, #0
 800b864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b866:	4b10      	ldr	r3, [pc, #64]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b868:	2200      	movs	r2, #0
 800b86a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b86c:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b86e:	2200      	movs	r2, #0
 800b870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b872:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b874:	f7f9 fcb5 	bl	80051e2 <HAL_PCD_Init>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b87e:	f7f6 fdcb 	bl	8002418 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b882:	2180      	movs	r1, #128	; 0x80
 800b884:	4808      	ldr	r0, [pc, #32]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b886:	f7fa ff0c 	bl	80066a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b88a:	2240      	movs	r2, #64	; 0x40
 800b88c:	2100      	movs	r1, #0
 800b88e:	4806      	ldr	r0, [pc, #24]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b890:	f7fa fec0 	bl	8006614 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b894:	2280      	movs	r2, #128	; 0x80
 800b896:	2101      	movs	r1, #1
 800b898:	4803      	ldr	r0, [pc, #12]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b89a:	f7fa febb 	bl	8006614 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20001100 	.word	0x20001100

0800b8ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7f9 fdaa 	bl	800541c <HAL_PCD_Start>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 f942 	bl	800bb58 <USBD_Get_USB_Status>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	70fb      	strb	r3, [r7, #3]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70bb      	strb	r3, [r7, #2]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b90a:	78bb      	ldrb	r3, [r7, #2]
 800b90c:	883a      	ldrh	r2, [r7, #0]
 800b90e:	78f9      	ldrb	r1, [r7, #3]
 800b910:	f7fa fa7b 	bl	8005e0a <HAL_PCD_EP_Open>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 f91c 	bl	800bb58 <USBD_Get_USB_Status>
 800b920:	4603      	mov	r3, r0
 800b922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b924:	7bbb      	ldrb	r3, [r7, #14]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	460b      	mov	r3, r1
 800b938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b948:	78fa      	ldrb	r2, [r7, #3]
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fa fac4 	bl	8005eda <HAL_PCD_EP_Close>
 800b952:	4603      	mov	r3, r0
 800b954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 f8fd 	bl	800bb58 <USBD_Get_USB_Status>
 800b95e:	4603      	mov	r3, r0
 800b960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b962:	7bbb      	ldrb	r3, [r7, #14]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fa fb9c 	bl	80060c8 <HAL_PCD_EP_SetStall>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	4618      	mov	r0, r3
 800b998:	f000 f8de 	bl	800bb58 <USBD_Get_USB_Status>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9c4:	78fa      	ldrb	r2, [r7, #3]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fa fbe1 	bl	8006190 <HAL_PCD_EP_ClrStall>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 f8bf 	bl	800bb58 <USBD_Get_USB_Status>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da0b      	bge.n	800ba1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba0a:	68f9      	ldr	r1, [r7, #12]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	4413      	add	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	440b      	add	r3, r1
 800ba16:	333e      	adds	r3, #62	; 0x3e
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	e00b      	b.n	800ba34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	4613      	mov	r3, r2
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	4413      	add	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ba32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba5a:	78fa      	ldrb	r2, [r7, #3]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fa f9ae 	bl	8005dc0 <HAL_PCD_SetAddress>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f874 	bl	800bb58 <USBD_Get_USB_Status>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b086      	sub	sp, #24
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	603b      	str	r3, [r7, #0]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba9c:	7af9      	ldrb	r1, [r7, #11]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	f7fa fac7 	bl	8006034 <HAL_PCD_EP_Transmit>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	4618      	mov	r0, r3
 800baae:	f000 f853 	bl	800bb58 <USBD_Get_USB_Status>
 800bab2:	4603      	mov	r3, r0
 800bab4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bab6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	460b      	mov	r3, r1
 800bace:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bade:	7af9      	ldrb	r1, [r7, #11]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	f7fa fa43 	bl	8005f6e <HAL_PCD_EP_Receive>
 800bae8:	4603      	mov	r3, r0
 800baea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f832 	bl	800bb58 <USBD_Get_USB_Status>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800baf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fa fa73 	bl	8006004 <HAL_PCD_EP_GetRxCount>
 800bb1e:	4603      	mov	r3, r0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb30:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <USBD_static_malloc+0x18>)
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	2000160c 	.word	0x2000160c

0800bb44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]

}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d817      	bhi.n	800bb9c <USBD_Get_USB_Status+0x44>
 800bb6c:	a201      	add	r2, pc, #4	; (adr r2, 800bb74 <USBD_Get_USB_Status+0x1c>)
 800bb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb72:	bf00      	nop
 800bb74:	0800bb85 	.word	0x0800bb85
 800bb78:	0800bb8b 	.word	0x0800bb8b
 800bb7c:	0800bb91 	.word	0x0800bb91
 800bb80:	0800bb97 	.word	0x0800bb97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
    break;
 800bb88:	e00b      	b.n	800bba2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8e:	e008      	b.n	800bba2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb90:	2301      	movs	r3, #1
 800bb92:	73fb      	strb	r3, [r7, #15]
    break;
 800bb94:	e005      	b.n	800bba2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb96:	2303      	movs	r3, #3
 800bb98:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9a:	e002      	b.n	800bba2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bba0:	bf00      	nop
  }
  return usb_status;
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <__errno>:
 800bbb0:	4b01      	ldr	r3, [pc, #4]	; (800bbb8 <__errno+0x8>)
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	20000100 	.word	0x20000100

0800bbbc <__libc_init_array>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	4d0d      	ldr	r5, [pc, #52]	; (800bbf4 <__libc_init_array+0x38>)
 800bbc0:	4c0d      	ldr	r4, [pc, #52]	; (800bbf8 <__libc_init_array+0x3c>)
 800bbc2:	1b64      	subs	r4, r4, r5
 800bbc4:	10a4      	asrs	r4, r4, #2
 800bbc6:	2600      	movs	r6, #0
 800bbc8:	42a6      	cmp	r6, r4
 800bbca:	d109      	bne.n	800bbe0 <__libc_init_array+0x24>
 800bbcc:	4d0b      	ldr	r5, [pc, #44]	; (800bbfc <__libc_init_array+0x40>)
 800bbce:	4c0c      	ldr	r4, [pc, #48]	; (800bc00 <__libc_init_array+0x44>)
 800bbd0:	f004 fd1c 	bl	801060c <_init>
 800bbd4:	1b64      	subs	r4, r4, r5
 800bbd6:	10a4      	asrs	r4, r4, #2
 800bbd8:	2600      	movs	r6, #0
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	d105      	bne.n	800bbea <__libc_init_array+0x2e>
 800bbde:	bd70      	pop	{r4, r5, r6, pc}
 800bbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe4:	4798      	blx	r3
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	e7ee      	b.n	800bbc8 <__libc_init_array+0xc>
 800bbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbee:	4798      	blx	r3
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	e7f2      	b.n	800bbda <__libc_init_array+0x1e>
 800bbf4:	08010bec 	.word	0x08010bec
 800bbf8:	08010bec 	.word	0x08010bec
 800bbfc:	08010bec 	.word	0x08010bec
 800bc00:	08010bf0 	.word	0x08010bf0

0800bc04 <memset>:
 800bc04:	4402      	add	r2, r0
 800bc06:	4603      	mov	r3, r0
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d100      	bne.n	800bc0e <memset+0xa>
 800bc0c:	4770      	bx	lr
 800bc0e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc12:	e7f9      	b.n	800bc08 <memset+0x4>

0800bc14 <__cvt>:
 800bc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc18:	ec55 4b10 	vmov	r4, r5, d0
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	460e      	mov	r6, r1
 800bc20:	4619      	mov	r1, r3
 800bc22:	462b      	mov	r3, r5
 800bc24:	bfbb      	ittet	lt
 800bc26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc2a:	461d      	movlt	r5, r3
 800bc2c:	2300      	movge	r3, #0
 800bc2e:	232d      	movlt	r3, #45	; 0x2d
 800bc30:	700b      	strb	r3, [r1, #0]
 800bc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc38:	4691      	mov	r9, r2
 800bc3a:	f023 0820 	bic.w	r8, r3, #32
 800bc3e:	bfbc      	itt	lt
 800bc40:	4622      	movlt	r2, r4
 800bc42:	4614      	movlt	r4, r2
 800bc44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc48:	d005      	beq.n	800bc56 <__cvt+0x42>
 800bc4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc4e:	d100      	bne.n	800bc52 <__cvt+0x3e>
 800bc50:	3601      	adds	r6, #1
 800bc52:	2102      	movs	r1, #2
 800bc54:	e000      	b.n	800bc58 <__cvt+0x44>
 800bc56:	2103      	movs	r1, #3
 800bc58:	ab03      	add	r3, sp, #12
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	ab02      	add	r3, sp, #8
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	ec45 4b10 	vmov	d0, r4, r5
 800bc64:	4653      	mov	r3, sl
 800bc66:	4632      	mov	r2, r6
 800bc68:	f001 fefa 	bl	800da60 <_dtoa_r>
 800bc6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc70:	4607      	mov	r7, r0
 800bc72:	d102      	bne.n	800bc7a <__cvt+0x66>
 800bc74:	f019 0f01 	tst.w	r9, #1
 800bc78:	d022      	beq.n	800bcc0 <__cvt+0xac>
 800bc7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc7e:	eb07 0906 	add.w	r9, r7, r6
 800bc82:	d110      	bne.n	800bca6 <__cvt+0x92>
 800bc84:	783b      	ldrb	r3, [r7, #0]
 800bc86:	2b30      	cmp	r3, #48	; 0x30
 800bc88:	d10a      	bne.n	800bca0 <__cvt+0x8c>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc96:	b918      	cbnz	r0, 800bca0 <__cvt+0x8c>
 800bc98:	f1c6 0601 	rsb	r6, r6, #1
 800bc9c:	f8ca 6000 	str.w	r6, [sl]
 800bca0:	f8da 3000 	ldr.w	r3, [sl]
 800bca4:	4499      	add	r9, r3
 800bca6:	2200      	movs	r2, #0
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	f7f4 ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcb2:	b108      	cbz	r0, 800bcb8 <__cvt+0xa4>
 800bcb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcb8:	2230      	movs	r2, #48	; 0x30
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	454b      	cmp	r3, r9
 800bcbe:	d307      	bcc.n	800bcd0 <__cvt+0xbc>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcc4:	1bdb      	subs	r3, r3, r7
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	6013      	str	r3, [r2, #0]
 800bcca:	b004      	add	sp, #16
 800bccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd0:	1c59      	adds	r1, r3, #1
 800bcd2:	9103      	str	r1, [sp, #12]
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	e7f0      	b.n	800bcba <__cvt+0xa6>

0800bcd8 <__exponent>:
 800bcd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2900      	cmp	r1, #0
 800bcde:	bfb8      	it	lt
 800bce0:	4249      	neglt	r1, r1
 800bce2:	f803 2b02 	strb.w	r2, [r3], #2
 800bce6:	bfb4      	ite	lt
 800bce8:	222d      	movlt	r2, #45	; 0x2d
 800bcea:	222b      	movge	r2, #43	; 0x2b
 800bcec:	2909      	cmp	r1, #9
 800bcee:	7042      	strb	r2, [r0, #1]
 800bcf0:	dd2a      	ble.n	800bd48 <__exponent+0x70>
 800bcf2:	f10d 0407 	add.w	r4, sp, #7
 800bcf6:	46a4      	mov	ip, r4
 800bcf8:	270a      	movs	r7, #10
 800bcfa:	46a6      	mov	lr, r4
 800bcfc:	460a      	mov	r2, r1
 800bcfe:	fb91 f6f7 	sdiv	r6, r1, r7
 800bd02:	fb07 1516 	mls	r5, r7, r6, r1
 800bd06:	3530      	adds	r5, #48	; 0x30
 800bd08:	2a63      	cmp	r2, #99	; 0x63
 800bd0a:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bd12:	4631      	mov	r1, r6
 800bd14:	dcf1      	bgt.n	800bcfa <__exponent+0x22>
 800bd16:	3130      	adds	r1, #48	; 0x30
 800bd18:	f1ae 0502 	sub.w	r5, lr, #2
 800bd1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bd20:	1c44      	adds	r4, r0, #1
 800bd22:	4629      	mov	r1, r5
 800bd24:	4561      	cmp	r1, ip
 800bd26:	d30a      	bcc.n	800bd3e <__exponent+0x66>
 800bd28:	f10d 0209 	add.w	r2, sp, #9
 800bd2c:	eba2 020e 	sub.w	r2, r2, lr
 800bd30:	4565      	cmp	r5, ip
 800bd32:	bf88      	it	hi
 800bd34:	2200      	movhi	r2, #0
 800bd36:	4413      	add	r3, r2
 800bd38:	1a18      	subs	r0, r3, r0
 800bd3a:	b003      	add	sp, #12
 800bd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd46:	e7ed      	b.n	800bd24 <__exponent+0x4c>
 800bd48:	2330      	movs	r3, #48	; 0x30
 800bd4a:	3130      	adds	r1, #48	; 0x30
 800bd4c:	7083      	strb	r3, [r0, #2]
 800bd4e:	70c1      	strb	r1, [r0, #3]
 800bd50:	1d03      	adds	r3, r0, #4
 800bd52:	e7f1      	b.n	800bd38 <__exponent+0x60>

0800bd54 <_printf_float>:
 800bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	ed2d 8b02 	vpush	{d8}
 800bd5c:	b08d      	sub	sp, #52	; 0x34
 800bd5e:	460c      	mov	r4, r1
 800bd60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd64:	4616      	mov	r6, r2
 800bd66:	461f      	mov	r7, r3
 800bd68:	4605      	mov	r5, r0
 800bd6a:	f003 f98d 	bl	800f088 <_localeconv_r>
 800bd6e:	f8d0 a000 	ldr.w	sl, [r0]
 800bd72:	4650      	mov	r0, sl
 800bd74:	f7f4 fa34 	bl	80001e0 <strlen>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	9305      	str	r3, [sp, #20]
 800bd80:	f8d8 3000 	ldr.w	r3, [r8]
 800bd84:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd88:	3307      	adds	r3, #7
 800bd8a:	f023 0307 	bic.w	r3, r3, #7
 800bd8e:	f103 0208 	add.w	r2, r3, #8
 800bd92:	f8c8 2000 	str.w	r2, [r8]
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bda2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bda6:	9307      	str	r3, [sp, #28]
 800bda8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdac:	ee08 0a10 	vmov	s16, r0
 800bdb0:	4b9f      	ldr	r3, [pc, #636]	; (800c030 <_printf_float+0x2dc>)
 800bdb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdba:	f7f4 febf 	bl	8000b3c <__aeabi_dcmpun>
 800bdbe:	bb88      	cbnz	r0, 800be24 <_printf_float+0xd0>
 800bdc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdc4:	4b9a      	ldr	r3, [pc, #616]	; (800c030 <_printf_float+0x2dc>)
 800bdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdca:	f7f4 fe99 	bl	8000b00 <__aeabi_dcmple>
 800bdce:	bb48      	cbnz	r0, 800be24 <_printf_float+0xd0>
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	f7f4 fe88 	bl	8000aec <__aeabi_dcmplt>
 800bddc:	b110      	cbz	r0, 800bde4 <_printf_float+0x90>
 800bdde:	232d      	movs	r3, #45	; 0x2d
 800bde0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bde4:	4b93      	ldr	r3, [pc, #588]	; (800c034 <_printf_float+0x2e0>)
 800bde6:	4894      	ldr	r0, [pc, #592]	; (800c038 <_printf_float+0x2e4>)
 800bde8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bdec:	bf94      	ite	ls
 800bdee:	4698      	movls	r8, r3
 800bdf0:	4680      	movhi	r8, r0
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	9b05      	ldr	r3, [sp, #20]
 800bdf8:	f023 0204 	bic.w	r2, r3, #4
 800bdfc:	6022      	str	r2, [r4, #0]
 800bdfe:	f04f 0900 	mov.w	r9, #0
 800be02:	9700      	str	r7, [sp, #0]
 800be04:	4633      	mov	r3, r6
 800be06:	aa0b      	add	r2, sp, #44	; 0x2c
 800be08:	4621      	mov	r1, r4
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 f9d8 	bl	800c1c0 <_printf_common>
 800be10:	3001      	adds	r0, #1
 800be12:	f040 8090 	bne.w	800bf36 <_printf_float+0x1e2>
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	b00d      	add	sp, #52	; 0x34
 800be1c:	ecbd 8b02 	vpop	{d8}
 800be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be24:	4642      	mov	r2, r8
 800be26:	464b      	mov	r3, r9
 800be28:	4640      	mov	r0, r8
 800be2a:	4649      	mov	r1, r9
 800be2c:	f7f4 fe86 	bl	8000b3c <__aeabi_dcmpun>
 800be30:	b140      	cbz	r0, 800be44 <_printf_float+0xf0>
 800be32:	464b      	mov	r3, r9
 800be34:	2b00      	cmp	r3, #0
 800be36:	bfbc      	itt	lt
 800be38:	232d      	movlt	r3, #45	; 0x2d
 800be3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be3e:	487f      	ldr	r0, [pc, #508]	; (800c03c <_printf_float+0x2e8>)
 800be40:	4b7f      	ldr	r3, [pc, #508]	; (800c040 <_printf_float+0x2ec>)
 800be42:	e7d1      	b.n	800bde8 <_printf_float+0x94>
 800be44:	6863      	ldr	r3, [r4, #4]
 800be46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be4a:	9206      	str	r2, [sp, #24]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	d13f      	bne.n	800bed0 <_printf_float+0x17c>
 800be50:	2306      	movs	r3, #6
 800be52:	6063      	str	r3, [r4, #4]
 800be54:	9b05      	ldr	r3, [sp, #20]
 800be56:	6861      	ldr	r1, [r4, #4]
 800be58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be5c:	2300      	movs	r3, #0
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	ab0a      	add	r3, sp, #40	; 0x28
 800be62:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be66:	ab09      	add	r3, sp, #36	; 0x24
 800be68:	ec49 8b10 	vmov	d0, r8, r9
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be74:	4628      	mov	r0, r5
 800be76:	f7ff fecd 	bl	800bc14 <__cvt>
 800be7a:	9b06      	ldr	r3, [sp, #24]
 800be7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be7e:	2b47      	cmp	r3, #71	; 0x47
 800be80:	4680      	mov	r8, r0
 800be82:	d108      	bne.n	800be96 <_printf_float+0x142>
 800be84:	1cc8      	adds	r0, r1, #3
 800be86:	db02      	blt.n	800be8e <_printf_float+0x13a>
 800be88:	6863      	ldr	r3, [r4, #4]
 800be8a:	4299      	cmp	r1, r3
 800be8c:	dd41      	ble.n	800bf12 <_printf_float+0x1be>
 800be8e:	f1ab 0b02 	sub.w	fp, fp, #2
 800be92:	fa5f fb8b 	uxtb.w	fp, fp
 800be96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be9a:	d820      	bhi.n	800bede <_printf_float+0x18a>
 800be9c:	3901      	subs	r1, #1
 800be9e:	465a      	mov	r2, fp
 800bea0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bea4:	9109      	str	r1, [sp, #36]	; 0x24
 800bea6:	f7ff ff17 	bl	800bcd8 <__exponent>
 800beaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beac:	1813      	adds	r3, r2, r0
 800beae:	2a01      	cmp	r2, #1
 800beb0:	4681      	mov	r9, r0
 800beb2:	6123      	str	r3, [r4, #16]
 800beb4:	dc02      	bgt.n	800bebc <_printf_float+0x168>
 800beb6:	6822      	ldr	r2, [r4, #0]
 800beb8:	07d2      	lsls	r2, r2, #31
 800beba:	d501      	bpl.n	800bec0 <_printf_float+0x16c>
 800bebc:	3301      	adds	r3, #1
 800bebe:	6123      	str	r3, [r4, #16]
 800bec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d09c      	beq.n	800be02 <_printf_float+0xae>
 800bec8:	232d      	movs	r3, #45	; 0x2d
 800beca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bece:	e798      	b.n	800be02 <_printf_float+0xae>
 800bed0:	9a06      	ldr	r2, [sp, #24]
 800bed2:	2a47      	cmp	r2, #71	; 0x47
 800bed4:	d1be      	bne.n	800be54 <_printf_float+0x100>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1bc      	bne.n	800be54 <_printf_float+0x100>
 800beda:	2301      	movs	r3, #1
 800bedc:	e7b9      	b.n	800be52 <_printf_float+0xfe>
 800bede:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bee2:	d118      	bne.n	800bf16 <_printf_float+0x1c2>
 800bee4:	2900      	cmp	r1, #0
 800bee6:	6863      	ldr	r3, [r4, #4]
 800bee8:	dd0b      	ble.n	800bf02 <_printf_float+0x1ae>
 800beea:	6121      	str	r1, [r4, #16]
 800beec:	b913      	cbnz	r3, 800bef4 <_printf_float+0x1a0>
 800beee:	6822      	ldr	r2, [r4, #0]
 800bef0:	07d0      	lsls	r0, r2, #31
 800bef2:	d502      	bpl.n	800befa <_printf_float+0x1a6>
 800bef4:	3301      	adds	r3, #1
 800bef6:	440b      	add	r3, r1
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	65a1      	str	r1, [r4, #88]	; 0x58
 800befc:	f04f 0900 	mov.w	r9, #0
 800bf00:	e7de      	b.n	800bec0 <_printf_float+0x16c>
 800bf02:	b913      	cbnz	r3, 800bf0a <_printf_float+0x1b6>
 800bf04:	6822      	ldr	r2, [r4, #0]
 800bf06:	07d2      	lsls	r2, r2, #31
 800bf08:	d501      	bpl.n	800bf0e <_printf_float+0x1ba>
 800bf0a:	3302      	adds	r3, #2
 800bf0c:	e7f4      	b.n	800bef8 <_printf_float+0x1a4>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e7f2      	b.n	800bef8 <_printf_float+0x1a4>
 800bf12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf18:	4299      	cmp	r1, r3
 800bf1a:	db05      	blt.n	800bf28 <_printf_float+0x1d4>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	6121      	str	r1, [r4, #16]
 800bf20:	07d8      	lsls	r0, r3, #31
 800bf22:	d5ea      	bpl.n	800befa <_printf_float+0x1a6>
 800bf24:	1c4b      	adds	r3, r1, #1
 800bf26:	e7e7      	b.n	800bef8 <_printf_float+0x1a4>
 800bf28:	2900      	cmp	r1, #0
 800bf2a:	bfd4      	ite	le
 800bf2c:	f1c1 0202 	rsble	r2, r1, #2
 800bf30:	2201      	movgt	r2, #1
 800bf32:	4413      	add	r3, r2
 800bf34:	e7e0      	b.n	800bef8 <_printf_float+0x1a4>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	055a      	lsls	r2, r3, #21
 800bf3a:	d407      	bmi.n	800bf4c <_printf_float+0x1f8>
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	4642      	mov	r2, r8
 800bf40:	4631      	mov	r1, r6
 800bf42:	4628      	mov	r0, r5
 800bf44:	47b8      	blx	r7
 800bf46:	3001      	adds	r0, #1
 800bf48:	d12c      	bne.n	800bfa4 <_printf_float+0x250>
 800bf4a:	e764      	b.n	800be16 <_printf_float+0xc2>
 800bf4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf50:	f240 80e0 	bls.w	800c114 <_printf_float+0x3c0>
 800bf54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f7f4 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d034      	beq.n	800bfce <_printf_float+0x27a>
 800bf64:	4a37      	ldr	r2, [pc, #220]	; (800c044 <_printf_float+0x2f0>)
 800bf66:	2301      	movs	r3, #1
 800bf68:	4631      	mov	r1, r6
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	47b8      	blx	r7
 800bf6e:	3001      	adds	r0, #1
 800bf70:	f43f af51 	beq.w	800be16 <_printf_float+0xc2>
 800bf74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	db02      	blt.n	800bf82 <_printf_float+0x22e>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	07d8      	lsls	r0, r3, #31
 800bf80:	d510      	bpl.n	800bfa4 <_printf_float+0x250>
 800bf82:	ee18 3a10 	vmov	r3, s16
 800bf86:	4652      	mov	r2, sl
 800bf88:	4631      	mov	r1, r6
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	47b8      	blx	r7
 800bf8e:	3001      	adds	r0, #1
 800bf90:	f43f af41 	beq.w	800be16 <_printf_float+0xc2>
 800bf94:	f04f 0800 	mov.w	r8, #0
 800bf98:	f104 091a 	add.w	r9, r4, #26
 800bf9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	4543      	cmp	r3, r8
 800bfa2:	dc09      	bgt.n	800bfb8 <_printf_float+0x264>
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	079b      	lsls	r3, r3, #30
 800bfa8:	f100 8105 	bmi.w	800c1b6 <_printf_float+0x462>
 800bfac:	68e0      	ldr	r0, [r4, #12]
 800bfae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfb0:	4298      	cmp	r0, r3
 800bfb2:	bfb8      	it	lt
 800bfb4:	4618      	movlt	r0, r3
 800bfb6:	e730      	b.n	800be1a <_printf_float+0xc6>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	464a      	mov	r2, r9
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f af27 	beq.w	800be16 <_printf_float+0xc2>
 800bfc8:	f108 0801 	add.w	r8, r8, #1
 800bfcc:	e7e6      	b.n	800bf9c <_printf_float+0x248>
 800bfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dc39      	bgt.n	800c048 <_printf_float+0x2f4>
 800bfd4:	4a1b      	ldr	r2, [pc, #108]	; (800c044 <_printf_float+0x2f0>)
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4631      	mov	r1, r6
 800bfda:	4628      	mov	r0, r5
 800bfdc:	47b8      	blx	r7
 800bfde:	3001      	adds	r0, #1
 800bfe0:	f43f af19 	beq.w	800be16 <_printf_float+0xc2>
 800bfe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	d102      	bne.n	800bff2 <_printf_float+0x29e>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	07d9      	lsls	r1, r3, #31
 800bff0:	d5d8      	bpl.n	800bfa4 <_printf_float+0x250>
 800bff2:	ee18 3a10 	vmov	r3, s16
 800bff6:	4652      	mov	r2, sl
 800bff8:	4631      	mov	r1, r6
 800bffa:	4628      	mov	r0, r5
 800bffc:	47b8      	blx	r7
 800bffe:	3001      	adds	r0, #1
 800c000:	f43f af09 	beq.w	800be16 <_printf_float+0xc2>
 800c004:	f04f 0900 	mov.w	r9, #0
 800c008:	f104 0a1a 	add.w	sl, r4, #26
 800c00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c00e:	425b      	negs	r3, r3
 800c010:	454b      	cmp	r3, r9
 800c012:	dc01      	bgt.n	800c018 <_printf_float+0x2c4>
 800c014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c016:	e792      	b.n	800bf3e <_printf_float+0x1ea>
 800c018:	2301      	movs	r3, #1
 800c01a:	4652      	mov	r2, sl
 800c01c:	4631      	mov	r1, r6
 800c01e:	4628      	mov	r0, r5
 800c020:	47b8      	blx	r7
 800c022:	3001      	adds	r0, #1
 800c024:	f43f aef7 	beq.w	800be16 <_printf_float+0xc2>
 800c028:	f109 0901 	add.w	r9, r9, #1
 800c02c:	e7ee      	b.n	800c00c <_printf_float+0x2b8>
 800c02e:	bf00      	nop
 800c030:	7fefffff 	.word	0x7fefffff
 800c034:	08010738 	.word	0x08010738
 800c038:	0801073c 	.word	0x0801073c
 800c03c:	08010744 	.word	0x08010744
 800c040:	08010740 	.word	0x08010740
 800c044:	08010748 	.word	0x08010748
 800c048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c04a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c04c:	429a      	cmp	r2, r3
 800c04e:	bfa8      	it	ge
 800c050:	461a      	movge	r2, r3
 800c052:	2a00      	cmp	r2, #0
 800c054:	4691      	mov	r9, r2
 800c056:	dc37      	bgt.n	800c0c8 <_printf_float+0x374>
 800c058:	f04f 0b00 	mov.w	fp, #0
 800c05c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c060:	f104 021a 	add.w	r2, r4, #26
 800c064:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c066:	9305      	str	r3, [sp, #20]
 800c068:	eba3 0309 	sub.w	r3, r3, r9
 800c06c:	455b      	cmp	r3, fp
 800c06e:	dc33      	bgt.n	800c0d8 <_printf_float+0x384>
 800c070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c074:	429a      	cmp	r2, r3
 800c076:	db3b      	blt.n	800c0f0 <_printf_float+0x39c>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	07da      	lsls	r2, r3, #31
 800c07c:	d438      	bmi.n	800c0f0 <_printf_float+0x39c>
 800c07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c080:	9a05      	ldr	r2, [sp, #20]
 800c082:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c084:	1a9a      	subs	r2, r3, r2
 800c086:	eba3 0901 	sub.w	r9, r3, r1
 800c08a:	4591      	cmp	r9, r2
 800c08c:	bfa8      	it	ge
 800c08e:	4691      	movge	r9, r2
 800c090:	f1b9 0f00 	cmp.w	r9, #0
 800c094:	dc35      	bgt.n	800c102 <_printf_float+0x3ae>
 800c096:	f04f 0800 	mov.w	r8, #0
 800c09a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c09e:	f104 0a1a 	add.w	sl, r4, #26
 800c0a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0a6:	1a9b      	subs	r3, r3, r2
 800c0a8:	eba3 0309 	sub.w	r3, r3, r9
 800c0ac:	4543      	cmp	r3, r8
 800c0ae:	f77f af79 	ble.w	800bfa4 <_printf_float+0x250>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	4652      	mov	r2, sl
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	47b8      	blx	r7
 800c0bc:	3001      	adds	r0, #1
 800c0be:	f43f aeaa 	beq.w	800be16 <_printf_float+0xc2>
 800c0c2:	f108 0801 	add.w	r8, r8, #1
 800c0c6:	e7ec      	b.n	800c0a2 <_printf_float+0x34e>
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4642      	mov	r2, r8
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	47b8      	blx	r7
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	d1c0      	bne.n	800c058 <_printf_float+0x304>
 800c0d6:	e69e      	b.n	800be16 <_printf_float+0xc2>
 800c0d8:	2301      	movs	r3, #1
 800c0da:	4631      	mov	r1, r6
 800c0dc:	4628      	mov	r0, r5
 800c0de:	9205      	str	r2, [sp, #20]
 800c0e0:	47b8      	blx	r7
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	f43f ae97 	beq.w	800be16 <_printf_float+0xc2>
 800c0e8:	9a05      	ldr	r2, [sp, #20]
 800c0ea:	f10b 0b01 	add.w	fp, fp, #1
 800c0ee:	e7b9      	b.n	800c064 <_printf_float+0x310>
 800c0f0:	ee18 3a10 	vmov	r3, s16
 800c0f4:	4652      	mov	r2, sl
 800c0f6:	4631      	mov	r1, r6
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	47b8      	blx	r7
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d1be      	bne.n	800c07e <_printf_float+0x32a>
 800c100:	e689      	b.n	800be16 <_printf_float+0xc2>
 800c102:	9a05      	ldr	r2, [sp, #20]
 800c104:	464b      	mov	r3, r9
 800c106:	4442      	add	r2, r8
 800c108:	4631      	mov	r1, r6
 800c10a:	4628      	mov	r0, r5
 800c10c:	47b8      	blx	r7
 800c10e:	3001      	adds	r0, #1
 800c110:	d1c1      	bne.n	800c096 <_printf_float+0x342>
 800c112:	e680      	b.n	800be16 <_printf_float+0xc2>
 800c114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c116:	2a01      	cmp	r2, #1
 800c118:	dc01      	bgt.n	800c11e <_printf_float+0x3ca>
 800c11a:	07db      	lsls	r3, r3, #31
 800c11c:	d538      	bpl.n	800c190 <_printf_float+0x43c>
 800c11e:	2301      	movs	r3, #1
 800c120:	4642      	mov	r2, r8
 800c122:	4631      	mov	r1, r6
 800c124:	4628      	mov	r0, r5
 800c126:	47b8      	blx	r7
 800c128:	3001      	adds	r0, #1
 800c12a:	f43f ae74 	beq.w	800be16 <_printf_float+0xc2>
 800c12e:	ee18 3a10 	vmov	r3, s16
 800c132:	4652      	mov	r2, sl
 800c134:	4631      	mov	r1, r6
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	f43f ae6b 	beq.w	800be16 <_printf_float+0xc2>
 800c140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c144:	2200      	movs	r2, #0
 800c146:	2300      	movs	r3, #0
 800c148:	f7f4 fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800c14c:	b9d8      	cbnz	r0, 800c186 <_printf_float+0x432>
 800c14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c150:	f108 0201 	add.w	r2, r8, #1
 800c154:	3b01      	subs	r3, #1
 800c156:	4631      	mov	r1, r6
 800c158:	4628      	mov	r0, r5
 800c15a:	47b8      	blx	r7
 800c15c:	3001      	adds	r0, #1
 800c15e:	d10e      	bne.n	800c17e <_printf_float+0x42a>
 800c160:	e659      	b.n	800be16 <_printf_float+0xc2>
 800c162:	2301      	movs	r3, #1
 800c164:	4652      	mov	r2, sl
 800c166:	4631      	mov	r1, r6
 800c168:	4628      	mov	r0, r5
 800c16a:	47b8      	blx	r7
 800c16c:	3001      	adds	r0, #1
 800c16e:	f43f ae52 	beq.w	800be16 <_printf_float+0xc2>
 800c172:	f108 0801 	add.w	r8, r8, #1
 800c176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c178:	3b01      	subs	r3, #1
 800c17a:	4543      	cmp	r3, r8
 800c17c:	dcf1      	bgt.n	800c162 <_printf_float+0x40e>
 800c17e:	464b      	mov	r3, r9
 800c180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c184:	e6dc      	b.n	800bf40 <_printf_float+0x1ec>
 800c186:	f04f 0800 	mov.w	r8, #0
 800c18a:	f104 0a1a 	add.w	sl, r4, #26
 800c18e:	e7f2      	b.n	800c176 <_printf_float+0x422>
 800c190:	2301      	movs	r3, #1
 800c192:	4642      	mov	r2, r8
 800c194:	e7df      	b.n	800c156 <_printf_float+0x402>
 800c196:	2301      	movs	r3, #1
 800c198:	464a      	mov	r2, r9
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f ae38 	beq.w	800be16 <_printf_float+0xc2>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	68e3      	ldr	r3, [r4, #12]
 800c1ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1ae:	1a5b      	subs	r3, r3, r1
 800c1b0:	4543      	cmp	r3, r8
 800c1b2:	dcf0      	bgt.n	800c196 <_printf_float+0x442>
 800c1b4:	e6fa      	b.n	800bfac <_printf_float+0x258>
 800c1b6:	f04f 0800 	mov.w	r8, #0
 800c1ba:	f104 0919 	add.w	r9, r4, #25
 800c1be:	e7f4      	b.n	800c1aa <_printf_float+0x456>

0800c1c0 <_printf_common>:
 800c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	4699      	mov	r9, r3
 800c1c8:	688a      	ldr	r2, [r1, #8]
 800c1ca:	690b      	ldr	r3, [r1, #16]
 800c1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	bfb8      	it	lt
 800c1d4:	4613      	movlt	r3, r2
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	b10a      	cbz	r2, 800c1e6 <_printf_common+0x26>
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	6033      	str	r3, [r6, #0]
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	0699      	lsls	r1, r3, #26
 800c1ea:	bf42      	ittt	mi
 800c1ec:	6833      	ldrmi	r3, [r6, #0]
 800c1ee:	3302      	addmi	r3, #2
 800c1f0:	6033      	strmi	r3, [r6, #0]
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	f015 0506 	ands.w	r5, r5, #6
 800c1f8:	d106      	bne.n	800c208 <_printf_common+0x48>
 800c1fa:	f104 0a19 	add.w	sl, r4, #25
 800c1fe:	68e3      	ldr	r3, [r4, #12]
 800c200:	6832      	ldr	r2, [r6, #0]
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	42ab      	cmp	r3, r5
 800c206:	dc26      	bgt.n	800c256 <_printf_common+0x96>
 800c208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c20c:	1e13      	subs	r3, r2, #0
 800c20e:	6822      	ldr	r2, [r4, #0]
 800c210:	bf18      	it	ne
 800c212:	2301      	movne	r3, #1
 800c214:	0692      	lsls	r2, r2, #26
 800c216:	d42b      	bmi.n	800c270 <_printf_common+0xb0>
 800c218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c21c:	4649      	mov	r1, r9
 800c21e:	4638      	mov	r0, r7
 800c220:	47c0      	blx	r8
 800c222:	3001      	adds	r0, #1
 800c224:	d01e      	beq.n	800c264 <_printf_common+0xa4>
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	68e5      	ldr	r5, [r4, #12]
 800c22a:	6832      	ldr	r2, [r6, #0]
 800c22c:	f003 0306 	and.w	r3, r3, #6
 800c230:	2b04      	cmp	r3, #4
 800c232:	bf08      	it	eq
 800c234:	1aad      	subeq	r5, r5, r2
 800c236:	68a3      	ldr	r3, [r4, #8]
 800c238:	6922      	ldr	r2, [r4, #16]
 800c23a:	bf0c      	ite	eq
 800c23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c240:	2500      	movne	r5, #0
 800c242:	4293      	cmp	r3, r2
 800c244:	bfc4      	itt	gt
 800c246:	1a9b      	subgt	r3, r3, r2
 800c248:	18ed      	addgt	r5, r5, r3
 800c24a:	2600      	movs	r6, #0
 800c24c:	341a      	adds	r4, #26
 800c24e:	42b5      	cmp	r5, r6
 800c250:	d11a      	bne.n	800c288 <_printf_common+0xc8>
 800c252:	2000      	movs	r0, #0
 800c254:	e008      	b.n	800c268 <_printf_common+0xa8>
 800c256:	2301      	movs	r3, #1
 800c258:	4652      	mov	r2, sl
 800c25a:	4649      	mov	r1, r9
 800c25c:	4638      	mov	r0, r7
 800c25e:	47c0      	blx	r8
 800c260:	3001      	adds	r0, #1
 800c262:	d103      	bne.n	800c26c <_printf_common+0xac>
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c26c:	3501      	adds	r5, #1
 800c26e:	e7c6      	b.n	800c1fe <_printf_common+0x3e>
 800c270:	18e1      	adds	r1, r4, r3
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	2030      	movs	r0, #48	; 0x30
 800c276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c27a:	4422      	add	r2, r4
 800c27c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c284:	3302      	adds	r3, #2
 800c286:	e7c7      	b.n	800c218 <_printf_common+0x58>
 800c288:	2301      	movs	r3, #1
 800c28a:	4622      	mov	r2, r4
 800c28c:	4649      	mov	r1, r9
 800c28e:	4638      	mov	r0, r7
 800c290:	47c0      	blx	r8
 800c292:	3001      	adds	r0, #1
 800c294:	d0e6      	beq.n	800c264 <_printf_common+0xa4>
 800c296:	3601      	adds	r6, #1
 800c298:	e7d9      	b.n	800c24e <_printf_common+0x8e>
	...

0800c29c <_printf_i>:
 800c29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a0:	7e0f      	ldrb	r7, [r1, #24]
 800c2a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2a4:	2f78      	cmp	r7, #120	; 0x78
 800c2a6:	4691      	mov	r9, r2
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	469a      	mov	sl, r3
 800c2ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c2b2:	d807      	bhi.n	800c2c4 <_printf_i+0x28>
 800c2b4:	2f62      	cmp	r7, #98	; 0x62
 800c2b6:	d80a      	bhi.n	800c2ce <_printf_i+0x32>
 800c2b8:	2f00      	cmp	r7, #0
 800c2ba:	f000 80d8 	beq.w	800c46e <_printf_i+0x1d2>
 800c2be:	2f58      	cmp	r7, #88	; 0x58
 800c2c0:	f000 80a3 	beq.w	800c40a <_printf_i+0x16e>
 800c2c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2cc:	e03a      	b.n	800c344 <_printf_i+0xa8>
 800c2ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2d2:	2b15      	cmp	r3, #21
 800c2d4:	d8f6      	bhi.n	800c2c4 <_printf_i+0x28>
 800c2d6:	a101      	add	r1, pc, #4	; (adr r1, 800c2dc <_printf_i+0x40>)
 800c2d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2dc:	0800c335 	.word	0x0800c335
 800c2e0:	0800c349 	.word	0x0800c349
 800c2e4:	0800c2c5 	.word	0x0800c2c5
 800c2e8:	0800c2c5 	.word	0x0800c2c5
 800c2ec:	0800c2c5 	.word	0x0800c2c5
 800c2f0:	0800c2c5 	.word	0x0800c2c5
 800c2f4:	0800c349 	.word	0x0800c349
 800c2f8:	0800c2c5 	.word	0x0800c2c5
 800c2fc:	0800c2c5 	.word	0x0800c2c5
 800c300:	0800c2c5 	.word	0x0800c2c5
 800c304:	0800c2c5 	.word	0x0800c2c5
 800c308:	0800c455 	.word	0x0800c455
 800c30c:	0800c379 	.word	0x0800c379
 800c310:	0800c437 	.word	0x0800c437
 800c314:	0800c2c5 	.word	0x0800c2c5
 800c318:	0800c2c5 	.word	0x0800c2c5
 800c31c:	0800c477 	.word	0x0800c477
 800c320:	0800c2c5 	.word	0x0800c2c5
 800c324:	0800c379 	.word	0x0800c379
 800c328:	0800c2c5 	.word	0x0800c2c5
 800c32c:	0800c2c5 	.word	0x0800c2c5
 800c330:	0800c43f 	.word	0x0800c43f
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	602a      	str	r2, [r5, #0]
 800c33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c344:	2301      	movs	r3, #1
 800c346:	e0a3      	b.n	800c490 <_printf_i+0x1f4>
 800c348:	6820      	ldr	r0, [r4, #0]
 800c34a:	6829      	ldr	r1, [r5, #0]
 800c34c:	0606      	lsls	r6, r0, #24
 800c34e:	f101 0304 	add.w	r3, r1, #4
 800c352:	d50a      	bpl.n	800c36a <_printf_i+0xce>
 800c354:	680e      	ldr	r6, [r1, #0]
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	2e00      	cmp	r6, #0
 800c35a:	da03      	bge.n	800c364 <_printf_i+0xc8>
 800c35c:	232d      	movs	r3, #45	; 0x2d
 800c35e:	4276      	negs	r6, r6
 800c360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c364:	485e      	ldr	r0, [pc, #376]	; (800c4e0 <_printf_i+0x244>)
 800c366:	230a      	movs	r3, #10
 800c368:	e019      	b.n	800c39e <_printf_i+0x102>
 800c36a:	680e      	ldr	r6, [r1, #0]
 800c36c:	602b      	str	r3, [r5, #0]
 800c36e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c372:	bf18      	it	ne
 800c374:	b236      	sxthne	r6, r6
 800c376:	e7ef      	b.n	800c358 <_printf_i+0xbc>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	6820      	ldr	r0, [r4, #0]
 800c37c:	1d19      	adds	r1, r3, #4
 800c37e:	6029      	str	r1, [r5, #0]
 800c380:	0601      	lsls	r1, r0, #24
 800c382:	d501      	bpl.n	800c388 <_printf_i+0xec>
 800c384:	681e      	ldr	r6, [r3, #0]
 800c386:	e002      	b.n	800c38e <_printf_i+0xf2>
 800c388:	0646      	lsls	r6, r0, #25
 800c38a:	d5fb      	bpl.n	800c384 <_printf_i+0xe8>
 800c38c:	881e      	ldrh	r6, [r3, #0]
 800c38e:	4854      	ldr	r0, [pc, #336]	; (800c4e0 <_printf_i+0x244>)
 800c390:	2f6f      	cmp	r7, #111	; 0x6f
 800c392:	bf0c      	ite	eq
 800c394:	2308      	moveq	r3, #8
 800c396:	230a      	movne	r3, #10
 800c398:	2100      	movs	r1, #0
 800c39a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c39e:	6865      	ldr	r5, [r4, #4]
 800c3a0:	60a5      	str	r5, [r4, #8]
 800c3a2:	2d00      	cmp	r5, #0
 800c3a4:	bfa2      	ittt	ge
 800c3a6:	6821      	ldrge	r1, [r4, #0]
 800c3a8:	f021 0104 	bicge.w	r1, r1, #4
 800c3ac:	6021      	strge	r1, [r4, #0]
 800c3ae:	b90e      	cbnz	r6, 800c3b4 <_printf_i+0x118>
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	d04d      	beq.n	800c450 <_printf_i+0x1b4>
 800c3b4:	4615      	mov	r5, r2
 800c3b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c3ba:	fb03 6711 	mls	r7, r3, r1, r6
 800c3be:	5dc7      	ldrb	r7, [r0, r7]
 800c3c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c3c4:	4637      	mov	r7, r6
 800c3c6:	42bb      	cmp	r3, r7
 800c3c8:	460e      	mov	r6, r1
 800c3ca:	d9f4      	bls.n	800c3b6 <_printf_i+0x11a>
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d10b      	bne.n	800c3e8 <_printf_i+0x14c>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	07de      	lsls	r6, r3, #31
 800c3d4:	d508      	bpl.n	800c3e8 <_printf_i+0x14c>
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	6861      	ldr	r1, [r4, #4]
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	bfde      	ittt	le
 800c3de:	2330      	movle	r3, #48	; 0x30
 800c3e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3e8:	1b52      	subs	r2, r2, r5
 800c3ea:	6122      	str	r2, [r4, #16]
 800c3ec:	f8cd a000 	str.w	sl, [sp]
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	aa03      	add	r2, sp, #12
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	f7ff fee2 	bl	800c1c0 <_printf_common>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d14c      	bne.n	800c49a <_printf_i+0x1fe>
 800c400:	f04f 30ff 	mov.w	r0, #4294967295
 800c404:	b004      	add	sp, #16
 800c406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c40a:	4835      	ldr	r0, [pc, #212]	; (800c4e0 <_printf_i+0x244>)
 800c40c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c410:	6829      	ldr	r1, [r5, #0]
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	f851 6b04 	ldr.w	r6, [r1], #4
 800c418:	6029      	str	r1, [r5, #0]
 800c41a:	061d      	lsls	r5, r3, #24
 800c41c:	d514      	bpl.n	800c448 <_printf_i+0x1ac>
 800c41e:	07df      	lsls	r7, r3, #31
 800c420:	bf44      	itt	mi
 800c422:	f043 0320 	orrmi.w	r3, r3, #32
 800c426:	6023      	strmi	r3, [r4, #0]
 800c428:	b91e      	cbnz	r6, 800c432 <_printf_i+0x196>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	f023 0320 	bic.w	r3, r3, #32
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	2310      	movs	r3, #16
 800c434:	e7b0      	b.n	800c398 <_printf_i+0xfc>
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	f043 0320 	orr.w	r3, r3, #32
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	2378      	movs	r3, #120	; 0x78
 800c440:	4828      	ldr	r0, [pc, #160]	; (800c4e4 <_printf_i+0x248>)
 800c442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c446:	e7e3      	b.n	800c410 <_printf_i+0x174>
 800c448:	0659      	lsls	r1, r3, #25
 800c44a:	bf48      	it	mi
 800c44c:	b2b6      	uxthmi	r6, r6
 800c44e:	e7e6      	b.n	800c41e <_printf_i+0x182>
 800c450:	4615      	mov	r5, r2
 800c452:	e7bb      	b.n	800c3cc <_printf_i+0x130>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	6826      	ldr	r6, [r4, #0]
 800c458:	6961      	ldr	r1, [r4, #20]
 800c45a:	1d18      	adds	r0, r3, #4
 800c45c:	6028      	str	r0, [r5, #0]
 800c45e:	0635      	lsls	r5, r6, #24
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	d501      	bpl.n	800c468 <_printf_i+0x1cc>
 800c464:	6019      	str	r1, [r3, #0]
 800c466:	e002      	b.n	800c46e <_printf_i+0x1d2>
 800c468:	0670      	lsls	r0, r6, #25
 800c46a:	d5fb      	bpl.n	800c464 <_printf_i+0x1c8>
 800c46c:	8019      	strh	r1, [r3, #0]
 800c46e:	2300      	movs	r3, #0
 800c470:	6123      	str	r3, [r4, #16]
 800c472:	4615      	mov	r5, r2
 800c474:	e7ba      	b.n	800c3ec <_printf_i+0x150>
 800c476:	682b      	ldr	r3, [r5, #0]
 800c478:	1d1a      	adds	r2, r3, #4
 800c47a:	602a      	str	r2, [r5, #0]
 800c47c:	681d      	ldr	r5, [r3, #0]
 800c47e:	6862      	ldr	r2, [r4, #4]
 800c480:	2100      	movs	r1, #0
 800c482:	4628      	mov	r0, r5
 800c484:	f7f3 feb4 	bl	80001f0 <memchr>
 800c488:	b108      	cbz	r0, 800c48e <_printf_i+0x1f2>
 800c48a:	1b40      	subs	r0, r0, r5
 800c48c:	6060      	str	r0, [r4, #4]
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	6123      	str	r3, [r4, #16]
 800c492:	2300      	movs	r3, #0
 800c494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c498:	e7a8      	b.n	800c3ec <_printf_i+0x150>
 800c49a:	6923      	ldr	r3, [r4, #16]
 800c49c:	462a      	mov	r2, r5
 800c49e:	4649      	mov	r1, r9
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	47d0      	blx	sl
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d0ab      	beq.n	800c400 <_printf_i+0x164>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	079b      	lsls	r3, r3, #30
 800c4ac:	d413      	bmi.n	800c4d6 <_printf_i+0x23a>
 800c4ae:	68e0      	ldr	r0, [r4, #12]
 800c4b0:	9b03      	ldr	r3, [sp, #12]
 800c4b2:	4298      	cmp	r0, r3
 800c4b4:	bfb8      	it	lt
 800c4b6:	4618      	movlt	r0, r3
 800c4b8:	e7a4      	b.n	800c404 <_printf_i+0x168>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	4632      	mov	r2, r6
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	47d0      	blx	sl
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d09b      	beq.n	800c400 <_printf_i+0x164>
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	68e3      	ldr	r3, [r4, #12]
 800c4cc:	9903      	ldr	r1, [sp, #12]
 800c4ce:	1a5b      	subs	r3, r3, r1
 800c4d0:	42ab      	cmp	r3, r5
 800c4d2:	dcf2      	bgt.n	800c4ba <_printf_i+0x21e>
 800c4d4:	e7eb      	b.n	800c4ae <_printf_i+0x212>
 800c4d6:	2500      	movs	r5, #0
 800c4d8:	f104 0619 	add.w	r6, r4, #25
 800c4dc:	e7f5      	b.n	800c4ca <_printf_i+0x22e>
 800c4de:	bf00      	nop
 800c4e0:	0801074a 	.word	0x0801074a
 800c4e4:	0801075b 	.word	0x0801075b

0800c4e8 <_scanf_float>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	b087      	sub	sp, #28
 800c4ee:	4617      	mov	r7, r2
 800c4f0:	9303      	str	r3, [sp, #12]
 800c4f2:	688b      	ldr	r3, [r1, #8]
 800c4f4:	1e5a      	subs	r2, r3, #1
 800c4f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c4fa:	bf83      	ittte	hi
 800c4fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c500:	195b      	addhi	r3, r3, r5
 800c502:	9302      	strhi	r3, [sp, #8]
 800c504:	2300      	movls	r3, #0
 800c506:	bf86      	itte	hi
 800c508:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c50c:	608b      	strhi	r3, [r1, #8]
 800c50e:	9302      	strls	r3, [sp, #8]
 800c510:	680b      	ldr	r3, [r1, #0]
 800c512:	468b      	mov	fp, r1
 800c514:	2500      	movs	r5, #0
 800c516:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c51a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c51e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c522:	4680      	mov	r8, r0
 800c524:	460c      	mov	r4, r1
 800c526:	465e      	mov	r6, fp
 800c528:	46aa      	mov	sl, r5
 800c52a:	46a9      	mov	r9, r5
 800c52c:	9501      	str	r5, [sp, #4]
 800c52e:	68a2      	ldr	r2, [r4, #8]
 800c530:	b152      	cbz	r2, 800c548 <_scanf_float+0x60>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b4e      	cmp	r3, #78	; 0x4e
 800c538:	d864      	bhi.n	800c604 <_scanf_float+0x11c>
 800c53a:	2b40      	cmp	r3, #64	; 0x40
 800c53c:	d83c      	bhi.n	800c5b8 <_scanf_float+0xd0>
 800c53e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c542:	b2c8      	uxtb	r0, r1
 800c544:	280e      	cmp	r0, #14
 800c546:	d93a      	bls.n	800c5be <_scanf_float+0xd6>
 800c548:	f1b9 0f00 	cmp.w	r9, #0
 800c54c:	d003      	beq.n	800c556 <_scanf_float+0x6e>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c55a:	f1ba 0f01 	cmp.w	sl, #1
 800c55e:	f200 8113 	bhi.w	800c788 <_scanf_float+0x2a0>
 800c562:	455e      	cmp	r6, fp
 800c564:	f200 8105 	bhi.w	800c772 <_scanf_float+0x28a>
 800c568:	2501      	movs	r5, #1
 800c56a:	4628      	mov	r0, r5
 800c56c:	b007      	add	sp, #28
 800c56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c572:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c576:	2a0d      	cmp	r2, #13
 800c578:	d8e6      	bhi.n	800c548 <_scanf_float+0x60>
 800c57a:	a101      	add	r1, pc, #4	; (adr r1, 800c580 <_scanf_float+0x98>)
 800c57c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c580:	0800c6bf 	.word	0x0800c6bf
 800c584:	0800c549 	.word	0x0800c549
 800c588:	0800c549 	.word	0x0800c549
 800c58c:	0800c549 	.word	0x0800c549
 800c590:	0800c71f 	.word	0x0800c71f
 800c594:	0800c6f7 	.word	0x0800c6f7
 800c598:	0800c549 	.word	0x0800c549
 800c59c:	0800c549 	.word	0x0800c549
 800c5a0:	0800c6cd 	.word	0x0800c6cd
 800c5a4:	0800c549 	.word	0x0800c549
 800c5a8:	0800c549 	.word	0x0800c549
 800c5ac:	0800c549 	.word	0x0800c549
 800c5b0:	0800c549 	.word	0x0800c549
 800c5b4:	0800c685 	.word	0x0800c685
 800c5b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c5bc:	e7db      	b.n	800c576 <_scanf_float+0x8e>
 800c5be:	290e      	cmp	r1, #14
 800c5c0:	d8c2      	bhi.n	800c548 <_scanf_float+0x60>
 800c5c2:	a001      	add	r0, pc, #4	; (adr r0, 800c5c8 <_scanf_float+0xe0>)
 800c5c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c5c8:	0800c677 	.word	0x0800c677
 800c5cc:	0800c549 	.word	0x0800c549
 800c5d0:	0800c677 	.word	0x0800c677
 800c5d4:	0800c70b 	.word	0x0800c70b
 800c5d8:	0800c549 	.word	0x0800c549
 800c5dc:	0800c625 	.word	0x0800c625
 800c5e0:	0800c661 	.word	0x0800c661
 800c5e4:	0800c661 	.word	0x0800c661
 800c5e8:	0800c661 	.word	0x0800c661
 800c5ec:	0800c661 	.word	0x0800c661
 800c5f0:	0800c661 	.word	0x0800c661
 800c5f4:	0800c661 	.word	0x0800c661
 800c5f8:	0800c661 	.word	0x0800c661
 800c5fc:	0800c661 	.word	0x0800c661
 800c600:	0800c661 	.word	0x0800c661
 800c604:	2b6e      	cmp	r3, #110	; 0x6e
 800c606:	d809      	bhi.n	800c61c <_scanf_float+0x134>
 800c608:	2b60      	cmp	r3, #96	; 0x60
 800c60a:	d8b2      	bhi.n	800c572 <_scanf_float+0x8a>
 800c60c:	2b54      	cmp	r3, #84	; 0x54
 800c60e:	d077      	beq.n	800c700 <_scanf_float+0x218>
 800c610:	2b59      	cmp	r3, #89	; 0x59
 800c612:	d199      	bne.n	800c548 <_scanf_float+0x60>
 800c614:	2d07      	cmp	r5, #7
 800c616:	d197      	bne.n	800c548 <_scanf_float+0x60>
 800c618:	2508      	movs	r5, #8
 800c61a:	e029      	b.n	800c670 <_scanf_float+0x188>
 800c61c:	2b74      	cmp	r3, #116	; 0x74
 800c61e:	d06f      	beq.n	800c700 <_scanf_float+0x218>
 800c620:	2b79      	cmp	r3, #121	; 0x79
 800c622:	e7f6      	b.n	800c612 <_scanf_float+0x12a>
 800c624:	6821      	ldr	r1, [r4, #0]
 800c626:	05c8      	lsls	r0, r1, #23
 800c628:	d51a      	bpl.n	800c660 <_scanf_float+0x178>
 800c62a:	9b02      	ldr	r3, [sp, #8]
 800c62c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c630:	6021      	str	r1, [r4, #0]
 800c632:	f109 0901 	add.w	r9, r9, #1
 800c636:	b11b      	cbz	r3, 800c640 <_scanf_float+0x158>
 800c638:	3b01      	subs	r3, #1
 800c63a:	3201      	adds	r2, #1
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	60a2      	str	r2, [r4, #8]
 800c640:	68a3      	ldr	r3, [r4, #8]
 800c642:	3b01      	subs	r3, #1
 800c644:	60a3      	str	r3, [r4, #8]
 800c646:	6923      	ldr	r3, [r4, #16]
 800c648:	3301      	adds	r3, #1
 800c64a:	6123      	str	r3, [r4, #16]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3b01      	subs	r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	607b      	str	r3, [r7, #4]
 800c654:	f340 8084 	ble.w	800c760 <_scanf_float+0x278>
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	603b      	str	r3, [r7, #0]
 800c65e:	e766      	b.n	800c52e <_scanf_float+0x46>
 800c660:	eb1a 0f05 	cmn.w	sl, r5
 800c664:	f47f af70 	bne.w	800c548 <_scanf_float+0x60>
 800c668:	6822      	ldr	r2, [r4, #0]
 800c66a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c66e:	6022      	str	r2, [r4, #0]
 800c670:	f806 3b01 	strb.w	r3, [r6], #1
 800c674:	e7e4      	b.n	800c640 <_scanf_float+0x158>
 800c676:	6822      	ldr	r2, [r4, #0]
 800c678:	0610      	lsls	r0, r2, #24
 800c67a:	f57f af65 	bpl.w	800c548 <_scanf_float+0x60>
 800c67e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c682:	e7f4      	b.n	800c66e <_scanf_float+0x186>
 800c684:	f1ba 0f00 	cmp.w	sl, #0
 800c688:	d10e      	bne.n	800c6a8 <_scanf_float+0x1c0>
 800c68a:	f1b9 0f00 	cmp.w	r9, #0
 800c68e:	d10e      	bne.n	800c6ae <_scanf_float+0x1c6>
 800c690:	6822      	ldr	r2, [r4, #0]
 800c692:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c696:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c69a:	d108      	bne.n	800c6ae <_scanf_float+0x1c6>
 800c69c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c6a0:	6022      	str	r2, [r4, #0]
 800c6a2:	f04f 0a01 	mov.w	sl, #1
 800c6a6:	e7e3      	b.n	800c670 <_scanf_float+0x188>
 800c6a8:	f1ba 0f02 	cmp.w	sl, #2
 800c6ac:	d055      	beq.n	800c75a <_scanf_float+0x272>
 800c6ae:	2d01      	cmp	r5, #1
 800c6b0:	d002      	beq.n	800c6b8 <_scanf_float+0x1d0>
 800c6b2:	2d04      	cmp	r5, #4
 800c6b4:	f47f af48 	bne.w	800c548 <_scanf_float+0x60>
 800c6b8:	3501      	adds	r5, #1
 800c6ba:	b2ed      	uxtb	r5, r5
 800c6bc:	e7d8      	b.n	800c670 <_scanf_float+0x188>
 800c6be:	f1ba 0f01 	cmp.w	sl, #1
 800c6c2:	f47f af41 	bne.w	800c548 <_scanf_float+0x60>
 800c6c6:	f04f 0a02 	mov.w	sl, #2
 800c6ca:	e7d1      	b.n	800c670 <_scanf_float+0x188>
 800c6cc:	b97d      	cbnz	r5, 800c6ee <_scanf_float+0x206>
 800c6ce:	f1b9 0f00 	cmp.w	r9, #0
 800c6d2:	f47f af3c 	bne.w	800c54e <_scanf_float+0x66>
 800c6d6:	6822      	ldr	r2, [r4, #0]
 800c6d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c6dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c6e0:	f47f af39 	bne.w	800c556 <_scanf_float+0x6e>
 800c6e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c6e8:	6022      	str	r2, [r4, #0]
 800c6ea:	2501      	movs	r5, #1
 800c6ec:	e7c0      	b.n	800c670 <_scanf_float+0x188>
 800c6ee:	2d03      	cmp	r5, #3
 800c6f0:	d0e2      	beq.n	800c6b8 <_scanf_float+0x1d0>
 800c6f2:	2d05      	cmp	r5, #5
 800c6f4:	e7de      	b.n	800c6b4 <_scanf_float+0x1cc>
 800c6f6:	2d02      	cmp	r5, #2
 800c6f8:	f47f af26 	bne.w	800c548 <_scanf_float+0x60>
 800c6fc:	2503      	movs	r5, #3
 800c6fe:	e7b7      	b.n	800c670 <_scanf_float+0x188>
 800c700:	2d06      	cmp	r5, #6
 800c702:	f47f af21 	bne.w	800c548 <_scanf_float+0x60>
 800c706:	2507      	movs	r5, #7
 800c708:	e7b2      	b.n	800c670 <_scanf_float+0x188>
 800c70a:	6822      	ldr	r2, [r4, #0]
 800c70c:	0591      	lsls	r1, r2, #22
 800c70e:	f57f af1b 	bpl.w	800c548 <_scanf_float+0x60>
 800c712:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c716:	6022      	str	r2, [r4, #0]
 800c718:	f8cd 9004 	str.w	r9, [sp, #4]
 800c71c:	e7a8      	b.n	800c670 <_scanf_float+0x188>
 800c71e:	6822      	ldr	r2, [r4, #0]
 800c720:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c724:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c728:	d006      	beq.n	800c738 <_scanf_float+0x250>
 800c72a:	0550      	lsls	r0, r2, #21
 800c72c:	f57f af0c 	bpl.w	800c548 <_scanf_float+0x60>
 800c730:	f1b9 0f00 	cmp.w	r9, #0
 800c734:	f43f af0f 	beq.w	800c556 <_scanf_float+0x6e>
 800c738:	0591      	lsls	r1, r2, #22
 800c73a:	bf58      	it	pl
 800c73c:	9901      	ldrpl	r1, [sp, #4]
 800c73e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c742:	bf58      	it	pl
 800c744:	eba9 0101 	subpl.w	r1, r9, r1
 800c748:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c74c:	bf58      	it	pl
 800c74e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c752:	6022      	str	r2, [r4, #0]
 800c754:	f04f 0900 	mov.w	r9, #0
 800c758:	e78a      	b.n	800c670 <_scanf_float+0x188>
 800c75a:	f04f 0a03 	mov.w	sl, #3
 800c75e:	e787      	b.n	800c670 <_scanf_float+0x188>
 800c760:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c764:	4639      	mov	r1, r7
 800c766:	4640      	mov	r0, r8
 800c768:	4798      	blx	r3
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f43f aedf 	beq.w	800c52e <_scanf_float+0x46>
 800c770:	e6ea      	b.n	800c548 <_scanf_float+0x60>
 800c772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c77a:	463a      	mov	r2, r7
 800c77c:	4640      	mov	r0, r8
 800c77e:	4798      	blx	r3
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	3b01      	subs	r3, #1
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	e6ec      	b.n	800c562 <_scanf_float+0x7a>
 800c788:	1e6b      	subs	r3, r5, #1
 800c78a:	2b06      	cmp	r3, #6
 800c78c:	d825      	bhi.n	800c7da <_scanf_float+0x2f2>
 800c78e:	2d02      	cmp	r5, #2
 800c790:	d836      	bhi.n	800c800 <_scanf_float+0x318>
 800c792:	455e      	cmp	r6, fp
 800c794:	f67f aee8 	bls.w	800c568 <_scanf_float+0x80>
 800c798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c79c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c7a0:	463a      	mov	r2, r7
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4798      	blx	r3
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	6123      	str	r3, [r4, #16]
 800c7ac:	e7f1      	b.n	800c792 <_scanf_float+0x2aa>
 800c7ae:	9802      	ldr	r0, [sp, #8]
 800c7b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c7b8:	9002      	str	r0, [sp, #8]
 800c7ba:	463a      	mov	r2, r7
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4798      	blx	r3
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	6123      	str	r3, [r4, #16]
 800c7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7ca:	fa5f fa8a 	uxtb.w	sl, sl
 800c7ce:	f1ba 0f02 	cmp.w	sl, #2
 800c7d2:	d1ec      	bne.n	800c7ae <_scanf_float+0x2c6>
 800c7d4:	3d03      	subs	r5, #3
 800c7d6:	b2ed      	uxtb	r5, r5
 800c7d8:	1b76      	subs	r6, r6, r5
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	05da      	lsls	r2, r3, #23
 800c7de:	d52f      	bpl.n	800c840 <_scanf_float+0x358>
 800c7e0:	055b      	lsls	r3, r3, #21
 800c7e2:	d510      	bpl.n	800c806 <_scanf_float+0x31e>
 800c7e4:	455e      	cmp	r6, fp
 800c7e6:	f67f aebf 	bls.w	800c568 <_scanf_float+0x80>
 800c7ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4798      	blx	r3
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6123      	str	r3, [r4, #16]
 800c7fe:	e7f1      	b.n	800c7e4 <_scanf_float+0x2fc>
 800c800:	46aa      	mov	sl, r5
 800c802:	9602      	str	r6, [sp, #8]
 800c804:	e7df      	b.n	800c7c6 <_scanf_float+0x2de>
 800c806:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	2965      	cmp	r1, #101	; 0x65
 800c80e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c812:	f106 35ff 	add.w	r5, r6, #4294967295
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	d00c      	beq.n	800c834 <_scanf_float+0x34c>
 800c81a:	2945      	cmp	r1, #69	; 0x45
 800c81c:	d00a      	beq.n	800c834 <_scanf_float+0x34c>
 800c81e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c822:	463a      	mov	r2, r7
 800c824:	4640      	mov	r0, r8
 800c826:	4798      	blx	r3
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c82e:	3b01      	subs	r3, #1
 800c830:	1eb5      	subs	r5, r6, #2
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c838:	463a      	mov	r2, r7
 800c83a:	4640      	mov	r0, r8
 800c83c:	4798      	blx	r3
 800c83e:	462e      	mov	r6, r5
 800c840:	6825      	ldr	r5, [r4, #0]
 800c842:	f015 0510 	ands.w	r5, r5, #16
 800c846:	d159      	bne.n	800c8fc <_scanf_float+0x414>
 800c848:	7035      	strb	r5, [r6, #0]
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c854:	d11b      	bne.n	800c88e <_scanf_float+0x3a6>
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	454b      	cmp	r3, r9
 800c85a:	eba3 0209 	sub.w	r2, r3, r9
 800c85e:	d123      	bne.n	800c8a8 <_scanf_float+0x3c0>
 800c860:	2200      	movs	r2, #0
 800c862:	4659      	mov	r1, fp
 800c864:	4640      	mov	r0, r8
 800c866:	f000 ff25 	bl	800d6b4 <_strtod_r>
 800c86a:	6822      	ldr	r2, [r4, #0]
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	f012 0f02 	tst.w	r2, #2
 800c872:	ec57 6b10 	vmov	r6, r7, d0
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	d021      	beq.n	800c8be <_scanf_float+0x3d6>
 800c87a:	9903      	ldr	r1, [sp, #12]
 800c87c:	1d1a      	adds	r2, r3, #4
 800c87e:	600a      	str	r2, [r1, #0]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	e9c3 6700 	strd	r6, r7, [r3]
 800c886:	68e3      	ldr	r3, [r4, #12]
 800c888:	3301      	adds	r3, #1
 800c88a:	60e3      	str	r3, [r4, #12]
 800c88c:	e66d      	b.n	800c56a <_scanf_float+0x82>
 800c88e:	9b04      	ldr	r3, [sp, #16]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d0e5      	beq.n	800c860 <_scanf_float+0x378>
 800c894:	9905      	ldr	r1, [sp, #20]
 800c896:	230a      	movs	r3, #10
 800c898:	462a      	mov	r2, r5
 800c89a:	3101      	adds	r1, #1
 800c89c:	4640      	mov	r0, r8
 800c89e:	f000 ff91 	bl	800d7c4 <_strtol_r>
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	9e05      	ldr	r6, [sp, #20]
 800c8a6:	1ac2      	subs	r2, r0, r3
 800c8a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c8ac:	429e      	cmp	r6, r3
 800c8ae:	bf28      	it	cs
 800c8b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c8b4:	4912      	ldr	r1, [pc, #72]	; (800c900 <_scanf_float+0x418>)
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f000 f8ba 	bl	800ca30 <siprintf>
 800c8bc:	e7d0      	b.n	800c860 <_scanf_float+0x378>
 800c8be:	9903      	ldr	r1, [sp, #12]
 800c8c0:	f012 0f04 	tst.w	r2, #4
 800c8c4:	f103 0204 	add.w	r2, r3, #4
 800c8c8:	600a      	str	r2, [r1, #0]
 800c8ca:	d1d9      	bne.n	800c880 <_scanf_float+0x398>
 800c8cc:	f8d3 8000 	ldr.w	r8, [r3]
 800c8d0:	ee10 2a10 	vmov	r2, s0
 800c8d4:	ee10 0a10 	vmov	r0, s0
 800c8d8:	463b      	mov	r3, r7
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f4 f92e 	bl	8000b3c <__aeabi_dcmpun>
 800c8e0:	b128      	cbz	r0, 800c8ee <_scanf_float+0x406>
 800c8e2:	4808      	ldr	r0, [pc, #32]	; (800c904 <_scanf_float+0x41c>)
 800c8e4:	f000 f89e 	bl	800ca24 <nanf>
 800c8e8:	ed88 0a00 	vstr	s0, [r8]
 800c8ec:	e7cb      	b.n	800c886 <_scanf_float+0x39e>
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	4639      	mov	r1, r7
 800c8f2:	f7f4 f981 	bl	8000bf8 <__aeabi_d2f>
 800c8f6:	f8c8 0000 	str.w	r0, [r8]
 800c8fa:	e7c4      	b.n	800c886 <_scanf_float+0x39e>
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	e634      	b.n	800c56a <_scanf_float+0x82>
 800c900:	0801076c 	.word	0x0801076c
 800c904:	08010be0 	.word	0x08010be0

0800c908 <iprintf>:
 800c908:	b40f      	push	{r0, r1, r2, r3}
 800c90a:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <iprintf+0x2c>)
 800c90c:	b513      	push	{r0, r1, r4, lr}
 800c90e:	681c      	ldr	r4, [r3, #0]
 800c910:	b124      	cbz	r4, 800c91c <iprintf+0x14>
 800c912:	69a3      	ldr	r3, [r4, #24]
 800c914:	b913      	cbnz	r3, 800c91c <iprintf+0x14>
 800c916:	4620      	mov	r0, r4
 800c918:	f001 ffaa 	bl	800e870 <__sinit>
 800c91c:	ab05      	add	r3, sp, #20
 800c91e:	9a04      	ldr	r2, [sp, #16]
 800c920:	68a1      	ldr	r1, [r4, #8]
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	4620      	mov	r0, r4
 800c926:	f003 fb81 	bl	801002c <_vfiprintf_r>
 800c92a:	b002      	add	sp, #8
 800c92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c930:	b004      	add	sp, #16
 800c932:	4770      	bx	lr
 800c934:	20000100 	.word	0x20000100

0800c938 <_puts_r>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	460e      	mov	r6, r1
 800c93c:	4605      	mov	r5, r0
 800c93e:	b118      	cbz	r0, 800c948 <_puts_r+0x10>
 800c940:	6983      	ldr	r3, [r0, #24]
 800c942:	b90b      	cbnz	r3, 800c948 <_puts_r+0x10>
 800c944:	f001 ff94 	bl	800e870 <__sinit>
 800c948:	69ab      	ldr	r3, [r5, #24]
 800c94a:	68ac      	ldr	r4, [r5, #8]
 800c94c:	b913      	cbnz	r3, 800c954 <_puts_r+0x1c>
 800c94e:	4628      	mov	r0, r5
 800c950:	f001 ff8e 	bl	800e870 <__sinit>
 800c954:	4b2c      	ldr	r3, [pc, #176]	; (800ca08 <_puts_r+0xd0>)
 800c956:	429c      	cmp	r4, r3
 800c958:	d120      	bne.n	800c99c <_puts_r+0x64>
 800c95a:	686c      	ldr	r4, [r5, #4]
 800c95c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c95e:	07db      	lsls	r3, r3, #31
 800c960:	d405      	bmi.n	800c96e <_puts_r+0x36>
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	0598      	lsls	r0, r3, #22
 800c966:	d402      	bmi.n	800c96e <_puts_r+0x36>
 800c968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c96a:	f002 fb92 	bl	800f092 <__retarget_lock_acquire_recursive>
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	0719      	lsls	r1, r3, #28
 800c972:	d51d      	bpl.n	800c9b0 <_puts_r+0x78>
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	b1db      	cbz	r3, 800c9b0 <_puts_r+0x78>
 800c978:	3e01      	subs	r6, #1
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c980:	3b01      	subs	r3, #1
 800c982:	60a3      	str	r3, [r4, #8]
 800c984:	bb39      	cbnz	r1, 800c9d6 <_puts_r+0x9e>
 800c986:	2b00      	cmp	r3, #0
 800c988:	da38      	bge.n	800c9fc <_puts_r+0xc4>
 800c98a:	4622      	mov	r2, r4
 800c98c:	210a      	movs	r1, #10
 800c98e:	4628      	mov	r0, r5
 800c990:	f000 ff1a 	bl	800d7c8 <__swbuf_r>
 800c994:	3001      	adds	r0, #1
 800c996:	d011      	beq.n	800c9bc <_puts_r+0x84>
 800c998:	250a      	movs	r5, #10
 800c99a:	e011      	b.n	800c9c0 <_puts_r+0x88>
 800c99c:	4b1b      	ldr	r3, [pc, #108]	; (800ca0c <_puts_r+0xd4>)
 800c99e:	429c      	cmp	r4, r3
 800c9a0:	d101      	bne.n	800c9a6 <_puts_r+0x6e>
 800c9a2:	68ac      	ldr	r4, [r5, #8]
 800c9a4:	e7da      	b.n	800c95c <_puts_r+0x24>
 800c9a6:	4b1a      	ldr	r3, [pc, #104]	; (800ca10 <_puts_r+0xd8>)
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	bf08      	it	eq
 800c9ac:	68ec      	ldreq	r4, [r5, #12]
 800c9ae:	e7d5      	b.n	800c95c <_puts_r+0x24>
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 ff5a 	bl	800d86c <__swsetup_r>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d0dd      	beq.n	800c978 <_puts_r+0x40>
 800c9bc:	f04f 35ff 	mov.w	r5, #4294967295
 800c9c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9c2:	07da      	lsls	r2, r3, #31
 800c9c4:	d405      	bmi.n	800c9d2 <_puts_r+0x9a>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	059b      	lsls	r3, r3, #22
 800c9ca:	d402      	bmi.n	800c9d2 <_puts_r+0x9a>
 800c9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9ce:	f002 fb61 	bl	800f094 <__retarget_lock_release_recursive>
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	da04      	bge.n	800c9e4 <_puts_r+0xac>
 800c9da:	69a2      	ldr	r2, [r4, #24]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	dc06      	bgt.n	800c9ee <_puts_r+0xb6>
 800c9e0:	290a      	cmp	r1, #10
 800c9e2:	d004      	beq.n	800c9ee <_puts_r+0xb6>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	6022      	str	r2, [r4, #0]
 800c9ea:	7019      	strb	r1, [r3, #0]
 800c9ec:	e7c5      	b.n	800c97a <_puts_r+0x42>
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f000 fee9 	bl	800d7c8 <__swbuf_r>
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	d1bf      	bne.n	800c97a <_puts_r+0x42>
 800c9fa:	e7df      	b.n	800c9bc <_puts_r+0x84>
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	250a      	movs	r5, #10
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	701d      	strb	r5, [r3, #0]
 800ca06:	e7db      	b.n	800c9c0 <_puts_r+0x88>
 800ca08:	0801097c 	.word	0x0801097c
 800ca0c:	0801099c 	.word	0x0801099c
 800ca10:	0801095c 	.word	0x0801095c

0800ca14 <puts>:
 800ca14:	4b02      	ldr	r3, [pc, #8]	; (800ca20 <puts+0xc>)
 800ca16:	4601      	mov	r1, r0
 800ca18:	6818      	ldr	r0, [r3, #0]
 800ca1a:	f7ff bf8d 	b.w	800c938 <_puts_r>
 800ca1e:	bf00      	nop
 800ca20:	20000100 	.word	0x20000100

0800ca24 <nanf>:
 800ca24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ca2c <nanf+0x8>
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	7fc00000 	.word	0x7fc00000

0800ca30 <siprintf>:
 800ca30:	b40e      	push	{r1, r2, r3}
 800ca32:	b500      	push	{lr}
 800ca34:	b09c      	sub	sp, #112	; 0x70
 800ca36:	ab1d      	add	r3, sp, #116	; 0x74
 800ca38:	9002      	str	r0, [sp, #8]
 800ca3a:	9006      	str	r0, [sp, #24]
 800ca3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca40:	4809      	ldr	r0, [pc, #36]	; (800ca68 <siprintf+0x38>)
 800ca42:	9107      	str	r1, [sp, #28]
 800ca44:	9104      	str	r1, [sp, #16]
 800ca46:	4909      	ldr	r1, [pc, #36]	; (800ca6c <siprintf+0x3c>)
 800ca48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca4c:	9105      	str	r1, [sp, #20]
 800ca4e:	6800      	ldr	r0, [r0, #0]
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	a902      	add	r1, sp, #8
 800ca54:	f003 f9c0 	bl	800fdd8 <_svfiprintf_r>
 800ca58:	9b02      	ldr	r3, [sp, #8]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	b01c      	add	sp, #112	; 0x70
 800ca60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca64:	b003      	add	sp, #12
 800ca66:	4770      	bx	lr
 800ca68:	20000100 	.word	0x20000100
 800ca6c:	ffff0208 	.word	0xffff0208

0800ca70 <sulp>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	4604      	mov	r4, r0
 800ca74:	460d      	mov	r5, r1
 800ca76:	ec45 4b10 	vmov	d0, r4, r5
 800ca7a:	4616      	mov	r6, r2
 800ca7c:	f002 ff0a 	bl	800f894 <__ulp>
 800ca80:	ec51 0b10 	vmov	r0, r1, d0
 800ca84:	b17e      	cbz	r6, 800caa6 <sulp+0x36>
 800ca86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dd09      	ble.n	800caa6 <sulp+0x36>
 800ca92:	051b      	lsls	r3, r3, #20
 800ca94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ca98:	2400      	movs	r4, #0
 800ca9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ca9e:	4622      	mov	r2, r4
 800caa0:	462b      	mov	r3, r5
 800caa2:	f7f3 fdb1 	bl	8000608 <__aeabi_dmul>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <_strtod_l>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	ed2d 8b02 	vpush	{d8}
 800cab0:	b09d      	sub	sp, #116	; 0x74
 800cab2:	461f      	mov	r7, r3
 800cab4:	2300      	movs	r3, #0
 800cab6:	9318      	str	r3, [sp, #96]	; 0x60
 800cab8:	4ba2      	ldr	r3, [pc, #648]	; (800cd44 <_strtod_l+0x29c>)
 800caba:	9213      	str	r2, [sp, #76]	; 0x4c
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	9305      	str	r3, [sp, #20]
 800cac0:	4604      	mov	r4, r0
 800cac2:	4618      	mov	r0, r3
 800cac4:	4688      	mov	r8, r1
 800cac6:	f7f3 fb8b 	bl	80001e0 <strlen>
 800caca:	f04f 0a00 	mov.w	sl, #0
 800cace:	4605      	mov	r5, r0
 800cad0:	f04f 0b00 	mov.w	fp, #0
 800cad4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	2a2b      	cmp	r2, #43	; 0x2b
 800cade:	d04e      	beq.n	800cb7e <_strtod_l+0xd6>
 800cae0:	d83b      	bhi.n	800cb5a <_strtod_l+0xb2>
 800cae2:	2a0d      	cmp	r2, #13
 800cae4:	d834      	bhi.n	800cb50 <_strtod_l+0xa8>
 800cae6:	2a08      	cmp	r2, #8
 800cae8:	d834      	bhi.n	800cb54 <_strtod_l+0xac>
 800caea:	2a00      	cmp	r2, #0
 800caec:	d03e      	beq.n	800cb6c <_strtod_l+0xc4>
 800caee:	2300      	movs	r3, #0
 800caf0:	930a      	str	r3, [sp, #40]	; 0x28
 800caf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800caf4:	7833      	ldrb	r3, [r6, #0]
 800caf6:	2b30      	cmp	r3, #48	; 0x30
 800caf8:	f040 80b0 	bne.w	800cc5c <_strtod_l+0x1b4>
 800cafc:	7873      	ldrb	r3, [r6, #1]
 800cafe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb02:	2b58      	cmp	r3, #88	; 0x58
 800cb04:	d168      	bne.n	800cbd8 <_strtod_l+0x130>
 800cb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	ab18      	add	r3, sp, #96	; 0x60
 800cb0c:	9702      	str	r7, [sp, #8]
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	4a8d      	ldr	r2, [pc, #564]	; (800cd48 <_strtod_l+0x2a0>)
 800cb12:	ab19      	add	r3, sp, #100	; 0x64
 800cb14:	a917      	add	r1, sp, #92	; 0x5c
 800cb16:	4620      	mov	r0, r4
 800cb18:	f001 ffae 	bl	800ea78 <__gethex>
 800cb1c:	f010 0707 	ands.w	r7, r0, #7
 800cb20:	4605      	mov	r5, r0
 800cb22:	d005      	beq.n	800cb30 <_strtod_l+0x88>
 800cb24:	2f06      	cmp	r7, #6
 800cb26:	d12c      	bne.n	800cb82 <_strtod_l+0xda>
 800cb28:	3601      	adds	r6, #1
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cb2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f040 8590 	bne.w	800d658 <_strtod_l+0xbb0>
 800cb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb3a:	b1eb      	cbz	r3, 800cb78 <_strtod_l+0xd0>
 800cb3c:	4652      	mov	r2, sl
 800cb3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cb42:	ec43 2b10 	vmov	d0, r2, r3
 800cb46:	b01d      	add	sp, #116	; 0x74
 800cb48:	ecbd 8b02 	vpop	{d8}
 800cb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb50:	2a20      	cmp	r2, #32
 800cb52:	d1cc      	bne.n	800caee <_strtod_l+0x46>
 800cb54:	3301      	adds	r3, #1
 800cb56:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb58:	e7be      	b.n	800cad8 <_strtod_l+0x30>
 800cb5a:	2a2d      	cmp	r2, #45	; 0x2d
 800cb5c:	d1c7      	bne.n	800caee <_strtod_l+0x46>
 800cb5e:	2201      	movs	r2, #1
 800cb60:	920a      	str	r2, [sp, #40]	; 0x28
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb66:	785b      	ldrb	r3, [r3, #1]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1c2      	bne.n	800caf2 <_strtod_l+0x4a>
 800cb6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f040 856e 	bne.w	800d654 <_strtod_l+0xbac>
 800cb78:	4652      	mov	r2, sl
 800cb7a:	465b      	mov	r3, fp
 800cb7c:	e7e1      	b.n	800cb42 <_strtod_l+0x9a>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	e7ee      	b.n	800cb60 <_strtod_l+0xb8>
 800cb82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb84:	b13a      	cbz	r2, 800cb96 <_strtod_l+0xee>
 800cb86:	2135      	movs	r1, #53	; 0x35
 800cb88:	a81a      	add	r0, sp, #104	; 0x68
 800cb8a:	f002 ff8e 	bl	800faaa <__copybits>
 800cb8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb90:	4620      	mov	r0, r4
 800cb92:	f002 fb4d 	bl	800f230 <_Bfree>
 800cb96:	3f01      	subs	r7, #1
 800cb98:	2f04      	cmp	r7, #4
 800cb9a:	d806      	bhi.n	800cbaa <_strtod_l+0x102>
 800cb9c:	e8df f007 	tbb	[pc, r7]
 800cba0:	1714030a 	.word	0x1714030a
 800cba4:	0a          	.byte	0x0a
 800cba5:	00          	.byte	0x00
 800cba6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cbaa:	0728      	lsls	r0, r5, #28
 800cbac:	d5c0      	bpl.n	800cb30 <_strtod_l+0x88>
 800cbae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cbb2:	e7bd      	b.n	800cb30 <_strtod_l+0x88>
 800cbb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cbb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cbba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cbbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cbc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbc6:	e7f0      	b.n	800cbaa <_strtod_l+0x102>
 800cbc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cd4c <_strtod_l+0x2a4>
 800cbcc:	e7ed      	b.n	800cbaa <_strtod_l+0x102>
 800cbce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cbd2:	f04f 3aff 	mov.w	sl, #4294967295
 800cbd6:	e7e8      	b.n	800cbaa <_strtod_l+0x102>
 800cbd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbde:	785b      	ldrb	r3, [r3, #1]
 800cbe0:	2b30      	cmp	r3, #48	; 0x30
 800cbe2:	d0f9      	beq.n	800cbd8 <_strtod_l+0x130>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0a3      	beq.n	800cb30 <_strtod_l+0x88>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	f04f 0900 	mov.w	r9, #0
 800cbee:	9304      	str	r3, [sp, #16]
 800cbf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbf2:	9308      	str	r3, [sp, #32]
 800cbf4:	f8cd 901c 	str.w	r9, [sp, #28]
 800cbf8:	464f      	mov	r7, r9
 800cbfa:	220a      	movs	r2, #10
 800cbfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cbfe:	7806      	ldrb	r6, [r0, #0]
 800cc00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cc04:	b2d9      	uxtb	r1, r3
 800cc06:	2909      	cmp	r1, #9
 800cc08:	d92a      	bls.n	800cc60 <_strtod_l+0x1b8>
 800cc0a:	9905      	ldr	r1, [sp, #20]
 800cc0c:	462a      	mov	r2, r5
 800cc0e:	f003 fb9a 	bl	8010346 <strncmp>
 800cc12:	b398      	cbz	r0, 800cc7c <_strtod_l+0x1d4>
 800cc14:	2000      	movs	r0, #0
 800cc16:	4632      	mov	r2, r6
 800cc18:	463d      	mov	r5, r7
 800cc1a:	9005      	str	r0, [sp, #20]
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2a65      	cmp	r2, #101	; 0x65
 800cc20:	d001      	beq.n	800cc26 <_strtod_l+0x17e>
 800cc22:	2a45      	cmp	r2, #69	; 0x45
 800cc24:	d118      	bne.n	800cc58 <_strtod_l+0x1b0>
 800cc26:	b91d      	cbnz	r5, 800cc30 <_strtod_l+0x188>
 800cc28:	9a04      	ldr	r2, [sp, #16]
 800cc2a:	4302      	orrs	r2, r0
 800cc2c:	d09e      	beq.n	800cb6c <_strtod_l+0xc4>
 800cc2e:	2500      	movs	r5, #0
 800cc30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cc34:	f108 0201 	add.w	r2, r8, #1
 800cc38:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cc3e:	2a2b      	cmp	r2, #43	; 0x2b
 800cc40:	d075      	beq.n	800cd2e <_strtod_l+0x286>
 800cc42:	2a2d      	cmp	r2, #45	; 0x2d
 800cc44:	d07b      	beq.n	800cd3e <_strtod_l+0x296>
 800cc46:	f04f 0c00 	mov.w	ip, #0
 800cc4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cc4e:	2909      	cmp	r1, #9
 800cc50:	f240 8082 	bls.w	800cd58 <_strtod_l+0x2b0>
 800cc54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cc58:	2600      	movs	r6, #0
 800cc5a:	e09d      	b.n	800cd98 <_strtod_l+0x2f0>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	e7c4      	b.n	800cbea <_strtod_l+0x142>
 800cc60:	2f08      	cmp	r7, #8
 800cc62:	bfd8      	it	le
 800cc64:	9907      	ldrle	r1, [sp, #28]
 800cc66:	f100 0001 	add.w	r0, r0, #1
 800cc6a:	bfda      	itte	le
 800cc6c:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc70:	9307      	strle	r3, [sp, #28]
 800cc72:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cc76:	3701      	adds	r7, #1
 800cc78:	9017      	str	r0, [sp, #92]	; 0x5c
 800cc7a:	e7bf      	b.n	800cbfc <_strtod_l+0x154>
 800cc7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc7e:	195a      	adds	r2, r3, r5
 800cc80:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc82:	5d5a      	ldrb	r2, [r3, r5]
 800cc84:	2f00      	cmp	r7, #0
 800cc86:	d037      	beq.n	800ccf8 <_strtod_l+0x250>
 800cc88:	9005      	str	r0, [sp, #20]
 800cc8a:	463d      	mov	r5, r7
 800cc8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cc90:	2b09      	cmp	r3, #9
 800cc92:	d912      	bls.n	800ccba <_strtod_l+0x212>
 800cc94:	2301      	movs	r3, #1
 800cc96:	e7c2      	b.n	800cc1e <_strtod_l+0x176>
 800cc98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cc9e:	785a      	ldrb	r2, [r3, #1]
 800cca0:	3001      	adds	r0, #1
 800cca2:	2a30      	cmp	r2, #48	; 0x30
 800cca4:	d0f8      	beq.n	800cc98 <_strtod_l+0x1f0>
 800cca6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	f200 84d9 	bhi.w	800d662 <_strtod_l+0xbba>
 800ccb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccb2:	9005      	str	r0, [sp, #20]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	9308      	str	r3, [sp, #32]
 800ccb8:	4605      	mov	r5, r0
 800ccba:	3a30      	subs	r2, #48	; 0x30
 800ccbc:	f100 0301 	add.w	r3, r0, #1
 800ccc0:	d014      	beq.n	800ccec <_strtod_l+0x244>
 800ccc2:	9905      	ldr	r1, [sp, #20]
 800ccc4:	4419      	add	r1, r3
 800ccc6:	9105      	str	r1, [sp, #20]
 800ccc8:	462b      	mov	r3, r5
 800ccca:	eb00 0e05 	add.w	lr, r0, r5
 800ccce:	210a      	movs	r1, #10
 800ccd0:	4573      	cmp	r3, lr
 800ccd2:	d113      	bne.n	800ccfc <_strtod_l+0x254>
 800ccd4:	182b      	adds	r3, r5, r0
 800ccd6:	2b08      	cmp	r3, #8
 800ccd8:	f105 0501 	add.w	r5, r5, #1
 800ccdc:	4405      	add	r5, r0
 800ccde:	dc1c      	bgt.n	800cd1a <_strtod_l+0x272>
 800cce0:	9907      	ldr	r1, [sp, #28]
 800cce2:	230a      	movs	r3, #10
 800cce4:	fb03 2301 	mla	r3, r3, r1, r2
 800cce8:	9307      	str	r3, [sp, #28]
 800ccea:	2300      	movs	r3, #0
 800ccec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccee:	1c51      	adds	r1, r2, #1
 800ccf0:	9117      	str	r1, [sp, #92]	; 0x5c
 800ccf2:	7852      	ldrb	r2, [r2, #1]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	e7c9      	b.n	800cc8c <_strtod_l+0x1e4>
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	e7d2      	b.n	800cca2 <_strtod_l+0x1fa>
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	dc04      	bgt.n	800cd0a <_strtod_l+0x262>
 800cd00:	9e07      	ldr	r6, [sp, #28]
 800cd02:	434e      	muls	r6, r1
 800cd04:	9607      	str	r6, [sp, #28]
 800cd06:	3301      	adds	r3, #1
 800cd08:	e7e2      	b.n	800ccd0 <_strtod_l+0x228>
 800cd0a:	f103 0c01 	add.w	ip, r3, #1
 800cd0e:	f1bc 0f10 	cmp.w	ip, #16
 800cd12:	bfd8      	it	le
 800cd14:	fb01 f909 	mulle.w	r9, r1, r9
 800cd18:	e7f5      	b.n	800cd06 <_strtod_l+0x25e>
 800cd1a:	2d10      	cmp	r5, #16
 800cd1c:	bfdc      	itt	le
 800cd1e:	230a      	movle	r3, #10
 800cd20:	fb03 2909 	mlale	r9, r3, r9, r2
 800cd24:	e7e1      	b.n	800ccea <_strtod_l+0x242>
 800cd26:	2300      	movs	r3, #0
 800cd28:	9305      	str	r3, [sp, #20]
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e77c      	b.n	800cc28 <_strtod_l+0x180>
 800cd2e:	f04f 0c00 	mov.w	ip, #0
 800cd32:	f108 0202 	add.w	r2, r8, #2
 800cd36:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd38:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cd3c:	e785      	b.n	800cc4a <_strtod_l+0x1a2>
 800cd3e:	f04f 0c01 	mov.w	ip, #1
 800cd42:	e7f6      	b.n	800cd32 <_strtod_l+0x28a>
 800cd44:	08010a24 	.word	0x08010a24
 800cd48:	08010774 	.word	0x08010774
 800cd4c:	7ff00000 	.word	0x7ff00000
 800cd50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd52:	1c51      	adds	r1, r2, #1
 800cd54:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd56:	7852      	ldrb	r2, [r2, #1]
 800cd58:	2a30      	cmp	r2, #48	; 0x30
 800cd5a:	d0f9      	beq.n	800cd50 <_strtod_l+0x2a8>
 800cd5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cd60:	2908      	cmp	r1, #8
 800cd62:	f63f af79 	bhi.w	800cc58 <_strtod_l+0x1b0>
 800cd66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cd6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd6c:	9206      	str	r2, [sp, #24]
 800cd6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cd70:	1c51      	adds	r1, r2, #1
 800cd72:	9117      	str	r1, [sp, #92]	; 0x5c
 800cd74:	7852      	ldrb	r2, [r2, #1]
 800cd76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cd7a:	2e09      	cmp	r6, #9
 800cd7c:	d937      	bls.n	800cdee <_strtod_l+0x346>
 800cd7e:	9e06      	ldr	r6, [sp, #24]
 800cd80:	1b89      	subs	r1, r1, r6
 800cd82:	2908      	cmp	r1, #8
 800cd84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cd88:	dc02      	bgt.n	800cd90 <_strtod_l+0x2e8>
 800cd8a:	4576      	cmp	r6, lr
 800cd8c:	bfa8      	it	ge
 800cd8e:	4676      	movge	r6, lr
 800cd90:	f1bc 0f00 	cmp.w	ip, #0
 800cd94:	d000      	beq.n	800cd98 <_strtod_l+0x2f0>
 800cd96:	4276      	negs	r6, r6
 800cd98:	2d00      	cmp	r5, #0
 800cd9a:	d14d      	bne.n	800ce38 <_strtod_l+0x390>
 800cd9c:	9904      	ldr	r1, [sp, #16]
 800cd9e:	4301      	orrs	r1, r0
 800cda0:	f47f aec6 	bne.w	800cb30 <_strtod_l+0x88>
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f47f aee1 	bne.w	800cb6c <_strtod_l+0xc4>
 800cdaa:	2a69      	cmp	r2, #105	; 0x69
 800cdac:	d027      	beq.n	800cdfe <_strtod_l+0x356>
 800cdae:	dc24      	bgt.n	800cdfa <_strtod_l+0x352>
 800cdb0:	2a49      	cmp	r2, #73	; 0x49
 800cdb2:	d024      	beq.n	800cdfe <_strtod_l+0x356>
 800cdb4:	2a4e      	cmp	r2, #78	; 0x4e
 800cdb6:	f47f aed9 	bne.w	800cb6c <_strtod_l+0xc4>
 800cdba:	499f      	ldr	r1, [pc, #636]	; (800d038 <_strtod_l+0x590>)
 800cdbc:	a817      	add	r0, sp, #92	; 0x5c
 800cdbe:	f002 f8b3 	bl	800ef28 <__match>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	f43f aed2 	beq.w	800cb6c <_strtod_l+0xc4>
 800cdc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b28      	cmp	r3, #40	; 0x28
 800cdce:	d12d      	bne.n	800ce2c <_strtod_l+0x384>
 800cdd0:	499a      	ldr	r1, [pc, #616]	; (800d03c <_strtod_l+0x594>)
 800cdd2:	aa1a      	add	r2, sp, #104	; 0x68
 800cdd4:	a817      	add	r0, sp, #92	; 0x5c
 800cdd6:	f002 f8bb 	bl	800ef50 <__hexnan>
 800cdda:	2805      	cmp	r0, #5
 800cddc:	d126      	bne.n	800ce2c <_strtod_l+0x384>
 800cdde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cde0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cde4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cde8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cdec:	e6a0      	b.n	800cb30 <_strtod_l+0x88>
 800cdee:	210a      	movs	r1, #10
 800cdf0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cdf4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cdf8:	e7b9      	b.n	800cd6e <_strtod_l+0x2c6>
 800cdfa:	2a6e      	cmp	r2, #110	; 0x6e
 800cdfc:	e7db      	b.n	800cdb6 <_strtod_l+0x30e>
 800cdfe:	4990      	ldr	r1, [pc, #576]	; (800d040 <_strtod_l+0x598>)
 800ce00:	a817      	add	r0, sp, #92	; 0x5c
 800ce02:	f002 f891 	bl	800ef28 <__match>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	f43f aeb0 	beq.w	800cb6c <_strtod_l+0xc4>
 800ce0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce0e:	498d      	ldr	r1, [pc, #564]	; (800d044 <_strtod_l+0x59c>)
 800ce10:	3b01      	subs	r3, #1
 800ce12:	a817      	add	r0, sp, #92	; 0x5c
 800ce14:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce16:	f002 f887 	bl	800ef28 <__match>
 800ce1a:	b910      	cbnz	r0, 800ce22 <_strtod_l+0x37a>
 800ce1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce1e:	3301      	adds	r3, #1
 800ce20:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce22:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d054 <_strtod_l+0x5ac>
 800ce26:	f04f 0a00 	mov.w	sl, #0
 800ce2a:	e681      	b.n	800cb30 <_strtod_l+0x88>
 800ce2c:	4886      	ldr	r0, [pc, #536]	; (800d048 <_strtod_l+0x5a0>)
 800ce2e:	f003 fa2f 	bl	8010290 <nan>
 800ce32:	ec5b ab10 	vmov	sl, fp, d0
 800ce36:	e67b      	b.n	800cb30 <_strtod_l+0x88>
 800ce38:	9b05      	ldr	r3, [sp, #20]
 800ce3a:	9807      	ldr	r0, [sp, #28]
 800ce3c:	1af3      	subs	r3, r6, r3
 800ce3e:	2f00      	cmp	r7, #0
 800ce40:	bf08      	it	eq
 800ce42:	462f      	moveq	r7, r5
 800ce44:	2d10      	cmp	r5, #16
 800ce46:	9306      	str	r3, [sp, #24]
 800ce48:	46a8      	mov	r8, r5
 800ce4a:	bfa8      	it	ge
 800ce4c:	f04f 0810 	movge.w	r8, #16
 800ce50:	f7f3 fb60 	bl	8000514 <__aeabi_ui2d>
 800ce54:	2d09      	cmp	r5, #9
 800ce56:	4682      	mov	sl, r0
 800ce58:	468b      	mov	fp, r1
 800ce5a:	dd13      	ble.n	800ce84 <_strtod_l+0x3dc>
 800ce5c:	4b7b      	ldr	r3, [pc, #492]	; (800d04c <_strtod_l+0x5a4>)
 800ce5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ce62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ce66:	f7f3 fbcf 	bl	8000608 <__aeabi_dmul>
 800ce6a:	4682      	mov	sl, r0
 800ce6c:	4648      	mov	r0, r9
 800ce6e:	468b      	mov	fp, r1
 800ce70:	f7f3 fb50 	bl	8000514 <__aeabi_ui2d>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4650      	mov	r0, sl
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	f7f3 fa0e 	bl	800029c <__adddf3>
 800ce80:	4682      	mov	sl, r0
 800ce82:	468b      	mov	fp, r1
 800ce84:	2d0f      	cmp	r5, #15
 800ce86:	dc38      	bgt.n	800cefa <_strtod_l+0x452>
 800ce88:	9b06      	ldr	r3, [sp, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f43f ae50 	beq.w	800cb30 <_strtod_l+0x88>
 800ce90:	dd24      	ble.n	800cedc <_strtod_l+0x434>
 800ce92:	2b16      	cmp	r3, #22
 800ce94:	dc0b      	bgt.n	800ceae <_strtod_l+0x406>
 800ce96:	496d      	ldr	r1, [pc, #436]	; (800d04c <_strtod_l+0x5a4>)
 800ce98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea0:	4652      	mov	r2, sl
 800cea2:	465b      	mov	r3, fp
 800cea4:	f7f3 fbb0 	bl	8000608 <__aeabi_dmul>
 800cea8:	4682      	mov	sl, r0
 800ceaa:	468b      	mov	fp, r1
 800ceac:	e640      	b.n	800cb30 <_strtod_l+0x88>
 800ceae:	9a06      	ldr	r2, [sp, #24]
 800ceb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	db20      	blt.n	800cefa <_strtod_l+0x452>
 800ceb8:	4c64      	ldr	r4, [pc, #400]	; (800d04c <_strtod_l+0x5a4>)
 800ceba:	f1c5 050f 	rsb	r5, r5, #15
 800cebe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cec2:	4652      	mov	r2, sl
 800cec4:	465b      	mov	r3, fp
 800cec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceca:	f7f3 fb9d 	bl	8000608 <__aeabi_dmul>
 800cece:	9b06      	ldr	r3, [sp, #24]
 800ced0:	1b5d      	subs	r5, r3, r5
 800ced2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ced6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ceda:	e7e3      	b.n	800cea4 <_strtod_l+0x3fc>
 800cedc:	9b06      	ldr	r3, [sp, #24]
 800cede:	3316      	adds	r3, #22
 800cee0:	db0b      	blt.n	800cefa <_strtod_l+0x452>
 800cee2:	9b05      	ldr	r3, [sp, #20]
 800cee4:	1b9e      	subs	r6, r3, r6
 800cee6:	4b59      	ldr	r3, [pc, #356]	; (800d04c <_strtod_l+0x5a4>)
 800cee8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ceec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cef0:	4650      	mov	r0, sl
 800cef2:	4659      	mov	r1, fp
 800cef4:	f7f3 fcb2 	bl	800085c <__aeabi_ddiv>
 800cef8:	e7d6      	b.n	800cea8 <_strtod_l+0x400>
 800cefa:	9b06      	ldr	r3, [sp, #24]
 800cefc:	eba5 0808 	sub.w	r8, r5, r8
 800cf00:	4498      	add	r8, r3
 800cf02:	f1b8 0f00 	cmp.w	r8, #0
 800cf06:	dd74      	ble.n	800cff2 <_strtod_l+0x54a>
 800cf08:	f018 030f 	ands.w	r3, r8, #15
 800cf0c:	d00a      	beq.n	800cf24 <_strtod_l+0x47c>
 800cf0e:	494f      	ldr	r1, [pc, #316]	; (800d04c <_strtod_l+0x5a4>)
 800cf10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf14:	4652      	mov	r2, sl
 800cf16:	465b      	mov	r3, fp
 800cf18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf1c:	f7f3 fb74 	bl	8000608 <__aeabi_dmul>
 800cf20:	4682      	mov	sl, r0
 800cf22:	468b      	mov	fp, r1
 800cf24:	f038 080f 	bics.w	r8, r8, #15
 800cf28:	d04f      	beq.n	800cfca <_strtod_l+0x522>
 800cf2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cf2e:	dd22      	ble.n	800cf76 <_strtod_l+0x4ce>
 800cf30:	2500      	movs	r5, #0
 800cf32:	462e      	mov	r6, r5
 800cf34:	9507      	str	r5, [sp, #28]
 800cf36:	9505      	str	r5, [sp, #20]
 800cf38:	2322      	movs	r3, #34	; 0x22
 800cf3a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d054 <_strtod_l+0x5ac>
 800cf3e:	6023      	str	r3, [r4, #0]
 800cf40:	f04f 0a00 	mov.w	sl, #0
 800cf44:	9b07      	ldr	r3, [sp, #28]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f43f adf2 	beq.w	800cb30 <_strtod_l+0x88>
 800cf4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f002 f96e 	bl	800f230 <_Bfree>
 800cf54:	9905      	ldr	r1, [sp, #20]
 800cf56:	4620      	mov	r0, r4
 800cf58:	f002 f96a 	bl	800f230 <_Bfree>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f002 f966 	bl	800f230 <_Bfree>
 800cf64:	9907      	ldr	r1, [sp, #28]
 800cf66:	4620      	mov	r0, r4
 800cf68:	f002 f962 	bl	800f230 <_Bfree>
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f002 f95e 	bl	800f230 <_Bfree>
 800cf74:	e5dc      	b.n	800cb30 <_strtod_l+0x88>
 800cf76:	4b36      	ldr	r3, [pc, #216]	; (800d050 <_strtod_l+0x5a8>)
 800cf78:	9304      	str	r3, [sp, #16]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cf80:	4650      	mov	r0, sl
 800cf82:	4659      	mov	r1, fp
 800cf84:	4699      	mov	r9, r3
 800cf86:	f1b8 0f01 	cmp.w	r8, #1
 800cf8a:	dc21      	bgt.n	800cfd0 <_strtod_l+0x528>
 800cf8c:	b10b      	cbz	r3, 800cf92 <_strtod_l+0x4ea>
 800cf8e:	4682      	mov	sl, r0
 800cf90:	468b      	mov	fp, r1
 800cf92:	4b2f      	ldr	r3, [pc, #188]	; (800d050 <_strtod_l+0x5a8>)
 800cf94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cf98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cf9c:	4652      	mov	r2, sl
 800cf9e:	465b      	mov	r3, fp
 800cfa0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cfa4:	f7f3 fb30 	bl	8000608 <__aeabi_dmul>
 800cfa8:	4b2a      	ldr	r3, [pc, #168]	; (800d054 <_strtod_l+0x5ac>)
 800cfaa:	460a      	mov	r2, r1
 800cfac:	400b      	ands	r3, r1
 800cfae:	492a      	ldr	r1, [pc, #168]	; (800d058 <_strtod_l+0x5b0>)
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	4682      	mov	sl, r0
 800cfb4:	d8bc      	bhi.n	800cf30 <_strtod_l+0x488>
 800cfb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cfba:	428b      	cmp	r3, r1
 800cfbc:	bf86      	itte	hi
 800cfbe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d05c <_strtod_l+0x5b4>
 800cfc2:	f04f 3aff 	movhi.w	sl, #4294967295
 800cfc6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9304      	str	r3, [sp, #16]
 800cfce:	e084      	b.n	800d0da <_strtod_l+0x632>
 800cfd0:	f018 0f01 	tst.w	r8, #1
 800cfd4:	d005      	beq.n	800cfe2 <_strtod_l+0x53a>
 800cfd6:	9b04      	ldr	r3, [sp, #16]
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f7f3 fb14 	bl	8000608 <__aeabi_dmul>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	9a04      	ldr	r2, [sp, #16]
 800cfe4:	3208      	adds	r2, #8
 800cfe6:	f109 0901 	add.w	r9, r9, #1
 800cfea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cfee:	9204      	str	r2, [sp, #16]
 800cff0:	e7c9      	b.n	800cf86 <_strtod_l+0x4de>
 800cff2:	d0ea      	beq.n	800cfca <_strtod_l+0x522>
 800cff4:	f1c8 0800 	rsb	r8, r8, #0
 800cff8:	f018 020f 	ands.w	r2, r8, #15
 800cffc:	d00a      	beq.n	800d014 <_strtod_l+0x56c>
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <_strtod_l+0x5a4>)
 800d000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d004:	4650      	mov	r0, sl
 800d006:	4659      	mov	r1, fp
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	f7f3 fc26 	bl	800085c <__aeabi_ddiv>
 800d010:	4682      	mov	sl, r0
 800d012:	468b      	mov	fp, r1
 800d014:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d018:	d0d7      	beq.n	800cfca <_strtod_l+0x522>
 800d01a:	f1b8 0f1f 	cmp.w	r8, #31
 800d01e:	dd1f      	ble.n	800d060 <_strtod_l+0x5b8>
 800d020:	2500      	movs	r5, #0
 800d022:	462e      	mov	r6, r5
 800d024:	9507      	str	r5, [sp, #28]
 800d026:	9505      	str	r5, [sp, #20]
 800d028:	2322      	movs	r3, #34	; 0x22
 800d02a:	f04f 0a00 	mov.w	sl, #0
 800d02e:	f04f 0b00 	mov.w	fp, #0
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	e786      	b.n	800cf44 <_strtod_l+0x49c>
 800d036:	bf00      	nop
 800d038:	08010745 	.word	0x08010745
 800d03c:	08010788 	.word	0x08010788
 800d040:	0801073d 	.word	0x0801073d
 800d044:	080108cc 	.word	0x080108cc
 800d048:	08010be0 	.word	0x08010be0
 800d04c:	08010ac0 	.word	0x08010ac0
 800d050:	08010a98 	.word	0x08010a98
 800d054:	7ff00000 	.word	0x7ff00000
 800d058:	7ca00000 	.word	0x7ca00000
 800d05c:	7fefffff 	.word	0x7fefffff
 800d060:	f018 0310 	ands.w	r3, r8, #16
 800d064:	bf18      	it	ne
 800d066:	236a      	movne	r3, #106	; 0x6a
 800d068:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d418 <_strtod_l+0x970>
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	4650      	mov	r0, sl
 800d070:	4659      	mov	r1, fp
 800d072:	2300      	movs	r3, #0
 800d074:	f018 0f01 	tst.w	r8, #1
 800d078:	d004      	beq.n	800d084 <_strtod_l+0x5dc>
 800d07a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d07e:	f7f3 fac3 	bl	8000608 <__aeabi_dmul>
 800d082:	2301      	movs	r3, #1
 800d084:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d088:	f109 0908 	add.w	r9, r9, #8
 800d08c:	d1f2      	bne.n	800d074 <_strtod_l+0x5cc>
 800d08e:	b10b      	cbz	r3, 800d094 <_strtod_l+0x5ec>
 800d090:	4682      	mov	sl, r0
 800d092:	468b      	mov	fp, r1
 800d094:	9b04      	ldr	r3, [sp, #16]
 800d096:	b1c3      	cbz	r3, 800d0ca <_strtod_l+0x622>
 800d098:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d09c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	4659      	mov	r1, fp
 800d0a4:	dd11      	ble.n	800d0ca <_strtod_l+0x622>
 800d0a6:	2b1f      	cmp	r3, #31
 800d0a8:	f340 8124 	ble.w	800d2f4 <_strtod_l+0x84c>
 800d0ac:	2b34      	cmp	r3, #52	; 0x34
 800d0ae:	bfde      	ittt	le
 800d0b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d0b4:	f04f 33ff 	movle.w	r3, #4294967295
 800d0b8:	fa03 f202 	lslle.w	r2, r3, r2
 800d0bc:	f04f 0a00 	mov.w	sl, #0
 800d0c0:	bfcc      	ite	gt
 800d0c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d0c6:	ea02 0b01 	andle.w	fp, r2, r1
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	4650      	mov	r0, sl
 800d0d0:	4659      	mov	r1, fp
 800d0d2:	f7f3 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d1a2      	bne.n	800d020 <_strtod_l+0x578>
 800d0da:	9b07      	ldr	r3, [sp, #28]
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	9908      	ldr	r1, [sp, #32]
 800d0e0:	462b      	mov	r3, r5
 800d0e2:	463a      	mov	r2, r7
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f002 f90b 	bl	800f300 <__s2b>
 800d0ea:	9007      	str	r0, [sp, #28]
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	f43f af1f 	beq.w	800cf30 <_strtod_l+0x488>
 800d0f2:	9b05      	ldr	r3, [sp, #20]
 800d0f4:	1b9e      	subs	r6, r3, r6
 800d0f6:	9b06      	ldr	r3, [sp, #24]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bfb4      	ite	lt
 800d0fc:	4633      	movlt	r3, r6
 800d0fe:	2300      	movge	r3, #0
 800d100:	930c      	str	r3, [sp, #48]	; 0x30
 800d102:	9b06      	ldr	r3, [sp, #24]
 800d104:	2500      	movs	r5, #0
 800d106:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d10a:	9312      	str	r3, [sp, #72]	; 0x48
 800d10c:	462e      	mov	r6, r5
 800d10e:	9b07      	ldr	r3, [sp, #28]
 800d110:	4620      	mov	r0, r4
 800d112:	6859      	ldr	r1, [r3, #4]
 800d114:	f002 f84c 	bl	800f1b0 <_Balloc>
 800d118:	9005      	str	r0, [sp, #20]
 800d11a:	2800      	cmp	r0, #0
 800d11c:	f43f af0c 	beq.w	800cf38 <_strtod_l+0x490>
 800d120:	9b07      	ldr	r3, [sp, #28]
 800d122:	691a      	ldr	r2, [r3, #16]
 800d124:	3202      	adds	r2, #2
 800d126:	f103 010c 	add.w	r1, r3, #12
 800d12a:	0092      	lsls	r2, r2, #2
 800d12c:	300c      	adds	r0, #12
 800d12e:	f002 f831 	bl	800f194 <memcpy>
 800d132:	ec4b ab10 	vmov	d0, sl, fp
 800d136:	aa1a      	add	r2, sp, #104	; 0x68
 800d138:	a919      	add	r1, sp, #100	; 0x64
 800d13a:	4620      	mov	r0, r4
 800d13c:	f002 fc26 	bl	800f98c <__d2b>
 800d140:	ec4b ab18 	vmov	d8, sl, fp
 800d144:	9018      	str	r0, [sp, #96]	; 0x60
 800d146:	2800      	cmp	r0, #0
 800d148:	f43f aef6 	beq.w	800cf38 <_strtod_l+0x490>
 800d14c:	2101      	movs	r1, #1
 800d14e:	4620      	mov	r0, r4
 800d150:	f002 f970 	bl	800f434 <__i2b>
 800d154:	4606      	mov	r6, r0
 800d156:	2800      	cmp	r0, #0
 800d158:	f43f aeee 	beq.w	800cf38 <_strtod_l+0x490>
 800d15c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d15e:	9904      	ldr	r1, [sp, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	bfab      	itete	ge
 800d164:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d166:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d168:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d16a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d16e:	bfac      	ite	ge
 800d170:	eb03 0902 	addge.w	r9, r3, r2
 800d174:	1ad7      	sublt	r7, r2, r3
 800d176:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d178:	eba3 0801 	sub.w	r8, r3, r1
 800d17c:	4490      	add	r8, r2
 800d17e:	4ba1      	ldr	r3, [pc, #644]	; (800d404 <_strtod_l+0x95c>)
 800d180:	f108 38ff 	add.w	r8, r8, #4294967295
 800d184:	4598      	cmp	r8, r3
 800d186:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d18a:	f280 80c7 	bge.w	800d31c <_strtod_l+0x874>
 800d18e:	eba3 0308 	sub.w	r3, r3, r8
 800d192:	2b1f      	cmp	r3, #31
 800d194:	eba2 0203 	sub.w	r2, r2, r3
 800d198:	f04f 0101 	mov.w	r1, #1
 800d19c:	f300 80b1 	bgt.w	800d302 <_strtod_l+0x85a>
 800d1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1a4:	930d      	str	r3, [sp, #52]	; 0x34
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9308      	str	r3, [sp, #32]
 800d1aa:	eb09 0802 	add.w	r8, r9, r2
 800d1ae:	9b04      	ldr	r3, [sp, #16]
 800d1b0:	45c1      	cmp	r9, r8
 800d1b2:	4417      	add	r7, r2
 800d1b4:	441f      	add	r7, r3
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	bfa8      	it	ge
 800d1ba:	4643      	movge	r3, r8
 800d1bc:	42bb      	cmp	r3, r7
 800d1be:	bfa8      	it	ge
 800d1c0:	463b      	movge	r3, r7
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	bfc2      	ittt	gt
 800d1c6:	eba8 0803 	subgt.w	r8, r8, r3
 800d1ca:	1aff      	subgt	r7, r7, r3
 800d1cc:	eba9 0903 	subgt.w	r9, r9, r3
 800d1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	dd17      	ble.n	800d206 <_strtod_l+0x75e>
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f002 f9ea 	bl	800f5b4 <__pow5mult>
 800d1e0:	4606      	mov	r6, r0
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	f43f aea8 	beq.w	800cf38 <_strtod_l+0x490>
 800d1e8:	4601      	mov	r1, r0
 800d1ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f002 f937 	bl	800f460 <__multiply>
 800d1f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	f43f ae9f 	beq.w	800cf38 <_strtod_l+0x490>
 800d1fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f002 f817 	bl	800f230 <_Bfree>
 800d202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d204:	9318      	str	r3, [sp, #96]	; 0x60
 800d206:	f1b8 0f00 	cmp.w	r8, #0
 800d20a:	f300 808c 	bgt.w	800d326 <_strtod_l+0x87e>
 800d20e:	9b06      	ldr	r3, [sp, #24]
 800d210:	2b00      	cmp	r3, #0
 800d212:	dd08      	ble.n	800d226 <_strtod_l+0x77e>
 800d214:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d216:	9905      	ldr	r1, [sp, #20]
 800d218:	4620      	mov	r0, r4
 800d21a:	f002 f9cb 	bl	800f5b4 <__pow5mult>
 800d21e:	9005      	str	r0, [sp, #20]
 800d220:	2800      	cmp	r0, #0
 800d222:	f43f ae89 	beq.w	800cf38 <_strtod_l+0x490>
 800d226:	2f00      	cmp	r7, #0
 800d228:	dd08      	ble.n	800d23c <_strtod_l+0x794>
 800d22a:	9905      	ldr	r1, [sp, #20]
 800d22c:	463a      	mov	r2, r7
 800d22e:	4620      	mov	r0, r4
 800d230:	f002 fa1a 	bl	800f668 <__lshift>
 800d234:	9005      	str	r0, [sp, #20]
 800d236:	2800      	cmp	r0, #0
 800d238:	f43f ae7e 	beq.w	800cf38 <_strtod_l+0x490>
 800d23c:	f1b9 0f00 	cmp.w	r9, #0
 800d240:	dd08      	ble.n	800d254 <_strtod_l+0x7ac>
 800d242:	4631      	mov	r1, r6
 800d244:	464a      	mov	r2, r9
 800d246:	4620      	mov	r0, r4
 800d248:	f002 fa0e 	bl	800f668 <__lshift>
 800d24c:	4606      	mov	r6, r0
 800d24e:	2800      	cmp	r0, #0
 800d250:	f43f ae72 	beq.w	800cf38 <_strtod_l+0x490>
 800d254:	9a05      	ldr	r2, [sp, #20]
 800d256:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d258:	4620      	mov	r0, r4
 800d25a:	f002 fa91 	bl	800f780 <__mdiff>
 800d25e:	4605      	mov	r5, r0
 800d260:	2800      	cmp	r0, #0
 800d262:	f43f ae69 	beq.w	800cf38 <_strtod_l+0x490>
 800d266:	68c3      	ldr	r3, [r0, #12]
 800d268:	930b      	str	r3, [sp, #44]	; 0x2c
 800d26a:	2300      	movs	r3, #0
 800d26c:	60c3      	str	r3, [r0, #12]
 800d26e:	4631      	mov	r1, r6
 800d270:	f002 fa6a 	bl	800f748 <__mcmp>
 800d274:	2800      	cmp	r0, #0
 800d276:	da60      	bge.n	800d33a <_strtod_l+0x892>
 800d278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d27a:	ea53 030a 	orrs.w	r3, r3, sl
 800d27e:	f040 8082 	bne.w	800d386 <_strtod_l+0x8de>
 800d282:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d286:	2b00      	cmp	r3, #0
 800d288:	d17d      	bne.n	800d386 <_strtod_l+0x8de>
 800d28a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d28e:	0d1b      	lsrs	r3, r3, #20
 800d290:	051b      	lsls	r3, r3, #20
 800d292:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d296:	d976      	bls.n	800d386 <_strtod_l+0x8de>
 800d298:	696b      	ldr	r3, [r5, #20]
 800d29a:	b913      	cbnz	r3, 800d2a2 <_strtod_l+0x7fa>
 800d29c:	692b      	ldr	r3, [r5, #16]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	dd71      	ble.n	800d386 <_strtod_l+0x8de>
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f002 f9de 	bl	800f668 <__lshift>
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	f002 fa4a 	bl	800f748 <__mcmp>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	dd66      	ble.n	800d386 <_strtod_l+0x8de>
 800d2b8:	9904      	ldr	r1, [sp, #16]
 800d2ba:	4a53      	ldr	r2, [pc, #332]	; (800d408 <_strtod_l+0x960>)
 800d2bc:	465b      	mov	r3, fp
 800d2be:	2900      	cmp	r1, #0
 800d2c0:	f000 8081 	beq.w	800d3c6 <_strtod_l+0x91e>
 800d2c4:	ea02 010b 	and.w	r1, r2, fp
 800d2c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d2cc:	dc7b      	bgt.n	800d3c6 <_strtod_l+0x91e>
 800d2ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d2d2:	f77f aea9 	ble.w	800d028 <_strtod_l+0x580>
 800d2d6:	4b4d      	ldr	r3, [pc, #308]	; (800d40c <_strtod_l+0x964>)
 800d2d8:	4650      	mov	r0, sl
 800d2da:	4659      	mov	r1, fp
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f7f3 f993 	bl	8000608 <__aeabi_dmul>
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4303      	orrs	r3, r0
 800d2e6:	bf08      	it	eq
 800d2e8:	2322      	moveq	r3, #34	; 0x22
 800d2ea:	4682      	mov	sl, r0
 800d2ec:	468b      	mov	fp, r1
 800d2ee:	bf08      	it	eq
 800d2f0:	6023      	streq	r3, [r4, #0]
 800d2f2:	e62b      	b.n	800cf4c <_strtod_l+0x4a4>
 800d2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fc:	ea03 0a0a 	and.w	sl, r3, sl
 800d300:	e6e3      	b.n	800d0ca <_strtod_l+0x622>
 800d302:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d306:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d30a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d30e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d312:	fa01 f308 	lsl.w	r3, r1, r8
 800d316:	9308      	str	r3, [sp, #32]
 800d318:	910d      	str	r1, [sp, #52]	; 0x34
 800d31a:	e746      	b.n	800d1aa <_strtod_l+0x702>
 800d31c:	2300      	movs	r3, #0
 800d31e:	9308      	str	r3, [sp, #32]
 800d320:	2301      	movs	r3, #1
 800d322:	930d      	str	r3, [sp, #52]	; 0x34
 800d324:	e741      	b.n	800d1aa <_strtod_l+0x702>
 800d326:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d328:	4642      	mov	r2, r8
 800d32a:	4620      	mov	r0, r4
 800d32c:	f002 f99c 	bl	800f668 <__lshift>
 800d330:	9018      	str	r0, [sp, #96]	; 0x60
 800d332:	2800      	cmp	r0, #0
 800d334:	f47f af6b 	bne.w	800d20e <_strtod_l+0x766>
 800d338:	e5fe      	b.n	800cf38 <_strtod_l+0x490>
 800d33a:	465f      	mov	r7, fp
 800d33c:	d16e      	bne.n	800d41c <_strtod_l+0x974>
 800d33e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d344:	b342      	cbz	r2, 800d398 <_strtod_l+0x8f0>
 800d346:	4a32      	ldr	r2, [pc, #200]	; (800d410 <_strtod_l+0x968>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d128      	bne.n	800d39e <_strtod_l+0x8f6>
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	4651      	mov	r1, sl
 800d350:	b1eb      	cbz	r3, 800d38e <_strtod_l+0x8e6>
 800d352:	4b2d      	ldr	r3, [pc, #180]	; (800d408 <_strtod_l+0x960>)
 800d354:	403b      	ands	r3, r7
 800d356:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d35a:	f04f 32ff 	mov.w	r2, #4294967295
 800d35e:	d819      	bhi.n	800d394 <_strtod_l+0x8ec>
 800d360:	0d1b      	lsrs	r3, r3, #20
 800d362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d366:	fa02 f303 	lsl.w	r3, r2, r3
 800d36a:	4299      	cmp	r1, r3
 800d36c:	d117      	bne.n	800d39e <_strtod_l+0x8f6>
 800d36e:	4b29      	ldr	r3, [pc, #164]	; (800d414 <_strtod_l+0x96c>)
 800d370:	429f      	cmp	r7, r3
 800d372:	d102      	bne.n	800d37a <_strtod_l+0x8d2>
 800d374:	3101      	adds	r1, #1
 800d376:	f43f addf 	beq.w	800cf38 <_strtod_l+0x490>
 800d37a:	4b23      	ldr	r3, [pc, #140]	; (800d408 <_strtod_l+0x960>)
 800d37c:	403b      	ands	r3, r7
 800d37e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d382:	f04f 0a00 	mov.w	sl, #0
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1a4      	bne.n	800d2d6 <_strtod_l+0x82e>
 800d38c:	e5de      	b.n	800cf4c <_strtod_l+0x4a4>
 800d38e:	f04f 33ff 	mov.w	r3, #4294967295
 800d392:	e7ea      	b.n	800d36a <_strtod_l+0x8c2>
 800d394:	4613      	mov	r3, r2
 800d396:	e7e8      	b.n	800d36a <_strtod_l+0x8c2>
 800d398:	ea53 030a 	orrs.w	r3, r3, sl
 800d39c:	d08c      	beq.n	800d2b8 <_strtod_l+0x810>
 800d39e:	9b08      	ldr	r3, [sp, #32]
 800d3a0:	b1db      	cbz	r3, 800d3da <_strtod_l+0x932>
 800d3a2:	423b      	tst	r3, r7
 800d3a4:	d0ef      	beq.n	800d386 <_strtod_l+0x8de>
 800d3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	4650      	mov	r0, sl
 800d3ac:	4659      	mov	r1, fp
 800d3ae:	b1c3      	cbz	r3, 800d3e2 <_strtod_l+0x93a>
 800d3b0:	f7ff fb5e 	bl	800ca70 <sulp>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	ec51 0b18 	vmov	r0, r1, d8
 800d3bc:	f7f2 ff6e 	bl	800029c <__adddf3>
 800d3c0:	4682      	mov	sl, r0
 800d3c2:	468b      	mov	fp, r1
 800d3c4:	e7df      	b.n	800d386 <_strtod_l+0x8de>
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d3cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3d4:	f04f 3aff 	mov.w	sl, #4294967295
 800d3d8:	e7d5      	b.n	800d386 <_strtod_l+0x8de>
 800d3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3dc:	ea13 0f0a 	tst.w	r3, sl
 800d3e0:	e7e0      	b.n	800d3a4 <_strtod_l+0x8fc>
 800d3e2:	f7ff fb45 	bl	800ca70 <sulp>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	ec51 0b18 	vmov	r0, r1, d8
 800d3ee:	f7f2 ff53 	bl	8000298 <__aeabi_dsub>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4682      	mov	sl, r0
 800d3f8:	468b      	mov	fp, r1
 800d3fa:	f7f3 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d0c1      	beq.n	800d386 <_strtod_l+0x8de>
 800d402:	e611      	b.n	800d028 <_strtod_l+0x580>
 800d404:	fffffc02 	.word	0xfffffc02
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	39500000 	.word	0x39500000
 800d410:	000fffff 	.word	0x000fffff
 800d414:	7fefffff 	.word	0x7fefffff
 800d418:	080107a0 	.word	0x080107a0
 800d41c:	4631      	mov	r1, r6
 800d41e:	4628      	mov	r0, r5
 800d420:	f002 fb10 	bl	800fa44 <__ratio>
 800d424:	ec59 8b10 	vmov	r8, r9, d0
 800d428:	ee10 0a10 	vmov	r0, s0
 800d42c:	2200      	movs	r2, #0
 800d42e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d432:	4649      	mov	r1, r9
 800d434:	f7f3 fb64 	bl	8000b00 <__aeabi_dcmple>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d07a      	beq.n	800d532 <_strtod_l+0xa8a>
 800d43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d04a      	beq.n	800d4d8 <_strtod_l+0xa30>
 800d442:	4b95      	ldr	r3, [pc, #596]	; (800d698 <_strtod_l+0xbf0>)
 800d444:	2200      	movs	r2, #0
 800d446:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d44a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d698 <_strtod_l+0xbf0>
 800d44e:	f04f 0800 	mov.w	r8, #0
 800d452:	4b92      	ldr	r3, [pc, #584]	; (800d69c <_strtod_l+0xbf4>)
 800d454:	403b      	ands	r3, r7
 800d456:	930d      	str	r3, [sp, #52]	; 0x34
 800d458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d45a:	4b91      	ldr	r3, [pc, #580]	; (800d6a0 <_strtod_l+0xbf8>)
 800d45c:	429a      	cmp	r2, r3
 800d45e:	f040 80b0 	bne.w	800d5c2 <_strtod_l+0xb1a>
 800d462:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d466:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d46a:	ec4b ab10 	vmov	d0, sl, fp
 800d46e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d472:	f002 fa0f 	bl	800f894 <__ulp>
 800d476:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d47a:	ec53 2b10 	vmov	r2, r3, d0
 800d47e:	f7f3 f8c3 	bl	8000608 <__aeabi_dmul>
 800d482:	4652      	mov	r2, sl
 800d484:	465b      	mov	r3, fp
 800d486:	f7f2 ff09 	bl	800029c <__adddf3>
 800d48a:	460b      	mov	r3, r1
 800d48c:	4983      	ldr	r1, [pc, #524]	; (800d69c <_strtod_l+0xbf4>)
 800d48e:	4a85      	ldr	r2, [pc, #532]	; (800d6a4 <_strtod_l+0xbfc>)
 800d490:	4019      	ands	r1, r3
 800d492:	4291      	cmp	r1, r2
 800d494:	4682      	mov	sl, r0
 800d496:	d960      	bls.n	800d55a <_strtod_l+0xab2>
 800d498:	ee18 3a90 	vmov	r3, s17
 800d49c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d104      	bne.n	800d4ae <_strtod_l+0xa06>
 800d4a4:	ee18 3a10 	vmov	r3, s16
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	f43f ad45 	beq.w	800cf38 <_strtod_l+0x490>
 800d4ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d6b0 <_strtod_l+0xc08>
 800d4b2:	f04f 3aff 	mov.w	sl, #4294967295
 800d4b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f001 feb9 	bl	800f230 <_Bfree>
 800d4be:	9905      	ldr	r1, [sp, #20]
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f001 feb5 	bl	800f230 <_Bfree>
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f001 feb1 	bl	800f230 <_Bfree>
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f001 fead 	bl	800f230 <_Bfree>
 800d4d6:	e61a      	b.n	800d10e <_strtod_l+0x666>
 800d4d8:	f1ba 0f00 	cmp.w	sl, #0
 800d4dc:	d11b      	bne.n	800d516 <_strtod_l+0xa6e>
 800d4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4e2:	b9f3      	cbnz	r3, 800d522 <_strtod_l+0xa7a>
 800d4e4:	4b6c      	ldr	r3, [pc, #432]	; (800d698 <_strtod_l+0xbf0>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	4640      	mov	r0, r8
 800d4ea:	4649      	mov	r1, r9
 800d4ec:	f7f3 fafe 	bl	8000aec <__aeabi_dcmplt>
 800d4f0:	b9d0      	cbnz	r0, 800d528 <_strtod_l+0xa80>
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	4b6c      	ldr	r3, [pc, #432]	; (800d6a8 <_strtod_l+0xc00>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f7f3 f885 	bl	8000608 <__aeabi_dmul>
 800d4fe:	4680      	mov	r8, r0
 800d500:	4689      	mov	r9, r1
 800d502:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d506:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d50a:	9315      	str	r3, [sp, #84]	; 0x54
 800d50c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d510:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d514:	e79d      	b.n	800d452 <_strtod_l+0x9aa>
 800d516:	f1ba 0f01 	cmp.w	sl, #1
 800d51a:	d102      	bne.n	800d522 <_strtod_l+0xa7a>
 800d51c:	2f00      	cmp	r7, #0
 800d51e:	f43f ad83 	beq.w	800d028 <_strtod_l+0x580>
 800d522:	4b62      	ldr	r3, [pc, #392]	; (800d6ac <_strtod_l+0xc04>)
 800d524:	2200      	movs	r2, #0
 800d526:	e78e      	b.n	800d446 <_strtod_l+0x99e>
 800d528:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d6a8 <_strtod_l+0xc00>
 800d52c:	f04f 0800 	mov.w	r8, #0
 800d530:	e7e7      	b.n	800d502 <_strtod_l+0xa5a>
 800d532:	4b5d      	ldr	r3, [pc, #372]	; (800d6a8 <_strtod_l+0xc00>)
 800d534:	4640      	mov	r0, r8
 800d536:	4649      	mov	r1, r9
 800d538:	2200      	movs	r2, #0
 800d53a:	f7f3 f865 	bl	8000608 <__aeabi_dmul>
 800d53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d540:	4680      	mov	r8, r0
 800d542:	4689      	mov	r9, r1
 800d544:	b933      	cbnz	r3, 800d554 <_strtod_l+0xaac>
 800d546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d54a:	900e      	str	r0, [sp, #56]	; 0x38
 800d54c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d54e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d552:	e7dd      	b.n	800d510 <_strtod_l+0xa68>
 800d554:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d558:	e7f9      	b.n	800d54e <_strtod_l+0xaa6>
 800d55a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d55e:	9b04      	ldr	r3, [sp, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1a8      	bne.n	800d4b6 <_strtod_l+0xa0e>
 800d564:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d56a:	0d1b      	lsrs	r3, r3, #20
 800d56c:	051b      	lsls	r3, r3, #20
 800d56e:	429a      	cmp	r2, r3
 800d570:	d1a1      	bne.n	800d4b6 <_strtod_l+0xa0e>
 800d572:	4640      	mov	r0, r8
 800d574:	4649      	mov	r1, r9
 800d576:	f7f3 fbf7 	bl	8000d68 <__aeabi_d2lz>
 800d57a:	f7f3 f817 	bl	80005ac <__aeabi_l2d>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	4640      	mov	r0, r8
 800d584:	4649      	mov	r1, r9
 800d586:	f7f2 fe87 	bl	8000298 <__aeabi_dsub>
 800d58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d58c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d590:	ea43 030a 	orr.w	r3, r3, sl
 800d594:	4313      	orrs	r3, r2
 800d596:	4680      	mov	r8, r0
 800d598:	4689      	mov	r9, r1
 800d59a:	d055      	beq.n	800d648 <_strtod_l+0xba0>
 800d59c:	a336      	add	r3, pc, #216	; (adr r3, 800d678 <_strtod_l+0xbd0>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	f7f3 faa3 	bl	8000aec <__aeabi_dcmplt>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	f47f acd0 	bne.w	800cf4c <_strtod_l+0x4a4>
 800d5ac:	a334      	add	r3, pc, #208	; (adr r3, 800d680 <_strtod_l+0xbd8>)
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f3 fab7 	bl	8000b28 <__aeabi_dcmpgt>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f43f af7b 	beq.w	800d4b6 <_strtod_l+0xa0e>
 800d5c0:	e4c4      	b.n	800cf4c <_strtod_l+0x4a4>
 800d5c2:	9b04      	ldr	r3, [sp, #16]
 800d5c4:	b333      	cbz	r3, 800d614 <_strtod_l+0xb6c>
 800d5c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5cc:	d822      	bhi.n	800d614 <_strtod_l+0xb6c>
 800d5ce:	a32e      	add	r3, pc, #184	; (adr r3, 800d688 <_strtod_l+0xbe0>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	4640      	mov	r0, r8
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	f7f3 fa92 	bl	8000b00 <__aeabi_dcmple>
 800d5dc:	b1a0      	cbz	r0, 800d608 <_strtod_l+0xb60>
 800d5de:	4649      	mov	r1, r9
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	f7f3 fae9 	bl	8000bb8 <__aeabi_d2uiz>
 800d5e6:	2801      	cmp	r0, #1
 800d5e8:	bf38      	it	cc
 800d5ea:	2001      	movcc	r0, #1
 800d5ec:	f7f2 ff92 	bl	8000514 <__aeabi_ui2d>
 800d5f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	4689      	mov	r9, r1
 800d5f6:	bb23      	cbnz	r3, 800d642 <_strtod_l+0xb9a>
 800d5f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5fc:	9010      	str	r0, [sp, #64]	; 0x40
 800d5fe:	9311      	str	r3, [sp, #68]	; 0x44
 800d600:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d604:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d60a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d60c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	9309      	str	r3, [sp, #36]	; 0x24
 800d614:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d618:	eeb0 0a48 	vmov.f32	s0, s16
 800d61c:	eef0 0a68 	vmov.f32	s1, s17
 800d620:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d624:	f002 f936 	bl	800f894 <__ulp>
 800d628:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d62c:	ec53 2b10 	vmov	r2, r3, d0
 800d630:	f7f2 ffea 	bl	8000608 <__aeabi_dmul>
 800d634:	ec53 2b18 	vmov	r2, r3, d8
 800d638:	f7f2 fe30 	bl	800029c <__adddf3>
 800d63c:	4682      	mov	sl, r0
 800d63e:	468b      	mov	fp, r1
 800d640:	e78d      	b.n	800d55e <_strtod_l+0xab6>
 800d642:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d646:	e7db      	b.n	800d600 <_strtod_l+0xb58>
 800d648:	a311      	add	r3, pc, #68	; (adr r3, 800d690 <_strtod_l+0xbe8>)
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	f7f3 fa4d 	bl	8000aec <__aeabi_dcmplt>
 800d652:	e7b2      	b.n	800d5ba <_strtod_l+0xb12>
 800d654:	2300      	movs	r3, #0
 800d656:	930a      	str	r3, [sp, #40]	; 0x28
 800d658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d65a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d65c:	6013      	str	r3, [r2, #0]
 800d65e:	f7ff ba6b 	b.w	800cb38 <_strtod_l+0x90>
 800d662:	2a65      	cmp	r2, #101	; 0x65
 800d664:	f43f ab5f 	beq.w	800cd26 <_strtod_l+0x27e>
 800d668:	2a45      	cmp	r2, #69	; 0x45
 800d66a:	f43f ab5c 	beq.w	800cd26 <_strtod_l+0x27e>
 800d66e:	2301      	movs	r3, #1
 800d670:	f7ff bb94 	b.w	800cd9c <_strtod_l+0x2f4>
 800d674:	f3af 8000 	nop.w
 800d678:	94a03595 	.word	0x94a03595
 800d67c:	3fdfffff 	.word	0x3fdfffff
 800d680:	35afe535 	.word	0x35afe535
 800d684:	3fe00000 	.word	0x3fe00000
 800d688:	ffc00000 	.word	0xffc00000
 800d68c:	41dfffff 	.word	0x41dfffff
 800d690:	94a03595 	.word	0x94a03595
 800d694:	3fcfffff 	.word	0x3fcfffff
 800d698:	3ff00000 	.word	0x3ff00000
 800d69c:	7ff00000 	.word	0x7ff00000
 800d6a0:	7fe00000 	.word	0x7fe00000
 800d6a4:	7c9fffff 	.word	0x7c9fffff
 800d6a8:	3fe00000 	.word	0x3fe00000
 800d6ac:	bff00000 	.word	0xbff00000
 800d6b0:	7fefffff 	.word	0x7fefffff

0800d6b4 <_strtod_r>:
 800d6b4:	4b01      	ldr	r3, [pc, #4]	; (800d6bc <_strtod_r+0x8>)
 800d6b6:	f7ff b9f7 	b.w	800caa8 <_strtod_l>
 800d6ba:	bf00      	nop
 800d6bc:	20000168 	.word	0x20000168

0800d6c0 <_strtol_l.constprop.0>:
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c6:	d001      	beq.n	800d6cc <_strtol_l.constprop.0+0xc>
 800d6c8:	2b24      	cmp	r3, #36	; 0x24
 800d6ca:	d906      	bls.n	800d6da <_strtol_l.constprop.0+0x1a>
 800d6cc:	f7fe fa70 	bl	800bbb0 <__errno>
 800d6d0:	2316      	movs	r3, #22
 800d6d2:	6003      	str	r3, [r0, #0]
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d7c0 <_strtol_l.constprop.0+0x100>
 800d6de:	460d      	mov	r5, r1
 800d6e0:	462e      	mov	r6, r5
 800d6e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d6ea:	f017 0708 	ands.w	r7, r7, #8
 800d6ee:	d1f7      	bne.n	800d6e0 <_strtol_l.constprop.0+0x20>
 800d6f0:	2c2d      	cmp	r4, #45	; 0x2d
 800d6f2:	d132      	bne.n	800d75a <_strtol_l.constprop.0+0x9a>
 800d6f4:	782c      	ldrb	r4, [r5, #0]
 800d6f6:	2701      	movs	r7, #1
 800d6f8:	1cb5      	adds	r5, r6, #2
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d05b      	beq.n	800d7b6 <_strtol_l.constprop.0+0xf6>
 800d6fe:	2b10      	cmp	r3, #16
 800d700:	d109      	bne.n	800d716 <_strtol_l.constprop.0+0x56>
 800d702:	2c30      	cmp	r4, #48	; 0x30
 800d704:	d107      	bne.n	800d716 <_strtol_l.constprop.0+0x56>
 800d706:	782c      	ldrb	r4, [r5, #0]
 800d708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d70c:	2c58      	cmp	r4, #88	; 0x58
 800d70e:	d14d      	bne.n	800d7ac <_strtol_l.constprop.0+0xec>
 800d710:	786c      	ldrb	r4, [r5, #1]
 800d712:	2310      	movs	r3, #16
 800d714:	3502      	adds	r5, #2
 800d716:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d71a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d71e:	f04f 0c00 	mov.w	ip, #0
 800d722:	fbb8 f9f3 	udiv	r9, r8, r3
 800d726:	4666      	mov	r6, ip
 800d728:	fb03 8a19 	mls	sl, r3, r9, r8
 800d72c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d730:	f1be 0f09 	cmp.w	lr, #9
 800d734:	d816      	bhi.n	800d764 <_strtol_l.constprop.0+0xa4>
 800d736:	4674      	mov	r4, lr
 800d738:	42a3      	cmp	r3, r4
 800d73a:	dd24      	ble.n	800d786 <_strtol_l.constprop.0+0xc6>
 800d73c:	f1bc 0f00 	cmp.w	ip, #0
 800d740:	db1e      	blt.n	800d780 <_strtol_l.constprop.0+0xc0>
 800d742:	45b1      	cmp	r9, r6
 800d744:	d31c      	bcc.n	800d780 <_strtol_l.constprop.0+0xc0>
 800d746:	d101      	bne.n	800d74c <_strtol_l.constprop.0+0x8c>
 800d748:	45a2      	cmp	sl, r4
 800d74a:	db19      	blt.n	800d780 <_strtol_l.constprop.0+0xc0>
 800d74c:	fb06 4603 	mla	r6, r6, r3, r4
 800d750:	f04f 0c01 	mov.w	ip, #1
 800d754:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d758:	e7e8      	b.n	800d72c <_strtol_l.constprop.0+0x6c>
 800d75a:	2c2b      	cmp	r4, #43	; 0x2b
 800d75c:	bf04      	itt	eq
 800d75e:	782c      	ldrbeq	r4, [r5, #0]
 800d760:	1cb5      	addeq	r5, r6, #2
 800d762:	e7ca      	b.n	800d6fa <_strtol_l.constprop.0+0x3a>
 800d764:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d768:	f1be 0f19 	cmp.w	lr, #25
 800d76c:	d801      	bhi.n	800d772 <_strtol_l.constprop.0+0xb2>
 800d76e:	3c37      	subs	r4, #55	; 0x37
 800d770:	e7e2      	b.n	800d738 <_strtol_l.constprop.0+0x78>
 800d772:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d776:	f1be 0f19 	cmp.w	lr, #25
 800d77a:	d804      	bhi.n	800d786 <_strtol_l.constprop.0+0xc6>
 800d77c:	3c57      	subs	r4, #87	; 0x57
 800d77e:	e7db      	b.n	800d738 <_strtol_l.constprop.0+0x78>
 800d780:	f04f 3cff 	mov.w	ip, #4294967295
 800d784:	e7e6      	b.n	800d754 <_strtol_l.constprop.0+0x94>
 800d786:	f1bc 0f00 	cmp.w	ip, #0
 800d78a:	da05      	bge.n	800d798 <_strtol_l.constprop.0+0xd8>
 800d78c:	2322      	movs	r3, #34	; 0x22
 800d78e:	6003      	str	r3, [r0, #0]
 800d790:	4646      	mov	r6, r8
 800d792:	b942      	cbnz	r2, 800d7a6 <_strtol_l.constprop.0+0xe6>
 800d794:	4630      	mov	r0, r6
 800d796:	e79e      	b.n	800d6d6 <_strtol_l.constprop.0+0x16>
 800d798:	b107      	cbz	r7, 800d79c <_strtol_l.constprop.0+0xdc>
 800d79a:	4276      	negs	r6, r6
 800d79c:	2a00      	cmp	r2, #0
 800d79e:	d0f9      	beq.n	800d794 <_strtol_l.constprop.0+0xd4>
 800d7a0:	f1bc 0f00 	cmp.w	ip, #0
 800d7a4:	d000      	beq.n	800d7a8 <_strtol_l.constprop.0+0xe8>
 800d7a6:	1e69      	subs	r1, r5, #1
 800d7a8:	6011      	str	r1, [r2, #0]
 800d7aa:	e7f3      	b.n	800d794 <_strtol_l.constprop.0+0xd4>
 800d7ac:	2430      	movs	r4, #48	; 0x30
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1b1      	bne.n	800d716 <_strtol_l.constprop.0+0x56>
 800d7b2:	2308      	movs	r3, #8
 800d7b4:	e7af      	b.n	800d716 <_strtol_l.constprop.0+0x56>
 800d7b6:	2c30      	cmp	r4, #48	; 0x30
 800d7b8:	d0a5      	beq.n	800d706 <_strtol_l.constprop.0+0x46>
 800d7ba:	230a      	movs	r3, #10
 800d7bc:	e7ab      	b.n	800d716 <_strtol_l.constprop.0+0x56>
 800d7be:	bf00      	nop
 800d7c0:	080107c9 	.word	0x080107c9

0800d7c4 <_strtol_r>:
 800d7c4:	f7ff bf7c 	b.w	800d6c0 <_strtol_l.constprop.0>

0800d7c8 <__swbuf_r>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	460e      	mov	r6, r1
 800d7cc:	4614      	mov	r4, r2
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	b118      	cbz	r0, 800d7da <__swbuf_r+0x12>
 800d7d2:	6983      	ldr	r3, [r0, #24]
 800d7d4:	b90b      	cbnz	r3, 800d7da <__swbuf_r+0x12>
 800d7d6:	f001 f84b 	bl	800e870 <__sinit>
 800d7da:	4b21      	ldr	r3, [pc, #132]	; (800d860 <__swbuf_r+0x98>)
 800d7dc:	429c      	cmp	r4, r3
 800d7de:	d12b      	bne.n	800d838 <__swbuf_r+0x70>
 800d7e0:	686c      	ldr	r4, [r5, #4]
 800d7e2:	69a3      	ldr	r3, [r4, #24]
 800d7e4:	60a3      	str	r3, [r4, #8]
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	071a      	lsls	r2, r3, #28
 800d7ea:	d52f      	bpl.n	800d84c <__swbuf_r+0x84>
 800d7ec:	6923      	ldr	r3, [r4, #16]
 800d7ee:	b36b      	cbz	r3, 800d84c <__swbuf_r+0x84>
 800d7f0:	6923      	ldr	r3, [r4, #16]
 800d7f2:	6820      	ldr	r0, [r4, #0]
 800d7f4:	1ac0      	subs	r0, r0, r3
 800d7f6:	6963      	ldr	r3, [r4, #20]
 800d7f8:	b2f6      	uxtb	r6, r6
 800d7fa:	4283      	cmp	r3, r0
 800d7fc:	4637      	mov	r7, r6
 800d7fe:	dc04      	bgt.n	800d80a <__swbuf_r+0x42>
 800d800:	4621      	mov	r1, r4
 800d802:	4628      	mov	r0, r5
 800d804:	f000 ffa0 	bl	800e748 <_fflush_r>
 800d808:	bb30      	cbnz	r0, 800d858 <__swbuf_r+0x90>
 800d80a:	68a3      	ldr	r3, [r4, #8]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	60a3      	str	r3, [r4, #8]
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	6022      	str	r2, [r4, #0]
 800d816:	701e      	strb	r6, [r3, #0]
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	3001      	adds	r0, #1
 800d81c:	4283      	cmp	r3, r0
 800d81e:	d004      	beq.n	800d82a <__swbuf_r+0x62>
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	07db      	lsls	r3, r3, #31
 800d824:	d506      	bpl.n	800d834 <__swbuf_r+0x6c>
 800d826:	2e0a      	cmp	r6, #10
 800d828:	d104      	bne.n	800d834 <__swbuf_r+0x6c>
 800d82a:	4621      	mov	r1, r4
 800d82c:	4628      	mov	r0, r5
 800d82e:	f000 ff8b 	bl	800e748 <_fflush_r>
 800d832:	b988      	cbnz	r0, 800d858 <__swbuf_r+0x90>
 800d834:	4638      	mov	r0, r7
 800d836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <__swbuf_r+0x9c>)
 800d83a:	429c      	cmp	r4, r3
 800d83c:	d101      	bne.n	800d842 <__swbuf_r+0x7a>
 800d83e:	68ac      	ldr	r4, [r5, #8]
 800d840:	e7cf      	b.n	800d7e2 <__swbuf_r+0x1a>
 800d842:	4b09      	ldr	r3, [pc, #36]	; (800d868 <__swbuf_r+0xa0>)
 800d844:	429c      	cmp	r4, r3
 800d846:	bf08      	it	eq
 800d848:	68ec      	ldreq	r4, [r5, #12]
 800d84a:	e7ca      	b.n	800d7e2 <__swbuf_r+0x1a>
 800d84c:	4621      	mov	r1, r4
 800d84e:	4628      	mov	r0, r5
 800d850:	f000 f80c 	bl	800d86c <__swsetup_r>
 800d854:	2800      	cmp	r0, #0
 800d856:	d0cb      	beq.n	800d7f0 <__swbuf_r+0x28>
 800d858:	f04f 37ff 	mov.w	r7, #4294967295
 800d85c:	e7ea      	b.n	800d834 <__swbuf_r+0x6c>
 800d85e:	bf00      	nop
 800d860:	0801097c 	.word	0x0801097c
 800d864:	0801099c 	.word	0x0801099c
 800d868:	0801095c 	.word	0x0801095c

0800d86c <__swsetup_r>:
 800d86c:	4b32      	ldr	r3, [pc, #200]	; (800d938 <__swsetup_r+0xcc>)
 800d86e:	b570      	push	{r4, r5, r6, lr}
 800d870:	681d      	ldr	r5, [r3, #0]
 800d872:	4606      	mov	r6, r0
 800d874:	460c      	mov	r4, r1
 800d876:	b125      	cbz	r5, 800d882 <__swsetup_r+0x16>
 800d878:	69ab      	ldr	r3, [r5, #24]
 800d87a:	b913      	cbnz	r3, 800d882 <__swsetup_r+0x16>
 800d87c:	4628      	mov	r0, r5
 800d87e:	f000 fff7 	bl	800e870 <__sinit>
 800d882:	4b2e      	ldr	r3, [pc, #184]	; (800d93c <__swsetup_r+0xd0>)
 800d884:	429c      	cmp	r4, r3
 800d886:	d10f      	bne.n	800d8a8 <__swsetup_r+0x3c>
 800d888:	686c      	ldr	r4, [r5, #4]
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d890:	0719      	lsls	r1, r3, #28
 800d892:	d42c      	bmi.n	800d8ee <__swsetup_r+0x82>
 800d894:	06dd      	lsls	r5, r3, #27
 800d896:	d411      	bmi.n	800d8bc <__swsetup_r+0x50>
 800d898:	2309      	movs	r3, #9
 800d89a:	6033      	str	r3, [r6, #0]
 800d89c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8a0:	81a3      	strh	r3, [r4, #12]
 800d8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a6:	e03e      	b.n	800d926 <__swsetup_r+0xba>
 800d8a8:	4b25      	ldr	r3, [pc, #148]	; (800d940 <__swsetup_r+0xd4>)
 800d8aa:	429c      	cmp	r4, r3
 800d8ac:	d101      	bne.n	800d8b2 <__swsetup_r+0x46>
 800d8ae:	68ac      	ldr	r4, [r5, #8]
 800d8b0:	e7eb      	b.n	800d88a <__swsetup_r+0x1e>
 800d8b2:	4b24      	ldr	r3, [pc, #144]	; (800d944 <__swsetup_r+0xd8>)
 800d8b4:	429c      	cmp	r4, r3
 800d8b6:	bf08      	it	eq
 800d8b8:	68ec      	ldreq	r4, [r5, #12]
 800d8ba:	e7e6      	b.n	800d88a <__swsetup_r+0x1e>
 800d8bc:	0758      	lsls	r0, r3, #29
 800d8be:	d512      	bpl.n	800d8e6 <__swsetup_r+0x7a>
 800d8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8c2:	b141      	cbz	r1, 800d8d6 <__swsetup_r+0x6a>
 800d8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8c8:	4299      	cmp	r1, r3
 800d8ca:	d002      	beq.n	800d8d2 <__swsetup_r+0x66>
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f002 f947 	bl	800fb60 <_free_r>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	6063      	str	r3, [r4, #4]
 800d8e2:	6923      	ldr	r3, [r4, #16]
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	f043 0308 	orr.w	r3, r3, #8
 800d8ec:	81a3      	strh	r3, [r4, #12]
 800d8ee:	6923      	ldr	r3, [r4, #16]
 800d8f0:	b94b      	cbnz	r3, 800d906 <__swsetup_r+0x9a>
 800d8f2:	89a3      	ldrh	r3, [r4, #12]
 800d8f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8fc:	d003      	beq.n	800d906 <__swsetup_r+0x9a>
 800d8fe:	4621      	mov	r1, r4
 800d900:	4630      	mov	r0, r6
 800d902:	f001 fbed 	bl	800f0e0 <__smakebuf_r>
 800d906:	89a0      	ldrh	r0, [r4, #12]
 800d908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d90c:	f010 0301 	ands.w	r3, r0, #1
 800d910:	d00a      	beq.n	800d928 <__swsetup_r+0xbc>
 800d912:	2300      	movs	r3, #0
 800d914:	60a3      	str	r3, [r4, #8]
 800d916:	6963      	ldr	r3, [r4, #20]
 800d918:	425b      	negs	r3, r3
 800d91a:	61a3      	str	r3, [r4, #24]
 800d91c:	6923      	ldr	r3, [r4, #16]
 800d91e:	b943      	cbnz	r3, 800d932 <__swsetup_r+0xc6>
 800d920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d924:	d1ba      	bne.n	800d89c <__swsetup_r+0x30>
 800d926:	bd70      	pop	{r4, r5, r6, pc}
 800d928:	0781      	lsls	r1, r0, #30
 800d92a:	bf58      	it	pl
 800d92c:	6963      	ldrpl	r3, [r4, #20]
 800d92e:	60a3      	str	r3, [r4, #8]
 800d930:	e7f4      	b.n	800d91c <__swsetup_r+0xb0>
 800d932:	2000      	movs	r0, #0
 800d934:	e7f7      	b.n	800d926 <__swsetup_r+0xba>
 800d936:	bf00      	nop
 800d938:	20000100 	.word	0x20000100
 800d93c:	0801097c 	.word	0x0801097c
 800d940:	0801099c 	.word	0x0801099c
 800d944:	0801095c 	.word	0x0801095c

0800d948 <quorem>:
 800d948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	6903      	ldr	r3, [r0, #16]
 800d94e:	690c      	ldr	r4, [r1, #16]
 800d950:	42a3      	cmp	r3, r4
 800d952:	4607      	mov	r7, r0
 800d954:	f2c0 8081 	blt.w	800da5a <quorem+0x112>
 800d958:	3c01      	subs	r4, #1
 800d95a:	f101 0814 	add.w	r8, r1, #20
 800d95e:	f100 0514 	add.w	r5, r0, #20
 800d962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d96c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d970:	3301      	adds	r3, #1
 800d972:	429a      	cmp	r2, r3
 800d974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d97c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d980:	d331      	bcc.n	800d9e6 <quorem+0x9e>
 800d982:	f04f 0e00 	mov.w	lr, #0
 800d986:	4640      	mov	r0, r8
 800d988:	46ac      	mov	ip, r5
 800d98a:	46f2      	mov	sl, lr
 800d98c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d990:	b293      	uxth	r3, r2
 800d992:	fb06 e303 	mla	r3, r6, r3, lr
 800d996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	ebaa 0303 	sub.w	r3, sl, r3
 800d9a0:	f8dc a000 	ldr.w	sl, [ip]
 800d9a4:	0c12      	lsrs	r2, r2, #16
 800d9a6:	fa13 f38a 	uxtah	r3, r3, sl
 800d9aa:	fb06 e202 	mla	r2, r6, r2, lr
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	9b00      	ldr	r3, [sp, #0]
 800d9b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9b6:	b292      	uxth	r2, r2
 800d9b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d9bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9c4:	4581      	cmp	r9, r0
 800d9c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9ca:	f84c 3b04 	str.w	r3, [ip], #4
 800d9ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9d2:	d2db      	bcs.n	800d98c <quorem+0x44>
 800d9d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9d8:	b92b      	cbnz	r3, 800d9e6 <quorem+0x9e>
 800d9da:	9b01      	ldr	r3, [sp, #4]
 800d9dc:	3b04      	subs	r3, #4
 800d9de:	429d      	cmp	r5, r3
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	d32e      	bcc.n	800da42 <quorem+0xfa>
 800d9e4:	613c      	str	r4, [r7, #16]
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	f001 feae 	bl	800f748 <__mcmp>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	db24      	blt.n	800da3a <quorem+0xf2>
 800d9f0:	3601      	adds	r6, #1
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f04f 0c00 	mov.w	ip, #0
 800d9f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9fc:	f8d0 e000 	ldr.w	lr, [r0]
 800da00:	b293      	uxth	r3, r2
 800da02:	ebac 0303 	sub.w	r3, ip, r3
 800da06:	0c12      	lsrs	r2, r2, #16
 800da08:	fa13 f38e 	uxtah	r3, r3, lr
 800da0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da14:	b29b      	uxth	r3, r3
 800da16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da1a:	45c1      	cmp	r9, r8
 800da1c:	f840 3b04 	str.w	r3, [r0], #4
 800da20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da24:	d2e8      	bcs.n	800d9f8 <quorem+0xb0>
 800da26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da2e:	b922      	cbnz	r2, 800da3a <quorem+0xf2>
 800da30:	3b04      	subs	r3, #4
 800da32:	429d      	cmp	r5, r3
 800da34:	461a      	mov	r2, r3
 800da36:	d30a      	bcc.n	800da4e <quorem+0x106>
 800da38:	613c      	str	r4, [r7, #16]
 800da3a:	4630      	mov	r0, r6
 800da3c:	b003      	add	sp, #12
 800da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da42:	6812      	ldr	r2, [r2, #0]
 800da44:	3b04      	subs	r3, #4
 800da46:	2a00      	cmp	r2, #0
 800da48:	d1cc      	bne.n	800d9e4 <quorem+0x9c>
 800da4a:	3c01      	subs	r4, #1
 800da4c:	e7c7      	b.n	800d9de <quorem+0x96>
 800da4e:	6812      	ldr	r2, [r2, #0]
 800da50:	3b04      	subs	r3, #4
 800da52:	2a00      	cmp	r2, #0
 800da54:	d1f0      	bne.n	800da38 <quorem+0xf0>
 800da56:	3c01      	subs	r4, #1
 800da58:	e7eb      	b.n	800da32 <quorem+0xea>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7ee      	b.n	800da3c <quorem+0xf4>
	...

0800da60 <_dtoa_r>:
 800da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	ed2d 8b04 	vpush	{d8-d9}
 800da68:	ec57 6b10 	vmov	r6, r7, d0
 800da6c:	b093      	sub	sp, #76	; 0x4c
 800da6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da74:	9106      	str	r1, [sp, #24]
 800da76:	ee10 aa10 	vmov	sl, s0
 800da7a:	4604      	mov	r4, r0
 800da7c:	9209      	str	r2, [sp, #36]	; 0x24
 800da7e:	930c      	str	r3, [sp, #48]	; 0x30
 800da80:	46bb      	mov	fp, r7
 800da82:	b975      	cbnz	r5, 800daa2 <_dtoa_r+0x42>
 800da84:	2010      	movs	r0, #16
 800da86:	f001 fb6b 	bl	800f160 <malloc>
 800da8a:	4602      	mov	r2, r0
 800da8c:	6260      	str	r0, [r4, #36]	; 0x24
 800da8e:	b920      	cbnz	r0, 800da9a <_dtoa_r+0x3a>
 800da90:	4ba7      	ldr	r3, [pc, #668]	; (800dd30 <_dtoa_r+0x2d0>)
 800da92:	21ea      	movs	r1, #234	; 0xea
 800da94:	48a7      	ldr	r0, [pc, #668]	; (800dd34 <_dtoa_r+0x2d4>)
 800da96:	f002 fc89 	bl	80103ac <__assert_func>
 800da9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da9e:	6005      	str	r5, [r0, #0]
 800daa0:	60c5      	str	r5, [r0, #12]
 800daa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daa4:	6819      	ldr	r1, [r3, #0]
 800daa6:	b151      	cbz	r1, 800dabe <_dtoa_r+0x5e>
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	604a      	str	r2, [r1, #4]
 800daac:	2301      	movs	r3, #1
 800daae:	4093      	lsls	r3, r2
 800dab0:	608b      	str	r3, [r1, #8]
 800dab2:	4620      	mov	r0, r4
 800dab4:	f001 fbbc 	bl	800f230 <_Bfree>
 800dab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daba:	2200      	movs	r2, #0
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	1e3b      	subs	r3, r7, #0
 800dac0:	bfaa      	itet	ge
 800dac2:	2300      	movge	r3, #0
 800dac4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dac8:	f8c8 3000 	strge.w	r3, [r8]
 800dacc:	4b9a      	ldr	r3, [pc, #616]	; (800dd38 <_dtoa_r+0x2d8>)
 800dace:	bfbc      	itt	lt
 800dad0:	2201      	movlt	r2, #1
 800dad2:	f8c8 2000 	strlt.w	r2, [r8]
 800dad6:	ea33 030b 	bics.w	r3, r3, fp
 800dada:	d11b      	bne.n	800db14 <_dtoa_r+0xb4>
 800dadc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dade:	f242 730f 	movw	r3, #9999	; 0x270f
 800dae2:	6013      	str	r3, [r2, #0]
 800dae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dae8:	4333      	orrs	r3, r6
 800daea:	f000 8592 	beq.w	800e612 <_dtoa_r+0xbb2>
 800daee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800daf0:	b963      	cbnz	r3, 800db0c <_dtoa_r+0xac>
 800daf2:	4b92      	ldr	r3, [pc, #584]	; (800dd3c <_dtoa_r+0x2dc>)
 800daf4:	e022      	b.n	800db3c <_dtoa_r+0xdc>
 800daf6:	4b92      	ldr	r3, [pc, #584]	; (800dd40 <_dtoa_r+0x2e0>)
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	3308      	adds	r3, #8
 800dafc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dafe:	6013      	str	r3, [r2, #0]
 800db00:	9801      	ldr	r0, [sp, #4]
 800db02:	b013      	add	sp, #76	; 0x4c
 800db04:	ecbd 8b04 	vpop	{d8-d9}
 800db08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0c:	4b8b      	ldr	r3, [pc, #556]	; (800dd3c <_dtoa_r+0x2dc>)
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	3303      	adds	r3, #3
 800db12:	e7f3      	b.n	800dafc <_dtoa_r+0x9c>
 800db14:	2200      	movs	r2, #0
 800db16:	2300      	movs	r3, #0
 800db18:	4650      	mov	r0, sl
 800db1a:	4659      	mov	r1, fp
 800db1c:	f7f2 ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 800db20:	ec4b ab19 	vmov	d9, sl, fp
 800db24:	4680      	mov	r8, r0
 800db26:	b158      	cbz	r0, 800db40 <_dtoa_r+0xe0>
 800db28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db2a:	2301      	movs	r3, #1
 800db2c:	6013      	str	r3, [r2, #0]
 800db2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 856b 	beq.w	800e60c <_dtoa_r+0xbac>
 800db36:	4883      	ldr	r0, [pc, #524]	; (800dd44 <_dtoa_r+0x2e4>)
 800db38:	6018      	str	r0, [r3, #0]
 800db3a:	1e43      	subs	r3, r0, #1
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	e7df      	b.n	800db00 <_dtoa_r+0xa0>
 800db40:	ec4b ab10 	vmov	d0, sl, fp
 800db44:	aa10      	add	r2, sp, #64	; 0x40
 800db46:	a911      	add	r1, sp, #68	; 0x44
 800db48:	4620      	mov	r0, r4
 800db4a:	f001 ff1f 	bl	800f98c <__d2b>
 800db4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800db52:	ee08 0a10 	vmov	s16, r0
 800db56:	2d00      	cmp	r5, #0
 800db58:	f000 8084 	beq.w	800dc64 <_dtoa_r+0x204>
 800db5c:	ee19 3a90 	vmov	r3, s19
 800db60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db68:	4656      	mov	r6, sl
 800db6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800db76:	4b74      	ldr	r3, [pc, #464]	; (800dd48 <_dtoa_r+0x2e8>)
 800db78:	2200      	movs	r2, #0
 800db7a:	4630      	mov	r0, r6
 800db7c:	4639      	mov	r1, r7
 800db7e:	f7f2 fb8b 	bl	8000298 <__aeabi_dsub>
 800db82:	a365      	add	r3, pc, #404	; (adr r3, 800dd18 <_dtoa_r+0x2b8>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	f7f2 fd3e 	bl	8000608 <__aeabi_dmul>
 800db8c:	a364      	add	r3, pc, #400	; (adr r3, 800dd20 <_dtoa_r+0x2c0>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	f7f2 fb83 	bl	800029c <__adddf3>
 800db96:	4606      	mov	r6, r0
 800db98:	4628      	mov	r0, r5
 800db9a:	460f      	mov	r7, r1
 800db9c:	f7f2 fcca 	bl	8000534 <__aeabi_i2d>
 800dba0:	a361      	add	r3, pc, #388	; (adr r3, 800dd28 <_dtoa_r+0x2c8>)
 800dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba6:	f7f2 fd2f 	bl	8000608 <__aeabi_dmul>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4630      	mov	r0, r6
 800dbb0:	4639      	mov	r1, r7
 800dbb2:	f7f2 fb73 	bl	800029c <__adddf3>
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	460f      	mov	r7, r1
 800dbba:	f7f2 ffd5 	bl	8000b68 <__aeabi_d2iz>
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	9000      	str	r0, [sp, #0]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	f7f2 ff90 	bl	8000aec <__aeabi_dcmplt>
 800dbcc:	b150      	cbz	r0, 800dbe4 <_dtoa_r+0x184>
 800dbce:	9800      	ldr	r0, [sp, #0]
 800dbd0:	f7f2 fcb0 	bl	8000534 <__aeabi_i2d>
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	f7f2 ff7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbdc:	b910      	cbnz	r0, 800dbe4 <_dtoa_r+0x184>
 800dbde:	9b00      	ldr	r3, [sp, #0]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	9b00      	ldr	r3, [sp, #0]
 800dbe6:	2b16      	cmp	r3, #22
 800dbe8:	d85a      	bhi.n	800dca0 <_dtoa_r+0x240>
 800dbea:	9a00      	ldr	r2, [sp, #0]
 800dbec:	4b57      	ldr	r3, [pc, #348]	; (800dd4c <_dtoa_r+0x2ec>)
 800dbee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	ec51 0b19 	vmov	r0, r1, d9
 800dbfa:	f7f2 ff77 	bl	8000aec <__aeabi_dcmplt>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d050      	beq.n	800dca4 <_dtoa_r+0x244>
 800dc02:	9b00      	ldr	r3, [sp, #0]
 800dc04:	3b01      	subs	r3, #1
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	2300      	movs	r3, #0
 800dc0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc0e:	1b5d      	subs	r5, r3, r5
 800dc10:	1e6b      	subs	r3, r5, #1
 800dc12:	9305      	str	r3, [sp, #20]
 800dc14:	bf45      	ittet	mi
 800dc16:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc1a:	9304      	strmi	r3, [sp, #16]
 800dc1c:	2300      	movpl	r3, #0
 800dc1e:	2300      	movmi	r3, #0
 800dc20:	bf4c      	ite	mi
 800dc22:	9305      	strmi	r3, [sp, #20]
 800dc24:	9304      	strpl	r3, [sp, #16]
 800dc26:	9b00      	ldr	r3, [sp, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	db3d      	blt.n	800dca8 <_dtoa_r+0x248>
 800dc2c:	9b05      	ldr	r3, [sp, #20]
 800dc2e:	9a00      	ldr	r2, [sp, #0]
 800dc30:	920a      	str	r2, [sp, #40]	; 0x28
 800dc32:	4413      	add	r3, r2
 800dc34:	9305      	str	r3, [sp, #20]
 800dc36:	2300      	movs	r3, #0
 800dc38:	9307      	str	r3, [sp, #28]
 800dc3a:	9b06      	ldr	r3, [sp, #24]
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	f200 8089 	bhi.w	800dd54 <_dtoa_r+0x2f4>
 800dc42:	2b05      	cmp	r3, #5
 800dc44:	bfc4      	itt	gt
 800dc46:	3b04      	subgt	r3, #4
 800dc48:	9306      	strgt	r3, [sp, #24]
 800dc4a:	9b06      	ldr	r3, [sp, #24]
 800dc4c:	f1a3 0302 	sub.w	r3, r3, #2
 800dc50:	bfcc      	ite	gt
 800dc52:	2500      	movgt	r5, #0
 800dc54:	2501      	movle	r5, #1
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	f200 8087 	bhi.w	800dd6a <_dtoa_r+0x30a>
 800dc5c:	e8df f003 	tbb	[pc, r3]
 800dc60:	59383a2d 	.word	0x59383a2d
 800dc64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc68:	441d      	add	r5, r3
 800dc6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc6e:	2b20      	cmp	r3, #32
 800dc70:	bfc1      	itttt	gt
 800dc72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc7a:	fa0b f303 	lslgt.w	r3, fp, r3
 800dc7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc82:	bfda      	itte	le
 800dc84:	f1c3 0320 	rsble	r3, r3, #32
 800dc88:	fa06 f003 	lslle.w	r0, r6, r3
 800dc8c:	4318      	orrgt	r0, r3
 800dc8e:	f7f2 fc41 	bl	8000514 <__aeabi_ui2d>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4606      	mov	r6, r0
 800dc96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc9a:	3d01      	subs	r5, #1
 800dc9c:	930e      	str	r3, [sp, #56]	; 0x38
 800dc9e:	e76a      	b.n	800db76 <_dtoa_r+0x116>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7b2      	b.n	800dc0a <_dtoa_r+0x1aa>
 800dca4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dca6:	e7b1      	b.n	800dc0c <_dtoa_r+0x1ac>
 800dca8:	9b04      	ldr	r3, [sp, #16]
 800dcaa:	9a00      	ldr	r2, [sp, #0]
 800dcac:	1a9b      	subs	r3, r3, r2
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	4253      	negs	r3, r2
 800dcb2:	9307      	str	r3, [sp, #28]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	930a      	str	r3, [sp, #40]	; 0x28
 800dcb8:	e7bf      	b.n	800dc3a <_dtoa_r+0x1da>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9308      	str	r3, [sp, #32]
 800dcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dc55      	bgt.n	800dd70 <_dtoa_r+0x310>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dcca:	461a      	mov	r2, r3
 800dccc:	9209      	str	r2, [sp, #36]	; 0x24
 800dcce:	e00c      	b.n	800dcea <_dtoa_r+0x28a>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e7f3      	b.n	800dcbc <_dtoa_r+0x25c>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd8:	9308      	str	r3, [sp, #32]
 800dcda:	9b00      	ldr	r3, [sp, #0]
 800dcdc:	4413      	add	r3, r2
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	3301      	adds	r3, #1
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	9303      	str	r3, [sp, #12]
 800dce6:	bfb8      	it	lt
 800dce8:	2301      	movlt	r3, #1
 800dcea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dcec:	2200      	movs	r2, #0
 800dcee:	6042      	str	r2, [r0, #4]
 800dcf0:	2204      	movs	r2, #4
 800dcf2:	f102 0614 	add.w	r6, r2, #20
 800dcf6:	429e      	cmp	r6, r3
 800dcf8:	6841      	ldr	r1, [r0, #4]
 800dcfa:	d93d      	bls.n	800dd78 <_dtoa_r+0x318>
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f001 fa57 	bl	800f1b0 <_Balloc>
 800dd02:	9001      	str	r0, [sp, #4]
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d13b      	bne.n	800dd80 <_dtoa_r+0x320>
 800dd08:	4b11      	ldr	r3, [pc, #68]	; (800dd50 <_dtoa_r+0x2f0>)
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd10:	e6c0      	b.n	800da94 <_dtoa_r+0x34>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e7df      	b.n	800dcd6 <_dtoa_r+0x276>
 800dd16:	bf00      	nop
 800dd18:	636f4361 	.word	0x636f4361
 800dd1c:	3fd287a7 	.word	0x3fd287a7
 800dd20:	8b60c8b3 	.word	0x8b60c8b3
 800dd24:	3fc68a28 	.word	0x3fc68a28
 800dd28:	509f79fb 	.word	0x509f79fb
 800dd2c:	3fd34413 	.word	0x3fd34413
 800dd30:	080108d6 	.word	0x080108d6
 800dd34:	080108ed 	.word	0x080108ed
 800dd38:	7ff00000 	.word	0x7ff00000
 800dd3c:	080108d2 	.word	0x080108d2
 800dd40:	080108c9 	.word	0x080108c9
 800dd44:	08010749 	.word	0x08010749
 800dd48:	3ff80000 	.word	0x3ff80000
 800dd4c:	08010ac0 	.word	0x08010ac0
 800dd50:	08010948 	.word	0x08010948
 800dd54:	2501      	movs	r5, #1
 800dd56:	2300      	movs	r3, #0
 800dd58:	9306      	str	r3, [sp, #24]
 800dd5a:	9508      	str	r5, [sp, #32]
 800dd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd64:	2200      	movs	r2, #0
 800dd66:	2312      	movs	r3, #18
 800dd68:	e7b0      	b.n	800dccc <_dtoa_r+0x26c>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	9308      	str	r3, [sp, #32]
 800dd6e:	e7f5      	b.n	800dd5c <_dtoa_r+0x2fc>
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd76:	e7b8      	b.n	800dcea <_dtoa_r+0x28a>
 800dd78:	3101      	adds	r1, #1
 800dd7a:	6041      	str	r1, [r0, #4]
 800dd7c:	0052      	lsls	r2, r2, #1
 800dd7e:	e7b8      	b.n	800dcf2 <_dtoa_r+0x292>
 800dd80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd82:	9a01      	ldr	r2, [sp, #4]
 800dd84:	601a      	str	r2, [r3, #0]
 800dd86:	9b03      	ldr	r3, [sp, #12]
 800dd88:	2b0e      	cmp	r3, #14
 800dd8a:	f200 809d 	bhi.w	800dec8 <_dtoa_r+0x468>
 800dd8e:	2d00      	cmp	r5, #0
 800dd90:	f000 809a 	beq.w	800dec8 <_dtoa_r+0x468>
 800dd94:	9b00      	ldr	r3, [sp, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	dd32      	ble.n	800de00 <_dtoa_r+0x3a0>
 800dd9a:	4ab7      	ldr	r2, [pc, #732]	; (800e078 <_dtoa_r+0x618>)
 800dd9c:	f003 030f 	and.w	r3, r3, #15
 800dda0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dda4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dda8:	9b00      	ldr	r3, [sp, #0]
 800ddaa:	05d8      	lsls	r0, r3, #23
 800ddac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ddb0:	d516      	bpl.n	800dde0 <_dtoa_r+0x380>
 800ddb2:	4bb2      	ldr	r3, [pc, #712]	; (800e07c <_dtoa_r+0x61c>)
 800ddb4:	ec51 0b19 	vmov	r0, r1, d9
 800ddb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddbc:	f7f2 fd4e 	bl	800085c <__aeabi_ddiv>
 800ddc0:	f007 070f 	and.w	r7, r7, #15
 800ddc4:	4682      	mov	sl, r0
 800ddc6:	468b      	mov	fp, r1
 800ddc8:	2503      	movs	r5, #3
 800ddca:	4eac      	ldr	r6, [pc, #688]	; (800e07c <_dtoa_r+0x61c>)
 800ddcc:	b957      	cbnz	r7, 800dde4 <_dtoa_r+0x384>
 800ddce:	4642      	mov	r2, r8
 800ddd0:	464b      	mov	r3, r9
 800ddd2:	4650      	mov	r0, sl
 800ddd4:	4659      	mov	r1, fp
 800ddd6:	f7f2 fd41 	bl	800085c <__aeabi_ddiv>
 800ddda:	4682      	mov	sl, r0
 800dddc:	468b      	mov	fp, r1
 800ddde:	e028      	b.n	800de32 <_dtoa_r+0x3d2>
 800dde0:	2502      	movs	r5, #2
 800dde2:	e7f2      	b.n	800ddca <_dtoa_r+0x36a>
 800dde4:	07f9      	lsls	r1, r7, #31
 800dde6:	d508      	bpl.n	800ddfa <_dtoa_r+0x39a>
 800dde8:	4640      	mov	r0, r8
 800ddea:	4649      	mov	r1, r9
 800ddec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddf0:	f7f2 fc0a 	bl	8000608 <__aeabi_dmul>
 800ddf4:	3501      	adds	r5, #1
 800ddf6:	4680      	mov	r8, r0
 800ddf8:	4689      	mov	r9, r1
 800ddfa:	107f      	asrs	r7, r7, #1
 800ddfc:	3608      	adds	r6, #8
 800ddfe:	e7e5      	b.n	800ddcc <_dtoa_r+0x36c>
 800de00:	f000 809b 	beq.w	800df3a <_dtoa_r+0x4da>
 800de04:	9b00      	ldr	r3, [sp, #0]
 800de06:	4f9d      	ldr	r7, [pc, #628]	; (800e07c <_dtoa_r+0x61c>)
 800de08:	425e      	negs	r6, r3
 800de0a:	4b9b      	ldr	r3, [pc, #620]	; (800e078 <_dtoa_r+0x618>)
 800de0c:	f006 020f 	and.w	r2, r6, #15
 800de10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	ec51 0b19 	vmov	r0, r1, d9
 800de1c:	f7f2 fbf4 	bl	8000608 <__aeabi_dmul>
 800de20:	1136      	asrs	r6, r6, #4
 800de22:	4682      	mov	sl, r0
 800de24:	468b      	mov	fp, r1
 800de26:	2300      	movs	r3, #0
 800de28:	2502      	movs	r5, #2
 800de2a:	2e00      	cmp	r6, #0
 800de2c:	d17a      	bne.n	800df24 <_dtoa_r+0x4c4>
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1d3      	bne.n	800ddda <_dtoa_r+0x37a>
 800de32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 8082 	beq.w	800df3e <_dtoa_r+0x4de>
 800de3a:	4b91      	ldr	r3, [pc, #580]	; (800e080 <_dtoa_r+0x620>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	4650      	mov	r0, sl
 800de40:	4659      	mov	r1, fp
 800de42:	f7f2 fe53 	bl	8000aec <__aeabi_dcmplt>
 800de46:	2800      	cmp	r0, #0
 800de48:	d079      	beq.n	800df3e <_dtoa_r+0x4de>
 800de4a:	9b03      	ldr	r3, [sp, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d076      	beq.n	800df3e <_dtoa_r+0x4de>
 800de50:	9b02      	ldr	r3, [sp, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	dd36      	ble.n	800dec4 <_dtoa_r+0x464>
 800de56:	9b00      	ldr	r3, [sp, #0]
 800de58:	4650      	mov	r0, sl
 800de5a:	4659      	mov	r1, fp
 800de5c:	1e5f      	subs	r7, r3, #1
 800de5e:	2200      	movs	r2, #0
 800de60:	4b88      	ldr	r3, [pc, #544]	; (800e084 <_dtoa_r+0x624>)
 800de62:	f7f2 fbd1 	bl	8000608 <__aeabi_dmul>
 800de66:	9e02      	ldr	r6, [sp, #8]
 800de68:	4682      	mov	sl, r0
 800de6a:	468b      	mov	fp, r1
 800de6c:	3501      	adds	r5, #1
 800de6e:	4628      	mov	r0, r5
 800de70:	f7f2 fb60 	bl	8000534 <__aeabi_i2d>
 800de74:	4652      	mov	r2, sl
 800de76:	465b      	mov	r3, fp
 800de78:	f7f2 fbc6 	bl	8000608 <__aeabi_dmul>
 800de7c:	4b82      	ldr	r3, [pc, #520]	; (800e088 <_dtoa_r+0x628>)
 800de7e:	2200      	movs	r2, #0
 800de80:	f7f2 fa0c 	bl	800029c <__adddf3>
 800de84:	46d0      	mov	r8, sl
 800de86:	46d9      	mov	r9, fp
 800de88:	4682      	mov	sl, r0
 800de8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800de8e:	2e00      	cmp	r6, #0
 800de90:	d158      	bne.n	800df44 <_dtoa_r+0x4e4>
 800de92:	4b7e      	ldr	r3, [pc, #504]	; (800e08c <_dtoa_r+0x62c>)
 800de94:	2200      	movs	r2, #0
 800de96:	4640      	mov	r0, r8
 800de98:	4649      	mov	r1, r9
 800de9a:	f7f2 f9fd 	bl	8000298 <__aeabi_dsub>
 800de9e:	4652      	mov	r2, sl
 800dea0:	465b      	mov	r3, fp
 800dea2:	4680      	mov	r8, r0
 800dea4:	4689      	mov	r9, r1
 800dea6:	f7f2 fe3f 	bl	8000b28 <__aeabi_dcmpgt>
 800deaa:	2800      	cmp	r0, #0
 800deac:	f040 8295 	bne.w	800e3da <_dtoa_r+0x97a>
 800deb0:	4652      	mov	r2, sl
 800deb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800deb6:	4640      	mov	r0, r8
 800deb8:	4649      	mov	r1, r9
 800deba:	f7f2 fe17 	bl	8000aec <__aeabi_dcmplt>
 800debe:	2800      	cmp	r0, #0
 800dec0:	f040 8289 	bne.w	800e3d6 <_dtoa_r+0x976>
 800dec4:	ec5b ab19 	vmov	sl, fp, d9
 800dec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deca:	2b00      	cmp	r3, #0
 800decc:	f2c0 8148 	blt.w	800e160 <_dtoa_r+0x700>
 800ded0:	9a00      	ldr	r2, [sp, #0]
 800ded2:	2a0e      	cmp	r2, #14
 800ded4:	f300 8144 	bgt.w	800e160 <_dtoa_r+0x700>
 800ded8:	4b67      	ldr	r3, [pc, #412]	; (800e078 <_dtoa_r+0x618>)
 800deda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dede:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f280 80d5 	bge.w	800e094 <_dtoa_r+0x634>
 800deea:	9b03      	ldr	r3, [sp, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f300 80d1 	bgt.w	800e094 <_dtoa_r+0x634>
 800def2:	f040 826f 	bne.w	800e3d4 <_dtoa_r+0x974>
 800def6:	4b65      	ldr	r3, [pc, #404]	; (800e08c <_dtoa_r+0x62c>)
 800def8:	2200      	movs	r2, #0
 800defa:	4640      	mov	r0, r8
 800defc:	4649      	mov	r1, r9
 800defe:	f7f2 fb83 	bl	8000608 <__aeabi_dmul>
 800df02:	4652      	mov	r2, sl
 800df04:	465b      	mov	r3, fp
 800df06:	f7f2 fe05 	bl	8000b14 <__aeabi_dcmpge>
 800df0a:	9e03      	ldr	r6, [sp, #12]
 800df0c:	4637      	mov	r7, r6
 800df0e:	2800      	cmp	r0, #0
 800df10:	f040 8245 	bne.w	800e39e <_dtoa_r+0x93e>
 800df14:	9d01      	ldr	r5, [sp, #4]
 800df16:	2331      	movs	r3, #49	; 0x31
 800df18:	f805 3b01 	strb.w	r3, [r5], #1
 800df1c:	9b00      	ldr	r3, [sp, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	e240      	b.n	800e3a6 <_dtoa_r+0x946>
 800df24:	07f2      	lsls	r2, r6, #31
 800df26:	d505      	bpl.n	800df34 <_dtoa_r+0x4d4>
 800df28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df2c:	f7f2 fb6c 	bl	8000608 <__aeabi_dmul>
 800df30:	3501      	adds	r5, #1
 800df32:	2301      	movs	r3, #1
 800df34:	1076      	asrs	r6, r6, #1
 800df36:	3708      	adds	r7, #8
 800df38:	e777      	b.n	800de2a <_dtoa_r+0x3ca>
 800df3a:	2502      	movs	r5, #2
 800df3c:	e779      	b.n	800de32 <_dtoa_r+0x3d2>
 800df3e:	9f00      	ldr	r7, [sp, #0]
 800df40:	9e03      	ldr	r6, [sp, #12]
 800df42:	e794      	b.n	800de6e <_dtoa_r+0x40e>
 800df44:	9901      	ldr	r1, [sp, #4]
 800df46:	4b4c      	ldr	r3, [pc, #304]	; (800e078 <_dtoa_r+0x618>)
 800df48:	4431      	add	r1, r6
 800df4a:	910d      	str	r1, [sp, #52]	; 0x34
 800df4c:	9908      	ldr	r1, [sp, #32]
 800df4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df56:	2900      	cmp	r1, #0
 800df58:	d043      	beq.n	800dfe2 <_dtoa_r+0x582>
 800df5a:	494d      	ldr	r1, [pc, #308]	; (800e090 <_dtoa_r+0x630>)
 800df5c:	2000      	movs	r0, #0
 800df5e:	f7f2 fc7d 	bl	800085c <__aeabi_ddiv>
 800df62:	4652      	mov	r2, sl
 800df64:	465b      	mov	r3, fp
 800df66:	f7f2 f997 	bl	8000298 <__aeabi_dsub>
 800df6a:	9d01      	ldr	r5, [sp, #4]
 800df6c:	4682      	mov	sl, r0
 800df6e:	468b      	mov	fp, r1
 800df70:	4649      	mov	r1, r9
 800df72:	4640      	mov	r0, r8
 800df74:	f7f2 fdf8 	bl	8000b68 <__aeabi_d2iz>
 800df78:	4606      	mov	r6, r0
 800df7a:	f7f2 fadb 	bl	8000534 <__aeabi_i2d>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	f7f2 f987 	bl	8000298 <__aeabi_dsub>
 800df8a:	3630      	adds	r6, #48	; 0x30
 800df8c:	f805 6b01 	strb.w	r6, [r5], #1
 800df90:	4652      	mov	r2, sl
 800df92:	465b      	mov	r3, fp
 800df94:	4680      	mov	r8, r0
 800df96:	4689      	mov	r9, r1
 800df98:	f7f2 fda8 	bl	8000aec <__aeabi_dcmplt>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d163      	bne.n	800e068 <_dtoa_r+0x608>
 800dfa0:	4642      	mov	r2, r8
 800dfa2:	464b      	mov	r3, r9
 800dfa4:	4936      	ldr	r1, [pc, #216]	; (800e080 <_dtoa_r+0x620>)
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	f7f2 f976 	bl	8000298 <__aeabi_dsub>
 800dfac:	4652      	mov	r2, sl
 800dfae:	465b      	mov	r3, fp
 800dfb0:	f7f2 fd9c 	bl	8000aec <__aeabi_dcmplt>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	f040 80b5 	bne.w	800e124 <_dtoa_r+0x6c4>
 800dfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfbc:	429d      	cmp	r5, r3
 800dfbe:	d081      	beq.n	800dec4 <_dtoa_r+0x464>
 800dfc0:	4b30      	ldr	r3, [pc, #192]	; (800e084 <_dtoa_r+0x624>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	4650      	mov	r0, sl
 800dfc6:	4659      	mov	r1, fp
 800dfc8:	f7f2 fb1e 	bl	8000608 <__aeabi_dmul>
 800dfcc:	4b2d      	ldr	r3, [pc, #180]	; (800e084 <_dtoa_r+0x624>)
 800dfce:	4682      	mov	sl, r0
 800dfd0:	468b      	mov	fp, r1
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f7f2 fb16 	bl	8000608 <__aeabi_dmul>
 800dfdc:	4680      	mov	r8, r0
 800dfde:	4689      	mov	r9, r1
 800dfe0:	e7c6      	b.n	800df70 <_dtoa_r+0x510>
 800dfe2:	4650      	mov	r0, sl
 800dfe4:	4659      	mov	r1, fp
 800dfe6:	f7f2 fb0f 	bl	8000608 <__aeabi_dmul>
 800dfea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfec:	9d01      	ldr	r5, [sp, #4]
 800dfee:	930f      	str	r3, [sp, #60]	; 0x3c
 800dff0:	4682      	mov	sl, r0
 800dff2:	468b      	mov	fp, r1
 800dff4:	4649      	mov	r1, r9
 800dff6:	4640      	mov	r0, r8
 800dff8:	f7f2 fdb6 	bl	8000b68 <__aeabi_d2iz>
 800dffc:	4606      	mov	r6, r0
 800dffe:	f7f2 fa99 	bl	8000534 <__aeabi_i2d>
 800e002:	3630      	adds	r6, #48	; 0x30
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	4640      	mov	r0, r8
 800e00a:	4649      	mov	r1, r9
 800e00c:	f7f2 f944 	bl	8000298 <__aeabi_dsub>
 800e010:	f805 6b01 	strb.w	r6, [r5], #1
 800e014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e016:	429d      	cmp	r5, r3
 800e018:	4680      	mov	r8, r0
 800e01a:	4689      	mov	r9, r1
 800e01c:	f04f 0200 	mov.w	r2, #0
 800e020:	d124      	bne.n	800e06c <_dtoa_r+0x60c>
 800e022:	4b1b      	ldr	r3, [pc, #108]	; (800e090 <_dtoa_r+0x630>)
 800e024:	4650      	mov	r0, sl
 800e026:	4659      	mov	r1, fp
 800e028:	f7f2 f938 	bl	800029c <__adddf3>
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	4640      	mov	r0, r8
 800e032:	4649      	mov	r1, r9
 800e034:	f7f2 fd78 	bl	8000b28 <__aeabi_dcmpgt>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d173      	bne.n	800e124 <_dtoa_r+0x6c4>
 800e03c:	4652      	mov	r2, sl
 800e03e:	465b      	mov	r3, fp
 800e040:	4913      	ldr	r1, [pc, #76]	; (800e090 <_dtoa_r+0x630>)
 800e042:	2000      	movs	r0, #0
 800e044:	f7f2 f928 	bl	8000298 <__aeabi_dsub>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	4640      	mov	r0, r8
 800e04e:	4649      	mov	r1, r9
 800e050:	f7f2 fd4c 	bl	8000aec <__aeabi_dcmplt>
 800e054:	2800      	cmp	r0, #0
 800e056:	f43f af35 	beq.w	800dec4 <_dtoa_r+0x464>
 800e05a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e05c:	1e6b      	subs	r3, r5, #1
 800e05e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e060:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e064:	2b30      	cmp	r3, #48	; 0x30
 800e066:	d0f8      	beq.n	800e05a <_dtoa_r+0x5fa>
 800e068:	9700      	str	r7, [sp, #0]
 800e06a:	e049      	b.n	800e100 <_dtoa_r+0x6a0>
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <_dtoa_r+0x624>)
 800e06e:	f7f2 facb 	bl	8000608 <__aeabi_dmul>
 800e072:	4680      	mov	r8, r0
 800e074:	4689      	mov	r9, r1
 800e076:	e7bd      	b.n	800dff4 <_dtoa_r+0x594>
 800e078:	08010ac0 	.word	0x08010ac0
 800e07c:	08010a98 	.word	0x08010a98
 800e080:	3ff00000 	.word	0x3ff00000
 800e084:	40240000 	.word	0x40240000
 800e088:	401c0000 	.word	0x401c0000
 800e08c:	40140000 	.word	0x40140000
 800e090:	3fe00000 	.word	0x3fe00000
 800e094:	9d01      	ldr	r5, [sp, #4]
 800e096:	4656      	mov	r6, sl
 800e098:	465f      	mov	r7, fp
 800e09a:	4642      	mov	r2, r8
 800e09c:	464b      	mov	r3, r9
 800e09e:	4630      	mov	r0, r6
 800e0a0:	4639      	mov	r1, r7
 800e0a2:	f7f2 fbdb 	bl	800085c <__aeabi_ddiv>
 800e0a6:	f7f2 fd5f 	bl	8000b68 <__aeabi_d2iz>
 800e0aa:	4682      	mov	sl, r0
 800e0ac:	f7f2 fa42 	bl	8000534 <__aeabi_i2d>
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	f7f2 faa8 	bl	8000608 <__aeabi_dmul>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	4630      	mov	r0, r6
 800e0be:	4639      	mov	r1, r7
 800e0c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e0c4:	f7f2 f8e8 	bl	8000298 <__aeabi_dsub>
 800e0c8:	f805 6b01 	strb.w	r6, [r5], #1
 800e0cc:	9e01      	ldr	r6, [sp, #4]
 800e0ce:	9f03      	ldr	r7, [sp, #12]
 800e0d0:	1bae      	subs	r6, r5, r6
 800e0d2:	42b7      	cmp	r7, r6
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	d135      	bne.n	800e146 <_dtoa_r+0x6e6>
 800e0da:	f7f2 f8df 	bl	800029c <__adddf3>
 800e0de:	4642      	mov	r2, r8
 800e0e0:	464b      	mov	r3, r9
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	f7f2 fd1f 	bl	8000b28 <__aeabi_dcmpgt>
 800e0ea:	b9d0      	cbnz	r0, 800e122 <_dtoa_r+0x6c2>
 800e0ec:	4642      	mov	r2, r8
 800e0ee:	464b      	mov	r3, r9
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7f2 fcf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0f8:	b110      	cbz	r0, 800e100 <_dtoa_r+0x6a0>
 800e0fa:	f01a 0f01 	tst.w	sl, #1
 800e0fe:	d110      	bne.n	800e122 <_dtoa_r+0x6c2>
 800e100:	4620      	mov	r0, r4
 800e102:	ee18 1a10 	vmov	r1, s16
 800e106:	f001 f893 	bl	800f230 <_Bfree>
 800e10a:	2300      	movs	r3, #0
 800e10c:	9800      	ldr	r0, [sp, #0]
 800e10e:	702b      	strb	r3, [r5, #0]
 800e110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e112:	3001      	adds	r0, #1
 800e114:	6018      	str	r0, [r3, #0]
 800e116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f43f acf1 	beq.w	800db00 <_dtoa_r+0xa0>
 800e11e:	601d      	str	r5, [r3, #0]
 800e120:	e4ee      	b.n	800db00 <_dtoa_r+0xa0>
 800e122:	9f00      	ldr	r7, [sp, #0]
 800e124:	462b      	mov	r3, r5
 800e126:	461d      	mov	r5, r3
 800e128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e12c:	2a39      	cmp	r2, #57	; 0x39
 800e12e:	d106      	bne.n	800e13e <_dtoa_r+0x6de>
 800e130:	9a01      	ldr	r2, [sp, #4]
 800e132:	429a      	cmp	r2, r3
 800e134:	d1f7      	bne.n	800e126 <_dtoa_r+0x6c6>
 800e136:	9901      	ldr	r1, [sp, #4]
 800e138:	2230      	movs	r2, #48	; 0x30
 800e13a:	3701      	adds	r7, #1
 800e13c:	700a      	strb	r2, [r1, #0]
 800e13e:	781a      	ldrb	r2, [r3, #0]
 800e140:	3201      	adds	r2, #1
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	e790      	b.n	800e068 <_dtoa_r+0x608>
 800e146:	4ba6      	ldr	r3, [pc, #664]	; (800e3e0 <_dtoa_r+0x980>)
 800e148:	2200      	movs	r2, #0
 800e14a:	f7f2 fa5d 	bl	8000608 <__aeabi_dmul>
 800e14e:	2200      	movs	r2, #0
 800e150:	2300      	movs	r3, #0
 800e152:	4606      	mov	r6, r0
 800e154:	460f      	mov	r7, r1
 800e156:	f7f2 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d09d      	beq.n	800e09a <_dtoa_r+0x63a>
 800e15e:	e7cf      	b.n	800e100 <_dtoa_r+0x6a0>
 800e160:	9a08      	ldr	r2, [sp, #32]
 800e162:	2a00      	cmp	r2, #0
 800e164:	f000 80d7 	beq.w	800e316 <_dtoa_r+0x8b6>
 800e168:	9a06      	ldr	r2, [sp, #24]
 800e16a:	2a01      	cmp	r2, #1
 800e16c:	f300 80ba 	bgt.w	800e2e4 <_dtoa_r+0x884>
 800e170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e172:	2a00      	cmp	r2, #0
 800e174:	f000 80b2 	beq.w	800e2dc <_dtoa_r+0x87c>
 800e178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e17c:	9e07      	ldr	r6, [sp, #28]
 800e17e:	9d04      	ldr	r5, [sp, #16]
 800e180:	9a04      	ldr	r2, [sp, #16]
 800e182:	441a      	add	r2, r3
 800e184:	9204      	str	r2, [sp, #16]
 800e186:	9a05      	ldr	r2, [sp, #20]
 800e188:	2101      	movs	r1, #1
 800e18a:	441a      	add	r2, r3
 800e18c:	4620      	mov	r0, r4
 800e18e:	9205      	str	r2, [sp, #20]
 800e190:	f001 f950 	bl	800f434 <__i2b>
 800e194:	4607      	mov	r7, r0
 800e196:	2d00      	cmp	r5, #0
 800e198:	dd0c      	ble.n	800e1b4 <_dtoa_r+0x754>
 800e19a:	9b05      	ldr	r3, [sp, #20]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	dd09      	ble.n	800e1b4 <_dtoa_r+0x754>
 800e1a0:	42ab      	cmp	r3, r5
 800e1a2:	9a04      	ldr	r2, [sp, #16]
 800e1a4:	bfa8      	it	ge
 800e1a6:	462b      	movge	r3, r5
 800e1a8:	1ad2      	subs	r2, r2, r3
 800e1aa:	9204      	str	r2, [sp, #16]
 800e1ac:	9a05      	ldr	r2, [sp, #20]
 800e1ae:	1aed      	subs	r5, r5, r3
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	9305      	str	r3, [sp, #20]
 800e1b4:	9b07      	ldr	r3, [sp, #28]
 800e1b6:	b31b      	cbz	r3, 800e200 <_dtoa_r+0x7a0>
 800e1b8:	9b08      	ldr	r3, [sp, #32]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f000 80af 	beq.w	800e31e <_dtoa_r+0x8be>
 800e1c0:	2e00      	cmp	r6, #0
 800e1c2:	dd13      	ble.n	800e1ec <_dtoa_r+0x78c>
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	4632      	mov	r2, r6
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f001 f9f3 	bl	800f5b4 <__pow5mult>
 800e1ce:	ee18 2a10 	vmov	r2, s16
 800e1d2:	4601      	mov	r1, r0
 800e1d4:	4607      	mov	r7, r0
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f001 f942 	bl	800f460 <__multiply>
 800e1dc:	ee18 1a10 	vmov	r1, s16
 800e1e0:	4680      	mov	r8, r0
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f001 f824 	bl	800f230 <_Bfree>
 800e1e8:	ee08 8a10 	vmov	s16, r8
 800e1ec:	9b07      	ldr	r3, [sp, #28]
 800e1ee:	1b9a      	subs	r2, r3, r6
 800e1f0:	d006      	beq.n	800e200 <_dtoa_r+0x7a0>
 800e1f2:	ee18 1a10 	vmov	r1, s16
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f001 f9dc 	bl	800f5b4 <__pow5mult>
 800e1fc:	ee08 0a10 	vmov	s16, r0
 800e200:	2101      	movs	r1, #1
 800e202:	4620      	mov	r0, r4
 800e204:	f001 f916 	bl	800f434 <__i2b>
 800e208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	4606      	mov	r6, r0
 800e20e:	f340 8088 	ble.w	800e322 <_dtoa_r+0x8c2>
 800e212:	461a      	mov	r2, r3
 800e214:	4601      	mov	r1, r0
 800e216:	4620      	mov	r0, r4
 800e218:	f001 f9cc 	bl	800f5b4 <__pow5mult>
 800e21c:	9b06      	ldr	r3, [sp, #24]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	4606      	mov	r6, r0
 800e222:	f340 8081 	ble.w	800e328 <_dtoa_r+0x8c8>
 800e226:	f04f 0800 	mov.w	r8, #0
 800e22a:	6933      	ldr	r3, [r6, #16]
 800e22c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e230:	6918      	ldr	r0, [r3, #16]
 800e232:	f001 f8af 	bl	800f394 <__hi0bits>
 800e236:	f1c0 0020 	rsb	r0, r0, #32
 800e23a:	9b05      	ldr	r3, [sp, #20]
 800e23c:	4418      	add	r0, r3
 800e23e:	f010 001f 	ands.w	r0, r0, #31
 800e242:	f000 8092 	beq.w	800e36a <_dtoa_r+0x90a>
 800e246:	f1c0 0320 	rsb	r3, r0, #32
 800e24a:	2b04      	cmp	r3, #4
 800e24c:	f340 808a 	ble.w	800e364 <_dtoa_r+0x904>
 800e250:	f1c0 001c 	rsb	r0, r0, #28
 800e254:	9b04      	ldr	r3, [sp, #16]
 800e256:	4403      	add	r3, r0
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	9b05      	ldr	r3, [sp, #20]
 800e25c:	4403      	add	r3, r0
 800e25e:	4405      	add	r5, r0
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	9b04      	ldr	r3, [sp, #16]
 800e264:	2b00      	cmp	r3, #0
 800e266:	dd07      	ble.n	800e278 <_dtoa_r+0x818>
 800e268:	ee18 1a10 	vmov	r1, s16
 800e26c:	461a      	mov	r2, r3
 800e26e:	4620      	mov	r0, r4
 800e270:	f001 f9fa 	bl	800f668 <__lshift>
 800e274:	ee08 0a10 	vmov	s16, r0
 800e278:	9b05      	ldr	r3, [sp, #20]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	dd05      	ble.n	800e28a <_dtoa_r+0x82a>
 800e27e:	4631      	mov	r1, r6
 800e280:	461a      	mov	r2, r3
 800e282:	4620      	mov	r0, r4
 800e284:	f001 f9f0 	bl	800f668 <__lshift>
 800e288:	4606      	mov	r6, r0
 800e28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d06e      	beq.n	800e36e <_dtoa_r+0x90e>
 800e290:	ee18 0a10 	vmov	r0, s16
 800e294:	4631      	mov	r1, r6
 800e296:	f001 fa57 	bl	800f748 <__mcmp>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	da67      	bge.n	800e36e <_dtoa_r+0x90e>
 800e29e:	9b00      	ldr	r3, [sp, #0]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	ee18 1a10 	vmov	r1, s16
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	220a      	movs	r2, #10
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f000 ffe1 	bl	800f274 <__multadd>
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	ee08 0a10 	vmov	s16, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 81b1 	beq.w	800e620 <_dtoa_r+0xbc0>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	220a      	movs	r2, #10
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 ffd5 	bl	800f274 <__multadd>
 800e2ca:	9b02      	ldr	r3, [sp, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	4607      	mov	r7, r0
 800e2d0:	f300 808e 	bgt.w	800e3f0 <_dtoa_r+0x990>
 800e2d4:	9b06      	ldr	r3, [sp, #24]
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	dc51      	bgt.n	800e37e <_dtoa_r+0x91e>
 800e2da:	e089      	b.n	800e3f0 <_dtoa_r+0x990>
 800e2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2e2:	e74b      	b.n	800e17c <_dtoa_r+0x71c>
 800e2e4:	9b03      	ldr	r3, [sp, #12]
 800e2e6:	1e5e      	subs	r6, r3, #1
 800e2e8:	9b07      	ldr	r3, [sp, #28]
 800e2ea:	42b3      	cmp	r3, r6
 800e2ec:	bfbf      	itttt	lt
 800e2ee:	9b07      	ldrlt	r3, [sp, #28]
 800e2f0:	9607      	strlt	r6, [sp, #28]
 800e2f2:	1af2      	sublt	r2, r6, r3
 800e2f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e2f6:	bfb6      	itet	lt
 800e2f8:	189b      	addlt	r3, r3, r2
 800e2fa:	1b9e      	subge	r6, r3, r6
 800e2fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e2fe:	9b03      	ldr	r3, [sp, #12]
 800e300:	bfb8      	it	lt
 800e302:	2600      	movlt	r6, #0
 800e304:	2b00      	cmp	r3, #0
 800e306:	bfb7      	itett	lt
 800e308:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e30c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e310:	1a9d      	sublt	r5, r3, r2
 800e312:	2300      	movlt	r3, #0
 800e314:	e734      	b.n	800e180 <_dtoa_r+0x720>
 800e316:	9e07      	ldr	r6, [sp, #28]
 800e318:	9d04      	ldr	r5, [sp, #16]
 800e31a:	9f08      	ldr	r7, [sp, #32]
 800e31c:	e73b      	b.n	800e196 <_dtoa_r+0x736>
 800e31e:	9a07      	ldr	r2, [sp, #28]
 800e320:	e767      	b.n	800e1f2 <_dtoa_r+0x792>
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	2b01      	cmp	r3, #1
 800e326:	dc18      	bgt.n	800e35a <_dtoa_r+0x8fa>
 800e328:	f1ba 0f00 	cmp.w	sl, #0
 800e32c:	d115      	bne.n	800e35a <_dtoa_r+0x8fa>
 800e32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e332:	b993      	cbnz	r3, 800e35a <_dtoa_r+0x8fa>
 800e334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e338:	0d1b      	lsrs	r3, r3, #20
 800e33a:	051b      	lsls	r3, r3, #20
 800e33c:	b183      	cbz	r3, 800e360 <_dtoa_r+0x900>
 800e33e:	9b04      	ldr	r3, [sp, #16]
 800e340:	3301      	adds	r3, #1
 800e342:	9304      	str	r3, [sp, #16]
 800e344:	9b05      	ldr	r3, [sp, #20]
 800e346:	3301      	adds	r3, #1
 800e348:	9305      	str	r3, [sp, #20]
 800e34a:	f04f 0801 	mov.w	r8, #1
 800e34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e350:	2b00      	cmp	r3, #0
 800e352:	f47f af6a 	bne.w	800e22a <_dtoa_r+0x7ca>
 800e356:	2001      	movs	r0, #1
 800e358:	e76f      	b.n	800e23a <_dtoa_r+0x7da>
 800e35a:	f04f 0800 	mov.w	r8, #0
 800e35e:	e7f6      	b.n	800e34e <_dtoa_r+0x8ee>
 800e360:	4698      	mov	r8, r3
 800e362:	e7f4      	b.n	800e34e <_dtoa_r+0x8ee>
 800e364:	f43f af7d 	beq.w	800e262 <_dtoa_r+0x802>
 800e368:	4618      	mov	r0, r3
 800e36a:	301c      	adds	r0, #28
 800e36c:	e772      	b.n	800e254 <_dtoa_r+0x7f4>
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	dc37      	bgt.n	800e3e4 <_dtoa_r+0x984>
 800e374:	9b06      	ldr	r3, [sp, #24]
 800e376:	2b02      	cmp	r3, #2
 800e378:	dd34      	ble.n	800e3e4 <_dtoa_r+0x984>
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	9302      	str	r3, [sp, #8]
 800e37e:	9b02      	ldr	r3, [sp, #8]
 800e380:	b96b      	cbnz	r3, 800e39e <_dtoa_r+0x93e>
 800e382:	4631      	mov	r1, r6
 800e384:	2205      	movs	r2, #5
 800e386:	4620      	mov	r0, r4
 800e388:	f000 ff74 	bl	800f274 <__multadd>
 800e38c:	4601      	mov	r1, r0
 800e38e:	4606      	mov	r6, r0
 800e390:	ee18 0a10 	vmov	r0, s16
 800e394:	f001 f9d8 	bl	800f748 <__mcmp>
 800e398:	2800      	cmp	r0, #0
 800e39a:	f73f adbb 	bgt.w	800df14 <_dtoa_r+0x4b4>
 800e39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3a0:	9d01      	ldr	r5, [sp, #4]
 800e3a2:	43db      	mvns	r3, r3
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	f04f 0800 	mov.w	r8, #0
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f000 ff3f 	bl	800f230 <_Bfree>
 800e3b2:	2f00      	cmp	r7, #0
 800e3b4:	f43f aea4 	beq.w	800e100 <_dtoa_r+0x6a0>
 800e3b8:	f1b8 0f00 	cmp.w	r8, #0
 800e3bc:	d005      	beq.n	800e3ca <_dtoa_r+0x96a>
 800e3be:	45b8      	cmp	r8, r7
 800e3c0:	d003      	beq.n	800e3ca <_dtoa_r+0x96a>
 800e3c2:	4641      	mov	r1, r8
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 ff33 	bl	800f230 <_Bfree>
 800e3ca:	4639      	mov	r1, r7
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 ff2f 	bl	800f230 <_Bfree>
 800e3d2:	e695      	b.n	800e100 <_dtoa_r+0x6a0>
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	4637      	mov	r7, r6
 800e3d8:	e7e1      	b.n	800e39e <_dtoa_r+0x93e>
 800e3da:	9700      	str	r7, [sp, #0]
 800e3dc:	4637      	mov	r7, r6
 800e3de:	e599      	b.n	800df14 <_dtoa_r+0x4b4>
 800e3e0:	40240000 	.word	0x40240000
 800e3e4:	9b08      	ldr	r3, [sp, #32]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f000 80ca 	beq.w	800e580 <_dtoa_r+0xb20>
 800e3ec:	9b03      	ldr	r3, [sp, #12]
 800e3ee:	9302      	str	r3, [sp, #8]
 800e3f0:	2d00      	cmp	r5, #0
 800e3f2:	dd05      	ble.n	800e400 <_dtoa_r+0x9a0>
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	462a      	mov	r2, r5
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f001 f935 	bl	800f668 <__lshift>
 800e3fe:	4607      	mov	r7, r0
 800e400:	f1b8 0f00 	cmp.w	r8, #0
 800e404:	d05b      	beq.n	800e4be <_dtoa_r+0xa5e>
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 fed1 	bl	800f1b0 <_Balloc>
 800e40e:	4605      	mov	r5, r0
 800e410:	b928      	cbnz	r0, 800e41e <_dtoa_r+0x9be>
 800e412:	4b87      	ldr	r3, [pc, #540]	; (800e630 <_dtoa_r+0xbd0>)
 800e414:	4602      	mov	r2, r0
 800e416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e41a:	f7ff bb3b 	b.w	800da94 <_dtoa_r+0x34>
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	3202      	adds	r2, #2
 800e422:	0092      	lsls	r2, r2, #2
 800e424:	f107 010c 	add.w	r1, r7, #12
 800e428:	300c      	adds	r0, #12
 800e42a:	f000 feb3 	bl	800f194 <memcpy>
 800e42e:	2201      	movs	r2, #1
 800e430:	4629      	mov	r1, r5
 800e432:	4620      	mov	r0, r4
 800e434:	f001 f918 	bl	800f668 <__lshift>
 800e438:	9b01      	ldr	r3, [sp, #4]
 800e43a:	f103 0901 	add.w	r9, r3, #1
 800e43e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e442:	4413      	add	r3, r2
 800e444:	9305      	str	r3, [sp, #20]
 800e446:	f00a 0301 	and.w	r3, sl, #1
 800e44a:	46b8      	mov	r8, r7
 800e44c:	9304      	str	r3, [sp, #16]
 800e44e:	4607      	mov	r7, r0
 800e450:	4631      	mov	r1, r6
 800e452:	ee18 0a10 	vmov	r0, s16
 800e456:	f7ff fa77 	bl	800d948 <quorem>
 800e45a:	4641      	mov	r1, r8
 800e45c:	9002      	str	r0, [sp, #8]
 800e45e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e462:	ee18 0a10 	vmov	r0, s16
 800e466:	f001 f96f 	bl	800f748 <__mcmp>
 800e46a:	463a      	mov	r2, r7
 800e46c:	9003      	str	r0, [sp, #12]
 800e46e:	4631      	mov	r1, r6
 800e470:	4620      	mov	r0, r4
 800e472:	f001 f985 	bl	800f780 <__mdiff>
 800e476:	68c2      	ldr	r2, [r0, #12]
 800e478:	f109 3bff 	add.w	fp, r9, #4294967295
 800e47c:	4605      	mov	r5, r0
 800e47e:	bb02      	cbnz	r2, 800e4c2 <_dtoa_r+0xa62>
 800e480:	4601      	mov	r1, r0
 800e482:	ee18 0a10 	vmov	r0, s16
 800e486:	f001 f95f 	bl	800f748 <__mcmp>
 800e48a:	4602      	mov	r2, r0
 800e48c:	4629      	mov	r1, r5
 800e48e:	4620      	mov	r0, r4
 800e490:	9207      	str	r2, [sp, #28]
 800e492:	f000 fecd 	bl	800f230 <_Bfree>
 800e496:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e49a:	ea43 0102 	orr.w	r1, r3, r2
 800e49e:	9b04      	ldr	r3, [sp, #16]
 800e4a0:	430b      	orrs	r3, r1
 800e4a2:	464d      	mov	r5, r9
 800e4a4:	d10f      	bne.n	800e4c6 <_dtoa_r+0xa66>
 800e4a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4aa:	d02a      	beq.n	800e502 <_dtoa_r+0xaa2>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	dd02      	ble.n	800e4b8 <_dtoa_r+0xa58>
 800e4b2:	9b02      	ldr	r3, [sp, #8]
 800e4b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e4b8:	f88b a000 	strb.w	sl, [fp]
 800e4bc:	e775      	b.n	800e3aa <_dtoa_r+0x94a>
 800e4be:	4638      	mov	r0, r7
 800e4c0:	e7ba      	b.n	800e438 <_dtoa_r+0x9d8>
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	e7e2      	b.n	800e48c <_dtoa_r+0xa2c>
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	db04      	blt.n	800e4d6 <_dtoa_r+0xa76>
 800e4cc:	9906      	ldr	r1, [sp, #24]
 800e4ce:	430b      	orrs	r3, r1
 800e4d0:	9904      	ldr	r1, [sp, #16]
 800e4d2:	430b      	orrs	r3, r1
 800e4d4:	d122      	bne.n	800e51c <_dtoa_r+0xabc>
 800e4d6:	2a00      	cmp	r2, #0
 800e4d8:	ddee      	ble.n	800e4b8 <_dtoa_r+0xa58>
 800e4da:	ee18 1a10 	vmov	r1, s16
 800e4de:	2201      	movs	r2, #1
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f001 f8c1 	bl	800f668 <__lshift>
 800e4e6:	4631      	mov	r1, r6
 800e4e8:	ee08 0a10 	vmov	s16, r0
 800e4ec:	f001 f92c 	bl	800f748 <__mcmp>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	dc03      	bgt.n	800e4fc <_dtoa_r+0xa9c>
 800e4f4:	d1e0      	bne.n	800e4b8 <_dtoa_r+0xa58>
 800e4f6:	f01a 0f01 	tst.w	sl, #1
 800e4fa:	d0dd      	beq.n	800e4b8 <_dtoa_r+0xa58>
 800e4fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e500:	d1d7      	bne.n	800e4b2 <_dtoa_r+0xa52>
 800e502:	2339      	movs	r3, #57	; 0x39
 800e504:	f88b 3000 	strb.w	r3, [fp]
 800e508:	462b      	mov	r3, r5
 800e50a:	461d      	mov	r5, r3
 800e50c:	3b01      	subs	r3, #1
 800e50e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e512:	2a39      	cmp	r2, #57	; 0x39
 800e514:	d071      	beq.n	800e5fa <_dtoa_r+0xb9a>
 800e516:	3201      	adds	r2, #1
 800e518:	701a      	strb	r2, [r3, #0]
 800e51a:	e746      	b.n	800e3aa <_dtoa_r+0x94a>
 800e51c:	2a00      	cmp	r2, #0
 800e51e:	dd07      	ble.n	800e530 <_dtoa_r+0xad0>
 800e520:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e524:	d0ed      	beq.n	800e502 <_dtoa_r+0xaa2>
 800e526:	f10a 0301 	add.w	r3, sl, #1
 800e52a:	f88b 3000 	strb.w	r3, [fp]
 800e52e:	e73c      	b.n	800e3aa <_dtoa_r+0x94a>
 800e530:	9b05      	ldr	r3, [sp, #20]
 800e532:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e536:	4599      	cmp	r9, r3
 800e538:	d047      	beq.n	800e5ca <_dtoa_r+0xb6a>
 800e53a:	ee18 1a10 	vmov	r1, s16
 800e53e:	2300      	movs	r3, #0
 800e540:	220a      	movs	r2, #10
 800e542:	4620      	mov	r0, r4
 800e544:	f000 fe96 	bl	800f274 <__multadd>
 800e548:	45b8      	cmp	r8, r7
 800e54a:	ee08 0a10 	vmov	s16, r0
 800e54e:	f04f 0300 	mov.w	r3, #0
 800e552:	f04f 020a 	mov.w	r2, #10
 800e556:	4641      	mov	r1, r8
 800e558:	4620      	mov	r0, r4
 800e55a:	d106      	bne.n	800e56a <_dtoa_r+0xb0a>
 800e55c:	f000 fe8a 	bl	800f274 <__multadd>
 800e560:	4680      	mov	r8, r0
 800e562:	4607      	mov	r7, r0
 800e564:	f109 0901 	add.w	r9, r9, #1
 800e568:	e772      	b.n	800e450 <_dtoa_r+0x9f0>
 800e56a:	f000 fe83 	bl	800f274 <__multadd>
 800e56e:	4639      	mov	r1, r7
 800e570:	4680      	mov	r8, r0
 800e572:	2300      	movs	r3, #0
 800e574:	220a      	movs	r2, #10
 800e576:	4620      	mov	r0, r4
 800e578:	f000 fe7c 	bl	800f274 <__multadd>
 800e57c:	4607      	mov	r7, r0
 800e57e:	e7f1      	b.n	800e564 <_dtoa_r+0xb04>
 800e580:	9b03      	ldr	r3, [sp, #12]
 800e582:	9302      	str	r3, [sp, #8]
 800e584:	9d01      	ldr	r5, [sp, #4]
 800e586:	ee18 0a10 	vmov	r0, s16
 800e58a:	4631      	mov	r1, r6
 800e58c:	f7ff f9dc 	bl	800d948 <quorem>
 800e590:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e594:	9b01      	ldr	r3, [sp, #4]
 800e596:	f805 ab01 	strb.w	sl, [r5], #1
 800e59a:	1aea      	subs	r2, r5, r3
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	dd09      	ble.n	800e5b6 <_dtoa_r+0xb56>
 800e5a2:	ee18 1a10 	vmov	r1, s16
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	220a      	movs	r2, #10
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 fe62 	bl	800f274 <__multadd>
 800e5b0:	ee08 0a10 	vmov	s16, r0
 800e5b4:	e7e7      	b.n	800e586 <_dtoa_r+0xb26>
 800e5b6:	9b02      	ldr	r3, [sp, #8]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	bfc8      	it	gt
 800e5bc:	461d      	movgt	r5, r3
 800e5be:	9b01      	ldr	r3, [sp, #4]
 800e5c0:	bfd8      	it	le
 800e5c2:	2501      	movle	r5, #1
 800e5c4:	441d      	add	r5, r3
 800e5c6:	f04f 0800 	mov.w	r8, #0
 800e5ca:	ee18 1a10 	vmov	r1, s16
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f001 f849 	bl	800f668 <__lshift>
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	ee08 0a10 	vmov	s16, r0
 800e5dc:	f001 f8b4 	bl	800f748 <__mcmp>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	dc91      	bgt.n	800e508 <_dtoa_r+0xaa8>
 800e5e4:	d102      	bne.n	800e5ec <_dtoa_r+0xb8c>
 800e5e6:	f01a 0f01 	tst.w	sl, #1
 800e5ea:	d18d      	bne.n	800e508 <_dtoa_r+0xaa8>
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	461d      	mov	r5, r3
 800e5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5f4:	2a30      	cmp	r2, #48	; 0x30
 800e5f6:	d0fa      	beq.n	800e5ee <_dtoa_r+0xb8e>
 800e5f8:	e6d7      	b.n	800e3aa <_dtoa_r+0x94a>
 800e5fa:	9a01      	ldr	r2, [sp, #4]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d184      	bne.n	800e50a <_dtoa_r+0xaaa>
 800e600:	9b00      	ldr	r3, [sp, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	9300      	str	r3, [sp, #0]
 800e606:	2331      	movs	r3, #49	; 0x31
 800e608:	7013      	strb	r3, [r2, #0]
 800e60a:	e6ce      	b.n	800e3aa <_dtoa_r+0x94a>
 800e60c:	4b09      	ldr	r3, [pc, #36]	; (800e634 <_dtoa_r+0xbd4>)
 800e60e:	f7ff ba95 	b.w	800db3c <_dtoa_r+0xdc>
 800e612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e614:	2b00      	cmp	r3, #0
 800e616:	f47f aa6e 	bne.w	800daf6 <_dtoa_r+0x96>
 800e61a:	4b07      	ldr	r3, [pc, #28]	; (800e638 <_dtoa_r+0xbd8>)
 800e61c:	f7ff ba8e 	b.w	800db3c <_dtoa_r+0xdc>
 800e620:	9b02      	ldr	r3, [sp, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	dcae      	bgt.n	800e584 <_dtoa_r+0xb24>
 800e626:	9b06      	ldr	r3, [sp, #24]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	f73f aea8 	bgt.w	800e37e <_dtoa_r+0x91e>
 800e62e:	e7a9      	b.n	800e584 <_dtoa_r+0xb24>
 800e630:	08010948 	.word	0x08010948
 800e634:	08010748 	.word	0x08010748
 800e638:	080108c9 	.word	0x080108c9

0800e63c <__sflush_r>:
 800e63c:	898a      	ldrh	r2, [r1, #12]
 800e63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e642:	4605      	mov	r5, r0
 800e644:	0710      	lsls	r0, r2, #28
 800e646:	460c      	mov	r4, r1
 800e648:	d458      	bmi.n	800e6fc <__sflush_r+0xc0>
 800e64a:	684b      	ldr	r3, [r1, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	dc05      	bgt.n	800e65c <__sflush_r+0x20>
 800e650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e652:	2b00      	cmp	r3, #0
 800e654:	dc02      	bgt.n	800e65c <__sflush_r+0x20>
 800e656:	2000      	movs	r0, #0
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e65e:	2e00      	cmp	r6, #0
 800e660:	d0f9      	beq.n	800e656 <__sflush_r+0x1a>
 800e662:	2300      	movs	r3, #0
 800e664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e668:	682f      	ldr	r7, [r5, #0]
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	d032      	beq.n	800e6d4 <__sflush_r+0x98>
 800e66e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	075a      	lsls	r2, r3, #29
 800e674:	d505      	bpl.n	800e682 <__sflush_r+0x46>
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	1ac0      	subs	r0, r0, r3
 800e67a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e67c:	b10b      	cbz	r3, 800e682 <__sflush_r+0x46>
 800e67e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e680:	1ac0      	subs	r0, r0, r3
 800e682:	2300      	movs	r3, #0
 800e684:	4602      	mov	r2, r0
 800e686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e688:	6a21      	ldr	r1, [r4, #32]
 800e68a:	4628      	mov	r0, r5
 800e68c:	47b0      	blx	r6
 800e68e:	1c43      	adds	r3, r0, #1
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	d106      	bne.n	800e6a2 <__sflush_r+0x66>
 800e694:	6829      	ldr	r1, [r5, #0]
 800e696:	291d      	cmp	r1, #29
 800e698:	d82c      	bhi.n	800e6f4 <__sflush_r+0xb8>
 800e69a:	4a2a      	ldr	r2, [pc, #168]	; (800e744 <__sflush_r+0x108>)
 800e69c:	40ca      	lsrs	r2, r1
 800e69e:	07d6      	lsls	r6, r2, #31
 800e6a0:	d528      	bpl.n	800e6f4 <__sflush_r+0xb8>
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	6062      	str	r2, [r4, #4]
 800e6a6:	04d9      	lsls	r1, r3, #19
 800e6a8:	6922      	ldr	r2, [r4, #16]
 800e6aa:	6022      	str	r2, [r4, #0]
 800e6ac:	d504      	bpl.n	800e6b8 <__sflush_r+0x7c>
 800e6ae:	1c42      	adds	r2, r0, #1
 800e6b0:	d101      	bne.n	800e6b6 <__sflush_r+0x7a>
 800e6b2:	682b      	ldr	r3, [r5, #0]
 800e6b4:	b903      	cbnz	r3, 800e6b8 <__sflush_r+0x7c>
 800e6b6:	6560      	str	r0, [r4, #84]	; 0x54
 800e6b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6ba:	602f      	str	r7, [r5, #0]
 800e6bc:	2900      	cmp	r1, #0
 800e6be:	d0ca      	beq.n	800e656 <__sflush_r+0x1a>
 800e6c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6c4:	4299      	cmp	r1, r3
 800e6c6:	d002      	beq.n	800e6ce <__sflush_r+0x92>
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	f001 fa49 	bl	800fb60 <_free_r>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	6360      	str	r0, [r4, #52]	; 0x34
 800e6d2:	e7c1      	b.n	800e658 <__sflush_r+0x1c>
 800e6d4:	6a21      	ldr	r1, [r4, #32]
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	4628      	mov	r0, r5
 800e6da:	47b0      	blx	r6
 800e6dc:	1c41      	adds	r1, r0, #1
 800e6de:	d1c7      	bne.n	800e670 <__sflush_r+0x34>
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0c4      	beq.n	800e670 <__sflush_r+0x34>
 800e6e6:	2b1d      	cmp	r3, #29
 800e6e8:	d001      	beq.n	800e6ee <__sflush_r+0xb2>
 800e6ea:	2b16      	cmp	r3, #22
 800e6ec:	d101      	bne.n	800e6f2 <__sflush_r+0xb6>
 800e6ee:	602f      	str	r7, [r5, #0]
 800e6f0:	e7b1      	b.n	800e656 <__sflush_r+0x1a>
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f8:	81a3      	strh	r3, [r4, #12]
 800e6fa:	e7ad      	b.n	800e658 <__sflush_r+0x1c>
 800e6fc:	690f      	ldr	r7, [r1, #16]
 800e6fe:	2f00      	cmp	r7, #0
 800e700:	d0a9      	beq.n	800e656 <__sflush_r+0x1a>
 800e702:	0793      	lsls	r3, r2, #30
 800e704:	680e      	ldr	r6, [r1, #0]
 800e706:	bf08      	it	eq
 800e708:	694b      	ldreq	r3, [r1, #20]
 800e70a:	600f      	str	r7, [r1, #0]
 800e70c:	bf18      	it	ne
 800e70e:	2300      	movne	r3, #0
 800e710:	eba6 0807 	sub.w	r8, r6, r7
 800e714:	608b      	str	r3, [r1, #8]
 800e716:	f1b8 0f00 	cmp.w	r8, #0
 800e71a:	dd9c      	ble.n	800e656 <__sflush_r+0x1a>
 800e71c:	6a21      	ldr	r1, [r4, #32]
 800e71e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e720:	4643      	mov	r3, r8
 800e722:	463a      	mov	r2, r7
 800e724:	4628      	mov	r0, r5
 800e726:	47b0      	blx	r6
 800e728:	2800      	cmp	r0, #0
 800e72a:	dc06      	bgt.n	800e73a <__sflush_r+0xfe>
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e732:	81a3      	strh	r3, [r4, #12]
 800e734:	f04f 30ff 	mov.w	r0, #4294967295
 800e738:	e78e      	b.n	800e658 <__sflush_r+0x1c>
 800e73a:	4407      	add	r7, r0
 800e73c:	eba8 0800 	sub.w	r8, r8, r0
 800e740:	e7e9      	b.n	800e716 <__sflush_r+0xda>
 800e742:	bf00      	nop
 800e744:	20400001 	.word	0x20400001

0800e748 <_fflush_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	690b      	ldr	r3, [r1, #16]
 800e74c:	4605      	mov	r5, r0
 800e74e:	460c      	mov	r4, r1
 800e750:	b913      	cbnz	r3, 800e758 <_fflush_r+0x10>
 800e752:	2500      	movs	r5, #0
 800e754:	4628      	mov	r0, r5
 800e756:	bd38      	pop	{r3, r4, r5, pc}
 800e758:	b118      	cbz	r0, 800e762 <_fflush_r+0x1a>
 800e75a:	6983      	ldr	r3, [r0, #24]
 800e75c:	b90b      	cbnz	r3, 800e762 <_fflush_r+0x1a>
 800e75e:	f000 f887 	bl	800e870 <__sinit>
 800e762:	4b14      	ldr	r3, [pc, #80]	; (800e7b4 <_fflush_r+0x6c>)
 800e764:	429c      	cmp	r4, r3
 800e766:	d11b      	bne.n	800e7a0 <_fflush_r+0x58>
 800e768:	686c      	ldr	r4, [r5, #4]
 800e76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d0ef      	beq.n	800e752 <_fflush_r+0xa>
 800e772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e774:	07d0      	lsls	r0, r2, #31
 800e776:	d404      	bmi.n	800e782 <_fflush_r+0x3a>
 800e778:	0599      	lsls	r1, r3, #22
 800e77a:	d402      	bmi.n	800e782 <_fflush_r+0x3a>
 800e77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e77e:	f000 fc88 	bl	800f092 <__retarget_lock_acquire_recursive>
 800e782:	4628      	mov	r0, r5
 800e784:	4621      	mov	r1, r4
 800e786:	f7ff ff59 	bl	800e63c <__sflush_r>
 800e78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e78c:	07da      	lsls	r2, r3, #31
 800e78e:	4605      	mov	r5, r0
 800e790:	d4e0      	bmi.n	800e754 <_fflush_r+0xc>
 800e792:	89a3      	ldrh	r3, [r4, #12]
 800e794:	059b      	lsls	r3, r3, #22
 800e796:	d4dd      	bmi.n	800e754 <_fflush_r+0xc>
 800e798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e79a:	f000 fc7b 	bl	800f094 <__retarget_lock_release_recursive>
 800e79e:	e7d9      	b.n	800e754 <_fflush_r+0xc>
 800e7a0:	4b05      	ldr	r3, [pc, #20]	; (800e7b8 <_fflush_r+0x70>)
 800e7a2:	429c      	cmp	r4, r3
 800e7a4:	d101      	bne.n	800e7aa <_fflush_r+0x62>
 800e7a6:	68ac      	ldr	r4, [r5, #8]
 800e7a8:	e7df      	b.n	800e76a <_fflush_r+0x22>
 800e7aa:	4b04      	ldr	r3, [pc, #16]	; (800e7bc <_fflush_r+0x74>)
 800e7ac:	429c      	cmp	r4, r3
 800e7ae:	bf08      	it	eq
 800e7b0:	68ec      	ldreq	r4, [r5, #12]
 800e7b2:	e7da      	b.n	800e76a <_fflush_r+0x22>
 800e7b4:	0801097c 	.word	0x0801097c
 800e7b8:	0801099c 	.word	0x0801099c
 800e7bc:	0801095c 	.word	0x0801095c

0800e7c0 <std>:
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	b510      	push	{r4, lr}
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7ce:	6083      	str	r3, [r0, #8]
 800e7d0:	8181      	strh	r1, [r0, #12]
 800e7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e7d4:	81c2      	strh	r2, [r0, #14]
 800e7d6:	6183      	str	r3, [r0, #24]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	2208      	movs	r2, #8
 800e7dc:	305c      	adds	r0, #92	; 0x5c
 800e7de:	f7fd fa11 	bl	800bc04 <memset>
 800e7e2:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <std+0x38>)
 800e7e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7e6:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <std+0x3c>)
 800e7e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ea:	4b05      	ldr	r3, [pc, #20]	; (800e800 <std+0x40>)
 800e7ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <std+0x44>)
 800e7f0:	6224      	str	r4, [r4, #32]
 800e7f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	bf00      	nop
 800e7f8:	080102c1 	.word	0x080102c1
 800e7fc:	080102e3 	.word	0x080102e3
 800e800:	0801031b 	.word	0x0801031b
 800e804:	0801033f 	.word	0x0801033f

0800e808 <_cleanup_r>:
 800e808:	4901      	ldr	r1, [pc, #4]	; (800e810 <_cleanup_r+0x8>)
 800e80a:	f000 b8af 	b.w	800e96c <_fwalk_reent>
 800e80e:	bf00      	nop
 800e810:	0800e749 	.word	0x0800e749

0800e814 <__sfmoreglue>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	2268      	movs	r2, #104	; 0x68
 800e818:	1e4d      	subs	r5, r1, #1
 800e81a:	4355      	muls	r5, r2
 800e81c:	460e      	mov	r6, r1
 800e81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e822:	f001 fa09 	bl	800fc38 <_malloc_r>
 800e826:	4604      	mov	r4, r0
 800e828:	b140      	cbz	r0, 800e83c <__sfmoreglue+0x28>
 800e82a:	2100      	movs	r1, #0
 800e82c:	e9c0 1600 	strd	r1, r6, [r0]
 800e830:	300c      	adds	r0, #12
 800e832:	60a0      	str	r0, [r4, #8]
 800e834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e838:	f7fd f9e4 	bl	800bc04 <memset>
 800e83c:	4620      	mov	r0, r4
 800e83e:	bd70      	pop	{r4, r5, r6, pc}

0800e840 <__sfp_lock_acquire>:
 800e840:	4801      	ldr	r0, [pc, #4]	; (800e848 <__sfp_lock_acquire+0x8>)
 800e842:	f000 bc26 	b.w	800f092 <__retarget_lock_acquire_recursive>
 800e846:	bf00      	nop
 800e848:	2000182d 	.word	0x2000182d

0800e84c <__sfp_lock_release>:
 800e84c:	4801      	ldr	r0, [pc, #4]	; (800e854 <__sfp_lock_release+0x8>)
 800e84e:	f000 bc21 	b.w	800f094 <__retarget_lock_release_recursive>
 800e852:	bf00      	nop
 800e854:	2000182d 	.word	0x2000182d

0800e858 <__sinit_lock_acquire>:
 800e858:	4801      	ldr	r0, [pc, #4]	; (800e860 <__sinit_lock_acquire+0x8>)
 800e85a:	f000 bc1a 	b.w	800f092 <__retarget_lock_acquire_recursive>
 800e85e:	bf00      	nop
 800e860:	2000182e 	.word	0x2000182e

0800e864 <__sinit_lock_release>:
 800e864:	4801      	ldr	r0, [pc, #4]	; (800e86c <__sinit_lock_release+0x8>)
 800e866:	f000 bc15 	b.w	800f094 <__retarget_lock_release_recursive>
 800e86a:	bf00      	nop
 800e86c:	2000182e 	.word	0x2000182e

0800e870 <__sinit>:
 800e870:	b510      	push	{r4, lr}
 800e872:	4604      	mov	r4, r0
 800e874:	f7ff fff0 	bl	800e858 <__sinit_lock_acquire>
 800e878:	69a3      	ldr	r3, [r4, #24]
 800e87a:	b11b      	cbz	r3, 800e884 <__sinit+0x14>
 800e87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e880:	f7ff bff0 	b.w	800e864 <__sinit_lock_release>
 800e884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e888:	6523      	str	r3, [r4, #80]	; 0x50
 800e88a:	4b13      	ldr	r3, [pc, #76]	; (800e8d8 <__sinit+0x68>)
 800e88c:	4a13      	ldr	r2, [pc, #76]	; (800e8dc <__sinit+0x6c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	62a2      	str	r2, [r4, #40]	; 0x28
 800e892:	42a3      	cmp	r3, r4
 800e894:	bf04      	itt	eq
 800e896:	2301      	moveq	r3, #1
 800e898:	61a3      	streq	r3, [r4, #24]
 800e89a:	4620      	mov	r0, r4
 800e89c:	f000 f820 	bl	800e8e0 <__sfp>
 800e8a0:	6060      	str	r0, [r4, #4]
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 f81c 	bl	800e8e0 <__sfp>
 800e8a8:	60a0      	str	r0, [r4, #8]
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 f818 	bl	800e8e0 <__sfp>
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	60e0      	str	r0, [r4, #12]
 800e8b4:	2104      	movs	r1, #4
 800e8b6:	6860      	ldr	r0, [r4, #4]
 800e8b8:	f7ff ff82 	bl	800e7c0 <std>
 800e8bc:	68a0      	ldr	r0, [r4, #8]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	2109      	movs	r1, #9
 800e8c2:	f7ff ff7d 	bl	800e7c0 <std>
 800e8c6:	68e0      	ldr	r0, [r4, #12]
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	2112      	movs	r1, #18
 800e8cc:	f7ff ff78 	bl	800e7c0 <std>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	61a3      	str	r3, [r4, #24]
 800e8d4:	e7d2      	b.n	800e87c <__sinit+0xc>
 800e8d6:	bf00      	nop
 800e8d8:	08010734 	.word	0x08010734
 800e8dc:	0800e809 	.word	0x0800e809

0800e8e0 <__sfp>:
 800e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e2:	4607      	mov	r7, r0
 800e8e4:	f7ff ffac 	bl	800e840 <__sfp_lock_acquire>
 800e8e8:	4b1e      	ldr	r3, [pc, #120]	; (800e964 <__sfp+0x84>)
 800e8ea:	681e      	ldr	r6, [r3, #0]
 800e8ec:	69b3      	ldr	r3, [r6, #24]
 800e8ee:	b913      	cbnz	r3, 800e8f6 <__sfp+0x16>
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	f7ff ffbd 	bl	800e870 <__sinit>
 800e8f6:	3648      	adds	r6, #72	; 0x48
 800e8f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	d503      	bpl.n	800e908 <__sfp+0x28>
 800e900:	6833      	ldr	r3, [r6, #0]
 800e902:	b30b      	cbz	r3, 800e948 <__sfp+0x68>
 800e904:	6836      	ldr	r6, [r6, #0]
 800e906:	e7f7      	b.n	800e8f8 <__sfp+0x18>
 800e908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e90c:	b9d5      	cbnz	r5, 800e944 <__sfp+0x64>
 800e90e:	4b16      	ldr	r3, [pc, #88]	; (800e968 <__sfp+0x88>)
 800e910:	60e3      	str	r3, [r4, #12]
 800e912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e916:	6665      	str	r5, [r4, #100]	; 0x64
 800e918:	f000 fbba 	bl	800f090 <__retarget_lock_init_recursive>
 800e91c:	f7ff ff96 	bl	800e84c <__sfp_lock_release>
 800e920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e928:	6025      	str	r5, [r4, #0]
 800e92a:	61a5      	str	r5, [r4, #24]
 800e92c:	2208      	movs	r2, #8
 800e92e:	4629      	mov	r1, r5
 800e930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e934:	f7fd f966 	bl	800bc04 <memset>
 800e938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e93c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e940:	4620      	mov	r0, r4
 800e942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e944:	3468      	adds	r4, #104	; 0x68
 800e946:	e7d9      	b.n	800e8fc <__sfp+0x1c>
 800e948:	2104      	movs	r1, #4
 800e94a:	4638      	mov	r0, r7
 800e94c:	f7ff ff62 	bl	800e814 <__sfmoreglue>
 800e950:	4604      	mov	r4, r0
 800e952:	6030      	str	r0, [r6, #0]
 800e954:	2800      	cmp	r0, #0
 800e956:	d1d5      	bne.n	800e904 <__sfp+0x24>
 800e958:	f7ff ff78 	bl	800e84c <__sfp_lock_release>
 800e95c:	230c      	movs	r3, #12
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	e7ee      	b.n	800e940 <__sfp+0x60>
 800e962:	bf00      	nop
 800e964:	08010734 	.word	0x08010734
 800e968:	ffff0001 	.word	0xffff0001

0800e96c <_fwalk_reent>:
 800e96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e970:	4606      	mov	r6, r0
 800e972:	4688      	mov	r8, r1
 800e974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e978:	2700      	movs	r7, #0
 800e97a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e97e:	f1b9 0901 	subs.w	r9, r9, #1
 800e982:	d505      	bpl.n	800e990 <_fwalk_reent+0x24>
 800e984:	6824      	ldr	r4, [r4, #0]
 800e986:	2c00      	cmp	r4, #0
 800e988:	d1f7      	bne.n	800e97a <_fwalk_reent+0xe>
 800e98a:	4638      	mov	r0, r7
 800e98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e990:	89ab      	ldrh	r3, [r5, #12]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d907      	bls.n	800e9a6 <_fwalk_reent+0x3a>
 800e996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e99a:	3301      	adds	r3, #1
 800e99c:	d003      	beq.n	800e9a6 <_fwalk_reent+0x3a>
 800e99e:	4629      	mov	r1, r5
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	47c0      	blx	r8
 800e9a4:	4307      	orrs	r7, r0
 800e9a6:	3568      	adds	r5, #104	; 0x68
 800e9a8:	e7e9      	b.n	800e97e <_fwalk_reent+0x12>

0800e9aa <rshift>:
 800e9aa:	6903      	ldr	r3, [r0, #16]
 800e9ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e9b8:	f100 0414 	add.w	r4, r0, #20
 800e9bc:	dd45      	ble.n	800ea4a <rshift+0xa0>
 800e9be:	f011 011f 	ands.w	r1, r1, #31
 800e9c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e9c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9ca:	d10c      	bne.n	800e9e6 <rshift+0x3c>
 800e9cc:	f100 0710 	add.w	r7, r0, #16
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	42b1      	cmp	r1, r6
 800e9d4:	d334      	bcc.n	800ea40 <rshift+0x96>
 800e9d6:	1a9b      	subs	r3, r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	1eea      	subs	r2, r5, #3
 800e9dc:	4296      	cmp	r6, r2
 800e9de:	bf38      	it	cc
 800e9e0:	2300      	movcc	r3, #0
 800e9e2:	4423      	add	r3, r4
 800e9e4:	e015      	b.n	800ea12 <rshift+0x68>
 800e9e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9ea:	f1c1 0820 	rsb	r8, r1, #32
 800e9ee:	40cf      	lsrs	r7, r1
 800e9f0:	f105 0e04 	add.w	lr, r5, #4
 800e9f4:	46a1      	mov	r9, r4
 800e9f6:	4576      	cmp	r6, lr
 800e9f8:	46f4      	mov	ip, lr
 800e9fa:	d815      	bhi.n	800ea28 <rshift+0x7e>
 800e9fc:	1a9a      	subs	r2, r3, r2
 800e9fe:	0092      	lsls	r2, r2, #2
 800ea00:	3a04      	subs	r2, #4
 800ea02:	3501      	adds	r5, #1
 800ea04:	42ae      	cmp	r6, r5
 800ea06:	bf38      	it	cc
 800ea08:	2200      	movcc	r2, #0
 800ea0a:	18a3      	adds	r3, r4, r2
 800ea0c:	50a7      	str	r7, [r4, r2]
 800ea0e:	b107      	cbz	r7, 800ea12 <rshift+0x68>
 800ea10:	3304      	adds	r3, #4
 800ea12:	1b1a      	subs	r2, r3, r4
 800ea14:	42a3      	cmp	r3, r4
 800ea16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea1a:	bf08      	it	eq
 800ea1c:	2300      	moveq	r3, #0
 800ea1e:	6102      	str	r2, [r0, #16]
 800ea20:	bf08      	it	eq
 800ea22:	6143      	streq	r3, [r0, #20]
 800ea24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea28:	f8dc c000 	ldr.w	ip, [ip]
 800ea2c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea30:	ea4c 0707 	orr.w	r7, ip, r7
 800ea34:	f849 7b04 	str.w	r7, [r9], #4
 800ea38:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea3c:	40cf      	lsrs	r7, r1
 800ea3e:	e7da      	b.n	800e9f6 <rshift+0x4c>
 800ea40:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea44:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea48:	e7c3      	b.n	800e9d2 <rshift+0x28>
 800ea4a:	4623      	mov	r3, r4
 800ea4c:	e7e1      	b.n	800ea12 <rshift+0x68>

0800ea4e <__hexdig_fun>:
 800ea4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ea52:	2b09      	cmp	r3, #9
 800ea54:	d802      	bhi.n	800ea5c <__hexdig_fun+0xe>
 800ea56:	3820      	subs	r0, #32
 800ea58:	b2c0      	uxtb	r0, r0
 800ea5a:	4770      	bx	lr
 800ea5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea60:	2b05      	cmp	r3, #5
 800ea62:	d801      	bhi.n	800ea68 <__hexdig_fun+0x1a>
 800ea64:	3847      	subs	r0, #71	; 0x47
 800ea66:	e7f7      	b.n	800ea58 <__hexdig_fun+0xa>
 800ea68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea6c:	2b05      	cmp	r3, #5
 800ea6e:	d801      	bhi.n	800ea74 <__hexdig_fun+0x26>
 800ea70:	3827      	subs	r0, #39	; 0x27
 800ea72:	e7f1      	b.n	800ea58 <__hexdig_fun+0xa>
 800ea74:	2000      	movs	r0, #0
 800ea76:	4770      	bx	lr

0800ea78 <__gethex>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	ed2d 8b02 	vpush	{d8}
 800ea80:	b089      	sub	sp, #36	; 0x24
 800ea82:	ee08 0a10 	vmov	s16, r0
 800ea86:	9304      	str	r3, [sp, #16]
 800ea88:	4bb4      	ldr	r3, [pc, #720]	; (800ed5c <__gethex+0x2e4>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	468b      	mov	fp, r1
 800ea92:	4690      	mov	r8, r2
 800ea94:	f7f1 fba4 	bl	80001e0 <strlen>
 800ea98:	9b01      	ldr	r3, [sp, #4]
 800ea9a:	f8db 2000 	ldr.w	r2, [fp]
 800ea9e:	4403      	add	r3, r0
 800eaa0:	4682      	mov	sl, r0
 800eaa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eaa6:	9305      	str	r3, [sp, #20]
 800eaa8:	1c93      	adds	r3, r2, #2
 800eaaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eaae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eab2:	32fe      	adds	r2, #254	; 0xfe
 800eab4:	18d1      	adds	r1, r2, r3
 800eab6:	461f      	mov	r7, r3
 800eab8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eabc:	9100      	str	r1, [sp, #0]
 800eabe:	2830      	cmp	r0, #48	; 0x30
 800eac0:	d0f8      	beq.n	800eab4 <__gethex+0x3c>
 800eac2:	f7ff ffc4 	bl	800ea4e <__hexdig_fun>
 800eac6:	4604      	mov	r4, r0
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d13a      	bne.n	800eb42 <__gethex+0xca>
 800eacc:	9901      	ldr	r1, [sp, #4]
 800eace:	4652      	mov	r2, sl
 800ead0:	4638      	mov	r0, r7
 800ead2:	f001 fc38 	bl	8010346 <strncmp>
 800ead6:	4605      	mov	r5, r0
 800ead8:	2800      	cmp	r0, #0
 800eada:	d168      	bne.n	800ebae <__gethex+0x136>
 800eadc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eae0:	eb07 060a 	add.w	r6, r7, sl
 800eae4:	f7ff ffb3 	bl	800ea4e <__hexdig_fun>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d062      	beq.n	800ebb2 <__gethex+0x13a>
 800eaec:	4633      	mov	r3, r6
 800eaee:	7818      	ldrb	r0, [r3, #0]
 800eaf0:	2830      	cmp	r0, #48	; 0x30
 800eaf2:	461f      	mov	r7, r3
 800eaf4:	f103 0301 	add.w	r3, r3, #1
 800eaf8:	d0f9      	beq.n	800eaee <__gethex+0x76>
 800eafa:	f7ff ffa8 	bl	800ea4e <__hexdig_fun>
 800eafe:	2301      	movs	r3, #1
 800eb00:	fab0 f480 	clz	r4, r0
 800eb04:	0964      	lsrs	r4, r4, #5
 800eb06:	4635      	mov	r5, r6
 800eb08:	9300      	str	r3, [sp, #0]
 800eb0a:	463a      	mov	r2, r7
 800eb0c:	4616      	mov	r6, r2
 800eb0e:	3201      	adds	r2, #1
 800eb10:	7830      	ldrb	r0, [r6, #0]
 800eb12:	f7ff ff9c 	bl	800ea4e <__hexdig_fun>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d1f8      	bne.n	800eb0c <__gethex+0x94>
 800eb1a:	9901      	ldr	r1, [sp, #4]
 800eb1c:	4652      	mov	r2, sl
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f001 fc11 	bl	8010346 <strncmp>
 800eb24:	b980      	cbnz	r0, 800eb48 <__gethex+0xd0>
 800eb26:	b94d      	cbnz	r5, 800eb3c <__gethex+0xc4>
 800eb28:	eb06 050a 	add.w	r5, r6, sl
 800eb2c:	462a      	mov	r2, r5
 800eb2e:	4616      	mov	r6, r2
 800eb30:	3201      	adds	r2, #1
 800eb32:	7830      	ldrb	r0, [r6, #0]
 800eb34:	f7ff ff8b 	bl	800ea4e <__hexdig_fun>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d1f8      	bne.n	800eb2e <__gethex+0xb6>
 800eb3c:	1bad      	subs	r5, r5, r6
 800eb3e:	00ad      	lsls	r5, r5, #2
 800eb40:	e004      	b.n	800eb4c <__gethex+0xd4>
 800eb42:	2400      	movs	r4, #0
 800eb44:	4625      	mov	r5, r4
 800eb46:	e7e0      	b.n	800eb0a <__gethex+0x92>
 800eb48:	2d00      	cmp	r5, #0
 800eb4a:	d1f7      	bne.n	800eb3c <__gethex+0xc4>
 800eb4c:	7833      	ldrb	r3, [r6, #0]
 800eb4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb52:	2b50      	cmp	r3, #80	; 0x50
 800eb54:	d13b      	bne.n	800ebce <__gethex+0x156>
 800eb56:	7873      	ldrb	r3, [r6, #1]
 800eb58:	2b2b      	cmp	r3, #43	; 0x2b
 800eb5a:	d02c      	beq.n	800ebb6 <__gethex+0x13e>
 800eb5c:	2b2d      	cmp	r3, #45	; 0x2d
 800eb5e:	d02e      	beq.n	800ebbe <__gethex+0x146>
 800eb60:	1c71      	adds	r1, r6, #1
 800eb62:	f04f 0900 	mov.w	r9, #0
 800eb66:	7808      	ldrb	r0, [r1, #0]
 800eb68:	f7ff ff71 	bl	800ea4e <__hexdig_fun>
 800eb6c:	1e43      	subs	r3, r0, #1
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	2b18      	cmp	r3, #24
 800eb72:	d82c      	bhi.n	800ebce <__gethex+0x156>
 800eb74:	f1a0 0210 	sub.w	r2, r0, #16
 800eb78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb7c:	f7ff ff67 	bl	800ea4e <__hexdig_fun>
 800eb80:	1e43      	subs	r3, r0, #1
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2b18      	cmp	r3, #24
 800eb86:	d91d      	bls.n	800ebc4 <__gethex+0x14c>
 800eb88:	f1b9 0f00 	cmp.w	r9, #0
 800eb8c:	d000      	beq.n	800eb90 <__gethex+0x118>
 800eb8e:	4252      	negs	r2, r2
 800eb90:	4415      	add	r5, r2
 800eb92:	f8cb 1000 	str.w	r1, [fp]
 800eb96:	b1e4      	cbz	r4, 800ebd2 <__gethex+0x15a>
 800eb98:	9b00      	ldr	r3, [sp, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	bf14      	ite	ne
 800eb9e:	2700      	movne	r7, #0
 800eba0:	2706      	moveq	r7, #6
 800eba2:	4638      	mov	r0, r7
 800eba4:	b009      	add	sp, #36	; 0x24
 800eba6:	ecbd 8b02 	vpop	{d8}
 800ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebae:	463e      	mov	r6, r7
 800ebb0:	4625      	mov	r5, r4
 800ebb2:	2401      	movs	r4, #1
 800ebb4:	e7ca      	b.n	800eb4c <__gethex+0xd4>
 800ebb6:	f04f 0900 	mov.w	r9, #0
 800ebba:	1cb1      	adds	r1, r6, #2
 800ebbc:	e7d3      	b.n	800eb66 <__gethex+0xee>
 800ebbe:	f04f 0901 	mov.w	r9, #1
 800ebc2:	e7fa      	b.n	800ebba <__gethex+0x142>
 800ebc4:	230a      	movs	r3, #10
 800ebc6:	fb03 0202 	mla	r2, r3, r2, r0
 800ebca:	3a10      	subs	r2, #16
 800ebcc:	e7d4      	b.n	800eb78 <__gethex+0x100>
 800ebce:	4631      	mov	r1, r6
 800ebd0:	e7df      	b.n	800eb92 <__gethex+0x11a>
 800ebd2:	1bf3      	subs	r3, r6, r7
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	4621      	mov	r1, r4
 800ebd8:	2b07      	cmp	r3, #7
 800ebda:	dc0b      	bgt.n	800ebf4 <__gethex+0x17c>
 800ebdc:	ee18 0a10 	vmov	r0, s16
 800ebe0:	f000 fae6 	bl	800f1b0 <_Balloc>
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	b940      	cbnz	r0, 800ebfa <__gethex+0x182>
 800ebe8:	4b5d      	ldr	r3, [pc, #372]	; (800ed60 <__gethex+0x2e8>)
 800ebea:	4602      	mov	r2, r0
 800ebec:	21de      	movs	r1, #222	; 0xde
 800ebee:	485d      	ldr	r0, [pc, #372]	; (800ed64 <__gethex+0x2ec>)
 800ebf0:	f001 fbdc 	bl	80103ac <__assert_func>
 800ebf4:	3101      	adds	r1, #1
 800ebf6:	105b      	asrs	r3, r3, #1
 800ebf8:	e7ee      	b.n	800ebd8 <__gethex+0x160>
 800ebfa:	f100 0914 	add.w	r9, r0, #20
 800ebfe:	f04f 0b00 	mov.w	fp, #0
 800ec02:	f1ca 0301 	rsb	r3, sl, #1
 800ec06:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec0a:	f8cd b000 	str.w	fp, [sp]
 800ec0e:	9306      	str	r3, [sp, #24]
 800ec10:	42b7      	cmp	r7, r6
 800ec12:	d340      	bcc.n	800ec96 <__gethex+0x21e>
 800ec14:	9802      	ldr	r0, [sp, #8]
 800ec16:	9b00      	ldr	r3, [sp, #0]
 800ec18:	f840 3b04 	str.w	r3, [r0], #4
 800ec1c:	eba0 0009 	sub.w	r0, r0, r9
 800ec20:	1080      	asrs	r0, r0, #2
 800ec22:	0146      	lsls	r6, r0, #5
 800ec24:	6120      	str	r0, [r4, #16]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f000 fbb4 	bl	800f394 <__hi0bits>
 800ec2c:	1a30      	subs	r0, r6, r0
 800ec2e:	f8d8 6000 	ldr.w	r6, [r8]
 800ec32:	42b0      	cmp	r0, r6
 800ec34:	dd63      	ble.n	800ecfe <__gethex+0x286>
 800ec36:	1b87      	subs	r7, r0, r6
 800ec38:	4639      	mov	r1, r7
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f000 ff58 	bl	800faf0 <__any_on>
 800ec40:	4682      	mov	sl, r0
 800ec42:	b1a8      	cbz	r0, 800ec70 <__gethex+0x1f8>
 800ec44:	1e7b      	subs	r3, r7, #1
 800ec46:	1159      	asrs	r1, r3, #5
 800ec48:	f003 021f 	and.w	r2, r3, #31
 800ec4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ec50:	f04f 0a01 	mov.w	sl, #1
 800ec54:	fa0a f202 	lsl.w	r2, sl, r2
 800ec58:	420a      	tst	r2, r1
 800ec5a:	d009      	beq.n	800ec70 <__gethex+0x1f8>
 800ec5c:	4553      	cmp	r3, sl
 800ec5e:	dd05      	ble.n	800ec6c <__gethex+0x1f4>
 800ec60:	1eb9      	subs	r1, r7, #2
 800ec62:	4620      	mov	r0, r4
 800ec64:	f000 ff44 	bl	800faf0 <__any_on>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d145      	bne.n	800ecf8 <__gethex+0x280>
 800ec6c:	f04f 0a02 	mov.w	sl, #2
 800ec70:	4639      	mov	r1, r7
 800ec72:	4620      	mov	r0, r4
 800ec74:	f7ff fe99 	bl	800e9aa <rshift>
 800ec78:	443d      	add	r5, r7
 800ec7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec7e:	42ab      	cmp	r3, r5
 800ec80:	da4c      	bge.n	800ed1c <__gethex+0x2a4>
 800ec82:	ee18 0a10 	vmov	r0, s16
 800ec86:	4621      	mov	r1, r4
 800ec88:	f000 fad2 	bl	800f230 <_Bfree>
 800ec8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec8e:	2300      	movs	r3, #0
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	27a3      	movs	r7, #163	; 0xa3
 800ec94:	e785      	b.n	800eba2 <__gethex+0x12a>
 800ec96:	1e73      	subs	r3, r6, #1
 800ec98:	9a05      	ldr	r2, [sp, #20]
 800ec9a:	9303      	str	r3, [sp, #12]
 800ec9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d019      	beq.n	800ecd8 <__gethex+0x260>
 800eca4:	f1bb 0f20 	cmp.w	fp, #32
 800eca8:	d107      	bne.n	800ecba <__gethex+0x242>
 800ecaa:	9b02      	ldr	r3, [sp, #8]
 800ecac:	9a00      	ldr	r2, [sp, #0]
 800ecae:	f843 2b04 	str.w	r2, [r3], #4
 800ecb2:	9302      	str	r3, [sp, #8]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	469b      	mov	fp, r3
 800ecba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ecbe:	f7ff fec6 	bl	800ea4e <__hexdig_fun>
 800ecc2:	9b00      	ldr	r3, [sp, #0]
 800ecc4:	f000 000f 	and.w	r0, r0, #15
 800ecc8:	fa00 f00b 	lsl.w	r0, r0, fp
 800eccc:	4303      	orrs	r3, r0
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	f10b 0b04 	add.w	fp, fp, #4
 800ecd4:	9b03      	ldr	r3, [sp, #12]
 800ecd6:	e00d      	b.n	800ecf4 <__gethex+0x27c>
 800ecd8:	9b03      	ldr	r3, [sp, #12]
 800ecda:	9a06      	ldr	r2, [sp, #24]
 800ecdc:	4413      	add	r3, r2
 800ecde:	42bb      	cmp	r3, r7
 800ece0:	d3e0      	bcc.n	800eca4 <__gethex+0x22c>
 800ece2:	4618      	mov	r0, r3
 800ece4:	9901      	ldr	r1, [sp, #4]
 800ece6:	9307      	str	r3, [sp, #28]
 800ece8:	4652      	mov	r2, sl
 800ecea:	f001 fb2c 	bl	8010346 <strncmp>
 800ecee:	9b07      	ldr	r3, [sp, #28]
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d1d7      	bne.n	800eca4 <__gethex+0x22c>
 800ecf4:	461e      	mov	r6, r3
 800ecf6:	e78b      	b.n	800ec10 <__gethex+0x198>
 800ecf8:	f04f 0a03 	mov.w	sl, #3
 800ecfc:	e7b8      	b.n	800ec70 <__gethex+0x1f8>
 800ecfe:	da0a      	bge.n	800ed16 <__gethex+0x29e>
 800ed00:	1a37      	subs	r7, r6, r0
 800ed02:	4621      	mov	r1, r4
 800ed04:	ee18 0a10 	vmov	r0, s16
 800ed08:	463a      	mov	r2, r7
 800ed0a:	f000 fcad 	bl	800f668 <__lshift>
 800ed0e:	1bed      	subs	r5, r5, r7
 800ed10:	4604      	mov	r4, r0
 800ed12:	f100 0914 	add.w	r9, r0, #20
 800ed16:	f04f 0a00 	mov.w	sl, #0
 800ed1a:	e7ae      	b.n	800ec7a <__gethex+0x202>
 800ed1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ed20:	42a8      	cmp	r0, r5
 800ed22:	dd72      	ble.n	800ee0a <__gethex+0x392>
 800ed24:	1b45      	subs	r5, r0, r5
 800ed26:	42ae      	cmp	r6, r5
 800ed28:	dc36      	bgt.n	800ed98 <__gethex+0x320>
 800ed2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d02a      	beq.n	800ed88 <__gethex+0x310>
 800ed32:	2b03      	cmp	r3, #3
 800ed34:	d02c      	beq.n	800ed90 <__gethex+0x318>
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d11c      	bne.n	800ed74 <__gethex+0x2fc>
 800ed3a:	42ae      	cmp	r6, r5
 800ed3c:	d11a      	bne.n	800ed74 <__gethex+0x2fc>
 800ed3e:	2e01      	cmp	r6, #1
 800ed40:	d112      	bne.n	800ed68 <__gethex+0x2f0>
 800ed42:	9a04      	ldr	r2, [sp, #16]
 800ed44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed48:	6013      	str	r3, [r2, #0]
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	6123      	str	r3, [r4, #16]
 800ed4e:	f8c9 3000 	str.w	r3, [r9]
 800ed52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed54:	2762      	movs	r7, #98	; 0x62
 800ed56:	601c      	str	r4, [r3, #0]
 800ed58:	e723      	b.n	800eba2 <__gethex+0x12a>
 800ed5a:	bf00      	nop
 800ed5c:	08010a24 	.word	0x08010a24
 800ed60:	08010948 	.word	0x08010948
 800ed64:	080109bc 	.word	0x080109bc
 800ed68:	1e71      	subs	r1, r6, #1
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 fec0 	bl	800faf0 <__any_on>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d1e6      	bne.n	800ed42 <__gethex+0x2ca>
 800ed74:	ee18 0a10 	vmov	r0, s16
 800ed78:	4621      	mov	r1, r4
 800ed7a:	f000 fa59 	bl	800f230 <_Bfree>
 800ed7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed80:	2300      	movs	r3, #0
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	2750      	movs	r7, #80	; 0x50
 800ed86:	e70c      	b.n	800eba2 <__gethex+0x12a>
 800ed88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1f2      	bne.n	800ed74 <__gethex+0x2fc>
 800ed8e:	e7d8      	b.n	800ed42 <__gethex+0x2ca>
 800ed90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1d5      	bne.n	800ed42 <__gethex+0x2ca>
 800ed96:	e7ed      	b.n	800ed74 <__gethex+0x2fc>
 800ed98:	1e6f      	subs	r7, r5, #1
 800ed9a:	f1ba 0f00 	cmp.w	sl, #0
 800ed9e:	d131      	bne.n	800ee04 <__gethex+0x38c>
 800eda0:	b127      	cbz	r7, 800edac <__gethex+0x334>
 800eda2:	4639      	mov	r1, r7
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fea3 	bl	800faf0 <__any_on>
 800edaa:	4682      	mov	sl, r0
 800edac:	117b      	asrs	r3, r7, #5
 800edae:	2101      	movs	r1, #1
 800edb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800edb4:	f007 071f 	and.w	r7, r7, #31
 800edb8:	fa01 f707 	lsl.w	r7, r1, r7
 800edbc:	421f      	tst	r7, r3
 800edbe:	4629      	mov	r1, r5
 800edc0:	4620      	mov	r0, r4
 800edc2:	bf18      	it	ne
 800edc4:	f04a 0a02 	orrne.w	sl, sl, #2
 800edc8:	1b76      	subs	r6, r6, r5
 800edca:	f7ff fdee 	bl	800e9aa <rshift>
 800edce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800edd2:	2702      	movs	r7, #2
 800edd4:	f1ba 0f00 	cmp.w	sl, #0
 800edd8:	d048      	beq.n	800ee6c <__gethex+0x3f4>
 800edda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d015      	beq.n	800ee0e <__gethex+0x396>
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d017      	beq.n	800ee16 <__gethex+0x39e>
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d109      	bne.n	800edfe <__gethex+0x386>
 800edea:	f01a 0f02 	tst.w	sl, #2
 800edee:	d006      	beq.n	800edfe <__gethex+0x386>
 800edf0:	f8d9 0000 	ldr.w	r0, [r9]
 800edf4:	ea4a 0a00 	orr.w	sl, sl, r0
 800edf8:	f01a 0f01 	tst.w	sl, #1
 800edfc:	d10e      	bne.n	800ee1c <__gethex+0x3a4>
 800edfe:	f047 0710 	orr.w	r7, r7, #16
 800ee02:	e033      	b.n	800ee6c <__gethex+0x3f4>
 800ee04:	f04f 0a01 	mov.w	sl, #1
 800ee08:	e7d0      	b.n	800edac <__gethex+0x334>
 800ee0a:	2701      	movs	r7, #1
 800ee0c:	e7e2      	b.n	800edd4 <__gethex+0x35c>
 800ee0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee10:	f1c3 0301 	rsb	r3, r3, #1
 800ee14:	9315      	str	r3, [sp, #84]	; 0x54
 800ee16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d0f0      	beq.n	800edfe <__gethex+0x386>
 800ee1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee20:	f104 0314 	add.w	r3, r4, #20
 800ee24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee2c:	f04f 0c00 	mov.w	ip, #0
 800ee30:	4618      	mov	r0, r3
 800ee32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee36:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee3a:	d01c      	beq.n	800ee76 <__gethex+0x3fe>
 800ee3c:	3201      	adds	r2, #1
 800ee3e:	6002      	str	r2, [r0, #0]
 800ee40:	2f02      	cmp	r7, #2
 800ee42:	f104 0314 	add.w	r3, r4, #20
 800ee46:	d13f      	bne.n	800eec8 <__gethex+0x450>
 800ee48:	f8d8 2000 	ldr.w	r2, [r8]
 800ee4c:	3a01      	subs	r2, #1
 800ee4e:	42b2      	cmp	r2, r6
 800ee50:	d10a      	bne.n	800ee68 <__gethex+0x3f0>
 800ee52:	1171      	asrs	r1, r6, #5
 800ee54:	2201      	movs	r2, #1
 800ee56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee5a:	f006 061f 	and.w	r6, r6, #31
 800ee5e:	fa02 f606 	lsl.w	r6, r2, r6
 800ee62:	421e      	tst	r6, r3
 800ee64:	bf18      	it	ne
 800ee66:	4617      	movne	r7, r2
 800ee68:	f047 0720 	orr.w	r7, r7, #32
 800ee6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee6e:	601c      	str	r4, [r3, #0]
 800ee70:	9b04      	ldr	r3, [sp, #16]
 800ee72:	601d      	str	r5, [r3, #0]
 800ee74:	e695      	b.n	800eba2 <__gethex+0x12a>
 800ee76:	4299      	cmp	r1, r3
 800ee78:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee7c:	d8d8      	bhi.n	800ee30 <__gethex+0x3b8>
 800ee7e:	68a3      	ldr	r3, [r4, #8]
 800ee80:	459b      	cmp	fp, r3
 800ee82:	db19      	blt.n	800eeb8 <__gethex+0x440>
 800ee84:	6861      	ldr	r1, [r4, #4]
 800ee86:	ee18 0a10 	vmov	r0, s16
 800ee8a:	3101      	adds	r1, #1
 800ee8c:	f000 f990 	bl	800f1b0 <_Balloc>
 800ee90:	4681      	mov	r9, r0
 800ee92:	b918      	cbnz	r0, 800ee9c <__gethex+0x424>
 800ee94:	4b1a      	ldr	r3, [pc, #104]	; (800ef00 <__gethex+0x488>)
 800ee96:	4602      	mov	r2, r0
 800ee98:	2184      	movs	r1, #132	; 0x84
 800ee9a:	e6a8      	b.n	800ebee <__gethex+0x176>
 800ee9c:	6922      	ldr	r2, [r4, #16]
 800ee9e:	3202      	adds	r2, #2
 800eea0:	f104 010c 	add.w	r1, r4, #12
 800eea4:	0092      	lsls	r2, r2, #2
 800eea6:	300c      	adds	r0, #12
 800eea8:	f000 f974 	bl	800f194 <memcpy>
 800eeac:	4621      	mov	r1, r4
 800eeae:	ee18 0a10 	vmov	r0, s16
 800eeb2:	f000 f9bd 	bl	800f230 <_Bfree>
 800eeb6:	464c      	mov	r4, r9
 800eeb8:	6923      	ldr	r3, [r4, #16]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eec0:	6122      	str	r2, [r4, #16]
 800eec2:	2201      	movs	r2, #1
 800eec4:	615a      	str	r2, [r3, #20]
 800eec6:	e7bb      	b.n	800ee40 <__gethex+0x3c8>
 800eec8:	6922      	ldr	r2, [r4, #16]
 800eeca:	455a      	cmp	r2, fp
 800eecc:	dd0b      	ble.n	800eee6 <__gethex+0x46e>
 800eece:	2101      	movs	r1, #1
 800eed0:	4620      	mov	r0, r4
 800eed2:	f7ff fd6a 	bl	800e9aa <rshift>
 800eed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeda:	3501      	adds	r5, #1
 800eedc:	42ab      	cmp	r3, r5
 800eede:	f6ff aed0 	blt.w	800ec82 <__gethex+0x20a>
 800eee2:	2701      	movs	r7, #1
 800eee4:	e7c0      	b.n	800ee68 <__gethex+0x3f0>
 800eee6:	f016 061f 	ands.w	r6, r6, #31
 800eeea:	d0fa      	beq.n	800eee2 <__gethex+0x46a>
 800eeec:	4453      	add	r3, sl
 800eeee:	f1c6 0620 	rsb	r6, r6, #32
 800eef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eef6:	f000 fa4d 	bl	800f394 <__hi0bits>
 800eefa:	42b0      	cmp	r0, r6
 800eefc:	dbe7      	blt.n	800eece <__gethex+0x456>
 800eefe:	e7f0      	b.n	800eee2 <__gethex+0x46a>
 800ef00:	08010948 	.word	0x08010948

0800ef04 <L_shift>:
 800ef04:	f1c2 0208 	rsb	r2, r2, #8
 800ef08:	0092      	lsls	r2, r2, #2
 800ef0a:	b570      	push	{r4, r5, r6, lr}
 800ef0c:	f1c2 0620 	rsb	r6, r2, #32
 800ef10:	6843      	ldr	r3, [r0, #4]
 800ef12:	6804      	ldr	r4, [r0, #0]
 800ef14:	fa03 f506 	lsl.w	r5, r3, r6
 800ef18:	432c      	orrs	r4, r5
 800ef1a:	40d3      	lsrs	r3, r2
 800ef1c:	6004      	str	r4, [r0, #0]
 800ef1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef22:	4288      	cmp	r0, r1
 800ef24:	d3f4      	bcc.n	800ef10 <L_shift+0xc>
 800ef26:	bd70      	pop	{r4, r5, r6, pc}

0800ef28 <__match>:
 800ef28:	b530      	push	{r4, r5, lr}
 800ef2a:	6803      	ldr	r3, [r0, #0]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef32:	b914      	cbnz	r4, 800ef3a <__match+0x12>
 800ef34:	6003      	str	r3, [r0, #0]
 800ef36:	2001      	movs	r0, #1
 800ef38:	bd30      	pop	{r4, r5, pc}
 800ef3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ef42:	2d19      	cmp	r5, #25
 800ef44:	bf98      	it	ls
 800ef46:	3220      	addls	r2, #32
 800ef48:	42a2      	cmp	r2, r4
 800ef4a:	d0f0      	beq.n	800ef2e <__match+0x6>
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	e7f3      	b.n	800ef38 <__match+0x10>

0800ef50 <__hexnan>:
 800ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	680b      	ldr	r3, [r1, #0]
 800ef56:	115e      	asrs	r6, r3, #5
 800ef58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef5c:	f013 031f 	ands.w	r3, r3, #31
 800ef60:	b087      	sub	sp, #28
 800ef62:	bf18      	it	ne
 800ef64:	3604      	addne	r6, #4
 800ef66:	2500      	movs	r5, #0
 800ef68:	1f37      	subs	r7, r6, #4
 800ef6a:	4690      	mov	r8, r2
 800ef6c:	6802      	ldr	r2, [r0, #0]
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	4682      	mov	sl, r0
 800ef72:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef76:	46b9      	mov	r9, r7
 800ef78:	463c      	mov	r4, r7
 800ef7a:	9502      	str	r5, [sp, #8]
 800ef7c:	46ab      	mov	fp, r5
 800ef7e:	7851      	ldrb	r1, [r2, #1]
 800ef80:	1c53      	adds	r3, r2, #1
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	b341      	cbz	r1, 800efd8 <__hexnan+0x88>
 800ef86:	4608      	mov	r0, r1
 800ef88:	9205      	str	r2, [sp, #20]
 800ef8a:	9104      	str	r1, [sp, #16]
 800ef8c:	f7ff fd5f 	bl	800ea4e <__hexdig_fun>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d14f      	bne.n	800f034 <__hexnan+0xe4>
 800ef94:	9904      	ldr	r1, [sp, #16]
 800ef96:	9a05      	ldr	r2, [sp, #20]
 800ef98:	2920      	cmp	r1, #32
 800ef9a:	d818      	bhi.n	800efce <__hexnan+0x7e>
 800ef9c:	9b02      	ldr	r3, [sp, #8]
 800ef9e:	459b      	cmp	fp, r3
 800efa0:	dd13      	ble.n	800efca <__hexnan+0x7a>
 800efa2:	454c      	cmp	r4, r9
 800efa4:	d206      	bcs.n	800efb4 <__hexnan+0x64>
 800efa6:	2d07      	cmp	r5, #7
 800efa8:	dc04      	bgt.n	800efb4 <__hexnan+0x64>
 800efaa:	462a      	mov	r2, r5
 800efac:	4649      	mov	r1, r9
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff ffa8 	bl	800ef04 <L_shift>
 800efb4:	4544      	cmp	r4, r8
 800efb6:	d950      	bls.n	800f05a <__hexnan+0x10a>
 800efb8:	2300      	movs	r3, #0
 800efba:	f1a4 0904 	sub.w	r9, r4, #4
 800efbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800efc2:	f8cd b008 	str.w	fp, [sp, #8]
 800efc6:	464c      	mov	r4, r9
 800efc8:	461d      	mov	r5, r3
 800efca:	9a03      	ldr	r2, [sp, #12]
 800efcc:	e7d7      	b.n	800ef7e <__hexnan+0x2e>
 800efce:	2929      	cmp	r1, #41	; 0x29
 800efd0:	d156      	bne.n	800f080 <__hexnan+0x130>
 800efd2:	3202      	adds	r2, #2
 800efd4:	f8ca 2000 	str.w	r2, [sl]
 800efd8:	f1bb 0f00 	cmp.w	fp, #0
 800efdc:	d050      	beq.n	800f080 <__hexnan+0x130>
 800efde:	454c      	cmp	r4, r9
 800efe0:	d206      	bcs.n	800eff0 <__hexnan+0xa0>
 800efe2:	2d07      	cmp	r5, #7
 800efe4:	dc04      	bgt.n	800eff0 <__hexnan+0xa0>
 800efe6:	462a      	mov	r2, r5
 800efe8:	4649      	mov	r1, r9
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff ff8a 	bl	800ef04 <L_shift>
 800eff0:	4544      	cmp	r4, r8
 800eff2:	d934      	bls.n	800f05e <__hexnan+0x10e>
 800eff4:	f1a8 0204 	sub.w	r2, r8, #4
 800eff8:	4623      	mov	r3, r4
 800effa:	f853 1b04 	ldr.w	r1, [r3], #4
 800effe:	f842 1f04 	str.w	r1, [r2, #4]!
 800f002:	429f      	cmp	r7, r3
 800f004:	d2f9      	bcs.n	800effa <__hexnan+0xaa>
 800f006:	1b3b      	subs	r3, r7, r4
 800f008:	f023 0303 	bic.w	r3, r3, #3
 800f00c:	3304      	adds	r3, #4
 800f00e:	3401      	adds	r4, #1
 800f010:	3e03      	subs	r6, #3
 800f012:	42b4      	cmp	r4, r6
 800f014:	bf88      	it	hi
 800f016:	2304      	movhi	r3, #4
 800f018:	4443      	add	r3, r8
 800f01a:	2200      	movs	r2, #0
 800f01c:	f843 2b04 	str.w	r2, [r3], #4
 800f020:	429f      	cmp	r7, r3
 800f022:	d2fb      	bcs.n	800f01c <__hexnan+0xcc>
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	b91b      	cbnz	r3, 800f030 <__hexnan+0xe0>
 800f028:	4547      	cmp	r7, r8
 800f02a:	d127      	bne.n	800f07c <__hexnan+0x12c>
 800f02c:	2301      	movs	r3, #1
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	2005      	movs	r0, #5
 800f032:	e026      	b.n	800f082 <__hexnan+0x132>
 800f034:	3501      	adds	r5, #1
 800f036:	2d08      	cmp	r5, #8
 800f038:	f10b 0b01 	add.w	fp, fp, #1
 800f03c:	dd06      	ble.n	800f04c <__hexnan+0xfc>
 800f03e:	4544      	cmp	r4, r8
 800f040:	d9c3      	bls.n	800efca <__hexnan+0x7a>
 800f042:	2300      	movs	r3, #0
 800f044:	f844 3c04 	str.w	r3, [r4, #-4]
 800f048:	2501      	movs	r5, #1
 800f04a:	3c04      	subs	r4, #4
 800f04c:	6822      	ldr	r2, [r4, #0]
 800f04e:	f000 000f 	and.w	r0, r0, #15
 800f052:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f056:	6022      	str	r2, [r4, #0]
 800f058:	e7b7      	b.n	800efca <__hexnan+0x7a>
 800f05a:	2508      	movs	r5, #8
 800f05c:	e7b5      	b.n	800efca <__hexnan+0x7a>
 800f05e:	9b01      	ldr	r3, [sp, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d0df      	beq.n	800f024 <__hexnan+0xd4>
 800f064:	f04f 32ff 	mov.w	r2, #4294967295
 800f068:	f1c3 0320 	rsb	r3, r3, #32
 800f06c:	fa22 f303 	lsr.w	r3, r2, r3
 800f070:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f074:	401a      	ands	r2, r3
 800f076:	f846 2c04 	str.w	r2, [r6, #-4]
 800f07a:	e7d3      	b.n	800f024 <__hexnan+0xd4>
 800f07c:	3f04      	subs	r7, #4
 800f07e:	e7d1      	b.n	800f024 <__hexnan+0xd4>
 800f080:	2004      	movs	r0, #4
 800f082:	b007      	add	sp, #28
 800f084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f088 <_localeconv_r>:
 800f088:	4800      	ldr	r0, [pc, #0]	; (800f08c <_localeconv_r+0x4>)
 800f08a:	4770      	bx	lr
 800f08c:	20000258 	.word	0x20000258

0800f090 <__retarget_lock_init_recursive>:
 800f090:	4770      	bx	lr

0800f092 <__retarget_lock_acquire_recursive>:
 800f092:	4770      	bx	lr

0800f094 <__retarget_lock_release_recursive>:
 800f094:	4770      	bx	lr

0800f096 <__swhatbuf_r>:
 800f096:	b570      	push	{r4, r5, r6, lr}
 800f098:	460e      	mov	r6, r1
 800f09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f09e:	2900      	cmp	r1, #0
 800f0a0:	b096      	sub	sp, #88	; 0x58
 800f0a2:	4614      	mov	r4, r2
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	da08      	bge.n	800f0ba <__swhatbuf_r+0x24>
 800f0a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	602a      	str	r2, [r5, #0]
 800f0b0:	061a      	lsls	r2, r3, #24
 800f0b2:	d410      	bmi.n	800f0d6 <__swhatbuf_r+0x40>
 800f0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0b8:	e00e      	b.n	800f0d8 <__swhatbuf_r+0x42>
 800f0ba:	466a      	mov	r2, sp
 800f0bc:	f001 f9b6 	bl	801042c <_fstat_r>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	dbf1      	blt.n	800f0a8 <__swhatbuf_r+0x12>
 800f0c4:	9a01      	ldr	r2, [sp, #4]
 800f0c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0ce:	425a      	negs	r2, r3
 800f0d0:	415a      	adcs	r2, r3
 800f0d2:	602a      	str	r2, [r5, #0]
 800f0d4:	e7ee      	b.n	800f0b4 <__swhatbuf_r+0x1e>
 800f0d6:	2340      	movs	r3, #64	; 0x40
 800f0d8:	2000      	movs	r0, #0
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	b016      	add	sp, #88	; 0x58
 800f0de:	bd70      	pop	{r4, r5, r6, pc}

0800f0e0 <__smakebuf_r>:
 800f0e0:	898b      	ldrh	r3, [r1, #12]
 800f0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0e4:	079d      	lsls	r5, r3, #30
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	d507      	bpl.n	800f0fc <__smakebuf_r+0x1c>
 800f0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	6123      	str	r3, [r4, #16]
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	6163      	str	r3, [r4, #20]
 800f0f8:	b002      	add	sp, #8
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	ab01      	add	r3, sp, #4
 800f0fe:	466a      	mov	r2, sp
 800f100:	f7ff ffc9 	bl	800f096 <__swhatbuf_r>
 800f104:	9900      	ldr	r1, [sp, #0]
 800f106:	4605      	mov	r5, r0
 800f108:	4630      	mov	r0, r6
 800f10a:	f000 fd95 	bl	800fc38 <_malloc_r>
 800f10e:	b948      	cbnz	r0, 800f124 <__smakebuf_r+0x44>
 800f110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f114:	059a      	lsls	r2, r3, #22
 800f116:	d4ef      	bmi.n	800f0f8 <__smakebuf_r+0x18>
 800f118:	f023 0303 	bic.w	r3, r3, #3
 800f11c:	f043 0302 	orr.w	r3, r3, #2
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	e7e3      	b.n	800f0ec <__smakebuf_r+0xc>
 800f124:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <__smakebuf_r+0x7c>)
 800f126:	62b3      	str	r3, [r6, #40]	; 0x28
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	6020      	str	r0, [r4, #0]
 800f12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f130:	81a3      	strh	r3, [r4, #12]
 800f132:	9b00      	ldr	r3, [sp, #0]
 800f134:	6163      	str	r3, [r4, #20]
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	6120      	str	r0, [r4, #16]
 800f13a:	b15b      	cbz	r3, 800f154 <__smakebuf_r+0x74>
 800f13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f140:	4630      	mov	r0, r6
 800f142:	f001 f985 	bl	8010450 <_isatty_r>
 800f146:	b128      	cbz	r0, 800f154 <__smakebuf_r+0x74>
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	f023 0303 	bic.w	r3, r3, #3
 800f14e:	f043 0301 	orr.w	r3, r3, #1
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	89a0      	ldrh	r0, [r4, #12]
 800f156:	4305      	orrs	r5, r0
 800f158:	81a5      	strh	r5, [r4, #12]
 800f15a:	e7cd      	b.n	800f0f8 <__smakebuf_r+0x18>
 800f15c:	0800e809 	.word	0x0800e809

0800f160 <malloc>:
 800f160:	4b02      	ldr	r3, [pc, #8]	; (800f16c <malloc+0xc>)
 800f162:	4601      	mov	r1, r0
 800f164:	6818      	ldr	r0, [r3, #0]
 800f166:	f000 bd67 	b.w	800fc38 <_malloc_r>
 800f16a:	bf00      	nop
 800f16c:	20000100 	.word	0x20000100

0800f170 <__ascii_mbtowc>:
 800f170:	b082      	sub	sp, #8
 800f172:	b901      	cbnz	r1, 800f176 <__ascii_mbtowc+0x6>
 800f174:	a901      	add	r1, sp, #4
 800f176:	b142      	cbz	r2, 800f18a <__ascii_mbtowc+0x1a>
 800f178:	b14b      	cbz	r3, 800f18e <__ascii_mbtowc+0x1e>
 800f17a:	7813      	ldrb	r3, [r2, #0]
 800f17c:	600b      	str	r3, [r1, #0]
 800f17e:	7812      	ldrb	r2, [r2, #0]
 800f180:	1e10      	subs	r0, r2, #0
 800f182:	bf18      	it	ne
 800f184:	2001      	movne	r0, #1
 800f186:	b002      	add	sp, #8
 800f188:	4770      	bx	lr
 800f18a:	4610      	mov	r0, r2
 800f18c:	e7fb      	b.n	800f186 <__ascii_mbtowc+0x16>
 800f18e:	f06f 0001 	mvn.w	r0, #1
 800f192:	e7f8      	b.n	800f186 <__ascii_mbtowc+0x16>

0800f194 <memcpy>:
 800f194:	440a      	add	r2, r1
 800f196:	4291      	cmp	r1, r2
 800f198:	f100 33ff 	add.w	r3, r0, #4294967295
 800f19c:	d100      	bne.n	800f1a0 <memcpy+0xc>
 800f19e:	4770      	bx	lr
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1aa:	4291      	cmp	r1, r2
 800f1ac:	d1f9      	bne.n	800f1a2 <memcpy+0xe>
 800f1ae:	bd10      	pop	{r4, pc}

0800f1b0 <_Balloc>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	460d      	mov	r5, r1
 800f1b8:	b976      	cbnz	r6, 800f1d8 <_Balloc+0x28>
 800f1ba:	2010      	movs	r0, #16
 800f1bc:	f7ff ffd0 	bl	800f160 <malloc>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	6260      	str	r0, [r4, #36]	; 0x24
 800f1c4:	b920      	cbnz	r0, 800f1d0 <_Balloc+0x20>
 800f1c6:	4b18      	ldr	r3, [pc, #96]	; (800f228 <_Balloc+0x78>)
 800f1c8:	4818      	ldr	r0, [pc, #96]	; (800f22c <_Balloc+0x7c>)
 800f1ca:	2166      	movs	r1, #102	; 0x66
 800f1cc:	f001 f8ee 	bl	80103ac <__assert_func>
 800f1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1d4:	6006      	str	r6, [r0, #0]
 800f1d6:	60c6      	str	r6, [r0, #12]
 800f1d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f1da:	68f3      	ldr	r3, [r6, #12]
 800f1dc:	b183      	cbz	r3, 800f200 <_Balloc+0x50>
 800f1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1e6:	b9b8      	cbnz	r0, 800f218 <_Balloc+0x68>
 800f1e8:	2101      	movs	r1, #1
 800f1ea:	fa01 f605 	lsl.w	r6, r1, r5
 800f1ee:	1d72      	adds	r2, r6, #5
 800f1f0:	0092      	lsls	r2, r2, #2
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 fc9d 	bl	800fb32 <_calloc_r>
 800f1f8:	b160      	cbz	r0, 800f214 <_Balloc+0x64>
 800f1fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1fe:	e00e      	b.n	800f21e <_Balloc+0x6e>
 800f200:	2221      	movs	r2, #33	; 0x21
 800f202:	2104      	movs	r1, #4
 800f204:	4620      	mov	r0, r4
 800f206:	f000 fc94 	bl	800fb32 <_calloc_r>
 800f20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f20c:	60f0      	str	r0, [r6, #12]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1e4      	bne.n	800f1de <_Balloc+0x2e>
 800f214:	2000      	movs	r0, #0
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	6802      	ldr	r2, [r0, #0]
 800f21a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f21e:	2300      	movs	r3, #0
 800f220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f224:	e7f7      	b.n	800f216 <_Balloc+0x66>
 800f226:	bf00      	nop
 800f228:	080108d6 	.word	0x080108d6
 800f22c:	08010a38 	.word	0x08010a38

0800f230 <_Bfree>:
 800f230:	b570      	push	{r4, r5, r6, lr}
 800f232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f234:	4605      	mov	r5, r0
 800f236:	460c      	mov	r4, r1
 800f238:	b976      	cbnz	r6, 800f258 <_Bfree+0x28>
 800f23a:	2010      	movs	r0, #16
 800f23c:	f7ff ff90 	bl	800f160 <malloc>
 800f240:	4602      	mov	r2, r0
 800f242:	6268      	str	r0, [r5, #36]	; 0x24
 800f244:	b920      	cbnz	r0, 800f250 <_Bfree+0x20>
 800f246:	4b09      	ldr	r3, [pc, #36]	; (800f26c <_Bfree+0x3c>)
 800f248:	4809      	ldr	r0, [pc, #36]	; (800f270 <_Bfree+0x40>)
 800f24a:	218a      	movs	r1, #138	; 0x8a
 800f24c:	f001 f8ae 	bl	80103ac <__assert_func>
 800f250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f254:	6006      	str	r6, [r0, #0]
 800f256:	60c6      	str	r6, [r0, #12]
 800f258:	b13c      	cbz	r4, 800f26a <_Bfree+0x3a>
 800f25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f25c:	6862      	ldr	r2, [r4, #4]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f264:	6021      	str	r1, [r4, #0]
 800f266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f26a:	bd70      	pop	{r4, r5, r6, pc}
 800f26c:	080108d6 	.word	0x080108d6
 800f270:	08010a38 	.word	0x08010a38

0800f274 <__multadd>:
 800f274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f278:	690d      	ldr	r5, [r1, #16]
 800f27a:	4607      	mov	r7, r0
 800f27c:	460c      	mov	r4, r1
 800f27e:	461e      	mov	r6, r3
 800f280:	f101 0c14 	add.w	ip, r1, #20
 800f284:	2000      	movs	r0, #0
 800f286:	f8dc 3000 	ldr.w	r3, [ip]
 800f28a:	b299      	uxth	r1, r3
 800f28c:	fb02 6101 	mla	r1, r2, r1, r6
 800f290:	0c1e      	lsrs	r6, r3, #16
 800f292:	0c0b      	lsrs	r3, r1, #16
 800f294:	fb02 3306 	mla	r3, r2, r6, r3
 800f298:	b289      	uxth	r1, r1
 800f29a:	3001      	adds	r0, #1
 800f29c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f2a0:	4285      	cmp	r5, r0
 800f2a2:	f84c 1b04 	str.w	r1, [ip], #4
 800f2a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2aa:	dcec      	bgt.n	800f286 <__multadd+0x12>
 800f2ac:	b30e      	cbz	r6, 800f2f2 <__multadd+0x7e>
 800f2ae:	68a3      	ldr	r3, [r4, #8]
 800f2b0:	42ab      	cmp	r3, r5
 800f2b2:	dc19      	bgt.n	800f2e8 <__multadd+0x74>
 800f2b4:	6861      	ldr	r1, [r4, #4]
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	3101      	adds	r1, #1
 800f2ba:	f7ff ff79 	bl	800f1b0 <_Balloc>
 800f2be:	4680      	mov	r8, r0
 800f2c0:	b928      	cbnz	r0, 800f2ce <__multadd+0x5a>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	4b0c      	ldr	r3, [pc, #48]	; (800f2f8 <__multadd+0x84>)
 800f2c6:	480d      	ldr	r0, [pc, #52]	; (800f2fc <__multadd+0x88>)
 800f2c8:	21b5      	movs	r1, #181	; 0xb5
 800f2ca:	f001 f86f 	bl	80103ac <__assert_func>
 800f2ce:	6922      	ldr	r2, [r4, #16]
 800f2d0:	3202      	adds	r2, #2
 800f2d2:	f104 010c 	add.w	r1, r4, #12
 800f2d6:	0092      	lsls	r2, r2, #2
 800f2d8:	300c      	adds	r0, #12
 800f2da:	f7ff ff5b 	bl	800f194 <memcpy>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	f7ff ffa5 	bl	800f230 <_Bfree>
 800f2e6:	4644      	mov	r4, r8
 800f2e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2ec:	3501      	adds	r5, #1
 800f2ee:	615e      	str	r6, [r3, #20]
 800f2f0:	6125      	str	r5, [r4, #16]
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f8:	08010948 	.word	0x08010948
 800f2fc:	08010a38 	.word	0x08010a38

0800f300 <__s2b>:
 800f300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f304:	460c      	mov	r4, r1
 800f306:	4615      	mov	r5, r2
 800f308:	461f      	mov	r7, r3
 800f30a:	2209      	movs	r2, #9
 800f30c:	3308      	adds	r3, #8
 800f30e:	4606      	mov	r6, r0
 800f310:	fb93 f3f2 	sdiv	r3, r3, r2
 800f314:	2100      	movs	r1, #0
 800f316:	2201      	movs	r2, #1
 800f318:	429a      	cmp	r2, r3
 800f31a:	db09      	blt.n	800f330 <__s2b+0x30>
 800f31c:	4630      	mov	r0, r6
 800f31e:	f7ff ff47 	bl	800f1b0 <_Balloc>
 800f322:	b940      	cbnz	r0, 800f336 <__s2b+0x36>
 800f324:	4602      	mov	r2, r0
 800f326:	4b19      	ldr	r3, [pc, #100]	; (800f38c <__s2b+0x8c>)
 800f328:	4819      	ldr	r0, [pc, #100]	; (800f390 <__s2b+0x90>)
 800f32a:	21ce      	movs	r1, #206	; 0xce
 800f32c:	f001 f83e 	bl	80103ac <__assert_func>
 800f330:	0052      	lsls	r2, r2, #1
 800f332:	3101      	adds	r1, #1
 800f334:	e7f0      	b.n	800f318 <__s2b+0x18>
 800f336:	9b08      	ldr	r3, [sp, #32]
 800f338:	6143      	str	r3, [r0, #20]
 800f33a:	2d09      	cmp	r5, #9
 800f33c:	f04f 0301 	mov.w	r3, #1
 800f340:	6103      	str	r3, [r0, #16]
 800f342:	dd16      	ble.n	800f372 <__s2b+0x72>
 800f344:	f104 0909 	add.w	r9, r4, #9
 800f348:	46c8      	mov	r8, r9
 800f34a:	442c      	add	r4, r5
 800f34c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f350:	4601      	mov	r1, r0
 800f352:	3b30      	subs	r3, #48	; 0x30
 800f354:	220a      	movs	r2, #10
 800f356:	4630      	mov	r0, r6
 800f358:	f7ff ff8c 	bl	800f274 <__multadd>
 800f35c:	45a0      	cmp	r8, r4
 800f35e:	d1f5      	bne.n	800f34c <__s2b+0x4c>
 800f360:	f1a5 0408 	sub.w	r4, r5, #8
 800f364:	444c      	add	r4, r9
 800f366:	1b2d      	subs	r5, r5, r4
 800f368:	1963      	adds	r3, r4, r5
 800f36a:	42bb      	cmp	r3, r7
 800f36c:	db04      	blt.n	800f378 <__s2b+0x78>
 800f36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f372:	340a      	adds	r4, #10
 800f374:	2509      	movs	r5, #9
 800f376:	e7f6      	b.n	800f366 <__s2b+0x66>
 800f378:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f37c:	4601      	mov	r1, r0
 800f37e:	3b30      	subs	r3, #48	; 0x30
 800f380:	220a      	movs	r2, #10
 800f382:	4630      	mov	r0, r6
 800f384:	f7ff ff76 	bl	800f274 <__multadd>
 800f388:	e7ee      	b.n	800f368 <__s2b+0x68>
 800f38a:	bf00      	nop
 800f38c:	08010948 	.word	0x08010948
 800f390:	08010a38 	.word	0x08010a38

0800f394 <__hi0bits>:
 800f394:	0c03      	lsrs	r3, r0, #16
 800f396:	041b      	lsls	r3, r3, #16
 800f398:	b9d3      	cbnz	r3, 800f3d0 <__hi0bits+0x3c>
 800f39a:	0400      	lsls	r0, r0, #16
 800f39c:	2310      	movs	r3, #16
 800f39e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f3a2:	bf04      	itt	eq
 800f3a4:	0200      	lsleq	r0, r0, #8
 800f3a6:	3308      	addeq	r3, #8
 800f3a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f3ac:	bf04      	itt	eq
 800f3ae:	0100      	lsleq	r0, r0, #4
 800f3b0:	3304      	addeq	r3, #4
 800f3b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3b6:	bf04      	itt	eq
 800f3b8:	0080      	lsleq	r0, r0, #2
 800f3ba:	3302      	addeq	r3, #2
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	db05      	blt.n	800f3cc <__hi0bits+0x38>
 800f3c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3c4:	f103 0301 	add.w	r3, r3, #1
 800f3c8:	bf08      	it	eq
 800f3ca:	2320      	moveq	r3, #32
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	4770      	bx	lr
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	e7e4      	b.n	800f39e <__hi0bits+0xa>

0800f3d4 <__lo0bits>:
 800f3d4:	6803      	ldr	r3, [r0, #0]
 800f3d6:	f013 0207 	ands.w	r2, r3, #7
 800f3da:	4601      	mov	r1, r0
 800f3dc:	d00b      	beq.n	800f3f6 <__lo0bits+0x22>
 800f3de:	07da      	lsls	r2, r3, #31
 800f3e0:	d423      	bmi.n	800f42a <__lo0bits+0x56>
 800f3e2:	0798      	lsls	r0, r3, #30
 800f3e4:	bf49      	itett	mi
 800f3e6:	085b      	lsrmi	r3, r3, #1
 800f3e8:	089b      	lsrpl	r3, r3, #2
 800f3ea:	2001      	movmi	r0, #1
 800f3ec:	600b      	strmi	r3, [r1, #0]
 800f3ee:	bf5c      	itt	pl
 800f3f0:	600b      	strpl	r3, [r1, #0]
 800f3f2:	2002      	movpl	r0, #2
 800f3f4:	4770      	bx	lr
 800f3f6:	b298      	uxth	r0, r3
 800f3f8:	b9a8      	cbnz	r0, 800f426 <__lo0bits+0x52>
 800f3fa:	0c1b      	lsrs	r3, r3, #16
 800f3fc:	2010      	movs	r0, #16
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	b90a      	cbnz	r2, 800f406 <__lo0bits+0x32>
 800f402:	3008      	adds	r0, #8
 800f404:	0a1b      	lsrs	r3, r3, #8
 800f406:	071a      	lsls	r2, r3, #28
 800f408:	bf04      	itt	eq
 800f40a:	091b      	lsreq	r3, r3, #4
 800f40c:	3004      	addeq	r0, #4
 800f40e:	079a      	lsls	r2, r3, #30
 800f410:	bf04      	itt	eq
 800f412:	089b      	lsreq	r3, r3, #2
 800f414:	3002      	addeq	r0, #2
 800f416:	07da      	lsls	r2, r3, #31
 800f418:	d403      	bmi.n	800f422 <__lo0bits+0x4e>
 800f41a:	085b      	lsrs	r3, r3, #1
 800f41c:	f100 0001 	add.w	r0, r0, #1
 800f420:	d005      	beq.n	800f42e <__lo0bits+0x5a>
 800f422:	600b      	str	r3, [r1, #0]
 800f424:	4770      	bx	lr
 800f426:	4610      	mov	r0, r2
 800f428:	e7e9      	b.n	800f3fe <__lo0bits+0x2a>
 800f42a:	2000      	movs	r0, #0
 800f42c:	4770      	bx	lr
 800f42e:	2020      	movs	r0, #32
 800f430:	4770      	bx	lr
	...

0800f434 <__i2b>:
 800f434:	b510      	push	{r4, lr}
 800f436:	460c      	mov	r4, r1
 800f438:	2101      	movs	r1, #1
 800f43a:	f7ff feb9 	bl	800f1b0 <_Balloc>
 800f43e:	4602      	mov	r2, r0
 800f440:	b928      	cbnz	r0, 800f44e <__i2b+0x1a>
 800f442:	4b05      	ldr	r3, [pc, #20]	; (800f458 <__i2b+0x24>)
 800f444:	4805      	ldr	r0, [pc, #20]	; (800f45c <__i2b+0x28>)
 800f446:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f44a:	f000 ffaf 	bl	80103ac <__assert_func>
 800f44e:	2301      	movs	r3, #1
 800f450:	6144      	str	r4, [r0, #20]
 800f452:	6103      	str	r3, [r0, #16]
 800f454:	bd10      	pop	{r4, pc}
 800f456:	bf00      	nop
 800f458:	08010948 	.word	0x08010948
 800f45c:	08010a38 	.word	0x08010a38

0800f460 <__multiply>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	4691      	mov	r9, r2
 800f466:	690a      	ldr	r2, [r1, #16]
 800f468:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	bfb8      	it	lt
 800f470:	460b      	movlt	r3, r1
 800f472:	460c      	mov	r4, r1
 800f474:	bfbc      	itt	lt
 800f476:	464c      	movlt	r4, r9
 800f478:	4699      	movlt	r9, r3
 800f47a:	6927      	ldr	r7, [r4, #16]
 800f47c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f480:	68a3      	ldr	r3, [r4, #8]
 800f482:	6861      	ldr	r1, [r4, #4]
 800f484:	eb07 060a 	add.w	r6, r7, sl
 800f488:	42b3      	cmp	r3, r6
 800f48a:	b085      	sub	sp, #20
 800f48c:	bfb8      	it	lt
 800f48e:	3101      	addlt	r1, #1
 800f490:	f7ff fe8e 	bl	800f1b0 <_Balloc>
 800f494:	b930      	cbnz	r0, 800f4a4 <__multiply+0x44>
 800f496:	4602      	mov	r2, r0
 800f498:	4b44      	ldr	r3, [pc, #272]	; (800f5ac <__multiply+0x14c>)
 800f49a:	4845      	ldr	r0, [pc, #276]	; (800f5b0 <__multiply+0x150>)
 800f49c:	f240 115d 	movw	r1, #349	; 0x15d
 800f4a0:	f000 ff84 	bl	80103ac <__assert_func>
 800f4a4:	f100 0514 	add.w	r5, r0, #20
 800f4a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4ac:	462b      	mov	r3, r5
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	4543      	cmp	r3, r8
 800f4b2:	d321      	bcc.n	800f4f8 <__multiply+0x98>
 800f4b4:	f104 0314 	add.w	r3, r4, #20
 800f4b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f4bc:	f109 0314 	add.w	r3, r9, #20
 800f4c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f4c4:	9202      	str	r2, [sp, #8]
 800f4c6:	1b3a      	subs	r2, r7, r4
 800f4c8:	3a15      	subs	r2, #21
 800f4ca:	f022 0203 	bic.w	r2, r2, #3
 800f4ce:	3204      	adds	r2, #4
 800f4d0:	f104 0115 	add.w	r1, r4, #21
 800f4d4:	428f      	cmp	r7, r1
 800f4d6:	bf38      	it	cc
 800f4d8:	2204      	movcc	r2, #4
 800f4da:	9201      	str	r2, [sp, #4]
 800f4dc:	9a02      	ldr	r2, [sp, #8]
 800f4de:	9303      	str	r3, [sp, #12]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d80c      	bhi.n	800f4fe <__multiply+0x9e>
 800f4e4:	2e00      	cmp	r6, #0
 800f4e6:	dd03      	ble.n	800f4f0 <__multiply+0x90>
 800f4e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d05a      	beq.n	800f5a6 <__multiply+0x146>
 800f4f0:	6106      	str	r6, [r0, #16]
 800f4f2:	b005      	add	sp, #20
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	f843 2b04 	str.w	r2, [r3], #4
 800f4fc:	e7d8      	b.n	800f4b0 <__multiply+0x50>
 800f4fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800f502:	f1ba 0f00 	cmp.w	sl, #0
 800f506:	d024      	beq.n	800f552 <__multiply+0xf2>
 800f508:	f104 0e14 	add.w	lr, r4, #20
 800f50c:	46a9      	mov	r9, r5
 800f50e:	f04f 0c00 	mov.w	ip, #0
 800f512:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f516:	f8d9 1000 	ldr.w	r1, [r9]
 800f51a:	fa1f fb82 	uxth.w	fp, r2
 800f51e:	b289      	uxth	r1, r1
 800f520:	fb0a 110b 	mla	r1, sl, fp, r1
 800f524:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f528:	f8d9 2000 	ldr.w	r2, [r9]
 800f52c:	4461      	add	r1, ip
 800f52e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f532:	fb0a c20b 	mla	r2, sl, fp, ip
 800f536:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f53a:	b289      	uxth	r1, r1
 800f53c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f540:	4577      	cmp	r7, lr
 800f542:	f849 1b04 	str.w	r1, [r9], #4
 800f546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f54a:	d8e2      	bhi.n	800f512 <__multiply+0xb2>
 800f54c:	9a01      	ldr	r2, [sp, #4]
 800f54e:	f845 c002 	str.w	ip, [r5, r2]
 800f552:	9a03      	ldr	r2, [sp, #12]
 800f554:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f558:	3304      	adds	r3, #4
 800f55a:	f1b9 0f00 	cmp.w	r9, #0
 800f55e:	d020      	beq.n	800f5a2 <__multiply+0x142>
 800f560:	6829      	ldr	r1, [r5, #0]
 800f562:	f104 0c14 	add.w	ip, r4, #20
 800f566:	46ae      	mov	lr, r5
 800f568:	f04f 0a00 	mov.w	sl, #0
 800f56c:	f8bc b000 	ldrh.w	fp, [ip]
 800f570:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f574:	fb09 220b 	mla	r2, r9, fp, r2
 800f578:	4492      	add	sl, r2
 800f57a:	b289      	uxth	r1, r1
 800f57c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f580:	f84e 1b04 	str.w	r1, [lr], #4
 800f584:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f588:	f8be 1000 	ldrh.w	r1, [lr]
 800f58c:	0c12      	lsrs	r2, r2, #16
 800f58e:	fb09 1102 	mla	r1, r9, r2, r1
 800f592:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f596:	4567      	cmp	r7, ip
 800f598:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f59c:	d8e6      	bhi.n	800f56c <__multiply+0x10c>
 800f59e:	9a01      	ldr	r2, [sp, #4]
 800f5a0:	50a9      	str	r1, [r5, r2]
 800f5a2:	3504      	adds	r5, #4
 800f5a4:	e79a      	b.n	800f4dc <__multiply+0x7c>
 800f5a6:	3e01      	subs	r6, #1
 800f5a8:	e79c      	b.n	800f4e4 <__multiply+0x84>
 800f5aa:	bf00      	nop
 800f5ac:	08010948 	.word	0x08010948
 800f5b0:	08010a38 	.word	0x08010a38

0800f5b4 <__pow5mult>:
 800f5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b8:	4615      	mov	r5, r2
 800f5ba:	f012 0203 	ands.w	r2, r2, #3
 800f5be:	4606      	mov	r6, r0
 800f5c0:	460f      	mov	r7, r1
 800f5c2:	d007      	beq.n	800f5d4 <__pow5mult+0x20>
 800f5c4:	4c25      	ldr	r4, [pc, #148]	; (800f65c <__pow5mult+0xa8>)
 800f5c6:	3a01      	subs	r2, #1
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5ce:	f7ff fe51 	bl	800f274 <__multadd>
 800f5d2:	4607      	mov	r7, r0
 800f5d4:	10ad      	asrs	r5, r5, #2
 800f5d6:	d03d      	beq.n	800f654 <__pow5mult+0xa0>
 800f5d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f5da:	b97c      	cbnz	r4, 800f5fc <__pow5mult+0x48>
 800f5dc:	2010      	movs	r0, #16
 800f5de:	f7ff fdbf 	bl	800f160 <malloc>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	6270      	str	r0, [r6, #36]	; 0x24
 800f5e6:	b928      	cbnz	r0, 800f5f4 <__pow5mult+0x40>
 800f5e8:	4b1d      	ldr	r3, [pc, #116]	; (800f660 <__pow5mult+0xac>)
 800f5ea:	481e      	ldr	r0, [pc, #120]	; (800f664 <__pow5mult+0xb0>)
 800f5ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f5f0:	f000 fedc 	bl	80103ac <__assert_func>
 800f5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5f8:	6004      	str	r4, [r0, #0]
 800f5fa:	60c4      	str	r4, [r0, #12]
 800f5fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f604:	b94c      	cbnz	r4, 800f61a <__pow5mult+0x66>
 800f606:	f240 2171 	movw	r1, #625	; 0x271
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7ff ff12 	bl	800f434 <__i2b>
 800f610:	2300      	movs	r3, #0
 800f612:	f8c8 0008 	str.w	r0, [r8, #8]
 800f616:	4604      	mov	r4, r0
 800f618:	6003      	str	r3, [r0, #0]
 800f61a:	f04f 0900 	mov.w	r9, #0
 800f61e:	07eb      	lsls	r3, r5, #31
 800f620:	d50a      	bpl.n	800f638 <__pow5mult+0x84>
 800f622:	4639      	mov	r1, r7
 800f624:	4622      	mov	r2, r4
 800f626:	4630      	mov	r0, r6
 800f628:	f7ff ff1a 	bl	800f460 <__multiply>
 800f62c:	4639      	mov	r1, r7
 800f62e:	4680      	mov	r8, r0
 800f630:	4630      	mov	r0, r6
 800f632:	f7ff fdfd 	bl	800f230 <_Bfree>
 800f636:	4647      	mov	r7, r8
 800f638:	106d      	asrs	r5, r5, #1
 800f63a:	d00b      	beq.n	800f654 <__pow5mult+0xa0>
 800f63c:	6820      	ldr	r0, [r4, #0]
 800f63e:	b938      	cbnz	r0, 800f650 <__pow5mult+0x9c>
 800f640:	4622      	mov	r2, r4
 800f642:	4621      	mov	r1, r4
 800f644:	4630      	mov	r0, r6
 800f646:	f7ff ff0b 	bl	800f460 <__multiply>
 800f64a:	6020      	str	r0, [r4, #0]
 800f64c:	f8c0 9000 	str.w	r9, [r0]
 800f650:	4604      	mov	r4, r0
 800f652:	e7e4      	b.n	800f61e <__pow5mult+0x6a>
 800f654:	4638      	mov	r0, r7
 800f656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f65a:	bf00      	nop
 800f65c:	08010b88 	.word	0x08010b88
 800f660:	080108d6 	.word	0x080108d6
 800f664:	08010a38 	.word	0x08010a38

0800f668 <__lshift>:
 800f668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f66c:	460c      	mov	r4, r1
 800f66e:	6849      	ldr	r1, [r1, #4]
 800f670:	6923      	ldr	r3, [r4, #16]
 800f672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f676:	68a3      	ldr	r3, [r4, #8]
 800f678:	4607      	mov	r7, r0
 800f67a:	4691      	mov	r9, r2
 800f67c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f680:	f108 0601 	add.w	r6, r8, #1
 800f684:	42b3      	cmp	r3, r6
 800f686:	db0b      	blt.n	800f6a0 <__lshift+0x38>
 800f688:	4638      	mov	r0, r7
 800f68a:	f7ff fd91 	bl	800f1b0 <_Balloc>
 800f68e:	4605      	mov	r5, r0
 800f690:	b948      	cbnz	r0, 800f6a6 <__lshift+0x3e>
 800f692:	4602      	mov	r2, r0
 800f694:	4b2a      	ldr	r3, [pc, #168]	; (800f740 <__lshift+0xd8>)
 800f696:	482b      	ldr	r0, [pc, #172]	; (800f744 <__lshift+0xdc>)
 800f698:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f69c:	f000 fe86 	bl	80103ac <__assert_func>
 800f6a0:	3101      	adds	r1, #1
 800f6a2:	005b      	lsls	r3, r3, #1
 800f6a4:	e7ee      	b.n	800f684 <__lshift+0x1c>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f100 0114 	add.w	r1, r0, #20
 800f6ac:	f100 0210 	add.w	r2, r0, #16
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	4553      	cmp	r3, sl
 800f6b4:	db37      	blt.n	800f726 <__lshift+0xbe>
 800f6b6:	6920      	ldr	r0, [r4, #16]
 800f6b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6bc:	f104 0314 	add.w	r3, r4, #20
 800f6c0:	f019 091f 	ands.w	r9, r9, #31
 800f6c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f6cc:	d02f      	beq.n	800f72e <__lshift+0xc6>
 800f6ce:	f1c9 0e20 	rsb	lr, r9, #32
 800f6d2:	468a      	mov	sl, r1
 800f6d4:	f04f 0c00 	mov.w	ip, #0
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	fa02 f209 	lsl.w	r2, r2, r9
 800f6de:	ea42 020c 	orr.w	r2, r2, ip
 800f6e2:	f84a 2b04 	str.w	r2, [sl], #4
 800f6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ea:	4298      	cmp	r0, r3
 800f6ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f6f0:	d8f2      	bhi.n	800f6d8 <__lshift+0x70>
 800f6f2:	1b03      	subs	r3, r0, r4
 800f6f4:	3b15      	subs	r3, #21
 800f6f6:	f023 0303 	bic.w	r3, r3, #3
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	f104 0215 	add.w	r2, r4, #21
 800f700:	4290      	cmp	r0, r2
 800f702:	bf38      	it	cc
 800f704:	2304      	movcc	r3, #4
 800f706:	f841 c003 	str.w	ip, [r1, r3]
 800f70a:	f1bc 0f00 	cmp.w	ip, #0
 800f70e:	d001      	beq.n	800f714 <__lshift+0xac>
 800f710:	f108 0602 	add.w	r6, r8, #2
 800f714:	3e01      	subs	r6, #1
 800f716:	4638      	mov	r0, r7
 800f718:	612e      	str	r6, [r5, #16]
 800f71a:	4621      	mov	r1, r4
 800f71c:	f7ff fd88 	bl	800f230 <_Bfree>
 800f720:	4628      	mov	r0, r5
 800f722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f726:	f842 0f04 	str.w	r0, [r2, #4]!
 800f72a:	3301      	adds	r3, #1
 800f72c:	e7c1      	b.n	800f6b2 <__lshift+0x4a>
 800f72e:	3904      	subs	r1, #4
 800f730:	f853 2b04 	ldr.w	r2, [r3], #4
 800f734:	f841 2f04 	str.w	r2, [r1, #4]!
 800f738:	4298      	cmp	r0, r3
 800f73a:	d8f9      	bhi.n	800f730 <__lshift+0xc8>
 800f73c:	e7ea      	b.n	800f714 <__lshift+0xac>
 800f73e:	bf00      	nop
 800f740:	08010948 	.word	0x08010948
 800f744:	08010a38 	.word	0x08010a38

0800f748 <__mcmp>:
 800f748:	b530      	push	{r4, r5, lr}
 800f74a:	6902      	ldr	r2, [r0, #16]
 800f74c:	690c      	ldr	r4, [r1, #16]
 800f74e:	1b12      	subs	r2, r2, r4
 800f750:	d10e      	bne.n	800f770 <__mcmp+0x28>
 800f752:	f100 0314 	add.w	r3, r0, #20
 800f756:	3114      	adds	r1, #20
 800f758:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f75c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f760:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f764:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f768:	42a5      	cmp	r5, r4
 800f76a:	d003      	beq.n	800f774 <__mcmp+0x2c>
 800f76c:	d305      	bcc.n	800f77a <__mcmp+0x32>
 800f76e:	2201      	movs	r2, #1
 800f770:	4610      	mov	r0, r2
 800f772:	bd30      	pop	{r4, r5, pc}
 800f774:	4283      	cmp	r3, r0
 800f776:	d3f3      	bcc.n	800f760 <__mcmp+0x18>
 800f778:	e7fa      	b.n	800f770 <__mcmp+0x28>
 800f77a:	f04f 32ff 	mov.w	r2, #4294967295
 800f77e:	e7f7      	b.n	800f770 <__mcmp+0x28>

0800f780 <__mdiff>:
 800f780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	460c      	mov	r4, r1
 800f786:	4606      	mov	r6, r0
 800f788:	4611      	mov	r1, r2
 800f78a:	4620      	mov	r0, r4
 800f78c:	4690      	mov	r8, r2
 800f78e:	f7ff ffdb 	bl	800f748 <__mcmp>
 800f792:	1e05      	subs	r5, r0, #0
 800f794:	d110      	bne.n	800f7b8 <__mdiff+0x38>
 800f796:	4629      	mov	r1, r5
 800f798:	4630      	mov	r0, r6
 800f79a:	f7ff fd09 	bl	800f1b0 <_Balloc>
 800f79e:	b930      	cbnz	r0, 800f7ae <__mdiff+0x2e>
 800f7a0:	4b3a      	ldr	r3, [pc, #232]	; (800f88c <__mdiff+0x10c>)
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	f240 2132 	movw	r1, #562	; 0x232
 800f7a8:	4839      	ldr	r0, [pc, #228]	; (800f890 <__mdiff+0x110>)
 800f7aa:	f000 fdff 	bl	80103ac <__assert_func>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	bfa4      	itt	ge
 800f7ba:	4643      	movge	r3, r8
 800f7bc:	46a0      	movge	r8, r4
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7c4:	bfa6      	itte	ge
 800f7c6:	461c      	movge	r4, r3
 800f7c8:	2500      	movge	r5, #0
 800f7ca:	2501      	movlt	r5, #1
 800f7cc:	f7ff fcf0 	bl	800f1b0 <_Balloc>
 800f7d0:	b920      	cbnz	r0, 800f7dc <__mdiff+0x5c>
 800f7d2:	4b2e      	ldr	r3, [pc, #184]	; (800f88c <__mdiff+0x10c>)
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f7da:	e7e5      	b.n	800f7a8 <__mdiff+0x28>
 800f7dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7e0:	6926      	ldr	r6, [r4, #16]
 800f7e2:	60c5      	str	r5, [r0, #12]
 800f7e4:	f104 0914 	add.w	r9, r4, #20
 800f7e8:	f108 0514 	add.w	r5, r8, #20
 800f7ec:	f100 0e14 	add.w	lr, r0, #20
 800f7f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7f8:	f108 0210 	add.w	r2, r8, #16
 800f7fc:	46f2      	mov	sl, lr
 800f7fe:	2100      	movs	r1, #0
 800f800:	f859 3b04 	ldr.w	r3, [r9], #4
 800f804:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f808:	fa1f f883 	uxth.w	r8, r3
 800f80c:	fa11 f18b 	uxtah	r1, r1, fp
 800f810:	0c1b      	lsrs	r3, r3, #16
 800f812:	eba1 0808 	sub.w	r8, r1, r8
 800f816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f81a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f81e:	fa1f f888 	uxth.w	r8, r8
 800f822:	1419      	asrs	r1, r3, #16
 800f824:	454e      	cmp	r6, r9
 800f826:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f82a:	f84a 3b04 	str.w	r3, [sl], #4
 800f82e:	d8e7      	bhi.n	800f800 <__mdiff+0x80>
 800f830:	1b33      	subs	r3, r6, r4
 800f832:	3b15      	subs	r3, #21
 800f834:	f023 0303 	bic.w	r3, r3, #3
 800f838:	3304      	adds	r3, #4
 800f83a:	3415      	adds	r4, #21
 800f83c:	42a6      	cmp	r6, r4
 800f83e:	bf38      	it	cc
 800f840:	2304      	movcc	r3, #4
 800f842:	441d      	add	r5, r3
 800f844:	4473      	add	r3, lr
 800f846:	469e      	mov	lr, r3
 800f848:	462e      	mov	r6, r5
 800f84a:	4566      	cmp	r6, ip
 800f84c:	d30e      	bcc.n	800f86c <__mdiff+0xec>
 800f84e:	f10c 0203 	add.w	r2, ip, #3
 800f852:	1b52      	subs	r2, r2, r5
 800f854:	f022 0203 	bic.w	r2, r2, #3
 800f858:	3d03      	subs	r5, #3
 800f85a:	45ac      	cmp	ip, r5
 800f85c:	bf38      	it	cc
 800f85e:	2200      	movcc	r2, #0
 800f860:	441a      	add	r2, r3
 800f862:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f866:	b17b      	cbz	r3, 800f888 <__mdiff+0x108>
 800f868:	6107      	str	r7, [r0, #16]
 800f86a:	e7a3      	b.n	800f7b4 <__mdiff+0x34>
 800f86c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f870:	fa11 f288 	uxtah	r2, r1, r8
 800f874:	1414      	asrs	r4, r2, #16
 800f876:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f87a:	b292      	uxth	r2, r2
 800f87c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f880:	f84e 2b04 	str.w	r2, [lr], #4
 800f884:	1421      	asrs	r1, r4, #16
 800f886:	e7e0      	b.n	800f84a <__mdiff+0xca>
 800f888:	3f01      	subs	r7, #1
 800f88a:	e7ea      	b.n	800f862 <__mdiff+0xe2>
 800f88c:	08010948 	.word	0x08010948
 800f890:	08010a38 	.word	0x08010a38

0800f894 <__ulp>:
 800f894:	b082      	sub	sp, #8
 800f896:	ed8d 0b00 	vstr	d0, [sp]
 800f89a:	9b01      	ldr	r3, [sp, #4]
 800f89c:	4912      	ldr	r1, [pc, #72]	; (800f8e8 <__ulp+0x54>)
 800f89e:	4019      	ands	r1, r3
 800f8a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	dd05      	ble.n	800f8b4 <__ulp+0x20>
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	ec43 2b10 	vmov	d0, r2, r3
 800f8b0:	b002      	add	sp, #8
 800f8b2:	4770      	bx	lr
 800f8b4:	4249      	negs	r1, r1
 800f8b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f8ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f8be:	f04f 0200 	mov.w	r2, #0
 800f8c2:	f04f 0300 	mov.w	r3, #0
 800f8c6:	da04      	bge.n	800f8d2 <__ulp+0x3e>
 800f8c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f8cc:	fa41 f300 	asr.w	r3, r1, r0
 800f8d0:	e7ec      	b.n	800f8ac <__ulp+0x18>
 800f8d2:	f1a0 0114 	sub.w	r1, r0, #20
 800f8d6:	291e      	cmp	r1, #30
 800f8d8:	bfda      	itte	le
 800f8da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f8de:	fa20 f101 	lsrle.w	r1, r0, r1
 800f8e2:	2101      	movgt	r1, #1
 800f8e4:	460a      	mov	r2, r1
 800f8e6:	e7e1      	b.n	800f8ac <__ulp+0x18>
 800f8e8:	7ff00000 	.word	0x7ff00000

0800f8ec <__b2d>:
 800f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ee:	6905      	ldr	r5, [r0, #16]
 800f8f0:	f100 0714 	add.w	r7, r0, #20
 800f8f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f8f8:	1f2e      	subs	r6, r5, #4
 800f8fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f8fe:	4620      	mov	r0, r4
 800f900:	f7ff fd48 	bl	800f394 <__hi0bits>
 800f904:	f1c0 0320 	rsb	r3, r0, #32
 800f908:	280a      	cmp	r0, #10
 800f90a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f988 <__b2d+0x9c>
 800f90e:	600b      	str	r3, [r1, #0]
 800f910:	dc14      	bgt.n	800f93c <__b2d+0x50>
 800f912:	f1c0 0e0b 	rsb	lr, r0, #11
 800f916:	fa24 f10e 	lsr.w	r1, r4, lr
 800f91a:	42b7      	cmp	r7, r6
 800f91c:	ea41 030c 	orr.w	r3, r1, ip
 800f920:	bf34      	ite	cc
 800f922:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f926:	2100      	movcs	r1, #0
 800f928:	3015      	adds	r0, #21
 800f92a:	fa04 f000 	lsl.w	r0, r4, r0
 800f92e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f932:	ea40 0201 	orr.w	r2, r0, r1
 800f936:	ec43 2b10 	vmov	d0, r2, r3
 800f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f93c:	42b7      	cmp	r7, r6
 800f93e:	bf3a      	itte	cc
 800f940:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f944:	f1a5 0608 	subcc.w	r6, r5, #8
 800f948:	2100      	movcs	r1, #0
 800f94a:	380b      	subs	r0, #11
 800f94c:	d017      	beq.n	800f97e <__b2d+0x92>
 800f94e:	f1c0 0c20 	rsb	ip, r0, #32
 800f952:	fa04 f500 	lsl.w	r5, r4, r0
 800f956:	42be      	cmp	r6, r7
 800f958:	fa21 f40c 	lsr.w	r4, r1, ip
 800f95c:	ea45 0504 	orr.w	r5, r5, r4
 800f960:	bf8c      	ite	hi
 800f962:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f966:	2400      	movls	r4, #0
 800f968:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f96c:	fa01 f000 	lsl.w	r0, r1, r0
 800f970:	fa24 f40c 	lsr.w	r4, r4, ip
 800f974:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f978:	ea40 0204 	orr.w	r2, r0, r4
 800f97c:	e7db      	b.n	800f936 <__b2d+0x4a>
 800f97e:	ea44 030c 	orr.w	r3, r4, ip
 800f982:	460a      	mov	r2, r1
 800f984:	e7d7      	b.n	800f936 <__b2d+0x4a>
 800f986:	bf00      	nop
 800f988:	3ff00000 	.word	0x3ff00000

0800f98c <__d2b>:
 800f98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f990:	4689      	mov	r9, r1
 800f992:	2101      	movs	r1, #1
 800f994:	ec57 6b10 	vmov	r6, r7, d0
 800f998:	4690      	mov	r8, r2
 800f99a:	f7ff fc09 	bl	800f1b0 <_Balloc>
 800f99e:	4604      	mov	r4, r0
 800f9a0:	b930      	cbnz	r0, 800f9b0 <__d2b+0x24>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	4b25      	ldr	r3, [pc, #148]	; (800fa3c <__d2b+0xb0>)
 800f9a6:	4826      	ldr	r0, [pc, #152]	; (800fa40 <__d2b+0xb4>)
 800f9a8:	f240 310a 	movw	r1, #778	; 0x30a
 800f9ac:	f000 fcfe 	bl	80103ac <__assert_func>
 800f9b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f9b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9b8:	bb35      	cbnz	r5, 800fa08 <__d2b+0x7c>
 800f9ba:	2e00      	cmp	r6, #0
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	d028      	beq.n	800fa12 <__d2b+0x86>
 800f9c0:	4668      	mov	r0, sp
 800f9c2:	9600      	str	r6, [sp, #0]
 800f9c4:	f7ff fd06 	bl	800f3d4 <__lo0bits>
 800f9c8:	9900      	ldr	r1, [sp, #0]
 800f9ca:	b300      	cbz	r0, 800fa0e <__d2b+0x82>
 800f9cc:	9a01      	ldr	r2, [sp, #4]
 800f9ce:	f1c0 0320 	rsb	r3, r0, #32
 800f9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f9d6:	430b      	orrs	r3, r1
 800f9d8:	40c2      	lsrs	r2, r0
 800f9da:	6163      	str	r3, [r4, #20]
 800f9dc:	9201      	str	r2, [sp, #4]
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	61a3      	str	r3, [r4, #24]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	bf14      	ite	ne
 800f9e6:	2202      	movne	r2, #2
 800f9e8:	2201      	moveq	r2, #1
 800f9ea:	6122      	str	r2, [r4, #16]
 800f9ec:	b1d5      	cbz	r5, 800fa24 <__d2b+0x98>
 800f9ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9f2:	4405      	add	r5, r0
 800f9f4:	f8c9 5000 	str.w	r5, [r9]
 800f9f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9fc:	f8c8 0000 	str.w	r0, [r8]
 800fa00:	4620      	mov	r0, r4
 800fa02:	b003      	add	sp, #12
 800fa04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa0c:	e7d5      	b.n	800f9ba <__d2b+0x2e>
 800fa0e:	6161      	str	r1, [r4, #20]
 800fa10:	e7e5      	b.n	800f9de <__d2b+0x52>
 800fa12:	a801      	add	r0, sp, #4
 800fa14:	f7ff fcde 	bl	800f3d4 <__lo0bits>
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	6163      	str	r3, [r4, #20]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	6122      	str	r2, [r4, #16]
 800fa20:	3020      	adds	r0, #32
 800fa22:	e7e3      	b.n	800f9ec <__d2b+0x60>
 800fa24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa2c:	f8c9 0000 	str.w	r0, [r9]
 800fa30:	6918      	ldr	r0, [r3, #16]
 800fa32:	f7ff fcaf 	bl	800f394 <__hi0bits>
 800fa36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa3a:	e7df      	b.n	800f9fc <__d2b+0x70>
 800fa3c:	08010948 	.word	0x08010948
 800fa40:	08010a38 	.word	0x08010a38

0800fa44 <__ratio>:
 800fa44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa48:	4688      	mov	r8, r1
 800fa4a:	4669      	mov	r1, sp
 800fa4c:	4681      	mov	r9, r0
 800fa4e:	f7ff ff4d 	bl	800f8ec <__b2d>
 800fa52:	a901      	add	r1, sp, #4
 800fa54:	4640      	mov	r0, r8
 800fa56:	ec55 4b10 	vmov	r4, r5, d0
 800fa5a:	f7ff ff47 	bl	800f8ec <__b2d>
 800fa5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fa66:	eba3 0c02 	sub.w	ip, r3, r2
 800fa6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa6e:	1a9b      	subs	r3, r3, r2
 800fa70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fa74:	ec51 0b10 	vmov	r0, r1, d0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	bfd6      	itet	le
 800fa7c:	460a      	movle	r2, r1
 800fa7e:	462a      	movgt	r2, r5
 800fa80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa84:	468b      	mov	fp, r1
 800fa86:	462f      	mov	r7, r5
 800fa88:	bfd4      	ite	le
 800fa8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fa8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa92:	4620      	mov	r0, r4
 800fa94:	ee10 2a10 	vmov	r2, s0
 800fa98:	465b      	mov	r3, fp
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	f7f0 fede 	bl	800085c <__aeabi_ddiv>
 800faa0:	ec41 0b10 	vmov	d0, r0, r1
 800faa4:	b003      	add	sp, #12
 800faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800faaa <__copybits>:
 800faaa:	3901      	subs	r1, #1
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	1149      	asrs	r1, r1, #5
 800fab0:	6914      	ldr	r4, [r2, #16]
 800fab2:	3101      	adds	r1, #1
 800fab4:	f102 0314 	add.w	r3, r2, #20
 800fab8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fabc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fac0:	1f05      	subs	r5, r0, #4
 800fac2:	42a3      	cmp	r3, r4
 800fac4:	d30c      	bcc.n	800fae0 <__copybits+0x36>
 800fac6:	1aa3      	subs	r3, r4, r2
 800fac8:	3b11      	subs	r3, #17
 800faca:	f023 0303 	bic.w	r3, r3, #3
 800face:	3211      	adds	r2, #17
 800fad0:	42a2      	cmp	r2, r4
 800fad2:	bf88      	it	hi
 800fad4:	2300      	movhi	r3, #0
 800fad6:	4418      	add	r0, r3
 800fad8:	2300      	movs	r3, #0
 800fada:	4288      	cmp	r0, r1
 800fadc:	d305      	bcc.n	800faea <__copybits+0x40>
 800fade:	bd70      	pop	{r4, r5, r6, pc}
 800fae0:	f853 6b04 	ldr.w	r6, [r3], #4
 800fae4:	f845 6f04 	str.w	r6, [r5, #4]!
 800fae8:	e7eb      	b.n	800fac2 <__copybits+0x18>
 800faea:	f840 3b04 	str.w	r3, [r0], #4
 800faee:	e7f4      	b.n	800fada <__copybits+0x30>

0800faf0 <__any_on>:
 800faf0:	f100 0214 	add.w	r2, r0, #20
 800faf4:	6900      	ldr	r0, [r0, #16]
 800faf6:	114b      	asrs	r3, r1, #5
 800faf8:	4298      	cmp	r0, r3
 800fafa:	b510      	push	{r4, lr}
 800fafc:	db11      	blt.n	800fb22 <__any_on+0x32>
 800fafe:	dd0a      	ble.n	800fb16 <__any_on+0x26>
 800fb00:	f011 011f 	ands.w	r1, r1, #31
 800fb04:	d007      	beq.n	800fb16 <__any_on+0x26>
 800fb06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb0a:	fa24 f001 	lsr.w	r0, r4, r1
 800fb0e:	fa00 f101 	lsl.w	r1, r0, r1
 800fb12:	428c      	cmp	r4, r1
 800fb14:	d10b      	bne.n	800fb2e <__any_on+0x3e>
 800fb16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d803      	bhi.n	800fb26 <__any_on+0x36>
 800fb1e:	2000      	movs	r0, #0
 800fb20:	bd10      	pop	{r4, pc}
 800fb22:	4603      	mov	r3, r0
 800fb24:	e7f7      	b.n	800fb16 <__any_on+0x26>
 800fb26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb2a:	2900      	cmp	r1, #0
 800fb2c:	d0f5      	beq.n	800fb1a <__any_on+0x2a>
 800fb2e:	2001      	movs	r0, #1
 800fb30:	e7f6      	b.n	800fb20 <__any_on+0x30>

0800fb32 <_calloc_r>:
 800fb32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb34:	fba1 2402 	umull	r2, r4, r1, r2
 800fb38:	b94c      	cbnz	r4, 800fb4e <_calloc_r+0x1c>
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	9201      	str	r2, [sp, #4]
 800fb3e:	f000 f87b 	bl	800fc38 <_malloc_r>
 800fb42:	9a01      	ldr	r2, [sp, #4]
 800fb44:	4605      	mov	r5, r0
 800fb46:	b930      	cbnz	r0, 800fb56 <_calloc_r+0x24>
 800fb48:	4628      	mov	r0, r5
 800fb4a:	b003      	add	sp, #12
 800fb4c:	bd30      	pop	{r4, r5, pc}
 800fb4e:	220c      	movs	r2, #12
 800fb50:	6002      	str	r2, [r0, #0]
 800fb52:	2500      	movs	r5, #0
 800fb54:	e7f8      	b.n	800fb48 <_calloc_r+0x16>
 800fb56:	4621      	mov	r1, r4
 800fb58:	f7fc f854 	bl	800bc04 <memset>
 800fb5c:	e7f4      	b.n	800fb48 <_calloc_r+0x16>
	...

0800fb60 <_free_r>:
 800fb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb62:	2900      	cmp	r1, #0
 800fb64:	d044      	beq.n	800fbf0 <_free_r+0x90>
 800fb66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb6a:	9001      	str	r0, [sp, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f1a1 0404 	sub.w	r4, r1, #4
 800fb72:	bfb8      	it	lt
 800fb74:	18e4      	addlt	r4, r4, r3
 800fb76:	f000 fca7 	bl	80104c8 <__malloc_lock>
 800fb7a:	4a1e      	ldr	r2, [pc, #120]	; (800fbf4 <_free_r+0x94>)
 800fb7c:	9801      	ldr	r0, [sp, #4]
 800fb7e:	6813      	ldr	r3, [r2, #0]
 800fb80:	b933      	cbnz	r3, 800fb90 <_free_r+0x30>
 800fb82:	6063      	str	r3, [r4, #4]
 800fb84:	6014      	str	r4, [r2, #0]
 800fb86:	b003      	add	sp, #12
 800fb88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb8c:	f000 bca2 	b.w	80104d4 <__malloc_unlock>
 800fb90:	42a3      	cmp	r3, r4
 800fb92:	d908      	bls.n	800fba6 <_free_r+0x46>
 800fb94:	6825      	ldr	r5, [r4, #0]
 800fb96:	1961      	adds	r1, r4, r5
 800fb98:	428b      	cmp	r3, r1
 800fb9a:	bf01      	itttt	eq
 800fb9c:	6819      	ldreq	r1, [r3, #0]
 800fb9e:	685b      	ldreq	r3, [r3, #4]
 800fba0:	1949      	addeq	r1, r1, r5
 800fba2:	6021      	streq	r1, [r4, #0]
 800fba4:	e7ed      	b.n	800fb82 <_free_r+0x22>
 800fba6:	461a      	mov	r2, r3
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	b10b      	cbz	r3, 800fbb0 <_free_r+0x50>
 800fbac:	42a3      	cmp	r3, r4
 800fbae:	d9fa      	bls.n	800fba6 <_free_r+0x46>
 800fbb0:	6811      	ldr	r1, [r2, #0]
 800fbb2:	1855      	adds	r5, r2, r1
 800fbb4:	42a5      	cmp	r5, r4
 800fbb6:	d10b      	bne.n	800fbd0 <_free_r+0x70>
 800fbb8:	6824      	ldr	r4, [r4, #0]
 800fbba:	4421      	add	r1, r4
 800fbbc:	1854      	adds	r4, r2, r1
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	6011      	str	r1, [r2, #0]
 800fbc2:	d1e0      	bne.n	800fb86 <_free_r+0x26>
 800fbc4:	681c      	ldr	r4, [r3, #0]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	6053      	str	r3, [r2, #4]
 800fbca:	4421      	add	r1, r4
 800fbcc:	6011      	str	r1, [r2, #0]
 800fbce:	e7da      	b.n	800fb86 <_free_r+0x26>
 800fbd0:	d902      	bls.n	800fbd8 <_free_r+0x78>
 800fbd2:	230c      	movs	r3, #12
 800fbd4:	6003      	str	r3, [r0, #0]
 800fbd6:	e7d6      	b.n	800fb86 <_free_r+0x26>
 800fbd8:	6825      	ldr	r5, [r4, #0]
 800fbda:	1961      	adds	r1, r4, r5
 800fbdc:	428b      	cmp	r3, r1
 800fbde:	bf04      	itt	eq
 800fbe0:	6819      	ldreq	r1, [r3, #0]
 800fbe2:	685b      	ldreq	r3, [r3, #4]
 800fbe4:	6063      	str	r3, [r4, #4]
 800fbe6:	bf04      	itt	eq
 800fbe8:	1949      	addeq	r1, r1, r5
 800fbea:	6021      	streq	r1, [r4, #0]
 800fbec:	6054      	str	r4, [r2, #4]
 800fbee:	e7ca      	b.n	800fb86 <_free_r+0x26>
 800fbf0:	b003      	add	sp, #12
 800fbf2:	bd30      	pop	{r4, r5, pc}
 800fbf4:	20001830 	.word	0x20001830

0800fbf8 <sbrk_aligned>:
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	4e0e      	ldr	r6, [pc, #56]	; (800fc34 <sbrk_aligned+0x3c>)
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	6831      	ldr	r1, [r6, #0]
 800fc00:	4605      	mov	r5, r0
 800fc02:	b911      	cbnz	r1, 800fc0a <sbrk_aligned+0x12>
 800fc04:	f000 fb4c 	bl	80102a0 <_sbrk_r>
 800fc08:	6030      	str	r0, [r6, #0]
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f000 fb47 	bl	80102a0 <_sbrk_r>
 800fc12:	1c43      	adds	r3, r0, #1
 800fc14:	d00a      	beq.n	800fc2c <sbrk_aligned+0x34>
 800fc16:	1cc4      	adds	r4, r0, #3
 800fc18:	f024 0403 	bic.w	r4, r4, #3
 800fc1c:	42a0      	cmp	r0, r4
 800fc1e:	d007      	beq.n	800fc30 <sbrk_aligned+0x38>
 800fc20:	1a21      	subs	r1, r4, r0
 800fc22:	4628      	mov	r0, r5
 800fc24:	f000 fb3c 	bl	80102a0 <_sbrk_r>
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d101      	bne.n	800fc30 <sbrk_aligned+0x38>
 800fc2c:	f04f 34ff 	mov.w	r4, #4294967295
 800fc30:	4620      	mov	r0, r4
 800fc32:	bd70      	pop	{r4, r5, r6, pc}
 800fc34:	20001834 	.word	0x20001834

0800fc38 <_malloc_r>:
 800fc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3c:	1ccd      	adds	r5, r1, #3
 800fc3e:	f025 0503 	bic.w	r5, r5, #3
 800fc42:	3508      	adds	r5, #8
 800fc44:	2d0c      	cmp	r5, #12
 800fc46:	bf38      	it	cc
 800fc48:	250c      	movcc	r5, #12
 800fc4a:	2d00      	cmp	r5, #0
 800fc4c:	4607      	mov	r7, r0
 800fc4e:	db01      	blt.n	800fc54 <_malloc_r+0x1c>
 800fc50:	42a9      	cmp	r1, r5
 800fc52:	d905      	bls.n	800fc60 <_malloc_r+0x28>
 800fc54:	230c      	movs	r3, #12
 800fc56:	603b      	str	r3, [r7, #0]
 800fc58:	2600      	movs	r6, #0
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc60:	4e2e      	ldr	r6, [pc, #184]	; (800fd1c <_malloc_r+0xe4>)
 800fc62:	f000 fc31 	bl	80104c8 <__malloc_lock>
 800fc66:	6833      	ldr	r3, [r6, #0]
 800fc68:	461c      	mov	r4, r3
 800fc6a:	bb34      	cbnz	r4, 800fcba <_malloc_r+0x82>
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4638      	mov	r0, r7
 800fc70:	f7ff ffc2 	bl	800fbf8 <sbrk_aligned>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	4604      	mov	r4, r0
 800fc78:	d14d      	bne.n	800fd16 <_malloc_r+0xde>
 800fc7a:	6834      	ldr	r4, [r6, #0]
 800fc7c:	4626      	mov	r6, r4
 800fc7e:	2e00      	cmp	r6, #0
 800fc80:	d140      	bne.n	800fd04 <_malloc_r+0xcc>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	4631      	mov	r1, r6
 800fc86:	4638      	mov	r0, r7
 800fc88:	eb04 0803 	add.w	r8, r4, r3
 800fc8c:	f000 fb08 	bl	80102a0 <_sbrk_r>
 800fc90:	4580      	cmp	r8, r0
 800fc92:	d13a      	bne.n	800fd0a <_malloc_r+0xd2>
 800fc94:	6821      	ldr	r1, [r4, #0]
 800fc96:	3503      	adds	r5, #3
 800fc98:	1a6d      	subs	r5, r5, r1
 800fc9a:	f025 0503 	bic.w	r5, r5, #3
 800fc9e:	3508      	adds	r5, #8
 800fca0:	2d0c      	cmp	r5, #12
 800fca2:	bf38      	it	cc
 800fca4:	250c      	movcc	r5, #12
 800fca6:	4629      	mov	r1, r5
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f7ff ffa5 	bl	800fbf8 <sbrk_aligned>
 800fcae:	3001      	adds	r0, #1
 800fcb0:	d02b      	beq.n	800fd0a <_malloc_r+0xd2>
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	442b      	add	r3, r5
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	e00e      	b.n	800fcd8 <_malloc_r+0xa0>
 800fcba:	6822      	ldr	r2, [r4, #0]
 800fcbc:	1b52      	subs	r2, r2, r5
 800fcbe:	d41e      	bmi.n	800fcfe <_malloc_r+0xc6>
 800fcc0:	2a0b      	cmp	r2, #11
 800fcc2:	d916      	bls.n	800fcf2 <_malloc_r+0xba>
 800fcc4:	1961      	adds	r1, r4, r5
 800fcc6:	42a3      	cmp	r3, r4
 800fcc8:	6025      	str	r5, [r4, #0]
 800fcca:	bf18      	it	ne
 800fccc:	6059      	strne	r1, [r3, #4]
 800fcce:	6863      	ldr	r3, [r4, #4]
 800fcd0:	bf08      	it	eq
 800fcd2:	6031      	streq	r1, [r6, #0]
 800fcd4:	5162      	str	r2, [r4, r5]
 800fcd6:	604b      	str	r3, [r1, #4]
 800fcd8:	4638      	mov	r0, r7
 800fcda:	f104 060b 	add.w	r6, r4, #11
 800fcde:	f000 fbf9 	bl	80104d4 <__malloc_unlock>
 800fce2:	f026 0607 	bic.w	r6, r6, #7
 800fce6:	1d23      	adds	r3, r4, #4
 800fce8:	1af2      	subs	r2, r6, r3
 800fcea:	d0b6      	beq.n	800fc5a <_malloc_r+0x22>
 800fcec:	1b9b      	subs	r3, r3, r6
 800fcee:	50a3      	str	r3, [r4, r2]
 800fcf0:	e7b3      	b.n	800fc5a <_malloc_r+0x22>
 800fcf2:	6862      	ldr	r2, [r4, #4]
 800fcf4:	42a3      	cmp	r3, r4
 800fcf6:	bf0c      	ite	eq
 800fcf8:	6032      	streq	r2, [r6, #0]
 800fcfa:	605a      	strne	r2, [r3, #4]
 800fcfc:	e7ec      	b.n	800fcd8 <_malloc_r+0xa0>
 800fcfe:	4623      	mov	r3, r4
 800fd00:	6864      	ldr	r4, [r4, #4]
 800fd02:	e7b2      	b.n	800fc6a <_malloc_r+0x32>
 800fd04:	4634      	mov	r4, r6
 800fd06:	6876      	ldr	r6, [r6, #4]
 800fd08:	e7b9      	b.n	800fc7e <_malloc_r+0x46>
 800fd0a:	230c      	movs	r3, #12
 800fd0c:	603b      	str	r3, [r7, #0]
 800fd0e:	4638      	mov	r0, r7
 800fd10:	f000 fbe0 	bl	80104d4 <__malloc_unlock>
 800fd14:	e7a1      	b.n	800fc5a <_malloc_r+0x22>
 800fd16:	6025      	str	r5, [r4, #0]
 800fd18:	e7de      	b.n	800fcd8 <_malloc_r+0xa0>
 800fd1a:	bf00      	nop
 800fd1c:	20001830 	.word	0x20001830

0800fd20 <__ssputs_r>:
 800fd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd24:	688e      	ldr	r6, [r1, #8]
 800fd26:	429e      	cmp	r6, r3
 800fd28:	4682      	mov	sl, r0
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	4690      	mov	r8, r2
 800fd2e:	461f      	mov	r7, r3
 800fd30:	d838      	bhi.n	800fda4 <__ssputs_r+0x84>
 800fd32:	898a      	ldrh	r2, [r1, #12]
 800fd34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd38:	d032      	beq.n	800fda0 <__ssputs_r+0x80>
 800fd3a:	6825      	ldr	r5, [r4, #0]
 800fd3c:	6909      	ldr	r1, [r1, #16]
 800fd3e:	eba5 0901 	sub.w	r9, r5, r1
 800fd42:	6965      	ldr	r5, [r4, #20]
 800fd44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	444b      	add	r3, r9
 800fd50:	106d      	asrs	r5, r5, #1
 800fd52:	429d      	cmp	r5, r3
 800fd54:	bf38      	it	cc
 800fd56:	461d      	movcc	r5, r3
 800fd58:	0553      	lsls	r3, r2, #21
 800fd5a:	d531      	bpl.n	800fdc0 <__ssputs_r+0xa0>
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	f7ff ff6b 	bl	800fc38 <_malloc_r>
 800fd62:	4606      	mov	r6, r0
 800fd64:	b950      	cbnz	r0, 800fd7c <__ssputs_r+0x5c>
 800fd66:	230c      	movs	r3, #12
 800fd68:	f8ca 3000 	str.w	r3, [sl]
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	f04f 30ff 	mov.w	r0, #4294967295
 800fd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7c:	6921      	ldr	r1, [r4, #16]
 800fd7e:	464a      	mov	r2, r9
 800fd80:	f7ff fa08 	bl	800f194 <memcpy>
 800fd84:	89a3      	ldrh	r3, [r4, #12]
 800fd86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	6126      	str	r6, [r4, #16]
 800fd92:	6165      	str	r5, [r4, #20]
 800fd94:	444e      	add	r6, r9
 800fd96:	eba5 0509 	sub.w	r5, r5, r9
 800fd9a:	6026      	str	r6, [r4, #0]
 800fd9c:	60a5      	str	r5, [r4, #8]
 800fd9e:	463e      	mov	r6, r7
 800fda0:	42be      	cmp	r6, r7
 800fda2:	d900      	bls.n	800fda6 <__ssputs_r+0x86>
 800fda4:	463e      	mov	r6, r7
 800fda6:	6820      	ldr	r0, [r4, #0]
 800fda8:	4632      	mov	r2, r6
 800fdaa:	4641      	mov	r1, r8
 800fdac:	f000 fb72 	bl	8010494 <memmove>
 800fdb0:	68a3      	ldr	r3, [r4, #8]
 800fdb2:	1b9b      	subs	r3, r3, r6
 800fdb4:	60a3      	str	r3, [r4, #8]
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	4433      	add	r3, r6
 800fdba:	6023      	str	r3, [r4, #0]
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	e7db      	b.n	800fd78 <__ssputs_r+0x58>
 800fdc0:	462a      	mov	r2, r5
 800fdc2:	f000 fb8d 	bl	80104e0 <_realloc_r>
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d1e1      	bne.n	800fd90 <__ssputs_r+0x70>
 800fdcc:	6921      	ldr	r1, [r4, #16]
 800fdce:	4650      	mov	r0, sl
 800fdd0:	f7ff fec6 	bl	800fb60 <_free_r>
 800fdd4:	e7c7      	b.n	800fd66 <__ssputs_r+0x46>
	...

0800fdd8 <_svfiprintf_r>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	4698      	mov	r8, r3
 800fdde:	898b      	ldrh	r3, [r1, #12]
 800fde0:	061b      	lsls	r3, r3, #24
 800fde2:	b09d      	sub	sp, #116	; 0x74
 800fde4:	4607      	mov	r7, r0
 800fde6:	460d      	mov	r5, r1
 800fde8:	4614      	mov	r4, r2
 800fdea:	d50e      	bpl.n	800fe0a <_svfiprintf_r+0x32>
 800fdec:	690b      	ldr	r3, [r1, #16]
 800fdee:	b963      	cbnz	r3, 800fe0a <_svfiprintf_r+0x32>
 800fdf0:	2140      	movs	r1, #64	; 0x40
 800fdf2:	f7ff ff21 	bl	800fc38 <_malloc_r>
 800fdf6:	6028      	str	r0, [r5, #0]
 800fdf8:	6128      	str	r0, [r5, #16]
 800fdfa:	b920      	cbnz	r0, 800fe06 <_svfiprintf_r+0x2e>
 800fdfc:	230c      	movs	r3, #12
 800fdfe:	603b      	str	r3, [r7, #0]
 800fe00:	f04f 30ff 	mov.w	r0, #4294967295
 800fe04:	e0d1      	b.n	800ffaa <_svfiprintf_r+0x1d2>
 800fe06:	2340      	movs	r3, #64	; 0x40
 800fe08:	616b      	str	r3, [r5, #20]
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe0e:	2320      	movs	r3, #32
 800fe10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe14:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe18:	2330      	movs	r3, #48	; 0x30
 800fe1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ffc4 <_svfiprintf_r+0x1ec>
 800fe1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe22:	f04f 0901 	mov.w	r9, #1
 800fe26:	4623      	mov	r3, r4
 800fe28:	469a      	mov	sl, r3
 800fe2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe2e:	b10a      	cbz	r2, 800fe34 <_svfiprintf_r+0x5c>
 800fe30:	2a25      	cmp	r2, #37	; 0x25
 800fe32:	d1f9      	bne.n	800fe28 <_svfiprintf_r+0x50>
 800fe34:	ebba 0b04 	subs.w	fp, sl, r4
 800fe38:	d00b      	beq.n	800fe52 <_svfiprintf_r+0x7a>
 800fe3a:	465b      	mov	r3, fp
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	4629      	mov	r1, r5
 800fe40:	4638      	mov	r0, r7
 800fe42:	f7ff ff6d 	bl	800fd20 <__ssputs_r>
 800fe46:	3001      	adds	r0, #1
 800fe48:	f000 80aa 	beq.w	800ffa0 <_svfiprintf_r+0x1c8>
 800fe4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe4e:	445a      	add	r2, fp
 800fe50:	9209      	str	r2, [sp, #36]	; 0x24
 800fe52:	f89a 3000 	ldrb.w	r3, [sl]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	f000 80a2 	beq.w	800ffa0 <_svfiprintf_r+0x1c8>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe66:	f10a 0a01 	add.w	sl, sl, #1
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	9307      	str	r3, [sp, #28]
 800fe6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe72:	931a      	str	r3, [sp, #104]	; 0x68
 800fe74:	4654      	mov	r4, sl
 800fe76:	2205      	movs	r2, #5
 800fe78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe7c:	4851      	ldr	r0, [pc, #324]	; (800ffc4 <_svfiprintf_r+0x1ec>)
 800fe7e:	f7f0 f9b7 	bl	80001f0 <memchr>
 800fe82:	9a04      	ldr	r2, [sp, #16]
 800fe84:	b9d8      	cbnz	r0, 800febe <_svfiprintf_r+0xe6>
 800fe86:	06d0      	lsls	r0, r2, #27
 800fe88:	bf44      	itt	mi
 800fe8a:	2320      	movmi	r3, #32
 800fe8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe90:	0711      	lsls	r1, r2, #28
 800fe92:	bf44      	itt	mi
 800fe94:	232b      	movmi	r3, #43	; 0x2b
 800fe96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe9a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe9e:	2b2a      	cmp	r3, #42	; 0x2a
 800fea0:	d015      	beq.n	800fece <_svfiprintf_r+0xf6>
 800fea2:	9a07      	ldr	r2, [sp, #28]
 800fea4:	4654      	mov	r4, sl
 800fea6:	2000      	movs	r0, #0
 800fea8:	f04f 0c0a 	mov.w	ip, #10
 800feac:	4621      	mov	r1, r4
 800feae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feb2:	3b30      	subs	r3, #48	; 0x30
 800feb4:	2b09      	cmp	r3, #9
 800feb6:	d94e      	bls.n	800ff56 <_svfiprintf_r+0x17e>
 800feb8:	b1b0      	cbz	r0, 800fee8 <_svfiprintf_r+0x110>
 800feba:	9207      	str	r2, [sp, #28]
 800febc:	e014      	b.n	800fee8 <_svfiprintf_r+0x110>
 800febe:	eba0 0308 	sub.w	r3, r0, r8
 800fec2:	fa09 f303 	lsl.w	r3, r9, r3
 800fec6:	4313      	orrs	r3, r2
 800fec8:	9304      	str	r3, [sp, #16]
 800feca:	46a2      	mov	sl, r4
 800fecc:	e7d2      	b.n	800fe74 <_svfiprintf_r+0x9c>
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	1d19      	adds	r1, r3, #4
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	9103      	str	r1, [sp, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	bfbb      	ittet	lt
 800feda:	425b      	neglt	r3, r3
 800fedc:	f042 0202 	orrlt.w	r2, r2, #2
 800fee0:	9307      	strge	r3, [sp, #28]
 800fee2:	9307      	strlt	r3, [sp, #28]
 800fee4:	bfb8      	it	lt
 800fee6:	9204      	strlt	r2, [sp, #16]
 800fee8:	7823      	ldrb	r3, [r4, #0]
 800feea:	2b2e      	cmp	r3, #46	; 0x2e
 800feec:	d10c      	bne.n	800ff08 <_svfiprintf_r+0x130>
 800feee:	7863      	ldrb	r3, [r4, #1]
 800fef0:	2b2a      	cmp	r3, #42	; 0x2a
 800fef2:	d135      	bne.n	800ff60 <_svfiprintf_r+0x188>
 800fef4:	9b03      	ldr	r3, [sp, #12]
 800fef6:	1d1a      	adds	r2, r3, #4
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	9203      	str	r2, [sp, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bfb8      	it	lt
 800ff00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff04:	3402      	adds	r4, #2
 800ff06:	9305      	str	r3, [sp, #20]
 800ff08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ffd4 <_svfiprintf_r+0x1fc>
 800ff0c:	7821      	ldrb	r1, [r4, #0]
 800ff0e:	2203      	movs	r2, #3
 800ff10:	4650      	mov	r0, sl
 800ff12:	f7f0 f96d 	bl	80001f0 <memchr>
 800ff16:	b140      	cbz	r0, 800ff2a <_svfiprintf_r+0x152>
 800ff18:	2340      	movs	r3, #64	; 0x40
 800ff1a:	eba0 000a 	sub.w	r0, r0, sl
 800ff1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ff22:	9b04      	ldr	r3, [sp, #16]
 800ff24:	4303      	orrs	r3, r0
 800ff26:	3401      	adds	r4, #1
 800ff28:	9304      	str	r3, [sp, #16]
 800ff2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff2e:	4826      	ldr	r0, [pc, #152]	; (800ffc8 <_svfiprintf_r+0x1f0>)
 800ff30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff34:	2206      	movs	r2, #6
 800ff36:	f7f0 f95b 	bl	80001f0 <memchr>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d038      	beq.n	800ffb0 <_svfiprintf_r+0x1d8>
 800ff3e:	4b23      	ldr	r3, [pc, #140]	; (800ffcc <_svfiprintf_r+0x1f4>)
 800ff40:	bb1b      	cbnz	r3, 800ff8a <_svfiprintf_r+0x1b2>
 800ff42:	9b03      	ldr	r3, [sp, #12]
 800ff44:	3307      	adds	r3, #7
 800ff46:	f023 0307 	bic.w	r3, r3, #7
 800ff4a:	3308      	adds	r3, #8
 800ff4c:	9303      	str	r3, [sp, #12]
 800ff4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff50:	4433      	add	r3, r6
 800ff52:	9309      	str	r3, [sp, #36]	; 0x24
 800ff54:	e767      	b.n	800fe26 <_svfiprintf_r+0x4e>
 800ff56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	2001      	movs	r0, #1
 800ff5e:	e7a5      	b.n	800feac <_svfiprintf_r+0xd4>
 800ff60:	2300      	movs	r3, #0
 800ff62:	3401      	adds	r4, #1
 800ff64:	9305      	str	r3, [sp, #20]
 800ff66:	4619      	mov	r1, r3
 800ff68:	f04f 0c0a 	mov.w	ip, #10
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff72:	3a30      	subs	r2, #48	; 0x30
 800ff74:	2a09      	cmp	r2, #9
 800ff76:	d903      	bls.n	800ff80 <_svfiprintf_r+0x1a8>
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d0c5      	beq.n	800ff08 <_svfiprintf_r+0x130>
 800ff7c:	9105      	str	r1, [sp, #20]
 800ff7e:	e7c3      	b.n	800ff08 <_svfiprintf_r+0x130>
 800ff80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff84:	4604      	mov	r4, r0
 800ff86:	2301      	movs	r3, #1
 800ff88:	e7f0      	b.n	800ff6c <_svfiprintf_r+0x194>
 800ff8a:	ab03      	add	r3, sp, #12
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	462a      	mov	r2, r5
 800ff90:	4b0f      	ldr	r3, [pc, #60]	; (800ffd0 <_svfiprintf_r+0x1f8>)
 800ff92:	a904      	add	r1, sp, #16
 800ff94:	4638      	mov	r0, r7
 800ff96:	f7fb fedd 	bl	800bd54 <_printf_float>
 800ff9a:	1c42      	adds	r2, r0, #1
 800ff9c:	4606      	mov	r6, r0
 800ff9e:	d1d6      	bne.n	800ff4e <_svfiprintf_r+0x176>
 800ffa0:	89ab      	ldrh	r3, [r5, #12]
 800ffa2:	065b      	lsls	r3, r3, #25
 800ffa4:	f53f af2c 	bmi.w	800fe00 <_svfiprintf_r+0x28>
 800ffa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffaa:	b01d      	add	sp, #116	; 0x74
 800ffac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb0:	ab03      	add	r3, sp, #12
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	462a      	mov	r2, r5
 800ffb6:	4b06      	ldr	r3, [pc, #24]	; (800ffd0 <_svfiprintf_r+0x1f8>)
 800ffb8:	a904      	add	r1, sp, #16
 800ffba:	4638      	mov	r0, r7
 800ffbc:	f7fc f96e 	bl	800c29c <_printf_i>
 800ffc0:	e7eb      	b.n	800ff9a <_svfiprintf_r+0x1c2>
 800ffc2:	bf00      	nop
 800ffc4:	08010b94 	.word	0x08010b94
 800ffc8:	08010b9e 	.word	0x08010b9e
 800ffcc:	0800bd55 	.word	0x0800bd55
 800ffd0:	0800fd21 	.word	0x0800fd21
 800ffd4:	08010b9a 	.word	0x08010b9a

0800ffd8 <__sfputc_r>:
 800ffd8:	6893      	ldr	r3, [r2, #8]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	b410      	push	{r4}
 800ffe0:	6093      	str	r3, [r2, #8]
 800ffe2:	da08      	bge.n	800fff6 <__sfputc_r+0x1e>
 800ffe4:	6994      	ldr	r4, [r2, #24]
 800ffe6:	42a3      	cmp	r3, r4
 800ffe8:	db01      	blt.n	800ffee <__sfputc_r+0x16>
 800ffea:	290a      	cmp	r1, #10
 800ffec:	d103      	bne.n	800fff6 <__sfputc_r+0x1e>
 800ffee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fff2:	f7fd bbe9 	b.w	800d7c8 <__swbuf_r>
 800fff6:	6813      	ldr	r3, [r2, #0]
 800fff8:	1c58      	adds	r0, r3, #1
 800fffa:	6010      	str	r0, [r2, #0]
 800fffc:	7019      	strb	r1, [r3, #0]
 800fffe:	4608      	mov	r0, r1
 8010000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010004:	4770      	bx	lr

08010006 <__sfputs_r>:
 8010006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010008:	4606      	mov	r6, r0
 801000a:	460f      	mov	r7, r1
 801000c:	4614      	mov	r4, r2
 801000e:	18d5      	adds	r5, r2, r3
 8010010:	42ac      	cmp	r4, r5
 8010012:	d101      	bne.n	8010018 <__sfputs_r+0x12>
 8010014:	2000      	movs	r0, #0
 8010016:	e007      	b.n	8010028 <__sfputs_r+0x22>
 8010018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801001c:	463a      	mov	r2, r7
 801001e:	4630      	mov	r0, r6
 8010020:	f7ff ffda 	bl	800ffd8 <__sfputc_r>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d1f3      	bne.n	8010010 <__sfputs_r+0xa>
 8010028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801002c <_vfiprintf_r>:
 801002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010030:	460d      	mov	r5, r1
 8010032:	b09d      	sub	sp, #116	; 0x74
 8010034:	4614      	mov	r4, r2
 8010036:	4698      	mov	r8, r3
 8010038:	4606      	mov	r6, r0
 801003a:	b118      	cbz	r0, 8010044 <_vfiprintf_r+0x18>
 801003c:	6983      	ldr	r3, [r0, #24]
 801003e:	b90b      	cbnz	r3, 8010044 <_vfiprintf_r+0x18>
 8010040:	f7fe fc16 	bl	800e870 <__sinit>
 8010044:	4b89      	ldr	r3, [pc, #548]	; (801026c <_vfiprintf_r+0x240>)
 8010046:	429d      	cmp	r5, r3
 8010048:	d11b      	bne.n	8010082 <_vfiprintf_r+0x56>
 801004a:	6875      	ldr	r5, [r6, #4]
 801004c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801004e:	07d9      	lsls	r1, r3, #31
 8010050:	d405      	bmi.n	801005e <_vfiprintf_r+0x32>
 8010052:	89ab      	ldrh	r3, [r5, #12]
 8010054:	059a      	lsls	r2, r3, #22
 8010056:	d402      	bmi.n	801005e <_vfiprintf_r+0x32>
 8010058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801005a:	f7ff f81a 	bl	800f092 <__retarget_lock_acquire_recursive>
 801005e:	89ab      	ldrh	r3, [r5, #12]
 8010060:	071b      	lsls	r3, r3, #28
 8010062:	d501      	bpl.n	8010068 <_vfiprintf_r+0x3c>
 8010064:	692b      	ldr	r3, [r5, #16]
 8010066:	b9eb      	cbnz	r3, 80100a4 <_vfiprintf_r+0x78>
 8010068:	4629      	mov	r1, r5
 801006a:	4630      	mov	r0, r6
 801006c:	f7fd fbfe 	bl	800d86c <__swsetup_r>
 8010070:	b1c0      	cbz	r0, 80100a4 <_vfiprintf_r+0x78>
 8010072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010074:	07dc      	lsls	r4, r3, #31
 8010076:	d50e      	bpl.n	8010096 <_vfiprintf_r+0x6a>
 8010078:	f04f 30ff 	mov.w	r0, #4294967295
 801007c:	b01d      	add	sp, #116	; 0x74
 801007e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010082:	4b7b      	ldr	r3, [pc, #492]	; (8010270 <_vfiprintf_r+0x244>)
 8010084:	429d      	cmp	r5, r3
 8010086:	d101      	bne.n	801008c <_vfiprintf_r+0x60>
 8010088:	68b5      	ldr	r5, [r6, #8]
 801008a:	e7df      	b.n	801004c <_vfiprintf_r+0x20>
 801008c:	4b79      	ldr	r3, [pc, #484]	; (8010274 <_vfiprintf_r+0x248>)
 801008e:	429d      	cmp	r5, r3
 8010090:	bf08      	it	eq
 8010092:	68f5      	ldreq	r5, [r6, #12]
 8010094:	e7da      	b.n	801004c <_vfiprintf_r+0x20>
 8010096:	89ab      	ldrh	r3, [r5, #12]
 8010098:	0598      	lsls	r0, r3, #22
 801009a:	d4ed      	bmi.n	8010078 <_vfiprintf_r+0x4c>
 801009c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801009e:	f7fe fff9 	bl	800f094 <__retarget_lock_release_recursive>
 80100a2:	e7e9      	b.n	8010078 <_vfiprintf_r+0x4c>
 80100a4:	2300      	movs	r3, #0
 80100a6:	9309      	str	r3, [sp, #36]	; 0x24
 80100a8:	2320      	movs	r3, #32
 80100aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80100b2:	2330      	movs	r3, #48	; 0x30
 80100b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010278 <_vfiprintf_r+0x24c>
 80100b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100bc:	f04f 0901 	mov.w	r9, #1
 80100c0:	4623      	mov	r3, r4
 80100c2:	469a      	mov	sl, r3
 80100c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100c8:	b10a      	cbz	r2, 80100ce <_vfiprintf_r+0xa2>
 80100ca:	2a25      	cmp	r2, #37	; 0x25
 80100cc:	d1f9      	bne.n	80100c2 <_vfiprintf_r+0x96>
 80100ce:	ebba 0b04 	subs.w	fp, sl, r4
 80100d2:	d00b      	beq.n	80100ec <_vfiprintf_r+0xc0>
 80100d4:	465b      	mov	r3, fp
 80100d6:	4622      	mov	r2, r4
 80100d8:	4629      	mov	r1, r5
 80100da:	4630      	mov	r0, r6
 80100dc:	f7ff ff93 	bl	8010006 <__sfputs_r>
 80100e0:	3001      	adds	r0, #1
 80100e2:	f000 80aa 	beq.w	801023a <_vfiprintf_r+0x20e>
 80100e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100e8:	445a      	add	r2, fp
 80100ea:	9209      	str	r2, [sp, #36]	; 0x24
 80100ec:	f89a 3000 	ldrb.w	r3, [sl]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f000 80a2 	beq.w	801023a <_vfiprintf_r+0x20e>
 80100f6:	2300      	movs	r3, #0
 80100f8:	f04f 32ff 	mov.w	r2, #4294967295
 80100fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010100:	f10a 0a01 	add.w	sl, sl, #1
 8010104:	9304      	str	r3, [sp, #16]
 8010106:	9307      	str	r3, [sp, #28]
 8010108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801010c:	931a      	str	r3, [sp, #104]	; 0x68
 801010e:	4654      	mov	r4, sl
 8010110:	2205      	movs	r2, #5
 8010112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010116:	4858      	ldr	r0, [pc, #352]	; (8010278 <_vfiprintf_r+0x24c>)
 8010118:	f7f0 f86a 	bl	80001f0 <memchr>
 801011c:	9a04      	ldr	r2, [sp, #16]
 801011e:	b9d8      	cbnz	r0, 8010158 <_vfiprintf_r+0x12c>
 8010120:	06d1      	lsls	r1, r2, #27
 8010122:	bf44      	itt	mi
 8010124:	2320      	movmi	r3, #32
 8010126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801012a:	0713      	lsls	r3, r2, #28
 801012c:	bf44      	itt	mi
 801012e:	232b      	movmi	r3, #43	; 0x2b
 8010130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010134:	f89a 3000 	ldrb.w	r3, [sl]
 8010138:	2b2a      	cmp	r3, #42	; 0x2a
 801013a:	d015      	beq.n	8010168 <_vfiprintf_r+0x13c>
 801013c:	9a07      	ldr	r2, [sp, #28]
 801013e:	4654      	mov	r4, sl
 8010140:	2000      	movs	r0, #0
 8010142:	f04f 0c0a 	mov.w	ip, #10
 8010146:	4621      	mov	r1, r4
 8010148:	f811 3b01 	ldrb.w	r3, [r1], #1
 801014c:	3b30      	subs	r3, #48	; 0x30
 801014e:	2b09      	cmp	r3, #9
 8010150:	d94e      	bls.n	80101f0 <_vfiprintf_r+0x1c4>
 8010152:	b1b0      	cbz	r0, 8010182 <_vfiprintf_r+0x156>
 8010154:	9207      	str	r2, [sp, #28]
 8010156:	e014      	b.n	8010182 <_vfiprintf_r+0x156>
 8010158:	eba0 0308 	sub.w	r3, r0, r8
 801015c:	fa09 f303 	lsl.w	r3, r9, r3
 8010160:	4313      	orrs	r3, r2
 8010162:	9304      	str	r3, [sp, #16]
 8010164:	46a2      	mov	sl, r4
 8010166:	e7d2      	b.n	801010e <_vfiprintf_r+0xe2>
 8010168:	9b03      	ldr	r3, [sp, #12]
 801016a:	1d19      	adds	r1, r3, #4
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	9103      	str	r1, [sp, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	bfbb      	ittet	lt
 8010174:	425b      	neglt	r3, r3
 8010176:	f042 0202 	orrlt.w	r2, r2, #2
 801017a:	9307      	strge	r3, [sp, #28]
 801017c:	9307      	strlt	r3, [sp, #28]
 801017e:	bfb8      	it	lt
 8010180:	9204      	strlt	r2, [sp, #16]
 8010182:	7823      	ldrb	r3, [r4, #0]
 8010184:	2b2e      	cmp	r3, #46	; 0x2e
 8010186:	d10c      	bne.n	80101a2 <_vfiprintf_r+0x176>
 8010188:	7863      	ldrb	r3, [r4, #1]
 801018a:	2b2a      	cmp	r3, #42	; 0x2a
 801018c:	d135      	bne.n	80101fa <_vfiprintf_r+0x1ce>
 801018e:	9b03      	ldr	r3, [sp, #12]
 8010190:	1d1a      	adds	r2, r3, #4
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	9203      	str	r2, [sp, #12]
 8010196:	2b00      	cmp	r3, #0
 8010198:	bfb8      	it	lt
 801019a:	f04f 33ff 	movlt.w	r3, #4294967295
 801019e:	3402      	adds	r4, #2
 80101a0:	9305      	str	r3, [sp, #20]
 80101a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010288 <_vfiprintf_r+0x25c>
 80101a6:	7821      	ldrb	r1, [r4, #0]
 80101a8:	2203      	movs	r2, #3
 80101aa:	4650      	mov	r0, sl
 80101ac:	f7f0 f820 	bl	80001f0 <memchr>
 80101b0:	b140      	cbz	r0, 80101c4 <_vfiprintf_r+0x198>
 80101b2:	2340      	movs	r3, #64	; 0x40
 80101b4:	eba0 000a 	sub.w	r0, r0, sl
 80101b8:	fa03 f000 	lsl.w	r0, r3, r0
 80101bc:	9b04      	ldr	r3, [sp, #16]
 80101be:	4303      	orrs	r3, r0
 80101c0:	3401      	adds	r4, #1
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101c8:	482c      	ldr	r0, [pc, #176]	; (801027c <_vfiprintf_r+0x250>)
 80101ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101ce:	2206      	movs	r2, #6
 80101d0:	f7f0 f80e 	bl	80001f0 <memchr>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d03f      	beq.n	8010258 <_vfiprintf_r+0x22c>
 80101d8:	4b29      	ldr	r3, [pc, #164]	; (8010280 <_vfiprintf_r+0x254>)
 80101da:	bb1b      	cbnz	r3, 8010224 <_vfiprintf_r+0x1f8>
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	3307      	adds	r3, #7
 80101e0:	f023 0307 	bic.w	r3, r3, #7
 80101e4:	3308      	adds	r3, #8
 80101e6:	9303      	str	r3, [sp, #12]
 80101e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ea:	443b      	add	r3, r7
 80101ec:	9309      	str	r3, [sp, #36]	; 0x24
 80101ee:	e767      	b.n	80100c0 <_vfiprintf_r+0x94>
 80101f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80101f4:	460c      	mov	r4, r1
 80101f6:	2001      	movs	r0, #1
 80101f8:	e7a5      	b.n	8010146 <_vfiprintf_r+0x11a>
 80101fa:	2300      	movs	r3, #0
 80101fc:	3401      	adds	r4, #1
 80101fe:	9305      	str	r3, [sp, #20]
 8010200:	4619      	mov	r1, r3
 8010202:	f04f 0c0a 	mov.w	ip, #10
 8010206:	4620      	mov	r0, r4
 8010208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801020c:	3a30      	subs	r2, #48	; 0x30
 801020e:	2a09      	cmp	r2, #9
 8010210:	d903      	bls.n	801021a <_vfiprintf_r+0x1ee>
 8010212:	2b00      	cmp	r3, #0
 8010214:	d0c5      	beq.n	80101a2 <_vfiprintf_r+0x176>
 8010216:	9105      	str	r1, [sp, #20]
 8010218:	e7c3      	b.n	80101a2 <_vfiprintf_r+0x176>
 801021a:	fb0c 2101 	mla	r1, ip, r1, r2
 801021e:	4604      	mov	r4, r0
 8010220:	2301      	movs	r3, #1
 8010222:	e7f0      	b.n	8010206 <_vfiprintf_r+0x1da>
 8010224:	ab03      	add	r3, sp, #12
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	462a      	mov	r2, r5
 801022a:	4b16      	ldr	r3, [pc, #88]	; (8010284 <_vfiprintf_r+0x258>)
 801022c:	a904      	add	r1, sp, #16
 801022e:	4630      	mov	r0, r6
 8010230:	f7fb fd90 	bl	800bd54 <_printf_float>
 8010234:	4607      	mov	r7, r0
 8010236:	1c78      	adds	r0, r7, #1
 8010238:	d1d6      	bne.n	80101e8 <_vfiprintf_r+0x1bc>
 801023a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801023c:	07d9      	lsls	r1, r3, #31
 801023e:	d405      	bmi.n	801024c <_vfiprintf_r+0x220>
 8010240:	89ab      	ldrh	r3, [r5, #12]
 8010242:	059a      	lsls	r2, r3, #22
 8010244:	d402      	bmi.n	801024c <_vfiprintf_r+0x220>
 8010246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010248:	f7fe ff24 	bl	800f094 <__retarget_lock_release_recursive>
 801024c:	89ab      	ldrh	r3, [r5, #12]
 801024e:	065b      	lsls	r3, r3, #25
 8010250:	f53f af12 	bmi.w	8010078 <_vfiprintf_r+0x4c>
 8010254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010256:	e711      	b.n	801007c <_vfiprintf_r+0x50>
 8010258:	ab03      	add	r3, sp, #12
 801025a:	9300      	str	r3, [sp, #0]
 801025c:	462a      	mov	r2, r5
 801025e:	4b09      	ldr	r3, [pc, #36]	; (8010284 <_vfiprintf_r+0x258>)
 8010260:	a904      	add	r1, sp, #16
 8010262:	4630      	mov	r0, r6
 8010264:	f7fc f81a 	bl	800c29c <_printf_i>
 8010268:	e7e4      	b.n	8010234 <_vfiprintf_r+0x208>
 801026a:	bf00      	nop
 801026c:	0801097c 	.word	0x0801097c
 8010270:	0801099c 	.word	0x0801099c
 8010274:	0801095c 	.word	0x0801095c
 8010278:	08010b94 	.word	0x08010b94
 801027c:	08010b9e 	.word	0x08010b9e
 8010280:	0800bd55 	.word	0x0800bd55
 8010284:	08010007 	.word	0x08010007
 8010288:	08010b9a 	.word	0x08010b9a
 801028c:	00000000 	.word	0x00000000

08010290 <nan>:
 8010290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010298 <nan+0x8>
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	00000000 	.word	0x00000000
 801029c:	7ff80000 	.word	0x7ff80000

080102a0 <_sbrk_r>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4d06      	ldr	r5, [pc, #24]	; (80102bc <_sbrk_r+0x1c>)
 80102a4:	2300      	movs	r3, #0
 80102a6:	4604      	mov	r4, r0
 80102a8:	4608      	mov	r0, r1
 80102aa:	602b      	str	r3, [r5, #0]
 80102ac:	f7f2 ff96 	bl	80031dc <_sbrk>
 80102b0:	1c43      	adds	r3, r0, #1
 80102b2:	d102      	bne.n	80102ba <_sbrk_r+0x1a>
 80102b4:	682b      	ldr	r3, [r5, #0]
 80102b6:	b103      	cbz	r3, 80102ba <_sbrk_r+0x1a>
 80102b8:	6023      	str	r3, [r4, #0]
 80102ba:	bd38      	pop	{r3, r4, r5, pc}
 80102bc:	20001838 	.word	0x20001838

080102c0 <__sread>:
 80102c0:	b510      	push	{r4, lr}
 80102c2:	460c      	mov	r4, r1
 80102c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102c8:	f000 f93a 	bl	8010540 <_read_r>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	bfab      	itete	ge
 80102d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102d2:	89a3      	ldrhlt	r3, [r4, #12]
 80102d4:	181b      	addge	r3, r3, r0
 80102d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102da:	bfac      	ite	ge
 80102dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80102de:	81a3      	strhlt	r3, [r4, #12]
 80102e0:	bd10      	pop	{r4, pc}

080102e2 <__swrite>:
 80102e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e6:	461f      	mov	r7, r3
 80102e8:	898b      	ldrh	r3, [r1, #12]
 80102ea:	05db      	lsls	r3, r3, #23
 80102ec:	4605      	mov	r5, r0
 80102ee:	460c      	mov	r4, r1
 80102f0:	4616      	mov	r6, r2
 80102f2:	d505      	bpl.n	8010300 <__swrite+0x1e>
 80102f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102f8:	2302      	movs	r3, #2
 80102fa:	2200      	movs	r2, #0
 80102fc:	f000 f8b8 	bl	8010470 <_lseek_r>
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	4632      	mov	r2, r6
 801030e:	463b      	mov	r3, r7
 8010310:	4628      	mov	r0, r5
 8010312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010316:	f000 b837 	b.w	8010388 <_write_r>

0801031a <__sseek>:
 801031a:	b510      	push	{r4, lr}
 801031c:	460c      	mov	r4, r1
 801031e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010322:	f000 f8a5 	bl	8010470 <_lseek_r>
 8010326:	1c43      	adds	r3, r0, #1
 8010328:	89a3      	ldrh	r3, [r4, #12]
 801032a:	bf15      	itete	ne
 801032c:	6560      	strne	r0, [r4, #84]	; 0x54
 801032e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010336:	81a3      	strheq	r3, [r4, #12]
 8010338:	bf18      	it	ne
 801033a:	81a3      	strhne	r3, [r4, #12]
 801033c:	bd10      	pop	{r4, pc}

0801033e <__sclose>:
 801033e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010342:	f000 b851 	b.w	80103e8 <_close_r>

08010346 <strncmp>:
 8010346:	b510      	push	{r4, lr}
 8010348:	b17a      	cbz	r2, 801036a <strncmp+0x24>
 801034a:	4603      	mov	r3, r0
 801034c:	3901      	subs	r1, #1
 801034e:	1884      	adds	r4, r0, r2
 8010350:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010354:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010358:	4290      	cmp	r0, r2
 801035a:	d101      	bne.n	8010360 <strncmp+0x1a>
 801035c:	42a3      	cmp	r3, r4
 801035e:	d101      	bne.n	8010364 <strncmp+0x1e>
 8010360:	1a80      	subs	r0, r0, r2
 8010362:	bd10      	pop	{r4, pc}
 8010364:	2800      	cmp	r0, #0
 8010366:	d1f3      	bne.n	8010350 <strncmp+0xa>
 8010368:	e7fa      	b.n	8010360 <strncmp+0x1a>
 801036a:	4610      	mov	r0, r2
 801036c:	e7f9      	b.n	8010362 <strncmp+0x1c>

0801036e <__ascii_wctomb>:
 801036e:	b149      	cbz	r1, 8010384 <__ascii_wctomb+0x16>
 8010370:	2aff      	cmp	r2, #255	; 0xff
 8010372:	bf85      	ittet	hi
 8010374:	238a      	movhi	r3, #138	; 0x8a
 8010376:	6003      	strhi	r3, [r0, #0]
 8010378:	700a      	strbls	r2, [r1, #0]
 801037a:	f04f 30ff 	movhi.w	r0, #4294967295
 801037e:	bf98      	it	ls
 8010380:	2001      	movls	r0, #1
 8010382:	4770      	bx	lr
 8010384:	4608      	mov	r0, r1
 8010386:	4770      	bx	lr

08010388 <_write_r>:
 8010388:	b538      	push	{r3, r4, r5, lr}
 801038a:	4d07      	ldr	r5, [pc, #28]	; (80103a8 <_write_r+0x20>)
 801038c:	4604      	mov	r4, r0
 801038e:	4608      	mov	r0, r1
 8010390:	4611      	mov	r1, r2
 8010392:	2200      	movs	r2, #0
 8010394:	602a      	str	r2, [r5, #0]
 8010396:	461a      	mov	r2, r3
 8010398:	f7f2 fecf 	bl	800313a <_write>
 801039c:	1c43      	adds	r3, r0, #1
 801039e:	d102      	bne.n	80103a6 <_write_r+0x1e>
 80103a0:	682b      	ldr	r3, [r5, #0]
 80103a2:	b103      	cbz	r3, 80103a6 <_write_r+0x1e>
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	bd38      	pop	{r3, r4, r5, pc}
 80103a8:	20001838 	.word	0x20001838

080103ac <__assert_func>:
 80103ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103ae:	4614      	mov	r4, r2
 80103b0:	461a      	mov	r2, r3
 80103b2:	4b09      	ldr	r3, [pc, #36]	; (80103d8 <__assert_func+0x2c>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4605      	mov	r5, r0
 80103b8:	68d8      	ldr	r0, [r3, #12]
 80103ba:	b14c      	cbz	r4, 80103d0 <__assert_func+0x24>
 80103bc:	4b07      	ldr	r3, [pc, #28]	; (80103dc <__assert_func+0x30>)
 80103be:	9100      	str	r1, [sp, #0]
 80103c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103c4:	4906      	ldr	r1, [pc, #24]	; (80103e0 <__assert_func+0x34>)
 80103c6:	462b      	mov	r3, r5
 80103c8:	f000 f81e 	bl	8010408 <fiprintf>
 80103cc:	f000 f8ca 	bl	8010564 <abort>
 80103d0:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <__assert_func+0x38>)
 80103d2:	461c      	mov	r4, r3
 80103d4:	e7f3      	b.n	80103be <__assert_func+0x12>
 80103d6:	bf00      	nop
 80103d8:	20000100 	.word	0x20000100
 80103dc:	08010ba5 	.word	0x08010ba5
 80103e0:	08010bb2 	.word	0x08010bb2
 80103e4:	08010be0 	.word	0x08010be0

080103e8 <_close_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4d06      	ldr	r5, [pc, #24]	; (8010404 <_close_r+0x1c>)
 80103ec:	2300      	movs	r3, #0
 80103ee:	4604      	mov	r4, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	602b      	str	r3, [r5, #0]
 80103f4:	f7f2 febd 	bl	8003172 <_close>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d102      	bne.n	8010402 <_close_r+0x1a>
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	b103      	cbz	r3, 8010402 <_close_r+0x1a>
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	bd38      	pop	{r3, r4, r5, pc}
 8010404:	20001838 	.word	0x20001838

08010408 <fiprintf>:
 8010408:	b40e      	push	{r1, r2, r3}
 801040a:	b503      	push	{r0, r1, lr}
 801040c:	4601      	mov	r1, r0
 801040e:	ab03      	add	r3, sp, #12
 8010410:	4805      	ldr	r0, [pc, #20]	; (8010428 <fiprintf+0x20>)
 8010412:	f853 2b04 	ldr.w	r2, [r3], #4
 8010416:	6800      	ldr	r0, [r0, #0]
 8010418:	9301      	str	r3, [sp, #4]
 801041a:	f7ff fe07 	bl	801002c <_vfiprintf_r>
 801041e:	b002      	add	sp, #8
 8010420:	f85d eb04 	ldr.w	lr, [sp], #4
 8010424:	b003      	add	sp, #12
 8010426:	4770      	bx	lr
 8010428:	20000100 	.word	0x20000100

0801042c <_fstat_r>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	4d07      	ldr	r5, [pc, #28]	; (801044c <_fstat_r+0x20>)
 8010430:	2300      	movs	r3, #0
 8010432:	4604      	mov	r4, r0
 8010434:	4608      	mov	r0, r1
 8010436:	4611      	mov	r1, r2
 8010438:	602b      	str	r3, [r5, #0]
 801043a:	f7f2 fea6 	bl	800318a <_fstat>
 801043e:	1c43      	adds	r3, r0, #1
 8010440:	d102      	bne.n	8010448 <_fstat_r+0x1c>
 8010442:	682b      	ldr	r3, [r5, #0]
 8010444:	b103      	cbz	r3, 8010448 <_fstat_r+0x1c>
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	bd38      	pop	{r3, r4, r5, pc}
 801044a:	bf00      	nop
 801044c:	20001838 	.word	0x20001838

08010450 <_isatty_r>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4d06      	ldr	r5, [pc, #24]	; (801046c <_isatty_r+0x1c>)
 8010454:	2300      	movs	r3, #0
 8010456:	4604      	mov	r4, r0
 8010458:	4608      	mov	r0, r1
 801045a:	602b      	str	r3, [r5, #0]
 801045c:	f7f2 fea5 	bl	80031aa <_isatty>
 8010460:	1c43      	adds	r3, r0, #1
 8010462:	d102      	bne.n	801046a <_isatty_r+0x1a>
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	b103      	cbz	r3, 801046a <_isatty_r+0x1a>
 8010468:	6023      	str	r3, [r4, #0]
 801046a:	bd38      	pop	{r3, r4, r5, pc}
 801046c:	20001838 	.word	0x20001838

08010470 <_lseek_r>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	4d07      	ldr	r5, [pc, #28]	; (8010490 <_lseek_r+0x20>)
 8010474:	4604      	mov	r4, r0
 8010476:	4608      	mov	r0, r1
 8010478:	4611      	mov	r1, r2
 801047a:	2200      	movs	r2, #0
 801047c:	602a      	str	r2, [r5, #0]
 801047e:	461a      	mov	r2, r3
 8010480:	f7f2 fe9e 	bl	80031c0 <_lseek>
 8010484:	1c43      	adds	r3, r0, #1
 8010486:	d102      	bne.n	801048e <_lseek_r+0x1e>
 8010488:	682b      	ldr	r3, [r5, #0]
 801048a:	b103      	cbz	r3, 801048e <_lseek_r+0x1e>
 801048c:	6023      	str	r3, [r4, #0]
 801048e:	bd38      	pop	{r3, r4, r5, pc}
 8010490:	20001838 	.word	0x20001838

08010494 <memmove>:
 8010494:	4288      	cmp	r0, r1
 8010496:	b510      	push	{r4, lr}
 8010498:	eb01 0402 	add.w	r4, r1, r2
 801049c:	d902      	bls.n	80104a4 <memmove+0x10>
 801049e:	4284      	cmp	r4, r0
 80104a0:	4623      	mov	r3, r4
 80104a2:	d807      	bhi.n	80104b4 <memmove+0x20>
 80104a4:	1e43      	subs	r3, r0, #1
 80104a6:	42a1      	cmp	r1, r4
 80104a8:	d008      	beq.n	80104bc <memmove+0x28>
 80104aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104b2:	e7f8      	b.n	80104a6 <memmove+0x12>
 80104b4:	4402      	add	r2, r0
 80104b6:	4601      	mov	r1, r0
 80104b8:	428a      	cmp	r2, r1
 80104ba:	d100      	bne.n	80104be <memmove+0x2a>
 80104bc:	bd10      	pop	{r4, pc}
 80104be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104c6:	e7f7      	b.n	80104b8 <memmove+0x24>

080104c8 <__malloc_lock>:
 80104c8:	4801      	ldr	r0, [pc, #4]	; (80104d0 <__malloc_lock+0x8>)
 80104ca:	f7fe bde2 	b.w	800f092 <__retarget_lock_acquire_recursive>
 80104ce:	bf00      	nop
 80104d0:	2000182c 	.word	0x2000182c

080104d4 <__malloc_unlock>:
 80104d4:	4801      	ldr	r0, [pc, #4]	; (80104dc <__malloc_unlock+0x8>)
 80104d6:	f7fe bddd 	b.w	800f094 <__retarget_lock_release_recursive>
 80104da:	bf00      	nop
 80104dc:	2000182c 	.word	0x2000182c

080104e0 <_realloc_r>:
 80104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e4:	4680      	mov	r8, r0
 80104e6:	4614      	mov	r4, r2
 80104e8:	460e      	mov	r6, r1
 80104ea:	b921      	cbnz	r1, 80104f6 <_realloc_r+0x16>
 80104ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f0:	4611      	mov	r1, r2
 80104f2:	f7ff bba1 	b.w	800fc38 <_malloc_r>
 80104f6:	b92a      	cbnz	r2, 8010504 <_realloc_r+0x24>
 80104f8:	f7ff fb32 	bl	800fb60 <_free_r>
 80104fc:	4625      	mov	r5, r4
 80104fe:	4628      	mov	r0, r5
 8010500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010504:	f000 f835 	bl	8010572 <_malloc_usable_size_r>
 8010508:	4284      	cmp	r4, r0
 801050a:	4607      	mov	r7, r0
 801050c:	d802      	bhi.n	8010514 <_realloc_r+0x34>
 801050e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010512:	d812      	bhi.n	801053a <_realloc_r+0x5a>
 8010514:	4621      	mov	r1, r4
 8010516:	4640      	mov	r0, r8
 8010518:	f7ff fb8e 	bl	800fc38 <_malloc_r>
 801051c:	4605      	mov	r5, r0
 801051e:	2800      	cmp	r0, #0
 8010520:	d0ed      	beq.n	80104fe <_realloc_r+0x1e>
 8010522:	42bc      	cmp	r4, r7
 8010524:	4622      	mov	r2, r4
 8010526:	4631      	mov	r1, r6
 8010528:	bf28      	it	cs
 801052a:	463a      	movcs	r2, r7
 801052c:	f7fe fe32 	bl	800f194 <memcpy>
 8010530:	4631      	mov	r1, r6
 8010532:	4640      	mov	r0, r8
 8010534:	f7ff fb14 	bl	800fb60 <_free_r>
 8010538:	e7e1      	b.n	80104fe <_realloc_r+0x1e>
 801053a:	4635      	mov	r5, r6
 801053c:	e7df      	b.n	80104fe <_realloc_r+0x1e>
	...

08010540 <_read_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4d07      	ldr	r5, [pc, #28]	; (8010560 <_read_r+0x20>)
 8010544:	4604      	mov	r4, r0
 8010546:	4608      	mov	r0, r1
 8010548:	4611      	mov	r1, r2
 801054a:	2200      	movs	r2, #0
 801054c:	602a      	str	r2, [r5, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	f7f2 fdd6 	bl	8003100 <_read>
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	d102      	bne.n	801055e <_read_r+0x1e>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	b103      	cbz	r3, 801055e <_read_r+0x1e>
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	bd38      	pop	{r3, r4, r5, pc}
 8010560:	20001838 	.word	0x20001838

08010564 <abort>:
 8010564:	b508      	push	{r3, lr}
 8010566:	2006      	movs	r0, #6
 8010568:	f000 f834 	bl	80105d4 <raise>
 801056c:	2001      	movs	r0, #1
 801056e:	f7f2 fdbd 	bl	80030ec <_exit>

08010572 <_malloc_usable_size_r>:
 8010572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010576:	1f18      	subs	r0, r3, #4
 8010578:	2b00      	cmp	r3, #0
 801057a:	bfbc      	itt	lt
 801057c:	580b      	ldrlt	r3, [r1, r0]
 801057e:	18c0      	addlt	r0, r0, r3
 8010580:	4770      	bx	lr

08010582 <_raise_r>:
 8010582:	291f      	cmp	r1, #31
 8010584:	b538      	push	{r3, r4, r5, lr}
 8010586:	4604      	mov	r4, r0
 8010588:	460d      	mov	r5, r1
 801058a:	d904      	bls.n	8010596 <_raise_r+0x14>
 801058c:	2316      	movs	r3, #22
 801058e:	6003      	str	r3, [r0, #0]
 8010590:	f04f 30ff 	mov.w	r0, #4294967295
 8010594:	bd38      	pop	{r3, r4, r5, pc}
 8010596:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010598:	b112      	cbz	r2, 80105a0 <_raise_r+0x1e>
 801059a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801059e:	b94b      	cbnz	r3, 80105b4 <_raise_r+0x32>
 80105a0:	4620      	mov	r0, r4
 80105a2:	f000 f831 	bl	8010608 <_getpid_r>
 80105a6:	462a      	mov	r2, r5
 80105a8:	4601      	mov	r1, r0
 80105aa:	4620      	mov	r0, r4
 80105ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105b0:	f000 b818 	b.w	80105e4 <_kill_r>
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d00a      	beq.n	80105ce <_raise_r+0x4c>
 80105b8:	1c59      	adds	r1, r3, #1
 80105ba:	d103      	bne.n	80105c4 <_raise_r+0x42>
 80105bc:	2316      	movs	r3, #22
 80105be:	6003      	str	r3, [r0, #0]
 80105c0:	2001      	movs	r0, #1
 80105c2:	e7e7      	b.n	8010594 <_raise_r+0x12>
 80105c4:	2400      	movs	r4, #0
 80105c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105ca:	4628      	mov	r0, r5
 80105cc:	4798      	blx	r3
 80105ce:	2000      	movs	r0, #0
 80105d0:	e7e0      	b.n	8010594 <_raise_r+0x12>
	...

080105d4 <raise>:
 80105d4:	4b02      	ldr	r3, [pc, #8]	; (80105e0 <raise+0xc>)
 80105d6:	4601      	mov	r1, r0
 80105d8:	6818      	ldr	r0, [r3, #0]
 80105da:	f7ff bfd2 	b.w	8010582 <_raise_r>
 80105de:	bf00      	nop
 80105e0:	20000100 	.word	0x20000100

080105e4 <_kill_r>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	4d07      	ldr	r5, [pc, #28]	; (8010604 <_kill_r+0x20>)
 80105e8:	2300      	movs	r3, #0
 80105ea:	4604      	mov	r4, r0
 80105ec:	4608      	mov	r0, r1
 80105ee:	4611      	mov	r1, r2
 80105f0:	602b      	str	r3, [r5, #0]
 80105f2:	f7f2 fd6b 	bl	80030cc <_kill>
 80105f6:	1c43      	adds	r3, r0, #1
 80105f8:	d102      	bne.n	8010600 <_kill_r+0x1c>
 80105fa:	682b      	ldr	r3, [r5, #0]
 80105fc:	b103      	cbz	r3, 8010600 <_kill_r+0x1c>
 80105fe:	6023      	str	r3, [r4, #0]
 8010600:	bd38      	pop	{r3, r4, r5, pc}
 8010602:	bf00      	nop
 8010604:	20001838 	.word	0x20001838

08010608 <_getpid_r>:
 8010608:	f7f2 bd58 	b.w	80030bc <_getpid>

0801060c <_init>:
 801060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060e:	bf00      	nop
 8010610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010612:	bc08      	pop	{r3}
 8010614:	469e      	mov	lr, r3
 8010616:	4770      	bx	lr

08010618 <_fini>:
 8010618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061a:	bf00      	nop
 801061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801061e:	bc08      	pop	{r3}
 8010620:	469e      	mov	lr, r3
 8010622:	4770      	bx	lr
