
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d35c  0800d35c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d364  0800d364  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d364  0800d364  0001d364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000910  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c778  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c7  00000000  00000000  0003c98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  0003fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001690  00000000  00000000  00041208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274fe  00000000  00000000  00042898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af53  00000000  00000000  00069d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9bf0  00000000  00000000  00084ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e8d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dec  00000000  00000000  0016e92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cdc4 	.word	0x0800cdc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800cdc4 	.word	0x0800cdc4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9f5 	b.w	80010b4 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9aa 	b.w	80010b4 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468e      	mov	lr, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d14d      	bne.n	8000e8e <__udivmoddi4+0xaa>
 8000df2:	428a      	cmp	r2, r1
 8000df4:	4694      	mov	ip, r2
 8000df6:	d969      	bls.n	8000ecc <__udivmoddi4+0xe8>
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b152      	cbz	r2, 8000e14 <__udivmoddi4+0x30>
 8000dfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000e02:	f1c2 0120 	rsb	r1, r2, #32
 8000e06:	fa20 f101 	lsr.w	r1, r0, r1
 8000e0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e12:	4094      	lsls	r4, r2
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	0c21      	lsrs	r1, r4, #16
 8000e1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e1e:	fa1f f78c 	uxth.w	r7, ip
 8000e22:	fb08 e316 	mls	r3, r8, r6, lr
 8000e26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e2a:	fb06 f107 	mul.w	r1, r6, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d90a      	bls.n	8000e48 <__udivmoddi4+0x64>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e3a:	f080 811f 	bcs.w	800107c <__udivmoddi4+0x298>
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	f240 811c 	bls.w	800107c <__udivmoddi4+0x298>
 8000e44:	3e02      	subs	r6, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb00 f707 	mul.w	r7, r0, r7
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x92>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	f080 810a 	bcs.w	8001080 <__udivmoddi4+0x29c>
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	f240 8107 	bls.w	8001080 <__udivmoddi4+0x29c>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e7a:	1be4      	subs	r4, r4, r7
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	b11d      	cbz	r5, 8000e88 <__udivmoddi4+0xa4>
 8000e80:	40d4      	lsrs	r4, r2
 8000e82:	2300      	movs	r3, #0
 8000e84:	e9c5 4300 	strd	r4, r3, [r5]
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d909      	bls.n	8000ea6 <__udivmoddi4+0xc2>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80ef 	beq.w	8001076 <__udivmoddi4+0x292>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f683 	clz	r6, r3
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x160>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xd4>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80f9 	bhi.w	80010aa <__udivmoddi4+0x2c6>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb61 0303 	sbc.w	r3, r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e0      	beq.n	8000e88 <__udivmoddi4+0xa4>
 8000ec6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eca:	e7dd      	b.n	8000e88 <__udivmoddi4+0xa4>
 8000ecc:	b902      	cbnz	r2, 8000ed0 <__udivmoddi4+0xec>
 8000ece:	deff      	udf	#255	; 0xff
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	f040 8092 	bne.w	8000ffe <__udivmoddi4+0x21a>
 8000eda:	eba1 010c 	sub.w	r1, r1, ip
 8000ede:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee2:	fa1f fe8c 	uxth.w	lr, ip
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	0c20      	lsrs	r0, r4, #16
 8000eea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eee:	fb07 1113 	mls	r1, r7, r3, r1
 8000ef2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef6:	fb0e f003 	mul.w	r0, lr, r3
 8000efa:	4288      	cmp	r0, r1
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x12c>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x12a>
 8000f08:	4288      	cmp	r0, r1
 8000f0a:	f200 80cb 	bhi.w	80010a4 <__udivmoddi4+0x2c0>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1110 	mls	r1, r7, r0, r1
 8000f1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f20:	fb0e fe00 	mul.w	lr, lr, r0
 8000f24:	45a6      	cmp	lr, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x156>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x154>
 8000f32:	45a6      	cmp	lr, r4
 8000f34:	f200 80bb 	bhi.w	80010ae <__udivmoddi4+0x2ca>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f42:	e79c      	b.n	8000e7e <__udivmoddi4+0x9a>
 8000f44:	f1c6 0720 	rsb	r7, r6, #32
 8000f48:	40b3      	lsls	r3, r6
 8000f4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f52:	fa20 f407 	lsr.w	r4, r0, r7
 8000f56:	fa01 f306 	lsl.w	r3, r1, r6
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	40f9      	lsrs	r1, r7
 8000f5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f62:	fa00 f306 	lsl.w	r3, r0, r6
 8000f66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f6a:	0c20      	lsrs	r0, r4, #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fb09 1118 	mls	r1, r9, r8, r1
 8000f74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f78:	fb08 f00e 	mul.w	r0, r8, lr
 8000f7c:	4288      	cmp	r0, r1
 8000f7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f82:	d90b      	bls.n	8000f9c <__udivmoddi4+0x1b8>
 8000f84:	eb1c 0101 	adds.w	r1, ip, r1
 8000f88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f8c:	f080 8088 	bcs.w	80010a0 <__udivmoddi4+0x2bc>
 8000f90:	4288      	cmp	r0, r1
 8000f92:	f240 8085 	bls.w	80010a0 <__udivmoddi4+0x2bc>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1a09      	subs	r1, r1, r0
 8000f9e:	b2a4      	uxth	r4, r4
 8000fa0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fa4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fa8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb0:	458e      	cmp	lr, r1
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x1e2>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fbc:	d26c      	bcs.n	8001098 <__udivmoddi4+0x2b4>
 8000fbe:	458e      	cmp	lr, r1
 8000fc0:	d96a      	bls.n	8001098 <__udivmoddi4+0x2b4>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	4461      	add	r1, ip
 8000fc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fca:	fba0 9402 	umull	r9, r4, r0, r2
 8000fce:	eba1 010e 	sub.w	r1, r1, lr
 8000fd2:	42a1      	cmp	r1, r4
 8000fd4:	46c8      	mov	r8, r9
 8000fd6:	46a6      	mov	lr, r4
 8000fd8:	d356      	bcc.n	8001088 <__udivmoddi4+0x2a4>
 8000fda:	d053      	beq.n	8001084 <__udivmoddi4+0x2a0>
 8000fdc:	b15d      	cbz	r5, 8000ff6 <__udivmoddi4+0x212>
 8000fde:	ebb3 0208 	subs.w	r2, r3, r8
 8000fe2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fe6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fea:	fa22 f306 	lsr.w	r3, r2, r6
 8000fee:	40f1      	lsrs	r1, r6
 8000ff0:	431f      	orrs	r7, r3
 8000ff2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	4631      	mov	r1, r6
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffe:	f1c2 0320 	rsb	r3, r2, #32
 8001002:	40d8      	lsrs	r0, r3
 8001004:	fa0c fc02 	lsl.w	ip, ip, r2
 8001008:	fa21 f303 	lsr.w	r3, r1, r3
 800100c:	4091      	lsls	r1, r2
 800100e:	4301      	orrs	r1, r0
 8001010:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fbb3 f0f7 	udiv	r0, r3, r7
 800101c:	fb07 3610 	mls	r6, r7, r0, r3
 8001020:	0c0b      	lsrs	r3, r1, #16
 8001022:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001026:	fb00 f60e 	mul.w	r6, r0, lr
 800102a:	429e      	cmp	r6, r3
 800102c:	fa04 f402 	lsl.w	r4, r4, r2
 8001030:	d908      	bls.n	8001044 <__udivmoddi4+0x260>
 8001032:	eb1c 0303 	adds.w	r3, ip, r3
 8001036:	f100 38ff 	add.w	r8, r0, #4294967295
 800103a:	d22f      	bcs.n	800109c <__udivmoddi4+0x2b8>
 800103c:	429e      	cmp	r6, r3
 800103e:	d92d      	bls.n	800109c <__udivmoddi4+0x2b8>
 8001040:	3802      	subs	r0, #2
 8001042:	4463      	add	r3, ip
 8001044:	1b9b      	subs	r3, r3, r6
 8001046:	b289      	uxth	r1, r1
 8001048:	fbb3 f6f7 	udiv	r6, r3, r7
 800104c:	fb07 3316 	mls	r3, r7, r6, r3
 8001050:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001054:	fb06 f30e 	mul.w	r3, r6, lr
 8001058:	428b      	cmp	r3, r1
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x28a>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f106 38ff 	add.w	r8, r6, #4294967295
 8001064:	d216      	bcs.n	8001094 <__udivmoddi4+0x2b0>
 8001066:	428b      	cmp	r3, r1
 8001068:	d914      	bls.n	8001094 <__udivmoddi4+0x2b0>
 800106a:	3e02      	subs	r6, #2
 800106c:	4461      	add	r1, ip
 800106e:	1ac9      	subs	r1, r1, r3
 8001070:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001074:	e738      	b.n	8000ee8 <__udivmoddi4+0x104>
 8001076:	462e      	mov	r6, r5
 8001078:	4628      	mov	r0, r5
 800107a:	e705      	b.n	8000e88 <__udivmoddi4+0xa4>
 800107c:	4606      	mov	r6, r0
 800107e:	e6e3      	b.n	8000e48 <__udivmoddi4+0x64>
 8001080:	4618      	mov	r0, r3
 8001082:	e6f8      	b.n	8000e76 <__udivmoddi4+0x92>
 8001084:	454b      	cmp	r3, r9
 8001086:	d2a9      	bcs.n	8000fdc <__udivmoddi4+0x1f8>
 8001088:	ebb9 0802 	subs.w	r8, r9, r2
 800108c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001090:	3801      	subs	r0, #1
 8001092:	e7a3      	b.n	8000fdc <__udivmoddi4+0x1f8>
 8001094:	4646      	mov	r6, r8
 8001096:	e7ea      	b.n	800106e <__udivmoddi4+0x28a>
 8001098:	4620      	mov	r0, r4
 800109a:	e794      	b.n	8000fc6 <__udivmoddi4+0x1e2>
 800109c:	4640      	mov	r0, r8
 800109e:	e7d1      	b.n	8001044 <__udivmoddi4+0x260>
 80010a0:	46d0      	mov	r8, sl
 80010a2:	e77b      	b.n	8000f9c <__udivmoddi4+0x1b8>
 80010a4:	3b02      	subs	r3, #2
 80010a6:	4461      	add	r1, ip
 80010a8:	e732      	b.n	8000f10 <__udivmoddi4+0x12c>
 80010aa:	4630      	mov	r0, r6
 80010ac:	e709      	b.n	8000ec2 <__udivmoddi4+0xde>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	e742      	b.n	8000f3a <__udivmoddi4+0x156>

080010b4 <__aeabi_idiv0>:
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <am2320_init>:
 */


#include "am2320.h"

AM2320_HandleTypeDef am2320_init(I2C_HandleTypeDef* i2c_handle, uint8_t sensor_address){
 80010b8:	b4b0      	push	{r4, r5, r7}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71fb      	strb	r3, [r7, #7]
	AM2320_HandleTypeDef am2320_;
	am2320_.i2c_handle_ = i2c_handle;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	617b      	str	r3, [r7, #20]

	// left shift cause i2c is weird
	am2320_.sensor_address_ = sensor_address << 1;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	763b      	strb	r3, [r7, #24]
	am2320_.last_temperature = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	847b      	strh	r3, [r7, #34]	; 0x22
	am2320_.last_humidity = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	return am2320_;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	461d      	mov	r5, r3
 80010de:	f107 0414 	add.w	r4, r7, #20
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	602b      	str	r3, [r5, #0]
}
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	372c      	adds	r7, #44	; 0x2c
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bcb0      	pop	{r4, r5, r7}
 80010f2:	4770      	bx	lr

080010f4 <am2320_crc_checker>:

// taken from sensor documentation
uint16_t am2320_crc_checker(uint8_t* data, uint8_t size){
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]

	uint16_t crc =0xFFFF;
 8001100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001104:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	while(size--)
 8001106:	e023      	b.n	8001150 <am2320_crc_checker+0x5c>
	{
		crc ^=*data++;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	4053      	eors	r3, r2
 8001116:	81fb      	strh	r3, [r7, #14]
		for(i=0;i<8;i++)
 8001118:	2300      	movs	r3, #0
 800111a:	737b      	strb	r3, [r7, #13]
 800111c:	e015      	b.n	800114a <am2320_crc_checker+0x56>
		{
			if(crc & 0x01)
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00a      	beq.n	800113e <am2320_crc_checker+0x4a>
			{
				crc>>=1;
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	81fb      	strh	r3, [r7, #14]
				crc^=0xA001;
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001134:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001138:	43db      	mvns	r3, r3
 800113a:	81fb      	strh	r3, [r7, #14]
 800113c:	e002      	b.n	8001144 <am2320_crc_checker+0x50>
			}
			else
			{
				crc>>=1;
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	085b      	lsrs	r3, r3, #1
 8001142:	81fb      	strh	r3, [r7, #14]
		for(i=0;i<8;i++)
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	3301      	adds	r3, #1
 8001148:	737b      	strb	r3, [r7, #13]
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	2b07      	cmp	r3, #7
 800114e:	d9e6      	bls.n	800111e <am2320_crc_checker+0x2a>
	while(size--)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	70fa      	strb	r2, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1d6      	bne.n	8001108 <am2320_crc_checker+0x14>
			}
		}
	}
	return crc;
 800115a:	89fb      	ldrh	r3, [r7, #14]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <am2320_read_temperature_and_humidity>:

void am2320_read_temperature_and_humidity(AM2320_HandleTypeDef* am2320){
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af02      	add	r7, sp, #8
 800116e:	6078      	str	r0, [r7, #4]
	/* regs:
	 * empty_reg for waking the sensor up
	 * read_regs for triggering measurements and reading from sensor registers
	 * */
	uint8_t empty_reg[1] = { 0x00 };
 8001170:	2300      	movs	r3, #0
 8001172:	743b      	strb	r3, [r7, #16]
	uint8_t read_regs[3] = { 0x03, 0x00, 0x04 };
 8001174:	4a3e      	ldr	r2, [pc, #248]	; (8001270 <am2320_read_temperature_and_humidity+0x108>)
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	4611      	mov	r1, r2
 800117e:	8019      	strh	r1, [r3, #0]
 8001180:	3302      	adds	r3, #2
 8001182:	0c12      	lsrs	r2, r2, #16
 8001184:	701a      	strb	r2, [r3, #0]
	 * sends address (empty reg and 0 size for not writing anything)
	 * returns HAL_ERROR cause sensor doesn't ACK waking up
	 * after sending address it should wait for <800us;3ms>,
	 * but either hardware or HAL library for i2c seems to manage this
	 * */
	HAL_I2C_Master_Transmit(am2320->i2c_handle_, am2320->sensor_address_, empty_reg, 0, 1000);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	b299      	uxth	r1, r3
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	f003 fb06 	bl	80047ac <HAL_I2C_Master_Transmit>

	/*TODO: comment properly
	 * prompts for measurement
	 * */
	if(HAL_I2C_Master_Transmit(am2320->i2c_handle_, am2320->sensor_address_, read_regs, 3, 1000) != HAL_OK){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	b299      	uxth	r1, r3
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2303      	movs	r3, #3
 80011b6:	f003 faf9 	bl	80047ac <HAL_I2C_Master_Transmit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <am2320_read_temperature_and_humidity+0x6a>
		printf("Prompting for measurement went wrong!\n");
 80011c0:	482c      	ldr	r0, [pc, #176]	; (8001274 <am2320_read_temperature_and_humidity+0x10c>)
 80011c2:	f007 ffb9 	bl	8009138 <puts>
		//TODO: this is tragic, need to rework this!!!
		HAL_I2C_Init(am2320->i2c_handle_);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 f9aa 	bl	8004524 <HAL_I2C_Init>
		return;
 80011d0:	e04b      	b.n	800126a <am2320_read_temperature_and_humidity+0x102>
	}

	/*TODO: comment properly
	 * receives am2320->sensor_data_
	 * */
	if(HAL_I2C_Master_Receive(am2320->i2c_handle_, am2320->sensor_address_, am2320->sensor_data_, 8, 1000) != HAL_OK){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	791b      	ldrb	r3, [r3, #4]
 80011da:	b299      	uxth	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1d5a      	adds	r2, r3, #5
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2308      	movs	r3, #8
 80011e8:	f003 fbde 	bl	80049a8 <HAL_I2C_Master_Receive>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <am2320_read_temperature_and_humidity+0x9c>
		printf("Receiving am2320->sensor_data_ failed!\n");
 80011f2:	4821      	ldr	r0, [pc, #132]	; (8001278 <am2320_read_temperature_and_humidity+0x110>)
 80011f4:	f007 ffa0 	bl	8009138 <puts>
		//TODO: this is tragic, need to rework this!!!
		HAL_I2C_Init(am2320->i2c_handle_);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 f991 	bl	8004524 <HAL_I2C_Init>
		return;
 8001202:	e032      	b.n	800126a <am2320_read_temperature_and_humidity+0x102>
	}

	// check crc
	uint16_t sensor_crc = ((am2320->sensor_data_[7]<<8)+am2320->sensor_data_[6]);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7b1b      	ldrb	r3, [r3, #12]
 8001208:	b29b      	uxth	r3, r3
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7adb      	ldrb	r3, [r3, #11]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	82fb      	strh	r3, [r7, #22]
	uint16_t calculated_crc = am2320_crc_checker((am2320->sensor_data_), 6);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3305      	adds	r3, #5
 800121c:	2106      	movs	r1, #6
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff68 	bl	80010f4 <am2320_crc_checker>
 8001224:	4603      	mov	r3, r0
 8001226:	82bb      	strh	r3, [r7, #20]
	if(sensor_crc != calculated_crc){
 8001228:	8afa      	ldrh	r2, [r7, #22]
 800122a:	8abb      	ldrh	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	d003      	beq.n	8001238 <am2320_read_temperature_and_humidity+0xd0>
		printf("Wrong CRC!\n");
 8001230:	4812      	ldr	r0, [pc, #72]	; (800127c <am2320_read_temperature_and_humidity+0x114>)
 8001232:	f007 ff81 	bl	8009138 <puts>
		return;
 8001236:	e018      	b.n	800126a <am2320_read_temperature_and_humidity+0x102>
	}

	// different types, because temperature may be negative
	am2320->last_temperature = (int16_t)((am2320->sensor_data_[4]<<8)+am2320->sensor_data_[5]);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7a5b      	ldrb	r3, [r3, #9]
 800123c:	b29b      	uxth	r3, r3
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7a9b      	ldrb	r3, [r3, #10]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21a      	sxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	81da      	strh	r2, [r3, #14]
	am2320->last_humidity = ((am2320->sensor_data_[2]<<8)+am2320->sensor_data_[3]);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	79db      	ldrb	r3, [r3, #7]
 8001256:	b29b      	uxth	r3, r3
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7a1b      	ldrb	r3, [r3, #8]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	821a      	strh	r2, [r3, #16]


}
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	0800ce3c 	.word	0x0800ce3c
 8001274:	0800cde0 	.word	0x0800cde0
 8001278:	0800ce08 	.word	0x0800ce08
 800127c:	0800ce30 	.word	0x0800ce30

08001280 <bmp280_read_reg16>:
#define BMP280_RESET_VALUE 0x86

/*
 * TODO: make two functions out of this: one for reading
 */
bool bmp280_read_reg16(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint16_t* reg_contents){
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af04      	add	r7, sp, #16
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	460b      	mov	r3, r1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	72fb      	strb	r3, [r7, #11]
	uint8_t reg_temp[2];
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, reg_address, 1, reg_temp, 2, HAL_MAX_DELAY) == HAL_OK){
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	b299      	uxth	r1, r3
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	b29a      	uxth	r2, r3
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	2302      	movs	r3, #2
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	f003 fe9b 	bl	8004fe8 <HAL_I2C_Mem_Read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10b      	bne.n	80012d0 <bmp280_read_reg16+0x50>
		*reg_contents = (reg_temp[1]<<8) | reg_temp[0];
 80012b8:	7d7b      	ldrb	r3, [r7, #21]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7d3b      	ldrb	r3, [r7, #20]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
		return 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <bmp280_read_reg16+0x52>
	}
	else{
		return 0;
 80012d0:	2300      	movs	r3, #0
	}
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <bmp280_read_reg8>:

bool bmp280_read_reg8(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint8_t* reg_contents){
 80012da:	b580      	push	{r7, lr}
 80012dc:	b08a      	sub	sp, #40	; 0x28
 80012de:	af04      	add	r7, sp, #16
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	460b      	mov	r3, r1
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	72fb      	strb	r3, [r7, #11]
	uint8_t reg_temp;
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, reg_address, 1, &reg_temp, 1, HAL_MAX_DELAY) == HAL_OK){
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	b299      	uxth	r1, r3
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 0317 	add.w	r3, r7, #23
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	f003 fe6e 	bl	8004fe8 <HAL_I2C_Mem_Read>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d104      	bne.n	800131c <bmp280_read_reg8+0x42>
		*reg_contents = reg_temp;
 8001312:	7dfa      	ldrb	r2, [r7, #23]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	701a      	strb	r2, [r3, #0]
		return 1;
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <bmp280_read_reg8+0x44>
	}
	else{
		return 0;
 800131c:	2300      	movs	r3, #0
	}
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <bmp280_write_reg8>:

bool bmp280_write_reg8(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint8_t* reg_contents){
 8001326:	b580      	push	{r7, lr}
 8001328:	b088      	sub	sp, #32
 800132a:	af04      	add	r7, sp, #16
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	460b      	mov	r3, r1
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	72fb      	strb	r3, [r7, #11]
	if(HAL_I2C_Mem_Write(bmp->i2c_handle_, bmp->address_, reg_address, 1, reg_contents, 1, HAL_MAX_DELAY) == HAL_OK){
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	791b      	ldrb	r3, [r3, #4]
 800133c:	b299      	uxth	r1, r3
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	b29a      	uxth	r2, r3
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2301      	movs	r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	f003 fd4f 	bl	8004df4 <HAL_I2C_Mem_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <bmp280_write_reg8+0x3a>
		return 1;
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <bmp280_write_reg8+0x3c>
	}
	else{
		return 0;
 8001360:	2300      	movs	r3, #0
	}
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <bmp280_get_compensation_data>:

bool bmp280_get_compensation_data(BMP280_HandleTypedef* bmp){
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	if(bmp280_read_reg16(bmp, 0x88, &(bmp->compensation_params_.dig_T1)) &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3306      	adds	r3, #6
 8001376:	461a      	mov	r2, r3
 8001378:	2188      	movs	r1, #136	; 0x88
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff80 	bl	8001280 <bmp280_read_reg16>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06f      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8A, (uint16_t*) &(bmp->compensation_params_.dig_T2)) &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3308      	adds	r3, #8
 800138a:	461a      	mov	r2, r3
 800138c:	218a      	movs	r1, #138	; 0x8a
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff76 	bl	8001280 <bmp280_read_reg16>
 8001394:	4603      	mov	r3, r0
	if(bmp280_read_reg16(bmp, 0x88, &(bmp->compensation_params_.dig_T1)) &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d065      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8C, (uint16_t*) &(bmp->compensation_params_.dig_T3)) &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	330a      	adds	r3, #10
 800139e:	461a      	mov	r2, r3
 80013a0:	218c      	movs	r1, #140	; 0x8c
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff6c 	bl	8001280 <bmp280_read_reg16>
 80013a8:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8A, (uint16_t*) &(bmp->compensation_params_.dig_T2)) &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d05b      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8E, &(bmp->compensation_params_.dig_P1)) &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	330c      	adds	r3, #12
 80013b2:	461a      	mov	r2, r3
 80013b4:	218e      	movs	r1, #142	; 0x8e
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff62 	bl	8001280 <bmp280_read_reg16>
 80013bc:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8C, (uint16_t*) &(bmp->compensation_params_.dig_T3)) &&
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d051      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x90, (uint16_t*) &(bmp->compensation_params_.dig_P2)) &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	330e      	adds	r3, #14
 80013c6:	461a      	mov	r2, r3
 80013c8:	2190      	movs	r1, #144	; 0x90
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff58 	bl	8001280 <bmp280_read_reg16>
 80013d0:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8E, &(bmp->compensation_params_.dig_P1)) &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d047      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x92, (uint16_t*) &(bmp->compensation_params_.dig_P3)) &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3310      	adds	r3, #16
 80013da:	461a      	mov	r2, r3
 80013dc:	2192      	movs	r1, #146	; 0x92
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff4e 	bl	8001280 <bmp280_read_reg16>
 80013e4:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x90, (uint16_t*) &(bmp->compensation_params_.dig_P2)) &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d03d      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x94, (uint16_t*) &(bmp->compensation_params_.dig_P4)) &&
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3312      	adds	r3, #18
 80013ee:	461a      	mov	r2, r3
 80013f0:	2194      	movs	r1, #148	; 0x94
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff44 	bl	8001280 <bmp280_read_reg16>
 80013f8:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x92, (uint16_t*) &(bmp->compensation_params_.dig_P3)) &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d033      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x96, (uint16_t*) &(bmp->compensation_params_.dig_P5)) &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3314      	adds	r3, #20
 8001402:	461a      	mov	r2, r3
 8001404:	2196      	movs	r1, #150	; 0x96
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff3a 	bl	8001280 <bmp280_read_reg16>
 800140c:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x94, (uint16_t*) &(bmp->compensation_params_.dig_P4)) &&
 800140e:	2b00      	cmp	r3, #0
 8001410:	d029      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x98, (uint16_t*) &(bmp->compensation_params_.dig_P6)) &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3316      	adds	r3, #22
 8001416:	461a      	mov	r2, r3
 8001418:	2198      	movs	r1, #152	; 0x98
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff30 	bl	8001280 <bmp280_read_reg16>
 8001420:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x96, (uint16_t*) &(bmp->compensation_params_.dig_P5)) &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d01f      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9A, (uint16_t*) &(bmp->compensation_params_.dig_P7)) &&
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3318      	adds	r3, #24
 800142a:	461a      	mov	r2, r3
 800142c:	219a      	movs	r1, #154	; 0x9a
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff26 	bl	8001280 <bmp280_read_reg16>
 8001434:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x98, (uint16_t*) &(bmp->compensation_params_.dig_P6)) &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d015      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9C, (uint16_t*) &(bmp->compensation_params_.dig_P8)) &&
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	331a      	adds	r3, #26
 800143e:	461a      	mov	r2, r3
 8001440:	219c      	movs	r1, #156	; 0x9c
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff1c 	bl	8001280 <bmp280_read_reg16>
 8001448:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x9A, (uint16_t*) &(bmp->compensation_params_.dig_P7)) &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9E, (uint16_t*) &(bmp->compensation_params_.dig_P9))){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	331c      	adds	r3, #28
 8001452:	461a      	mov	r2, r3
 8001454:	219e      	movs	r1, #158	; 0x9e
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff12 	bl	8001280 <bmp280_read_reg16>
 800145c:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x9C, (uint16_t*) &(bmp->compensation_params_.dig_P8)) &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <bmp280_get_compensation_data+0xfc>
		return 1;
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <bmp280_get_compensation_data+0xfe>
	}
	else{
		return 0;
 8001466:	2300      	movs	r3, #0
	}
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <bmp280_init_force_mode>:

bool bmp280_init_force_mode(BMP280_HandleTypedef* bmp){
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	bmp->address_ = BMP280_ADDRESS_0 << 1;	// SDO connected to ground
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	22ec      	movs	r2, #236	; 0xec
 800147c:	711a      	strb	r2, [r3, #4]
	bmp->mode_ = BMP280_SLEEP_MODE;     // to read in force mode it needs to be in sleep first
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	715a      	strb	r2, [r3, #5]
	bmp->filter_ = BMP280_FILTER_OFF;	// according to documentation for weather monitoring
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	779a      	strb	r2, [r3, #30]
	bmp->temperature_oversampling_ = BMP280_oversampling_x1;	// according to documentation
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	77da      	strb	r2, [r3, #31]
	bmp->pressure_oversampling_ = BMP280_oversampling_x1;		// according to documentation
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2020 	strb.w	r2, [r3, #32]
	bmp->time_standby_ = BMP280_tsb_1000;	/* not relevant in forced mode, but dont want leave
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2205      	movs	r2, #5
 800149c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
											 * uninitialized
											 */

	// soft reset sensor
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_RESET, (uint8_t*) BMP280_RESET_VALUE)){
 80014a0:	2286      	movs	r2, #134	; 0x86
 80014a2:	21e0      	movs	r1, #224	; 0xe0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff3e 	bl	8001326 <bmp280_write_reg8>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <bmp280_init_force_mode+0x4a>
		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e078      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}

	// wait for NVM data to copy
	while(1){
		uint8_t im_update;
		if(bmp280_read_reg8(bmp, BMP280_REG_ADDR_STATUS, &im_update) && (im_update & 1) == 0){
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	461a      	mov	r2, r3
 80014c0:	21f3      	movs	r1, #243	; 0xf3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff09 	bl	80012da <bmp280_read_reg8>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f5      	beq.n	80014ba <bmp280_init_force_mode+0x4a>
 80014ce:	7b3b      	ldrb	r3, [r7, #12]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <bmp280_init_force_mode+0x4a>
			break;
		}
	}

	// check if address is proper
	if(bmp->address_ != BMP280_ADDRESS_0 && bmp->address_ != BMP280_ADDRESS_1){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	2b76      	cmp	r3, #118	; 0x76
 80014de:	d100      	bne.n	80014e2 <bmp280_init_force_mode+0x72>
 80014e0:	e005      	b.n	80014ee <bmp280_init_force_mode+0x7e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	791b      	ldrb	r3, [r3, #4]
 80014e6:	2b77      	cmp	r3, #119	; 0x77
 80014e8:	d001      	beq.n	80014ee <bmp280_init_force_mode+0x7e>
		return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e05e      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}

	// read and check if proper id
	uint8_t read_id = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
	if(!bmp280_read_reg8(bmp, BMP280_REG_ADDR_ID, &read_id)){
 80014f2:	f107 030f 	add.w	r3, r7, #15
 80014f6:	461a      	mov	r2, r3
 80014f8:	21d0      	movs	r1, #208	; 0xd0
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff feed 	bl	80012da <bmp280_read_reg8>
 8001500:	4603      	mov	r3, r0
 8001502:	f083 0301 	eor.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <bmp280_init_force_mode+0xa0>
		return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e04d      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}
	else if(read_id != BMP280_ID){
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b58      	cmp	r3, #88	; 0x58
 8001514:	d001      	beq.n	800151a <bmp280_init_force_mode+0xaa>
		return 0;
 8001516:	2300      	movs	r3, #0
 8001518:	e048      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}

	// get compensation data
	if(!bmp280_get_compensation_data(bmp)){
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff25 	bl	800136a <bmp280_get_compensation_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <bmp280_init_force_mode+0xc0>
		return 0;
 800152c:	2300      	movs	r3, #0
 800152e:	e03d      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}

	// set config and control registers and write them
	uint8_t config_reg_settings = (bmp->time_standby_ << 5) | (bmp->filter_ << 2);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	b25a      	sxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7f9b      	ldrb	r3, [r3, #30]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	b25b      	sxtb	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73bb      	strb	r3, [r7, #14]
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONFIG, &config_reg_settings)){
 800154a:	f107 030e 	add.w	r3, r7, #14
 800154e:	461a      	mov	r2, r3
 8001550:	21f5      	movs	r1, #245	; 0xf5
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fee7 	bl	8001326 <bmp280_write_reg8>
 8001558:	4603      	mov	r3, r0
 800155a:	f083 0301 	eor.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <bmp280_init_force_mode+0xf8>
		return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e021      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}

	uint8_t control_reg_settings = (bmp->temperature_oversampling_ << 5) | (bmp->pressure_oversampling_ << 2) | bmp->mode_;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7fdb      	ldrb	r3, [r3, #31]
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	b25a      	sxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b25a      	sxtb	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	795b      	ldrb	r3, [r3, #5]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b25b      	sxtb	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	737b      	strb	r3, [r7, #13]
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control_reg_settings)){
 800158c:	f107 030d 	add.w	r3, r7, #13
 8001590:	461a      	mov	r2, r3
 8001592:	21f4      	movs	r1, #244	; 0xf4
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fec6 	bl	8001326 <bmp280_write_reg8>
 800159a:	4603      	mov	r3, r0
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <bmp280_init_force_mode+0x13a>
		return 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <bmp280_init_force_mode+0x13c>
	}
	return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <bmp280_has_measurement_ended>:

bool bmp280_has_measurement_ended(BMP280_HandleTypedef* bmp){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	uint8_t measuring;
	if(bmp280_read_reg8(bmp, BMP280_REG_ADDR_STATUS, &measuring) && (measuring & 3) == 0){
 80015bc:	f107 030f 	add.w	r3, r7, #15
 80015c0:	461a      	mov	r2, r3
 80015c2:	21f3      	movs	r1, #243	; 0xf3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fe88 	bl	80012da <bmp280_read_reg8>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <bmp280_has_measurement_ended+0x2a>
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <bmp280_has_measurement_ended+0x2a>
		return 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <bmp280_has_measurement_ended+0x2c>
	}
	else{
		return 0;
 80015de:	2300      	movs	r3, #0
	}

}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef* bmp){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	//check if previous measurement has ended
	if(!bmp280_has_measurement_ended(bmp)){
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffdf 	bl	80015b4 <bmp280_has_measurement_ended>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <bmp280_force_measurement+0x1e>
		return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e028      	b.n	8001658 <bmp280_force_measurement+0x70>
	}

	//read previous control settings
	uint8_t control;
	if(!bmp280_read_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control)){
 8001606:	f107 030f 	add.w	r3, r7, #15
 800160a:	461a      	mov	r2, r3
 800160c:	21f4      	movs	r1, #244	; 0xf4
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fe63 	bl	80012da <bmp280_read_reg8>
 8001614:	4603      	mov	r3, r0
 8001616:	f083 0301 	eor.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <bmp280_force_measurement+0x3c>
		return 0;
 8001620:	2300      	movs	r3, #0
 8001622:	e019      	b.n	8001658 <bmp280_force_measurement+0x70>
	}

	//clears mode bits
	control &= ~0b11;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	73fb      	strb	r3, [r7, #15]

	//sets mode bits to FORCED
	control |= BMP280_FORCED_MODE;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]

	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control)){
 8001638:	f107 030f 	add.w	r3, r7, #15
 800163c:	461a      	mov	r2, r3
 800163e:	21f4      	movs	r1, #244	; 0xf4
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fe70 	bl	8001326 <bmp280_write_reg8>
 8001646:	4603      	mov	r3, r0
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <bmp280_force_measurement+0x6e>
		return 0;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <bmp280_force_measurement+0x70>
	}

	return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <bmp280_compensate_T_int32>:

int32_t t_fine;		// global variable as defined in datasheet (used later in pressure measurement)
int32_t bmp280_compensate_T_int32(BMP280_HandleTypedef* bmp, int32_t adc_T)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)bmp->compensation_params_.dig_T1<<1))) * ((int32_t)bmp->compensation_params_.dig_T2)) >> 11;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	10da      	asrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	88db      	ldrh	r3, [r3, #6]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	12db      	asrs	r3, r3, #11
 8001682:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1)) * ((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1))) >> 12) *
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	111b      	asrs	r3, r3, #4
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	88d2      	ldrh	r2, [r2, #6]
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	1112      	asrs	r2, r2, #4
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	88c9      	ldrh	r1, [r1, #6]
 8001696:	1a52      	subs	r2, r2, r1
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	131b      	asrs	r3, r3, #12
	((int32_t)bmp->compensation_params_.dig_T3)) >> 14;
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
	var2 = (((((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1)) * ((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1))) >> 12) *
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	139b      	asrs	r3, r3, #14
 80016aa:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <bmp280_compensate_T_int32+0x74>)
 80016b4:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <bmp280_compensate_T_int32+0x74>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3380      	adds	r3, #128	; 0x80
 80016c2:	121b      	asrs	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
	return T;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000200 	.word	0x20000200

080016d8 <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(BMP280_HandleTypedef* bmp, int32_t adc_P)
{
 80016d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016dc:	b0ca      	sub	sp, #296	; 0x128
 80016de:	af00      	add	r7, sp, #0
 80016e0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80016e4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80016e8:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <bmp280_compensate_P_int64+0x2dc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	17da      	asrs	r2, r3, #31
 80016ee:	461c      	mov	r4, r3
 80016f0:	4615      	mov	r5, r2
 80016f2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80016f6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016fa:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)bmp->compensation_params_.dig_P6;
 80016fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001702:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001706:	fb03 f102 	mul.w	r1, r3, r2
 800170a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800170e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	18ca      	adds	r2, r1, r3
 8001718:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171c:	fba3 8903 	umull	r8, r9, r3, r3
 8001720:	eb02 0309 	add.w	r3, r2, r9
 8001724:	4699      	mov	r9, r3
 8001726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800172a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800172e:	b21b      	sxth	r3, r3
 8001730:	17da      	asrs	r2, r3, #31
 8001732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001736:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800173a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800173e:	4603      	mov	r3, r0
 8001740:	fb03 f209 	mul.w	r2, r3, r9
 8001744:	460b      	mov	r3, r1
 8001746:	fb08 f303 	mul.w	r3, r8, r3
 800174a:	4413      	add	r3, r2
 800174c:	4602      	mov	r2, r0
 800174e:	fba8 1202 	umull	r1, r2, r8, r2
 8001752:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001756:	460a      	mov	r2, r1
 8001758:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800175c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001760:	4413      	add	r3, r2
 8001762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001766:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800176a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800176e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)bmp->compensation_params_.dig_P5)<<17);
 8001772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001776:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800177a:	b21b      	sxth	r3, r3
 800177c:	17da      	asrs	r2, r3, #31
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001782:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001786:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800178e:	462a      	mov	r2, r5
 8001790:	fb02 f203 	mul.w	r2, r2, r3
 8001794:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001798:	4621      	mov	r1, r4
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	441a      	add	r2, r3
 80017a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a4:	4621      	mov	r1, r4
 80017a6:	fba3 1301 	umull	r1, r3, r3, r1
 80017aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017ae:	460b      	mov	r3, r1
 80017b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80017b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80017ca:	462b      	mov	r3, r5
 80017cc:	0459      	lsls	r1, r3, #17
 80017ce:	4623      	mov	r3, r4
 80017d0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017d4:	4623      	mov	r3, r4
 80017d6:	0458      	lsls	r0, r3, #17
 80017d8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017dc:	1814      	adds	r4, r2, r0
 80017de:	643c      	str	r4, [r7, #64]	; 0x40
 80017e0:	414b      	adcs	r3, r1
 80017e2:	647b      	str	r3, [r7, #68]	; 0x44
 80017e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80017e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)bmp->compensation_params_.dig_P4)<<35);
 80017ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	17da      	asrs	r2, r3, #31
 80017f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800180c:	00d9      	lsls	r1, r3, #3
 800180e:	2000      	movs	r0, #0
 8001810:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001814:	1814      	adds	r4, r2, r0
 8001816:	63bc      	str	r4, [r7, #56]	; 0x38
 8001818:	414b      	adcs	r3, r1
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800181c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001820:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)bmp->compensation_params_.dig_P3)>>8) + ((var1 * (int64_t)bmp->compensation_params_.dig_P2)<<12);
 8001824:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001828:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800182c:	fb03 f102 	mul.w	r1, r3, r2
 8001830:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001834:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	18ca      	adds	r2, r1, r3
 800183e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001842:	fba3 1303 	umull	r1, r3, r3, r3
 8001846:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800184a:	460b      	mov	r3, r1
 800184c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800185a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800185e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001862:	b21b      	sxth	r3, r3
 8001864:	17da      	asrs	r2, r3, #31
 8001866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800186a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800186e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001872:	462b      	mov	r3, r5
 8001874:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001878:	4642      	mov	r2, r8
 800187a:	fb02 f203 	mul.w	r2, r2, r3
 800187e:	464b      	mov	r3, r9
 8001880:	4621      	mov	r1, r4
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	4622      	mov	r2, r4
 800188a:	4641      	mov	r1, r8
 800188c:	fba2 1201 	umull	r1, r2, r2, r1
 8001890:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001894:	460a      	mov	r2, r1
 8001896:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800189a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800189e:	4413      	add	r3, r2
 80018a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80018b0:	4623      	mov	r3, r4
 80018b2:	0a18      	lsrs	r0, r3, #8
 80018b4:	462b      	mov	r3, r5
 80018b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018ba:	462b      	mov	r3, r5
 80018bc:	1219      	asrs	r1, r3, #8
 80018be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	17da      	asrs	r2, r3, #31
 80018ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018ce:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018d6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80018da:	464a      	mov	r2, r9
 80018dc:	fb02 f203 	mul.w	r2, r2, r3
 80018e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018e4:	4644      	mov	r4, r8
 80018e6:	fb04 f303 	mul.w	r3, r4, r3
 80018ea:	441a      	add	r2, r3
 80018ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018f0:	4644      	mov	r4, r8
 80018f2:	fba3 4304 	umull	r4, r3, r3, r4
 80018f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80018fa:	4623      	mov	r3, r4
 80018fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001916:	464c      	mov	r4, r9
 8001918:	0323      	lsls	r3, r4, #12
 800191a:	4644      	mov	r4, r8
 800191c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001920:	4644      	mov	r4, r8
 8001922:	0322      	lsls	r2, r4, #12
 8001924:	1884      	adds	r4, r0, r2
 8001926:	633c      	str	r4, [r7, #48]	; 0x30
 8001928:	eb41 0303 	adc.w	r3, r1, r3
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
 800192e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001932:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bmp->compensation_params_.dig_P1)>>33;
 8001936:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800193a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800193e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001942:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800194a:	899b      	ldrh	r3, [r3, #12]
 800194c:	b29b      	uxth	r3, r3
 800194e:	2200      	movs	r2, #0
 8001950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001954:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001958:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800195c:	462b      	mov	r3, r5
 800195e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001962:	4642      	mov	r2, r8
 8001964:	fb02 f203 	mul.w	r2, r2, r3
 8001968:	464b      	mov	r3, r9
 800196a:	4621      	mov	r1, r4
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	4622      	mov	r2, r4
 8001974:	4641      	mov	r1, r8
 8001976:	fba2 1201 	umull	r1, r2, r2, r1
 800197a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800197e:	460a      	mov	r2, r1
 8001980:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001984:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800199a:	4629      	mov	r1, r5
 800199c:	104a      	asrs	r2, r1, #1
 800199e:	4629      	mov	r1, r5
 80019a0:	17cb      	asrs	r3, r1, #31
 80019a2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 80019a6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019aa:	4313      	orrs	r3, r2
 80019ac:	d104      	bne.n	80019b8 <bmp280_compensate_P_int64+0x2e0>
	{
		return 0; // avoid exception caused by division by zero
 80019ae:	2300      	movs	r3, #0
 80019b0:	e14b      	b.n	8001c4a <bmp280_compensate_P_int64+0x572>
 80019b2:	bf00      	nop
 80019b4:	20000200 	.word	0x20000200
	}

	p = 1048576-adc_P;
 80019b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019bc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80019ca:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80019ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019d2:	105b      	asrs	r3, r3, #1
 80019d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019dc:	07db      	lsls	r3, r3, #31
 80019de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019e6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80019ea:	4621      	mov	r1, r4
 80019ec:	1a89      	subs	r1, r1, r2
 80019ee:	67b9      	str	r1, [r7, #120]	; 0x78
 80019f0:	4629      	mov	r1, r5
 80019f2:	eb61 0303 	sbc.w	r3, r1, r3
 80019f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019f8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80019fc:	4622      	mov	r2, r4
 80019fe:	462b      	mov	r3, r5
 8001a00:	1891      	adds	r1, r2, r2
 8001a02:	6239      	str	r1, [r7, #32]
 8001a04:	415b      	adcs	r3, r3
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	1851      	adds	r1, r2, r1
 8001a10:	61b9      	str	r1, [r7, #24]
 8001a12:	4629      	mov	r1, r5
 8001a14:	414b      	adcs	r3, r1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a24:	4649      	mov	r1, r9
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	4641      	mov	r1, r8
 8001a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2e:	4641      	mov	r1, r8
 8001a30:	018a      	lsls	r2, r1, #6
 8001a32:	4641      	mov	r1, r8
 8001a34:	1889      	adds	r1, r1, r2
 8001a36:	6139      	str	r1, [r7, #16]
 8001a38:	4649      	mov	r1, r9
 8001a3a:	eb43 0101 	adc.w	r1, r3, r1
 8001a3e:	6179      	str	r1, [r7, #20]
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	008b      	lsls	r3, r1, #2
 8001a50:	4641      	mov	r1, r8
 8001a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a56:	4641      	mov	r1, r8
 8001a58:	008a      	lsls	r2, r1, #2
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4622      	mov	r2, r4
 8001a62:	189b      	adds	r3, r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	460b      	mov	r3, r1
 8001a68:	462a      	mov	r2, r5
 8001a6a:	eb42 0303 	adc.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	008b      	lsls	r3, r1, #2
 8001a80:	4641      	mov	r1, r8
 8001a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a86:	4641      	mov	r1, r8
 8001a88:	008a      	lsls	r2, r1, #2
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4622      	mov	r2, r4
 8001a92:	189b      	adds	r3, r3, r2
 8001a94:	673b      	str	r3, [r7, #112]	; 0x70
 8001a96:	462b      	mov	r3, r5
 8001a98:	460a      	mov	r2, r1
 8001a9a:	eb42 0303 	adc.w	r3, r2, r3
 8001a9e:	677b      	str	r3, [r7, #116]	; 0x74
 8001aa0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001aa4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001aa8:	f7ff f8fe 	bl	8000ca8 <__aeabi_ldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)bmp->compensation_params_.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ab8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	17da      	asrs	r2, r3, #31
 8001ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ac4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0b50      	lsrs	r0, r2, #13
 8001ad2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ad6:	1359      	asrs	r1, r3, #13
 8001ad8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001adc:	462b      	mov	r3, r5
 8001ade:	fb00 f203 	mul.w	r2, r0, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	fb03 f301 	mul.w	r3, r3, r1
 8001ae8:	4413      	add	r3, r2
 8001aea:	4622      	mov	r2, r4
 8001aec:	fba2 1200 	umull	r1, r2, r2, r0
 8001af0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001af4:	460a      	mov	r2, r1
 8001af6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001afa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001afe:	4413      	add	r3, r2
 8001b00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b04:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0b50      	lsrs	r0, r2, #13
 8001b12:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b16:	1359      	asrs	r1, r3, #13
 8001b18:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	fb00 f203 	mul.w	r2, r0, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	fb03 f301 	mul.w	r3, r3, r1
 8001b28:	4413      	add	r3, r2
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	fba2 1200 	umull	r1, r2, r2, r0
 8001b30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b34:	460a      	mov	r2, r1
 8001b36:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001b3a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001b50:	4621      	mov	r1, r4
 8001b52:	0e4a      	lsrs	r2, r1, #25
 8001b54:	4629      	mov	r1, r5
 8001b56:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	164b      	asrs	r3, r1, #25
 8001b5e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)bmp->compensation_params_.dig_P8) * p) >> 19;
 8001b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b66:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	17da      	asrs	r2, r3, #31
 8001b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b70:	667a      	str	r2, [r7, #100]	; 0x64
 8001b72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b7a:	462a      	mov	r2, r5
 8001b7c:	fb02 f203 	mul.w	r2, r2, r3
 8001b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b84:	4621      	mov	r1, r4
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001b90:	4621      	mov	r1, r4
 8001b92:	fba2 1201 	umull	r1, r2, r2, r1
 8001b96:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001ba0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	0cca      	lsrs	r2, r1, #19
 8001bba:	4629      	mov	r1, r5
 8001bbc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	14cb      	asrs	r3, r1, #19
 8001bc4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)bmp->compensation_params_.dig_P7)<<4);
 8001bc8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001bcc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bd0:	1884      	adds	r4, r0, r2
 8001bd2:	65bc      	str	r4, [r7, #88]	; 0x58
 8001bd4:	eb41 0303 	adc.w	r3, r1, r3
 8001bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bde:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001be2:	4621      	mov	r1, r4
 8001be4:	1889      	adds	r1, r1, r2
 8001be6:	6539      	str	r1, [r7, #80]	; 0x50
 8001be8:	4629      	mov	r1, r5
 8001bea:	eb43 0101 	adc.w	r1, r3, r1
 8001bee:	6579      	str	r1, [r7, #84]	; 0x54
 8001bf0:	f04f 0000 	mov.w	r0, #0
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	0a18      	lsrs	r0, r3, #8
 8001c00:	462b      	mov	r3, r5
 8001c02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c06:	462b      	mov	r3, r5
 8001c08:	1219      	asrs	r1, r3, #8
 8001c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c0e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	17da      	asrs	r2, r3, #31
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001c26:	464c      	mov	r4, r9
 8001c28:	0123      	lsls	r3, r4, #4
 8001c2a:	4644      	mov	r4, r8
 8001c2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c30:	4644      	mov	r4, r8
 8001c32:	0122      	lsls	r2, r4, #4
 8001c34:	1884      	adds	r4, r0, r2
 8001c36:	603c      	str	r4, [r7, #0]
 8001c38:	eb41 0303 	adc.w	r3, r1, r3
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c42:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop

08001c58 <bmp280_get_measurements>:

bool bmp280_get_measurements(BMP280_HandleTypedef* bmp,
			uint32_t* pressure, int32_t* temperature){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	//check if measurement has ended
	if(!bmp280_has_measurement_ended(bmp)){
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fca5 	bl	80015b4 <bmp280_has_measurement_ended>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <bmp280_get_measurements+0x22>
		return 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e039      	b.n	8001cee <bmp280_get_measurements+0x96>
	uint8_t raw_data[6];
	uint32_t raw_pressure;
	int32_t raw_temperature;

	//read data in burst
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, BMP280_REG_ADDR_PRESS, 1, raw_data, 6, HAL_MAX_DELAY) != HAL_OK){
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	791b      	ldrb	r3, [r3, #4]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2301      	movs	r3, #1
 8001c96:	22f7      	movs	r2, #247	; 0xf7
 8001c98:	f003 f9a6 	bl	8004fe8 <HAL_I2C_Mem_Read>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <bmp280_get_measurements+0x4e>
		return 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e023      	b.n	8001cee <bmp280_get_measurements+0x96>
	}

	raw_pressure = raw_data[0] << 12 | raw_data[1] << 4 | raw_data[3] >> 4;
 8001ca6:	7c3b      	ldrb	r3, [r7, #16]
 8001ca8:	031a      	lsls	r2, r3, #12
 8001caa:	7c7b      	ldrb	r3, [r7, #17]
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	7cfa      	ldrb	r2, [r7, #19]
 8001cb2:	0912      	lsrs	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61fb      	str	r3, [r7, #28]
	raw_temperature = raw_data[3] << 12 | raw_data[4] << 4 | raw_data[5] >> 4;
 8001cba:	7cfb      	ldrb	r3, [r7, #19]
 8001cbc:	031a      	lsls	r2, r3, #12
 8001cbe:	7d3b      	ldrb	r3, [r7, #20]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	7d7a      	ldrb	r2, [r7, #21]
 8001cc6:	0912      	lsrs	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]

	*pressure = bmp280_compensate_P_int64(bmp, raw_pressure);
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fd00 	bl	80016d8 <bmp280_compensate_P_int64>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	601a      	str	r2, [r3, #0]
	*temperature = bmp280_compensate_T_int32(bmp, raw_temperature);
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fcbd 	bl	8001660 <bmp280_compensate_T_int32>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	601a      	str	r2, [r3, #0]
	return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b0a      	cmp	r3, #10
 8001d04:	d102      	bne.n	8001d0c <__io_putchar+0x14>
    __io_putchar('\r');
 8001d06:	200d      	movs	r0, #13
 8001d08:	f7ff fff6 	bl	8001cf8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001d0c:	1d39      	adds	r1, r7, #4
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	2201      	movs	r2, #1
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <__io_putchar+0x2c>)
 8001d16:	f005 fc50 	bl	80075ba <HAL_UART_Transmit>

  return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000574 	.word	0x20000574

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2e:	f001 fd4b 	bl	80037c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d32:	f000 f91d 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d36:	f000 fb07 	bl	8002348 <MX_GPIO_Init>
  MX_ETH_Init();
 8001d3a:	f000 f983 	bl	8002044 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d3e:	f000 faab 	bl	8002298 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d42:	f000 fad3 	bl	80022ec <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001d46:	f000 fa4b 	bl	80021e0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001d4a:	f000 f9c9 	bl	80020e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d4e:	f000 fa07 	bl	8002160 <MX_I2C2_Init>
  MX_TIM10_Init();
 8001d52:	f000 fa7b 	bl	800224c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001d56:	4877      	ldr	r0, [pc, #476]	; (8001f34 <main+0x20c>)
 8001d58:	f005 f98e 	bl	8007078 <HAL_TIM_Base_Start_IT>
  // am2320 init
  AM2320_HandleTypeDef am2320 = am2320_init(&hi2c1, AM2320_ADDRESS);
 8001d5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d60:	225c      	movs	r2, #92	; 0x5c
 8001d62:	4975      	ldr	r1, [pc, #468]	; (8001f38 <main+0x210>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f9a7 	bl	80010b8 <am2320_init>

  // bmp280 init
  BMP280_HandleTypedef bmp280;
  bmp280.i2c_handle_ = &hi2c2;
 8001d6a:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <main+0x214>)
 8001d6c:	617b      	str	r3, [r7, #20]
  bmp280_init_force_mode(&bmp280);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fb7c 	bl	8001470 <bmp280_init_force_mode>

  // nrf init
  NRF_HandleTypedef nrf;
  if(!NRF_Init(&nrf)){
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fc99 	bl	80026b4 <NRF_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <main+0x6a>
	  Error_Handler();
 8001d8e:	f000 fbf3 	bl	8002578 <Error_Handler>

  // pipe configuration
  // address will be clocked from last to first
  // need to clock the same address as for transmitter
  static uint8_t nrf_addr[] = {0x69, 0x21, 0x37};
  if(!NRF_SET_PipeAddress(RX_PIPE_0, nrf_addr)){
 8001d92:	496b      	ldr	r1, [pc, #428]	; (8001f40 <main+0x218>)
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 fea6 	bl	8002ae6 <NRF_SET_PipeAddress>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <main+0x82>
	  return NRF_ERROR;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e0c0      	b.n	8001f2c <main+0x204>
  }
  // prepare pipe
  if(!NRF_SET_PipeRX(RX_PIPE_0, AA_ON, (uint8_t)7)){
 8001daa:	2207      	movs	r2, #7
 8001dac:	2101      	movs	r1, #1
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 feea 	bl	8002b88 <NRF_SET_PipeRX>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f083 0301 	eor.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <main+0x9c>
	  return NRF_ERROR;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e0b3      	b.n	8001f2c <main+0x204>
  }

  // set mode to receiver
  if(!NRF_SET_Mode(RX)){
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f000 fd73 	bl	80028b0 <NRF_SET_Mode>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f083 0301 	eor.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <main+0xb2>
	  return NRF_ERROR;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e0a8      	b.n	8001f2c <main+0x204>
  }

  // turn transmitter on and wait for at least 1.5 ms
  if(!NRF_SET_PowerMode(PWR_UP)){
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fd9a 	bl	8002914 <NRF_SET_PowerMode>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <main+0xc8>
	  return NRF_ERROR;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e09d      	b.n	8001f2c <main+0x204>
  }
  HAL_Delay(2);
 8001df0:	2002      	movs	r0, #2
 8001df2:	f001 fd5b 	bl	80038ac <HAL_Delay>
//  NRF_PrintConfig();
  // put receiver in rx mode by enabling CE pin
  NRF_CE_SET_HIGH;
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfc:	4851      	ldr	r0, [pc, #324]	; (8001f44 <main+0x21c>)
 8001dfe:	f002 fb5f 	bl	80044c0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(nrfInterrupt){
 8001e02:	4b51      	ldr	r3, [pc, #324]	; (8001f48 <main+0x220>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <main+0x118>
		  NRF_IRQ_Callback(&nrfInterrupt, data_buffer);
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	484e      	ldr	r0, [pc, #312]	; (8001f48 <main+0x220>)
 8001e10:	f001 f833 	bl	8002e7a <NRF_IRQ_Callback>
		  printf("Message: ");
 8001e14:	484d      	ldr	r0, [pc, #308]	; (8001f4c <main+0x224>)
 8001e16:	f007 f8f3 	bl	8009000 <iprintf>
		  for(int i =0; i <7; i++){
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e1e:	e009      	b.n	8001e34 <main+0x10c>
			  printf("%c", data_buffer[i]);
 8001e20:	463a      	mov	r2, r7
 8001e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f007 f901 	bl	8009030 <putchar>
		  for(int i =0; i <7; i++){
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e30:	3301      	adds	r3, #1
 8001e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	ddf2      	ble.n	8001e20 <main+0xf8>
		  }
		  printf("\n");
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f007 f8f8 	bl	8009030 <putchar>
	  }
//	  if(startMeasFlag){
		  am2320_read_temperature_and_humidity(&am2320);
 8001e40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f98f 	bl	8001168 <am2320_read_temperature_and_humidity>
		  printf("Temperature: %d.%d\nHumidity: %d.%d\n",
				  am2320.last_temperature /10, am2320.last_temperature % 10,
 8001e4a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
		  printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <main+0x228>)
 8001e50:	fb82 1203 	smull	r1, r2, r2, r3
 8001e54:	1092      	asrs	r2, r2, #2
 8001e56:	17db      	asrs	r3, r3, #31
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	4618      	mov	r0, r3
				  am2320.last_temperature /10, am2320.last_temperature % 10,
 8001e5e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
		  printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <main+0x228>)
 8001e64:	fb83 1302 	smull	r1, r3, r3, r2
 8001e68:	1099      	asrs	r1, r3, #2
 8001e6a:	17d3      	asrs	r3, r2, #31
 8001e6c:	1ac9      	subs	r1, r1, r3
 8001e6e:	460b      	mov	r3, r1
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	461c      	mov	r4, r3
				  am2320.last_humidity / 10, am2320.last_humidity % 10);
 8001e7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
		  printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 8001e80:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <main+0x22c>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461d      	mov	r5, r3
				  am2320.last_humidity / 10, am2320.last_humidity % 10);
 8001e8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
		  printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <main+0x22c>)
 8001e92:	fba3 1302 	umull	r1, r3, r3, r2
 8001e96:	08d9      	lsrs	r1, r3, #3
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	4622      	mov	r2, r4
 8001eaa:	4601      	mov	r1, r0
 8001eac:	482a      	ldr	r0, [pc, #168]	; (8001f58 <main+0x230>)
 8001eae:	f007 f8a7 	bl	8009000 <iprintf>
		  bmp280_force_measurement(&bmp280);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fb96 	bl	80015e8 <bmp280_force_measurement>
		  bmp280_get_measurements(&bmp280, &bmp280_press, &bmp280_temp);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <main+0x234>)
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <main+0x238>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fec7 	bl	8001c58 <bmp280_get_measurements>
		  printf("Temperature: %d.%d\nPressure: %.3f\n", (int)(bmp280_temp/100), (int)(bmp280_temp%100),
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <main+0x234>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <main+0x23c>)
 8001ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed4:	1152      	asrs	r2, r2, #5
 8001ed6:	17db      	asrs	r3, r3, #31
 8001ed8:	1ad5      	subs	r5, r2, r3
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <main+0x234>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <main+0x23c>)
 8001ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee4:	1151      	asrs	r1, r2, #5
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	1a8c      	subs	r4, r1, r2
 8001eea:	2264      	movs	r2, #100	; 0x64
 8001eec:	fb04 f202 	mul.w	r2, r4, r2
 8001ef0:	1a9c      	subs	r4, r3, r2
				  (float)bmp280_press/25600.);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <main+0x238>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efe:	ee17 0a90 	vmov	r0, s15
 8001f02:	f7fe fb31 	bl	8000568 <__aeabi_f2d>
		  printf("Temperature: %d.%d\nPressure: %.3f\n", (int)(bmp280_temp/100), (int)(bmp280_temp%100),
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <main+0x240>)
 8001f0c:	f7fe fcae 	bl	800086c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	e9cd 2300 	strd	r2, r3, [sp]
 8001f18:	4622      	mov	r2, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <main+0x244>)
 8001f1e:	f007 f86f 	bl	8009000 <iprintf>
//		  startMeasFlag = 0;
		  HAL_Delay(5000);
 8001f22:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f26:	f001 fcc1 	bl	80038ac <HAL_Delay>
	  if(nrfInterrupt){
 8001f2a:	e76a      	b.n	8001e02 <main+0xda>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3750      	adds	r7, #80	; 0x50
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bdb0      	pop	{r4, r5, r7, pc}
 8001f34:	2000052c 	.word	0x2000052c
 8001f38:	2000042c 	.word	0x2000042c
 8001f3c:	20000480 	.word	0x20000480
 8001f40:	20000000 	.word	0x20000000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	20000ac4 	.word	0x20000ac4
 8001f4c:	0800ce40 	.word	0x0800ce40
 8001f50:	66666667 	.word	0x66666667
 8001f54:	cccccccd 	.word	0xcccccccd
 8001f58:	0800ce4c 	.word	0x0800ce4c
 8001f5c:	20000ac8 	.word	0x20000ac8
 8001f60:	20000acc 	.word	0x20000acc
 8001f64:	51eb851f 	.word	0x51eb851f
 8001f68:	40d90000 	.word	0x40d90000
 8001f6c:	0800ce70 	.word	0x0800ce70

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	; 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 f9bc 	bl	80082fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <SystemClock_Config+0xcc>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <SystemClock_Config+0xcc>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <SystemClock_Config+0xcc>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <SystemClock_Config+0xd0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a21      	ldr	r2, [pc, #132]	; (8002040 <SystemClock_Config+0xd0>)
 8001fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <SystemClock_Config+0xd0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fe4:	23a8      	movs	r3, #168	; 0xa8
 8001fe6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fec:	2307      	movs	r3, #7
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff0:	f107 0320 	add.w	r3, r7, #32
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f004 f861 	bl	80060bc <HAL_RCC_OscConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002000:	f000 faba 	bl	8002578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002004:	230f      	movs	r3, #15
 8002006:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002010:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2105      	movs	r1, #5
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fac2 	bl	80065ac <HAL_RCC_ClockConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800202e:	f000 faa3 	bl	8002578 <Error_Handler>
  }
}
 8002032:	bf00      	nop
 8002034:	3750      	adds	r7, #80	; 0x50
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000

08002044 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <MX_ETH_Init+0x84>)
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <MX_ETH_Init+0x88>)
 800204c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <MX_ETH_Init+0x8c>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <MX_ETH_Init+0x8c>)
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <MX_ETH_Init+0x8c>)
 800205c:	22e1      	movs	r2, #225	; 0xe1
 800205e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_ETH_Init+0x8c>)
 8002062:	2200      	movs	r2, #0
 8002064:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <MX_ETH_Init+0x8c>)
 8002068:	2200      	movs	r2, #0
 800206a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_ETH_Init+0x8c>)
 800206e:	2200      	movs	r2, #0
 8002070:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_ETH_Init+0x84>)
 8002074:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <MX_ETH_Init+0x8c>)
 8002076:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <MX_ETH_Init+0x84>)
 800207a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800207e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_ETH_Init+0x84>)
 8002082:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <MX_ETH_Init+0x90>)
 8002084:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_ETH_Init+0x84>)
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <MX_ETH_Init+0x94>)
 800208a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_ETH_Init+0x84>)
 800208e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002092:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <MX_ETH_Init+0x84>)
 8002096:	f001 fd3f 	bl	8003b18 <HAL_ETH_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80020a0:	f000 fa6a 	bl	8002578 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80020a4:	2238      	movs	r2, #56	; 0x38
 80020a6:	2100      	movs	r1, #0
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <MX_ETH_Init+0x98>)
 80020aa:	f006 f927 	bl	80082fc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_ETH_Init+0x98>)
 80020b0:	2221      	movs	r2, #33	; 0x21
 80020b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_ETH_Init+0x98>)
 80020b6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80020ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MX_ETH_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000037c 	.word	0x2000037c
 80020cc:	40028000 	.word	0x40028000
 80020d0:	20000ad4 	.word	0x20000ad4
 80020d4:	200002dc 	.word	0x200002dc
 80020d8:	2000023c 	.word	0x2000023c
 80020dc:	20000204 	.word	0x20000204

080020e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <MX_I2C1_Init+0x74>)
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <MX_I2C1_Init+0x78>)
 80020e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <MX_I2C1_Init+0x74>)
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <MX_I2C1_Init+0x7c>)
 80020ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <MX_I2C1_Init+0x74>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_I2C1_Init+0x74>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <MX_I2C1_Init+0x74>)
 80020fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <MX_I2C1_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_I2C1_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <MX_I2C1_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_I2C1_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <MX_I2C1_Init+0x74>)
 800211e:	f002 fa01 	bl	8004524 <HAL_I2C_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002128:	f000 fa26 	bl	8002578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800212c:	2100      	movs	r1, #0
 800212e:	4809      	ldr	r0, [pc, #36]	; (8002154 <MX_I2C1_Init+0x74>)
 8002130:	f003 fe2b 	bl	8005d8a <HAL_I2CEx_ConfigAnalogFilter>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800213a:	f000 fa1d 	bl	8002578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800213e:	2100      	movs	r1, #0
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_I2C1_Init+0x74>)
 8002142:	f003 fe5e 	bl	8005e02 <HAL_I2CEx_ConfigDigitalFilter>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800214c:	f000 fa14 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000042c 	.word	0x2000042c
 8002158:	40005400 	.word	0x40005400
 800215c:	000186a0 	.word	0x000186a0

08002160 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <MX_I2C2_Init+0x78>)
 8002168:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <MX_I2C2_Init+0x74>)
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <MX_I2C2_Init+0x7c>)
 800216e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <MX_I2C2_Init+0x74>)
 800217e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002182:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <MX_I2C2_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <MX_I2C2_Init+0x74>)
 800219e:	f002 f9c1 	bl	8004524 <HAL_I2C_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021a8:	f000 f9e6 	bl	8002578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ac:	2100      	movs	r1, #0
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <MX_I2C2_Init+0x74>)
 80021b0:	f003 fdeb 	bl	8005d8a <HAL_I2CEx_ConfigAnalogFilter>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80021ba:	f000 f9dd 	bl	8002578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021be:	2100      	movs	r1, #0
 80021c0:	4804      	ldr	r0, [pc, #16]	; (80021d4 <MX_I2C2_Init+0x74>)
 80021c2:	f003 fe1e 	bl	8005e02 <HAL_I2CEx_ConfigDigitalFilter>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80021cc:	f000 f9d4 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000480 	.word	0x20000480
 80021d8:	40005800 	.word	0x40005800
 80021dc:	000186a0 	.word	0x000186a0

080021e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_SPI2_Init+0x64>)
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <MX_SPI2_Init+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_SPI2_Init+0x64>)
 80021ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_SPI2_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_SPI2_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_SPI2_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_SPI2_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_SPI2_Init+0x64>)
 800220c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002210:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_SPI2_Init+0x64>)
 8002214:	2220      	movs	r2, #32
 8002216:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <MX_SPI2_Init+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_SPI2_Init+0x64>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <MX_SPI2_Init+0x64>)
 8002226:	2200      	movs	r2, #0
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_SPI2_Init+0x64>)
 800222c:	220a      	movs	r2, #10
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002230:	4804      	ldr	r0, [pc, #16]	; (8002244 <MX_SPI2_Init+0x64>)
 8002232:	f004 fbdb 	bl	80069ec <HAL_SPI_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800223c:	f000 f99c 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200004d4 	.word	0x200004d4
 8002248:	40003800 	.word	0x40003800

0800224c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_TIM10_Init+0x44>)
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <MX_TIM10_Init+0x48>)
 8002254:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000-1;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_TIM10_Init+0x44>)
 8002258:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800225c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_TIM10_Init+0x44>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 60000-1;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <MX_TIM10_Init+0x44>)
 8002266:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800226a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <MX_TIM10_Init+0x44>)
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_TIM10_Init+0x44>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_TIM10_Init+0x44>)
 800227c:	f004 feac 	bl	8006fd8 <HAL_TIM_Base_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8002286:	f000 f977 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000052c 	.word	0x2000052c
 8002294:	40014400 	.word	0x40014400

08002298 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <MX_USART3_UART_Init+0x50>)
 80022a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022be:	220c      	movs	r2, #12
 80022c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ce:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_USART3_UART_Init+0x4c>)
 80022d0:	f005 f926 	bl	8007520 <HAL_UART_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022da:	f000 f94d 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000574 	.word	0x20000574
 80022e8:	40004800 	.word	0x40004800

080022ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022fa:	2204      	movs	r2, #4
 80022fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002300:	2202      	movs	r2, #2
 8002302:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800230c:	2202      	movs	r2, #2
 800230e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002312:	2201      	movs	r2, #1
 8002314:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002324:	2201      	movs	r2, #1
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002330:	f003 fda6 	bl	8005e80 <HAL_PCD_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800233a:	f000 f91d 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200005b8 	.word	0x200005b8

08002348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
 800235c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	4b68      	ldr	r3, [pc, #416]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a67      	ldr	r2, [pc, #412]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	4b61      	ldr	r3, [pc, #388]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a60      	ldr	r2, [pc, #384]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <MX_GPIO_Init+0x1bc>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <MX_GPIO_Init+0x1bc>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a59      	ldr	r2, [pc, #356]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b57      	ldr	r3, [pc, #348]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b53      	ldr	r3, [pc, #332]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a52      	ldr	r2, [pc, #328]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b50      	ldr	r3, [pc, #320]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b45      	ldr	r3, [pc, #276]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a44      	ldr	r2, [pc, #272]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b42      	ldr	r3, [pc, #264]	; (8002504 <MX_GPIO_Init+0x1bc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <MX_GPIO_Init+0x1bc>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a3d      	ldr	r2, [pc, #244]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <MX_GPIO_Init+0x1bc>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002422:	2200      	movs	r2, #0
 8002424:	f244 0181 	movw	r1, #16513	; 0x4081
 8002428:	4837      	ldr	r0, [pc, #220]	; (8002508 <MX_GPIO_Init+0x1c0>)
 800242a:	f002 f849 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002434:	4835      	ldr	r0, [pc, #212]	; (800250c <MX_GPIO_Init+0x1c4>)
 8002436:	f002 f843 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	4834      	ldr	r0, [pc, #208]	; (8002510 <MX_GPIO_Init+0x1c8>)
 8002440:	f002 f83e 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800244a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800244e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	482e      	ldr	r0, [pc, #184]	; (8002514 <MX_GPIO_Init+0x1cc>)
 800245c:	f001 fe84 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002460:	f244 0381 	movw	r3, #16513	; 0x4081
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	4823      	ldr	r0, [pc, #140]	; (8002508 <MX_GPIO_Init+0x1c0>)
 800247a:	f001 fe75 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = SPI2_CSN_Pin|NRF_CE_Pin;
 800247e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	481d      	ldr	r0, [pc, #116]	; (800250c <MX_GPIO_Init+0x1c4>)
 8002498:	f001 fe66 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800249c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	4619      	mov	r1, r3
 80024b2:	4816      	ldr	r0, [pc, #88]	; (800250c <MX_GPIO_Init+0x1c4>)
 80024b4:	f001 fe58 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80024b8:	2340      	movs	r3, #64	; 0x40
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4810      	ldr	r0, [pc, #64]	; (8002510 <MX_GPIO_Init+0x1c8>)
 80024d0:	f001 fe4a 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	480a      	ldr	r0, [pc, #40]	; (8002510 <MX_GPIO_Init+0x1c8>)
 80024e8:	f001 fe3e 	bl	8004168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2102      	movs	r1, #2
 80024f0:	2028      	movs	r0, #40	; 0x28
 80024f2:	f001 fada 	bl	8003aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024f6:	2028      	movs	r0, #40	; 0x28
 80024f8:	f001 faf3 	bl	8003ae2 <HAL_NVIC_EnableIRQ>

}
 80024fc:	bf00      	nop
 80024fe:	3730      	adds	r7, #48	; 0x30
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	40020400 	.word	0x40020400
 800250c:	40021000 	.word	0x40021000
 8002510:	40021800 	.word	0x40021800
 8002514:	40020800 	.word	0x40020800

08002518 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// nrf irq pin interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin){
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002528:	d102      	bne.n	8002530 <HAL_GPIO_EXTI_Callback+0x18>
		// if interrupt comes from IRQ pin, then set flag
		nrfInterrupt = 1;
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_GPIO_EXTI_Callback+0x24>)
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
	}
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000ac4 	.word	0x20000ac4

08002540 <HAL_TIM_PeriodElapsedCallback>:

// minute timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	timerElapsedFlag++;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002552:	701a      	strb	r2, [r3, #0]
	if(timerElapsedFlag == 4){
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d102      	bne.n	8002562 <HAL_TIM_PeriodElapsedCallback+0x22>
		startMeasFlag = 1;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
	}

}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000ad0 	.word	0x20000ad0
 8002574:	20000ad1 	.word	0x20000ad1

08002578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800257c:	b672      	cpsid	i
}
 800257e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002580:	e7fe      	b.n	8002580 <Error_Handler+0x8>
	...

08002584 <NRF_SPI_RW>:
 */


#include "nrf/nrf.h"

uint8_t NRF_SPI_RW(uint8_t transmit_buff, uint8_t* receive_buff){
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af02      	add	r7, sp, #8
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_TransmitReceive(&hspi2, &transmit_buff, receive_buff, 1, 1000) != HAL_OK){
 8002590:	1df9      	adds	r1, r7, #7
 8002592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2301      	movs	r3, #1
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <NRF_SPI_RW+0x34>)
 800259e:	f004 faae 	bl	8006afe <HAL_SPI_TransmitReceive>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <NRF_SPI_RW+0x28>
		return NRF_ERROR;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <NRF_SPI_RW+0x2a>
	}
	return NRF_OK;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200004d4 	.word	0x200004d4

080025bc <NRF_ReadRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return data from given register
 * @retval 1 in case of successful read , 0 in case of failure
 */
bool NRF_ReadRegs(uint8_t address, uint8_t* data, uint8_t length){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d6:	4815      	ldr	r0, [pc, #84]	; (800262c <NRF_ReadRegs+0x70>)
 80025d8:	f001 ff72 	bl	80044c0 <HAL_GPIO_WritePin>
	// send read command
	if(!NRF_SPI_RW(NRF_CMD_R_REGISTER | address, &address_rx)){
 80025dc:	f107 020f 	add.w	r2, r7, #15
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ffcd 	bl	8002584 <NRF_SPI_RW>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <NRF_ReadRegs+0x50>
		return NRF_ERROR;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e017      	b.n	8002624 <NRF_ReadRegs+0x68>
	}
	// command is locked by csn, so it will read bytes until length is 0
	while(length--){
		// passing NOP to not write anything
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	20ff      	movs	r0, #255	; 0xff
 80025f8:	f7ff ffc4 	bl	8002584 <NRF_SPI_RW>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <NRF_ReadRegs+0x4a>
			return NRF_ERROR;
 8002602:	2300      	movs	r3, #0
 8002604:	e00e      	b.n	8002624 <NRF_ReadRegs+0x68>
		}
		++data;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	603b      	str	r3, [r7, #0]
	while(length--){
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	71ba      	strb	r2, [r7, #6]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ee      	bne.n	80025f4 <NRF_ReadRegs+0x38>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <NRF_ReadRegs+0x70>)
 800261e:	f001 ff4f 	bl	80044c0 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002622:	2301      	movs	r3, #1

}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <NRF_WriteRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return None
 * @retval 1 in case of successful write, 0 in case of failure
 */
bool NRF_WriteRegs(uint8_t address, uint8_t* data, uint8_t length){
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	4613      	mov	r3, r2
 800263e:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8002644:	2200      	movs	r2, #0
 8002646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264a:	4819      	ldr	r0, [pc, #100]	; (80026b0 <NRF_WriteRegs+0x80>)
 800264c:	f001 ff38 	bl	80044c0 <HAL_GPIO_WritePin>
	// send write command
	if(!NRF_SPI_RW(NRF_CMD_W_REGISTER | address, &address_rx)){
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f107 020f 	add.w	r2, r7, #15
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff90 	bl	8002584 <NRF_SPI_RW>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d111      	bne.n	800268e <NRF_WriteRegs+0x5e>
		return NRF_ERROR;
 800266a:	2300      	movs	r3, #0
 800266c:	e01b      	b.n	80026a6 <NRF_WriteRegs+0x76>
	}
	// command is locked by csn, so it will write bytes until length is 0
	while(length--){
		if(!NRF_SPI_RW(*data, &address_rx)){
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f107 020f 	add.w	r2, r7, #15
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff83 	bl	8002584 <NRF_SPI_RW>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <NRF_WriteRegs+0x58>
			return NRF_ERROR;
 8002684:	2300      	movs	r3, #0
 8002686:	e00e      	b.n	80026a6 <NRF_WriteRegs+0x76>
		}
		++data;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	603b      	str	r3, [r7, #0]
	while(length--){
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	71ba      	strb	r2, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <NRF_WriteRegs+0x3e>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8002698:	2201      	movs	r2, #1
 800269a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800269e:	4804      	ldr	r0, [pc, #16]	; (80026b0 <NRF_WriteRegs+0x80>)
 80026a0:	f001 ff0e 	bl	80044c0 <HAL_GPIO_WritePin>
	return NRF_OK;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <NRF_Init>:
 * @brief Init function. Defines basic configuration:
 * - only one pipe, enabled enhanced shockburst, up to 5 retransmits
 * - rest of parameters defined in function body
 * @param[in] nrf : pointer to transciever handler
 */
bool NRF_Init(NRF_HandleTypedef* nrf){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	// below parameters are configurable, wanted to keep them in one place
	nrf->rate_ = RATE_1Mbps;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
	nrf->frequency_ = (uint8_t)10;	// channel frequency 2410MHz
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	220a      	movs	r2, #10
 80026c6:	705a      	strb	r2, [r3, #1]
	nrf->power_amp_ = dBm_0; 	// max power, TX only
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2203      	movs	r2, #3
 80026cc:	709a      	strb	r2, [r3, #2]
	nrf->lna_ = LNA_HIGH;	// rx only
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	70da      	strb	r2, [r3, #3]
	nrf->dpl_ = DPL_OFF;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	715a      	strb	r2, [r3, #5]
	nrf->crc_ = CRC_ENABLE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	719a      	strb	r2, [r3, #6]
	nrf->crc_bytes_ = CRCB_ONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	71da      	strb	r2, [r3, #7]
	nrf->address_width_ = ADR_THREE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	721a      	strb	r2, [r3, #8]
	nrf->retransmissions_ = ARC_TEN;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	220a      	movs	r2, #10
 80026f0:	725a      	strb	r2, [r3, #9]
	nrf->ret_delay_ = DELAY_2000uS;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2207      	movs	r2, #7
 80026f6:	729a      	strb	r2, [r3, #10]

	if(!NRF_SET_RadioParams(nrf->rate_, nrf->power_amp_, nrf->lna_)){
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7818      	ldrb	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7899      	ldrb	r1, [r3, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	461a      	mov	r2, r3
 8002706:	f000 f872 	bl	80027ee <NRF_SET_RadioParams>
 800270a:	4603      	mov	r3, r0
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <NRF_Init+0x66>
		return NRF_ERROR;
 8002716:	2300      	movs	r3, #0
 8002718:	e065      	b.n	80027e6 <NRF_Init+0x132>
	}
	if(!NRF_SET_Frequency(nrf->frequency_)){
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f8a8 	bl	8002874 <NRF_SET_Frequency>
 8002724:	4603      	mov	r3, r0
 8002726:	f083 0301 	eor.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <NRF_Init+0x80>
		return NRF_ERROR;
 8002730:	2300      	movs	r3, #0
 8002732:	e058      	b.n	80027e6 <NRF_Init+0x132>
	}
	if(!NRF_SET_DynamicPayload(nrf->dpl_)){
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	795b      	ldrb	r3, [r3, #5]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f921 	bl	8002980 <NRF_SET_DynamicPayload>
 800273e:	4603      	mov	r3, r0
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <NRF_Init+0x9a>
		return NRF_ERROR;
 800274a:	2300      	movs	r3, #0
 800274c:	e04b      	b.n	80027e6 <NRF_Init+0x132>
	}
	if(!NRF_SET_CRC(nrf->crc_, nrf->crc_bytes_)){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	799a      	ldrb	r2, [r3, #6]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	79db      	ldrb	r3, [r3, #7]
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f000 f943 	bl	80029e4 <NRF_SET_CRC>
 800275e:	4603      	mov	r3, r0
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <NRF_Init+0xba>
		return NRF_ERROR;
 800276a:	2300      	movs	r3, #0
 800276c:	e03b      	b.n	80027e6 <NRF_Init+0x132>
//	uint8_t reg=0;
//		NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1);
//		printf("RF_SETUP: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
//				(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	if(!NRF_SET_PipeAddressWidth(nrf->address_width_)){
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7a1b      	ldrb	r3, [r3, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f974 	bl	8002a60 <NRF_SET_PipeAddressWidth>
 8002778:	4603      	mov	r3, r0
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <NRF_Init+0xd4>
		return NRF_ERROR;
 8002784:	2300      	movs	r3, #0
 8002786:	e02e      	b.n	80027e6 <NRF_Init+0x132>
	}
	if(!NRF_SET_Retransmission(nrf->ret_delay_,  nrf->retransmissions_)){
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7a9a      	ldrb	r2, [r3, #10]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7a5b      	ldrb	r3, [r3, #9]
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 f982 	bl	8002a9c <NRF_SET_Retransmission>
 8002798:	4603      	mov	r3, r0
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <NRF_Init+0xf4>
		return NRF_ERROR;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e01e      	b.n	80027e6 <NRF_Init+0x132>
	}
	// flush fifos
	if(!NRF_FlushTXFifo()){
 80027a8:	f000 fae4 	bl	8002d74 <NRF_FlushTXFifo>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <NRF_Init+0x108>
		return NRF_ERROR;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e014      	b.n	80027e6 <NRF_Init+0x132>
	}
	if(!NRF_FlushRXFifo()){
 80027bc:	f000 fab8 	bl	8002d30 <NRF_FlushRXFifo>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f083 0301 	eor.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <NRF_Init+0x11c>
		return NRF_ERROR;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e00a      	b.n	80027e6 <NRF_Init+0x132>
	}

	// clear irq flags
	if(!NRF_ClearIRQFlags()){
 80027d0:	f000 fb2a 	bl	8002e28 <NRF_ClearIRQFlags>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <NRF_Init+0x130>
		return NRF_ERROR;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <NRF_Init+0x132>
	}
	return NRF_OK;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <NRF_SET_RadioParams>:
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */

bool NRF_SET_RadioParams(NRF_AirDataRate rate, NRF_PowerAmplifier amp, NRF_LNAsetup lna){
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	460b      	mov	r3, r1
 80027fa:	71bb      	strb	r3, [r7, #6]
 80027fc:	4613      	mov	r3, r2
 80027fe:	717b      	strb	r3, [r7, #5]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8002800:	f107 030f 	add.w	r3, r7, #15
 8002804:	2201      	movs	r2, #1
 8002806:	4619      	mov	r1, r3
 8002808:	2006      	movs	r0, #6
 800280a:	f7ff fed7 	bl	80025bc <NRF_ReadRegs>
 800280e:	4603      	mov	r3, r0
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <NRF_SET_RadioParams+0x30>
		return NRF_ERROR;
 800281a:	2300      	movs	r3, #0
 800281c:	e026      	b.n	800286c <NRF_SET_RadioParams+0x7e>
	}
	reg &= ~(NRF_MASK_RF_DR  | NRF_MASK_RF_PWR | NRF_MASK_LNA);		// sets bits to 0
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	f023 030f 	bic.w	r3, r3, #15
 8002824:	b2db      	uxtb	r3, r3
 8002826:	73fb      	strb	r3, [r7, #15]
	reg |= ((rate << 3) | (amp << 1) | lna);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	b25a      	sxtb	r2, r3
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	b25b      	sxtb	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b25a      	sxtb	r2, r3
 8002838:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800283c:	4313      	orrs	r3, r2
 800283e:	b25a      	sxtb	r2, r3
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	b25b      	sxtb	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b25b      	sxtb	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_SETUP, &reg, 1)){
 800284c:	f107 030f 	add.w	r3, r7, #15
 8002850:	2201      	movs	r2, #1
 8002852:	4619      	mov	r1, r3
 8002854:	2006      	movs	r0, #6
 8002856:	f7ff feeb 	bl	8002630 <NRF_WriteRegs>
 800285a:	4603      	mov	r3, r0
 800285c:	f083 0301 	eor.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <NRF_SET_RadioParams+0x7c>
		return NRF_ERROR;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <NRF_SET_RadioParams+0x7e>
	}
	return NRF_OK;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <NRF_SET_Frequency>:
 * @param[in] rate : uint8_t, range 0-125
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Frequency(NRF_Frequency freq){
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_freq = freq & NRF_MASK_RF_CH;
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002884:	b2db      	uxtb	r3, r3
 8002886:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_CH, &safe_freq, 1)){
 8002888:	f107 030f 	add.w	r3, r7, #15
 800288c:	2201      	movs	r2, #1
 800288e:	4619      	mov	r1, r3
 8002890:	2005      	movs	r0, #5
 8002892:	f7ff fecd 	bl	8002630 <NRF_WriteRegs>
 8002896:	4603      	mov	r3, r0
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <NRF_SET_Frequency+0x32>
		return NRF_ERROR;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <NRF_SET_Frequency+0x34>
	}
	return NRF_OK;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <NRF_SET_Mode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Mode(NRF_Mode mode){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 80028ba:	f107 030f 	add.w	r3, r7, #15
 80028be:	2201      	movs	r2, #1
 80028c0:	4619      	mov	r1, r3
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7ff fe7a 	bl	80025bc <NRF_ReadRegs>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <NRF_SET_Mode+0x28>
		return NRF_ERROR;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e019      	b.n	800290c <NRF_SET_Mode+0x5c>
	}
	reg &= ~NRF_MASK_MODE;		// sets bit to 0
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	73fb      	strb	r3, [r7, #15]
	reg |= mode;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 80028ec:	f107 030f 	add.w	r3, r7, #15
 80028f0:	2201      	movs	r2, #1
 80028f2:	4619      	mov	r1, r3
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7ff fe9b 	bl	8002630 <NRF_WriteRegs>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <NRF_SET_Mode+0x5a>
		return NRF_ERROR;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <NRF_SET_Mode+0x5c>
	}
	return NRF_OK;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <NRF_SET_PowerMode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PowerMode(NRF_PowerMode pwr){
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 800291e:	f107 030f 	add.w	r3, r7, #15
 8002922:	2201      	movs	r2, #1
 8002924:	4619      	mov	r1, r3
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff fe48 	bl	80025bc <NRF_ReadRegs>
 800292c:	4603      	mov	r3, r0
 800292e:	f083 0301 	eor.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <NRF_SET_PowerMode+0x28>
		return NRF_ERROR;
 8002938:	2300      	movs	r3, #0
 800293a:	e01d      	b.n	8002978 <NRF_SET_PowerMode+0x64>
	}
	reg &= ~NRF_MASK_PWR_MODE;		// sets bit to 0
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	f023 0302 	bic.w	r3, r3, #2
 8002942:	b2db      	uxtb	r3, r3
 8002944:	73fb      	strb	r3, [r7, #15]
	reg |= pwr << 1;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	b25a      	sxtb	r2, r3
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	b25b      	sxtb	r3, r3
 8002950:	4313      	orrs	r3, r2
 8002952:	b25b      	sxtb	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8002958:	f107 030f 	add.w	r3, r7, #15
 800295c:	2201      	movs	r2, #1
 800295e:	4619      	mov	r1, r3
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fe65 	bl	8002630 <NRF_WriteRegs>
 8002966:	4603      	mov	r3, r0
 8002968:	f083 0301 	eor.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <NRF_SET_PowerMode+0x62>
		return NRF_ERROR;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <NRF_SET_PowerMode+0x64>
	}
	return NRF_OK;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <NRF_SET_DynamicPayload>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_DynamicPayload(NRF_DynamicPayload dpl){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_FEATURE, &reg, 1)){
 800298a:	f107 030f 	add.w	r3, r7, #15
 800298e:	2201      	movs	r2, #1
 8002990:	4619      	mov	r1, r3
 8002992:	201d      	movs	r0, #29
 8002994:	f7ff fe12 	bl	80025bc <NRF_ReadRegs>
 8002998:	4603      	mov	r3, r0
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <NRF_SET_DynamicPayload+0x28>
		return NRF_ERROR;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e019      	b.n	80029dc <NRF_SET_DynamicPayload+0x5c>
	}
	reg &= ~NRF_MASK_EN_DPL;		// sets bit to 0
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	73fb      	strb	r3, [r7, #15]
	reg |= dpl;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_FEATURE, &reg, 1)){
 80029bc:	f107 030f 	add.w	r3, r7, #15
 80029c0:	2201      	movs	r2, #1
 80029c2:	4619      	mov	r1, r3
 80029c4:	201d      	movs	r0, #29
 80029c6:	f7ff fe33 	bl	8002630 <NRF_WriteRegs>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <NRF_SET_DynamicPayload+0x5a>
		return NRF_ERROR;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <NRF_SET_DynamicPayload+0x5c>
	}
	return NRF_OK;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <NRF_SET_CRC>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_CRC(NRF_CRC crc, NRF_CRCbytes bytes){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	460a      	mov	r2, r1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 80029f4:	f107 030f 	add.w	r3, r7, #15
 80029f8:	2201      	movs	r2, #1
 80029fa:	4619      	mov	r1, r3
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff fddd 	bl	80025bc <NRF_ReadRegs>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f083 0301 	eor.w	r3, r3, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <NRF_SET_CRC+0x2e>
		return NRF_ERROR;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e022      	b.n	8002a58 <NRF_SET_CRC+0x74>
	}
	reg &= ~NRF_MASK_CRC;		// sets bits to 0
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	f023 030c 	bic.w	r3, r3, #12
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	73fb      	strb	r3, [r7, #15]
	reg |= ((crc << 3) | (bytes << 2));
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b25a      	sxtb	r2, r3
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8002a38:	f107 030f 	add.w	r3, r7, #15
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fdf5 	bl	8002630 <NRF_WriteRegs>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <NRF_SET_CRC+0x72>
		return NRF_ERROR;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <NRF_SET_CRC+0x74>
	}
	return NRF_OK;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <NRF_SET_PipeAddressWidth>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddressWidth(NRF_AddressWidth width){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_width = width & NRF_MASK_AW;
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_AW, &safe_width, 1)){
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f7ff fdd7 	bl	8002630 <NRF_WriteRegs>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <NRF_SET_PipeAddressWidth+0x32>
		return NRF_ERROR;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <NRF_SET_PipeAddressWidth+0x34>
	}
	return NRF_OK;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <NRF_SET_Retransmission>:
 * @param[in] arc : how many retransmissions allowed
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Retransmission(NRF_RetransmitDelay ard, NRF_RetransmitCount arc){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t retransmit_data = (ard << 4) | arc;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	b25a      	sxtb	r2, r3
 8002ab2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_RETR, &retransmit_data, 1)){
 8002abe:	f107 030f 	add.w	r3, r7, #15
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	2004      	movs	r0, #4
 8002ac8:	f7ff fdb2 	bl	8002630 <NRF_WriteRegs>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f083 0301 	eor.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <NRF_SET_Retransmission+0x40>
		return NRF_ERROR;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <NRF_SET_Retransmission+0x42>
	}
	return NRF_OK;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <NRF_SET_PipeAddress>:
 * @param[in] address : pointer to array with address (LSB first, its pretty crucial)
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddress(NRF_Pipe pipe, uint8_t* address){
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	6039      	str	r1, [r7, #0]
 8002af0:	71fb      	strb	r3, [r7, #7]
	uint8_t address_width;
	if(!NRF_ReadRegs(NRF_REG_SETUP_AW, &address_width, 1)){
 8002af2:	f107 030f 	add.w	r3, r7, #15
 8002af6:	2201      	movs	r2, #1
 8002af8:	4619      	mov	r1, r3
 8002afa:	2003      	movs	r0, #3
 8002afc:	f7ff fd5e 	bl	80025bc <NRF_ReadRegs>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f083 0301 	eor.w	r3, r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <NRF_SET_PipeAddress+0x2a>
		return NRF_ERROR;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e037      	b.n	8002b80 <NRF_SET_PipeAddress+0x9a>
	}

	switch(pipe){
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d00a      	beq.n	8002b2c <NRF_SET_PipeAddress+0x46>
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	dc2c      	bgt.n	8002b74 <NRF_SET_PipeAddress+0x8e>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	dc02      	bgt.n	8002b24 <NRF_SET_PipeAddress+0x3e>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da04      	bge.n	8002b2c <NRF_SET_PipeAddress+0x46>
 8002b22:	e027      	b.n	8002b74 <NRF_SET_PipeAddress+0x8e>
 8002b24:	3b02      	subs	r3, #2
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d824      	bhi.n	8002b74 <NRF_SET_PipeAddress+0x8e>
 8002b2a:	e013      	b.n	8002b54 <NRF_SET_PipeAddress+0x6e>
		case RX_PIPE_0:
		case RX_PIPE_1:
		case TX_PIPE:
			address_width += 2;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	3302      	adds	r3, #2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
			// for pipe 0-1 send all three bytes
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, address_width)){
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	330a      	adds	r3, #10
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fd76 	bl	8002630 <NRF_WriteRegs>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <NRF_SET_PipeAddress+0x92>
				return NRF_ERROR;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e015      	b.n	8002b80 <NRF_SET_PipeAddress+0x9a>
		case RX_PIPE_2:
		case RX_PIPE_3:
		case RX_PIPE_4:
		case RX_PIPE_5:
			// for pipe 2-5 and tx send only LSB
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, 1)){
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	330a      	adds	r3, #10
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fd66 	bl	8002630 <NRF_WriteRegs>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f083 0301 	eor.w	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <NRF_SET_PipeAddress+0x96>
				return NRF_ERROR;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e005      	b.n	8002b80 <NRF_SET_PipeAddress+0x9a>
			}
			break;
		default:
			// some different value, return error
			return NRF_ERROR;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e003      	b.n	8002b80 <NRF_SET_PipeAddress+0x9a>
			break;
 8002b78:	bf00      	nop
 8002b7a:	e000      	b.n	8002b7e <NRF_SET_PipeAddress+0x98>
			break;
 8002b7c:	bf00      	nop
	}
	return NRF_OK;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <NRF_SET_PipeRX>:
 * @param[in]] payload_length : length (in bytes) of data packets send through pipe
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeRX(NRF_Pipe pipe, NRF_AutoAcknowledge auto_ack, uint8_t payload_length){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	460b      	mov	r3, r1
 8002b94:	71bb      	strb	r3, [r7, #6]
 8002b96:	4613      	mov	r3, r2
 8002b98:	717b      	strb	r3, [r7, #5]
	// enable pipe
	uint8_t pipe_en;
	if(!NRF_ReadRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8002b9a:	f107 030f 	add.w	r3, r7, #15
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f7ff fd0a 	bl	80025bc <NRF_ReadRegs>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <NRF_SET_PipeRX+0x30>
		return NRF_ERROR;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e073      	b.n	8002ca0 <NRF_SET_PipeRX+0x118>
	}
	pipe_en &= ~(NRF_MASK_EN_BASE << pipe);
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	b25a      	sxtb	r2, r3
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b25b      	sxtb	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	73fb      	strb	r3, [r7, #15]
	pipe_en |= 1 << pipe;
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	b25a      	sxtb	r2, r3
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8002be8:	f107 030f 	add.w	r3, r7, #15
 8002bec:	2201      	movs	r2, #1
 8002bee:	4619      	mov	r1, r3
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7ff fd1d 	bl	8002630 <NRF_WriteRegs>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <NRF_SET_PipeRX+0x7e>
		return NRF_ERROR;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e04c      	b.n	8002ca0 <NRF_SET_PipeRX+0x118>
	}


	// set auto acknowledge
	uint8_t aa_en;
	if(!NRF_ReadRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8002c06:	f107 030e 	add.w	r3, r7, #14
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f7ff fcd4 	bl	80025bc <NRF_ReadRegs>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <NRF_SET_PipeRX+0x9c>
		return NRF_ERROR;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e03d      	b.n	8002ca0 <NRF_SET_PipeRX+0x118>
	}
	aa_en &= ~(NRF_MASK_EN_BASE << pipe);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2201      	movs	r2, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	b25a      	sxtb	r2, r3
 8002c32:	7bbb      	ldrb	r3, [r7, #14]
 8002c34:	b25b      	sxtb	r3, r3
 8002c36:	4013      	ands	r3, r2
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	73bb      	strb	r3, [r7, #14]
	aa_en |= 1 << pipe;
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2201      	movs	r2, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	b25a      	sxtb	r2, r3
 8002c48:	7bbb      	ldrb	r3, [r7, #14]
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	73bb      	strb	r3, [r7, #14]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8002c54:	f107 030e 	add.w	r3, r7, #14
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	f7ff fce7 	bl	8002630 <NRF_WriteRegs>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f083 0301 	eor.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <NRF_SET_PipeRX+0xea>
		return NRF_ERROR;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e016      	b.n	8002ca0 <NRF_SET_PipeRX+0x118>
	}

	// set payload length (used when dpl is disabled)
	uint8_t safe_pl_len = NRF_MASK_RX_PW_P & payload_length;
 8002c72:	797b      	ldrb	r3, [r7, #5]
 8002c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	737b      	strb	r3, [r7, #13]
	if(!NRF_WriteRegs(NRF_REG_RX_PW_BASE+pipe, &safe_pl_len, 1)){
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	3311      	adds	r3, #17
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f107 010d 	add.w	r1, r7, #13
 8002c86:	2201      	movs	r2, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fcd1 	bl	8002630 <NRF_WriteRegs>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f083 0301 	eor.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <NRF_SET_PipeRX+0x116>
		return NRF_ERROR;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <NRF_SET_PipeRX+0x118>
	}

	// if everything passed return ok
	return NRF_OK;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <NRF_GET_PipeNumber>:
 * @param[in] pipe : pointer to pipe variable
 *
 * @return nothing
 * @retval 1 if successfully get, 0 if something went wrong
 */
bool NRF_GET_PipeNumber(uint8_t* pipe){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	uint8_t status_reg = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 8002cb4:	f107 030f 	add.w	r3, r7, #15
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4619      	mov	r1, r3
 8002cbc:	2007      	movs	r0, #7
 8002cbe:	f7ff fc7d 	bl	80025bc <NRF_ReadRegs>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <NRF_GET_PipeNumber+0x2a>
		return NRF_ERROR;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e008      	b.n	8002ce4 <NRF_GET_PipeNumber+0x3c>
	}
	*pipe = (status_reg & NRF_MASK_RX_P_NO) >> 1;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	105b      	asrs	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <NRF_GET_PayloadLength>:
 * @param[in] pipe : pipe number
 *
 * @return nothing
 * @retval 1 if successfully get, 0 if something went wrong
 */
bool NRF_GET_PayloadLength(uint8_t pipe, uint8_t* length){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
	if(!NRF_ReadRegs(NRF_REG_RX_PW_BASE+pipe, length, 1)){
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	3311      	adds	r3, #17
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2201      	movs	r2, #1
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fc5a 	bl	80025bc <NRF_ReadRegs>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <NRF_GET_PayloadLength+0x2c>
		return NRF_ERROR;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e007      	b.n	8002d28 <NRF_GET_PayloadLength+0x3c>
	}
	*length &= NRF_MASK_RX_PW_P;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <NRF_FlushRXFifo>:
 * @brief flush rx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushRXFifo(void){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <NRF_FlushRXFifo+0x40>)
 8002d42:	f001 fbbd 	bl	80044c0 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_RX, &rx_buff)){
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	4619      	mov	r1, r3
 8002d4a:	20e2      	movs	r0, #226	; 0xe2
 8002d4c:	f7ff fc1a 	bl	8002584 <NRF_SPI_RW>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <NRF_FlushRXFifo+0x2a>
		return NRF_ERROR;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e006      	b.n	8002d68 <NRF_FlushRXFifo+0x38>
	}
	NRF_CSN_SET_HIGH;
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <NRF_FlushRXFifo+0x40>)
 8002d62:	f001 fbad 	bl	80044c0 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002d66:	2301      	movs	r3, #1
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000

08002d74 <NRF_FlushTXFifo>:
 * @brief flush tx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushTXFifo(void){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d84:	480b      	ldr	r0, [pc, #44]	; (8002db4 <NRF_FlushTXFifo+0x40>)
 8002d86:	f001 fb9b 	bl	80044c0 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_TX, &rx_buff)){
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	20e1      	movs	r0, #225	; 0xe1
 8002d90:	f7ff fbf8 	bl	8002584 <NRF_SPI_RW>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <NRF_FlushTXFifo+0x2a>
		return NRF_ERROR;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e006      	b.n	8002dac <NRF_FlushTXFifo+0x38>
	}
	NRF_CSN_SET_HIGH;
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <NRF_FlushTXFifo+0x40>)
 8002da6:	f001 fb8b 	bl	80044c0 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000

08002db8 <NRF_ReadRxPayload>:
 * @param[in] length : data length
 *
 * @return nothing
 * @retval 1 if successfully read, 0 if something went wrong
 */
bool NRF_ReadRxPayload(uint8_t* data, uint8_t length){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buff = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_SET_LOW;
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dce:	4815      	ldr	r0, [pc, #84]	; (8002e24 <NRF_ReadRxPayload+0x6c>)
 8002dd0:	f001 fb76 	bl	80044c0 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_R_RX_PAYLOAD, &rx_buff)){
 8002dd4:	f107 030f 	add.w	r3, r7, #15
 8002dd8:	4619      	mov	r1, r3
 8002dda:	2061      	movs	r0, #97	; 0x61
 8002ddc:	f7ff fbd2 	bl	8002584 <NRF_SPI_RW>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10d      	bne.n	8002e02 <NRF_ReadRxPayload+0x4a>
		return NRF_ERROR;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e017      	b.n	8002e1a <NRF_ReadRxPayload+0x62>
	}
	while(length--){
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	20ff      	movs	r0, #255	; 0xff
 8002dee:	f7ff fbc9 	bl	8002584 <NRF_SPI_RW>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <NRF_ReadRxPayload+0x44>
			return NRF_ERROR;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e00e      	b.n	8002e1a <NRF_ReadRxPayload+0x62>
		}
		data++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	607b      	str	r3, [r7, #4]
	while(length--){
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	70fa      	strb	r2, [r7, #3]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ee      	bne.n	8002dea <NRF_ReadRxPayload+0x32>
	}
	NRF_CSN_SET_HIGH;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <NRF_ReadRxPayload+0x6c>)
 8002e14:	f001 fb54 	bl	80044c0 <HAL_GPIO_WritePin>
	return NRF_OK;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <NRF_ClearIRQFlags>:
 * @brief clear irq bits in status register
 *
 * @return nothing
 * @retval 1 if successfully cleared, 0 if something went wrong
 */
bool NRF_ClearIRQFlags(void){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
	uint8_t status_reg;
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	2201      	movs	r2, #1
 8002e32:	4619      	mov	r1, r3
 8002e34:	2007      	movs	r0, #7
 8002e36:	f7ff fbc1 	bl	80025bc <NRF_ReadRegs>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <NRF_ClearIRQFlags+0x22>
		return NRF_ERROR;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e013      	b.n	8002e72 <NRF_ClearIRQFlags+0x4a>
	}

	// write 1 to clear bits
	status_reg |= (NRF_MASK_RX_DR | NRF_MASK_TX_DS | NRF_MASK_MAX_RT);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	71fb      	strb	r3, [r7, #7]
	if(!NRF_WriteRegs(NRF_REG_STATUS, &status_reg, 1)){
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	2201      	movs	r2, #1
 8002e58:	4619      	mov	r1, r3
 8002e5a:	2007      	movs	r0, #7
 8002e5c:	f7ff fbe8 	bl	8002630 <NRF_WriteRegs>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <NRF_ClearIRQFlags+0x48>
		return NRF_ERROR;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <NRF_ClearIRQFlags+0x4a>
	}
	return NRF_OK;
 8002e70:	2301      	movs	r3, #1
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <NRF_IRQ_Callback>:
 * @param[in] nrfInterruptFlag : pointer to global flag indicating interrupt state
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_Callback(uint8_t* nrfInterrupt, uint8_t* data_buffer){
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]

	if(*nrfInterrupt){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d046      	beq.n	8002f1a <NRF_IRQ_Callback+0xa0>

		uint8_t status_reg = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

		if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 8002e90:	f107 030f 	add.w	r3, r7, #15
 8002e94:	2201      	movs	r2, #1
 8002e96:	4619      	mov	r1, r3
 8002e98:	2007      	movs	r0, #7
 8002e9a:	f7ff fb8f 	bl	80025bc <NRF_ReadRegs>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <NRF_IRQ_Callback+0x34>
			return NRF_ERROR;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e036      	b.n	8002f1c <NRF_IRQ_Callback+0xa2>
		}
		// if flag is high, run one of handlers
		if(NRF_MASK_RX_DR & status_reg){
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <NRF_IRQ_Callback+0x56>
			// interrupt: data ready rx fifo
			if(!NRF_IRQ_RxHandler(data_buffer)){
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f000 f832 	bl	8002f24 <NRF_IRQ_RxHandler>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f083 0301 	eor.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d021      	beq.n	8002f10 <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e025      	b.n	8002f1c <NRF_IRQ_Callback+0xa2>
			}
		}
		else if(NRF_MASK_TX_DS & status_reg){
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <NRF_IRQ_Callback+0x76>
			// interrupt: data sent tx fifo
			if(!NRF_IRQ_TxHandler()){
 8002edc:	f000 f86c 	bl	8002fb8 <NRF_IRQ_TxHandler>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d011      	beq.n	8002f10 <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e015      	b.n	8002f1c <NRF_IRQ_Callback+0xa2>
			}
		}
		else if(NRF_MASK_MAX_RT & status_reg){
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <NRF_IRQ_Callback+0x96>
			// interrupt : max no of retransmissions
			if(!NRF_IRQ_MaxHandler()){
 8002efc:	f000 f86b 	bl	8002fd6 <NRF_IRQ_MaxHandler>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f083 0301 	eor.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e005      	b.n	8002f1c <NRF_IRQ_Callback+0xa2>
			}
		}
		*nrfInterrupt = 0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
		return NRF_OK;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <NRF_IRQ_Callback+0xa2>
	}
	else{
		// somehow this was called without flag raised, so call error
		return NRF_ERROR;
 8002f1a:	2300      	movs	r3, #0
	}

}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <NRF_IRQ_RxHandler>:
 * @param[in] data_buffer : pointer to buffer to read data into
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_RxHandler(uint8_t* data_buffer){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	//get pipe number
	uint8_t pipe = 0x07; //sets as empty rx
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	73fb      	strb	r3, [r7, #15]
	if(!NRF_GET_PipeNumber(&pipe)){
 8002f30:	f107 030f 	add.w	r3, r7, #15
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff feb7 	bl	8002ca8 <NRF_GET_PipeNumber>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <NRF_IRQ_RxHandler+0x26>
		return NRF_ERROR;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e032      	b.n	8002fb0 <NRF_IRQ_RxHandler+0x8c>
	}

	//get length
	uint8_t length = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73bb      	strb	r3, [r7, #14]
	if(!NRF_GET_PayloadLength(pipe, &length)){
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	f107 020e 	add.w	r2, r7, #14
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fec8 	bl	8002cec <NRF_GET_PayloadLength>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <NRF_IRQ_RxHandler+0x48>
		return NRF_ERROR;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e021      	b.n	8002fb0 <NRF_IRQ_RxHandler+0x8c>
	}

	//read data
	if(!NRF_ReadRxPayload(data_buffer, length)){
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff21 	bl	8002db8 <NRF_ReadRxPayload>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f083 0301 	eor.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <NRF_IRQ_RxHandler+0x62>
		return NRF_ERROR;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e014      	b.n	8002fb0 <NRF_IRQ_RxHandler+0x8c>
	}

	// deassert IRQ pin; my code supports
	// only one interrupt at a time, so I can clear all flags
	if(!NRF_ClearIRQFlags()){
 8002f86:	f7ff ff4f 	bl	8002e28 <NRF_ClearIRQFlags>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <NRF_IRQ_RxHandler+0x76>
		return NRF_ERROR;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e00a      	b.n	8002fb0 <NRF_IRQ_RxHandler+0x8c>
	}
	if(!NRF_FlushRXFifo()){
 8002f9a:	f7ff fec9 	bl	8002d30 <NRF_FlushRXFifo>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f083 0301 	eor.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <NRF_IRQ_RxHandler+0x8a>
		return NRF_ERROR;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <NRF_IRQ_RxHandler+0x8c>
	}
	return NRF_OK;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <NRF_IRQ_TxHandler>:
 * @brief handle tx interrupt
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_TxHandler(void){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	// this only deasserts irq flags
	if(!NRF_ClearIRQFlags()){
 8002fbc:	f7ff ff34 	bl	8002e28 <NRF_ClearIRQFlags>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f083 0301 	eor.w	r3, r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <NRF_IRQ_TxHandler+0x18>
		return NRF_ERROR;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <NRF_IRQ_TxHandler+0x1a>
	}
	return NRF_OK;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <NRF_IRQ_MaxHandler>:
 * @brief handle max interrupt
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_MaxHandler(void){
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	af00      	add	r7, sp, #0
	// clear fifo and deassert pin
	// this config simply discards packet
	if(!NRF_FlushTXFifo()){
 8002fda:	f7ff fecb 	bl	8002d74 <NRF_FlushTXFifo>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f083 0301 	eor.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <NRF_IRQ_MaxHandler+0x18>
		return NRF_ERROR;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e00a      	b.n	8003004 <NRF_IRQ_MaxHandler+0x2e>
	}

	if(!NRF_ClearIRQFlags()){
 8002fee:	f7ff ff1b 	bl	8002e28 <NRF_ClearIRQFlags>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <NRF_IRQ_MaxHandler+0x2c>
		return NRF_ERROR;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <NRF_IRQ_MaxHandler+0x2e>
	}
	return NRF_OK;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_MspInit+0x4c>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <HAL_MspInit+0x4c>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_MspInit+0x4c>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_MspInit+0x4c>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a08      	ldr	r2, [pc, #32]	; (8003054 <HAL_MspInit+0x4c>)
 8003034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_MspInit+0x4c>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800

08003058 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	; 0x38
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a55      	ldr	r2, [pc, #340]	; (80031cc <HAL_ETH_MspInit+0x174>)
 8003076:	4293      	cmp	r3, r2
 8003078:	f040 80a4 	bne.w	80031c4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a6:	6313      	str	r3, [r2, #48]	; 0x30
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	4a44      	ldr	r2, [pc, #272]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c2:	6313      	str	r3, [r2, #48]	; 0x30
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4a3d      	ldr	r2, [pc, #244]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6313      	str	r3, [r2, #48]	; 0x30
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	6313      	str	r3, [r2, #48]	; 0x30
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003132:	6313      	str	r3, [r2, #48]	; 0x30
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_ETH_MspInit+0x178>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003140:	2332      	movs	r3, #50	; 0x32
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314c:	2303      	movs	r3, #3
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003150:	230b      	movs	r3, #11
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003158:	4619      	mov	r1, r3
 800315a:	481e      	ldr	r0, [pc, #120]	; (80031d4 <HAL_ETH_MspInit+0x17c>)
 800315c:	f001 f804 	bl	8004168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003160:	2386      	movs	r3, #134	; 0x86
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003170:	230b      	movs	r3, #11
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003178:	4619      	mov	r1, r3
 800317a:	4817      	ldr	r0, [pc, #92]	; (80031d8 <HAL_ETH_MspInit+0x180>)
 800317c:	f000 fff4 	bl	8004168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003192:	230b      	movs	r3, #11
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	480f      	ldr	r0, [pc, #60]	; (80031dc <HAL_ETH_MspInit+0x184>)
 800319e:	f000 ffe3 	bl	8004168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80031a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031b4:	230b      	movs	r3, #11
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031bc:	4619      	mov	r1, r3
 80031be:	4808      	ldr	r0, [pc, #32]	; (80031e0 <HAL_ETH_MspInit+0x188>)
 80031c0:	f000 ffd2 	bl	8004168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3738      	adds	r7, #56	; 0x38
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40028000 	.word	0x40028000
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40021800 	.word	0x40021800

080031e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 031c 	add.w	r3, r7, #28
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <HAL_I2C_MspInit+0xec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12d      	bne.n	8003262 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003222:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003228:	2312      	movs	r3, #18
 800322a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003234:	2304      	movs	r3, #4
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	4619      	mov	r1, r3
 800323e:	4826      	ldr	r0, [pc, #152]	; (80032d8 <HAL_I2C_MspInit+0xf4>)
 8003240:	f000 ff92 	bl	8004168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 800324e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003260:	e031      	b.n	80032c6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <HAL_I2C_MspInit+0xf8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d12c      	bne.n	80032c6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800328e:	2312      	movs	r3, #18
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800329a:	2304      	movs	r3, #4
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	f107 031c 	add.w	r3, r7, #28
 80032a2:	4619      	mov	r1, r3
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <HAL_I2C_MspInit+0xf4>)
 80032a6:	f000 ff5f 	bl	8004168 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 80032b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_I2C_MspInit+0xf0>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	bf00      	nop
 80032c8:	3730      	adds	r7, #48	; 0x30
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40005400 	.word	0x40005400
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020400 	.word	0x40020400
 80032dc:	40005800 	.word	0x40005800

080032e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <HAL_SPI_MspInit+0xc0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d149      	bne.n	8003396 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 800330c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003328:	f043 0304 	orr.w	r3, r3, #4
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_SPI_MspInit+0xc4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003356:	230c      	movs	r3, #12
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003366:	2305      	movs	r3, #5
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	480d      	ldr	r0, [pc, #52]	; (80033a8 <HAL_SPI_MspInit+0xc8>)
 8003372:	f000 fef9 	bl	8004168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003376:	2308      	movs	r3, #8
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	2303      	movs	r3, #3
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003386:	2305      	movs	r3, #5
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4806      	ldr	r0, [pc, #24]	; (80033ac <HAL_SPI_MspInit+0xcc>)
 8003392:	f000 fee9 	bl	8004168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40003800 	.word	0x40003800
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00

080033b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <HAL_TIM_Base_MspInit+0x48>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d115      	bne.n	80033ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_TIM_Base_MspInit+0x4c>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_TIM_Base_MspInit+0x4c>)
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	6453      	str	r3, [r2, #68]	; 0x44
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_TIM_Base_MspInit+0x4c>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2101      	movs	r1, #1
 80033e2:	2019      	movs	r0, #25
 80033e4:	f000 fb61 	bl	8003aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033e8:	2019      	movs	r0, #25
 80033ea:	f000 fb7a 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_UART_MspInit+0x84>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12c      	bne.n	800347c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_UART_MspInit+0x88>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_UART_MspInit+0x88>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_UART_MspInit+0x88>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_UART_MspInit+0x88>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_UART_MspInit+0x88>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_UART_MspInit+0x88>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800345a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003468:	2303      	movs	r3, #3
 800346a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800346c:	2307      	movs	r3, #7
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	4619      	mov	r1, r3
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <HAL_UART_MspInit+0x8c>)
 8003478:	f000 fe76 	bl	8004168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800347c:	bf00      	nop
 800347e:	3728      	adds	r7, #40	; 0x28
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40004800 	.word	0x40004800
 8003488:	40023800 	.word	0x40023800
 800348c:	40020c00 	.word	0x40020c00

08003490 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b0:	d13f      	bne.n	8003532 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_PCD_MspInit+0xac>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_PCD_MspInit+0xac>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_PCD_MspInit+0xac>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80034ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034e0:	230a      	movs	r3, #10
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	4815      	ldr	r0, [pc, #84]	; (8003540 <HAL_PCD_MspInit+0xb0>)
 80034ec:	f000 fe3c 	bl	8004168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80034f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	480e      	ldr	r0, [pc, #56]	; (8003540 <HAL_PCD_MspInit+0xb0>)
 8003506:	f000 fe2f 	bl	8004168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_PCD_MspInit+0xac>)
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	4a0b      	ldr	r2, [pc, #44]	; (800353c <HAL_PCD_MspInit+0xac>)
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	6353      	str	r3, [r2, #52]	; 0x34
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_PCD_MspInit+0xac>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_PCD_MspInit+0xac>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_PCD_MspInit+0xac>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003532:	bf00      	nop
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40020000 	.word	0x40020000

08003544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <NMI_Handler+0x4>

0800354a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <MemManage_Handler+0x4>

08003556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800355a:	e7fe      	b.n	800355a <BusFault_Handler+0x4>

0800355c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <UsageFault_Handler+0x4>

08003562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003590:	f000 f96c 	bl	800386c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}

08003598 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800359e:	f003 fddb 	bl	8007158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2000052c 	.word	0x2000052c

080035ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80035b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035b4:	f000 ff9e 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 80035b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035bc:	f000 ff9a 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
	return 1;
 80035c8:	2301      	movs	r3, #1
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_kill>:

int _kill(int pid, int sig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035de:	f004 fe63 	bl	80082a8 <__errno>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2216      	movs	r2, #22
 80035e6:	601a      	str	r2, [r3, #0]
	return -1;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_exit>:

void _exit (int status)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ffe7 	bl	80035d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003606:	e7fe      	b.n	8003606 <_exit+0x12>

08003608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e00a      	b.n	8003630 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800361a:	f3af 8000 	nop.w
 800361e:	4601      	mov	r1, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	60ba      	str	r2, [r7, #8]
 8003626:	b2ca      	uxtb	r2, r1
 8003628:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3301      	adds	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	dbf0      	blt.n	800361a <_read+0x12>
	}

return len;
 8003638:	687b      	ldr	r3, [r7, #4]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e009      	b.n	8003668 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	60ba      	str	r2, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fb4b 	bl	8001cf8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	dbf1      	blt.n	8003654 <_write+0x12>
	}
	return len;
 8003670:	687b      	ldr	r3, [r7, #4]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_close>:

int _close(int file)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	return -1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a2:	605a      	str	r2, [r3, #4]
	return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <_isatty>:

int _isatty(int file)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
	return 1;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
	return 0;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <_sbrk+0x5c>)
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <_sbrk+0x60>)
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <_sbrk+0x64>)
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <_sbrk+0x68>)
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	429a      	cmp	r2, r3
 8003712:	d207      	bcs.n	8003724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003714:	f004 fdc8 	bl	80082a8 <__errno>
 8003718:	4603      	mov	r3, r0
 800371a:	220c      	movs	r2, #12
 800371c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e009      	b.n	8003738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <_sbrk+0x64>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <_sbrk+0x64>)
 8003734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20030000 	.word	0x20030000
 8003744:	00000400 	.word	0x00000400
 8003748:	20000adc 	.word	0x20000adc
 800374c:	20000af8 	.word	0x20000af8

08003750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <SystemInit+0x20>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <SystemInit+0x20>)
 800375c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003778:	480d      	ldr	r0, [pc, #52]	; (80037b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800377a:	490e      	ldr	r1, [pc, #56]	; (80037b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800377e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003780:	e002      	b.n	8003788 <LoopCopyDataInit>

08003782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003786:	3304      	adds	r3, #4

08003788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800378c:	d3f9      	bcc.n	8003782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378e:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003790:	4c0b      	ldr	r4, [pc, #44]	; (80037c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003794:	e001      	b.n	800379a <LoopFillZerobss>

08003796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003798:	3204      	adds	r2, #4

0800379a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800379c:	d3fb      	bcc.n	8003796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800379e:	f7ff ffd7 	bl	8003750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037a2:	f004 fd87 	bl	80082b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a6:	f7fe fabf 	bl	8001d28 <main>
  bx  lr    
 80037aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80037b8:	0800d36c 	.word	0x0800d36c
  ldr r2, =_sbss
 80037bc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80037c0:	20000af4 	.word	0x20000af4

080037c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c4:	e7fe      	b.n	80037c4 <ADC_IRQHandler>
	...

080037c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_Init+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <HAL_Init+0x40>)
 80037d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <HAL_Init+0x40>)
 80037de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_Init+0x40>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f0:	2003      	movs	r0, #3
 80037f2:	f000 f94f 	bl	8003a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f000 f808 	bl	800380c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037fc:	f7ff fc04 	bl	8003008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00

0800380c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_InitTick+0x54>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_InitTick+0x58>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003822:	fbb3 f3f1 	udiv	r3, r3, r1
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f967 	bl	8003afe <HAL_SYSTICK_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00e      	b.n	8003858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d80a      	bhi.n	8003856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003840:	2200      	movs	r2, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f000 f92f 	bl	8003aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <HAL_InitTick+0x5c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000004 	.word	0x20000004
 8003864:	2000000c 	.word	0x2000000c
 8003868:	20000008 	.word	0x20000008

0800386c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_IncTick+0x20>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_IncTick+0x24>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4413      	add	r3, r2
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_IncTick+0x24>)
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	2000000c 	.word	0x2000000c
 8003890:	20000ae0 	.word	0x20000ae0

08003894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return uwTick;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_GetTick+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000ae0 	.word	0x20000ae0

080038ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7ff ffee 	bl	8003894 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d005      	beq.n	80038d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_Delay+0x44>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038d2:	bf00      	nop
 80038d4:	f7ff ffde 	bl	8003894 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d8f7      	bhi.n	80038d4 <HAL_Delay+0x28>
  {
  }
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800391c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003926:	4a04      	ldr	r2, [pc, #16]	; (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	60d3      	str	r3, [r2, #12]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <__NVIC_GetPriorityGrouping+0x18>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	f003 0307 	and.w	r3, r3, #7
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	db0b      	blt.n	8003982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	f003 021f 	and.w	r2, r3, #31
 8003970:	4907      	ldr	r1, [pc, #28]	; (8003990 <__NVIC_EnableIRQ+0x38>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2001      	movs	r0, #1
 800397a:	fa00 f202 	lsl.w	r2, r0, r2
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a60:	d301      	bcc.n	8003a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00f      	b.n	8003a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <SysTick_Config+0x40>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6e:	210f      	movs	r1, #15
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	f7ff ff8e 	bl	8003994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <SysTick_Config+0x40>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <SysTick_Config+0x40>)
 8003a80:	2207      	movs	r2, #7
 8003a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	e000e010 	.word	0xe000e010

08003a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff29 	bl	80038f4 <__NVIC_SetPriorityGrouping>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003abc:	f7ff ff3e 	bl	800393c <__NVIC_GetPriorityGrouping>
 8003ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	f7ff ff8e 	bl	80039e8 <NVIC_EncodePriority>
 8003acc:	4602      	mov	r2, r0
 8003ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff5d 	bl	8003994 <__NVIC_SetPriority>
}
 8003ada:	bf00      	nop
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff31 	bl	8003958 <__NVIC_EnableIRQ>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffa2 	bl	8003a50 <SysTick_Config>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06c      	b.n	8003c04 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2223      	movs	r2, #35	; 0x23
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fa8b 	bl	8003058 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_ETH_Init+0xf4>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	4a30      	ldr	r2, [pc, #192]	; (8003c0c <HAL_ETH_Init+0xf4>)
 8003b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b50:	6453      	str	r3, [r2, #68]	; 0x44
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_ETH_Init+0xf4>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_ETH_Init+0xf8>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <HAL_ETH_Init+0xf8>)
 8003b64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b68:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_ETH_Init+0xf8>)
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4927      	ldr	r1, [pc, #156]	; (8003c10 <HAL_ETH_Init+0xf8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <HAL_ETH_Init+0xf8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b94:	f7ff fe7e 	bl	8003894 <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003b9a:	e011      	b.n	8003bc0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b9c:	f7ff fe7a 	bl	8003894 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003baa:	d909      	bls.n	8003bc0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	22e0      	movs	r2, #224	; 0xe0
 8003bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e021      	b.n	8003c04 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e4      	bne.n	8003b9c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f958 	bl	8003e88 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f9ff 	bl	8003fdc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa55 	bl	800408e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	461a      	mov	r2, r3
 8003bea:	2100      	movs	r1, #0
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9bd 	bl	8003f6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800

08003c14 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <ETH_SetMACConfig+0x15c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	7c1b      	ldrb	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <ETH_SetMACConfig+0x28>
 8003c36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c3a:	e000      	b.n	8003c3e <ETH_SetMACConfig+0x2a>
 8003c3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7c5b      	ldrb	r3, [r3, #17]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <ETH_SetMACConfig+0x38>
 8003c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c4a:	e000      	b.n	8003c4e <ETH_SetMACConfig+0x3a>
 8003c4c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	7fdb      	ldrb	r3, [r3, #31]
 8003c5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	7f92      	ldrb	r2, [r2, #30]
 8003c68:	2a00      	cmp	r2, #0
 8003c6a:	d102      	bne.n	8003c72 <ETH_SetMACConfig+0x5e>
 8003c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c70:	e000      	b.n	8003c74 <ETH_SetMACConfig+0x60>
 8003c72:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	7f1b      	ldrb	r3, [r3, #28]
 8003c7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	791b      	ldrb	r3, [r3, #4]
 8003c88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003c8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d102      	bne.n	8003c9c <ETH_SetMACConfig+0x88>
 8003c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9a:	e000      	b.n	8003c9e <ETH_SetMACConfig+0x8a>
 8003c9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003c9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	7bdb      	ldrb	r3, [r3, #15]
 8003ca4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ca6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cb4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7ff fdec 	bl	80038ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	d101      	bne.n	8003d02 <ETH_SetMACConfig+0xee>
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	e000      	b.n	8003d04 <ETH_SetMACConfig+0xf0>
 8003d02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d12:	2a01      	cmp	r2, #1
 8003d14:	d101      	bne.n	8003d1a <ETH_SetMACConfig+0x106>
 8003d16:	2208      	movs	r2, #8
 8003d18:	e000      	b.n	8003d1c <ETH_SetMACConfig+0x108>
 8003d1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d24:	2a01      	cmp	r2, #1
 8003d26:	d101      	bne.n	8003d2c <ETH_SetMACConfig+0x118>
 8003d28:	2204      	movs	r2, #4
 8003d2a:	e000      	b.n	8003d2e <ETH_SetMACConfig+0x11a>
 8003d2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d36:	2a01      	cmp	r2, #1
 8003d38:	d101      	bne.n	8003d3e <ETH_SetMACConfig+0x12a>
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	e000      	b.n	8003d40 <ETH_SetMACConfig+0x12c>
 8003d3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d40:	4313      	orrs	r3, r2
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7ff fda7 	bl	80038ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	ff20810f 	.word	0xff20810f

08003d74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <ETH_SetDMAConfig+0x110>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	7b1b      	ldrb	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <ETH_SetDMAConfig+0x2c>
 8003d9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d9e:	e000      	b.n	8003da2 <ETH_SetDMAConfig+0x2e>
 8003da0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	7b5b      	ldrb	r3, [r3, #13]
 8003da6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003da8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	7f52      	ldrb	r2, [r2, #29]
 8003dae:	2a00      	cmp	r2, #0
 8003db0:	d102      	bne.n	8003db8 <ETH_SetDMAConfig+0x44>
 8003db2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003db6:	e000      	b.n	8003dba <ETH_SetDMAConfig+0x46>
 8003db8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	7b9b      	ldrb	r3, [r3, #14]
 8003dc0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dc2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7f1b      	ldrb	r3, [r3, #28]
 8003dce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003dd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	7f9b      	ldrb	r3, [r3, #30]
 8003dd6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dd8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003de8:	4313      	orrs	r3, r2
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7ff fd4e 	bl	80038ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	791b      	ldrb	r3, [r3, #4]
 8003e22:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e28:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e2e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e34:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e3c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e3e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e46:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e4c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e5a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e68:	2001      	movs	r0, #1
 8003e6a:	f7ff fd1f 	bl	80038ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	f8de3f23 	.word	0xf8de3f23

08003e88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b0a6      	sub	sp, #152	; 0x98
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003eee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003efc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fe86 	bl	8003c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff08 	bl	8003d74 <ETH_SetDMAConfig>
}
 8003f64:	bf00      	nop
 8003f66:	3798      	adds	r7, #152	; 0x98
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3305      	adds	r3, #5
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	3204      	adds	r2, #4
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <ETH_MACAddressConfig+0x68>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3303      	adds	r3, #3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3301      	adds	r3, #1
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <ETH_MACAddressConfig+0x6c>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6013      	str	r3, [r2, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40028040 	.word	0x40028040
 8003fd8:	40028044 	.word	0x40028044

08003fdc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e03e      	b.n	8004068 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	3206      	adds	r2, #6
 800401c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d80c      	bhi.n	800404c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	461a      	mov	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e004      	b.n	8004056 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d9bd      	bls.n	8003fea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	611a      	str	r2, [r3, #16]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e046      	b.n	800412a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6919      	ldr	r1, [r3, #16]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80040e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	3212      	adds	r2, #18
 80040f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d80c      	bhi.n	800411a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6919      	ldr	r1, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	461a      	mov	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	e004      	b.n	8004124 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d9b5      	bls.n	800409c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415a:	60da      	str	r2, [r3, #12]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004168:	b480      	push	{r7}
 800416a:	b089      	sub	sp, #36	; 0x24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	e177      	b.n	8004474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004184:	2201      	movs	r2, #1
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	429a      	cmp	r2, r3
 800419e:	f040 8166 	bne.w	800446e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d005      	beq.n	80041ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d130      	bne.n	800421c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	2203      	movs	r2, #3
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f0:	2201      	movs	r2, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 0201 	and.w	r2, r3, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	2b03      	cmp	r3, #3
 8004226:	d017      	beq.n	8004258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	2203      	movs	r2, #3
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d123      	bne.n	80042ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	08da      	lsrs	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3208      	adds	r2, #8
 800426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	220f      	movs	r2, #15
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	08da      	lsrs	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3208      	adds	r2, #8
 80042a6:	69b9      	ldr	r1, [r7, #24]
 80042a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0203 	and.w	r2, r3, #3
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80c0 	beq.w	800446e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	4b66      	ldr	r3, [pc, #408]	; (800448c <HAL_GPIO_Init+0x324>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	4a65      	ldr	r2, [pc, #404]	; (800448c <HAL_GPIO_Init+0x324>)
 80042f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042fc:	6453      	str	r3, [r2, #68]	; 0x44
 80042fe:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_GPIO_Init+0x324>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800430a:	4a61      	ldr	r2, [pc, #388]	; (8004490 <HAL_GPIO_Init+0x328>)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_GPIO_Init+0x32c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d037      	beq.n	80043a6 <HAL_GPIO_Init+0x23e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a57      	ldr	r2, [pc, #348]	; (8004498 <HAL_GPIO_Init+0x330>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_GPIO_Init+0x23a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a56      	ldr	r2, [pc, #344]	; (800449c <HAL_GPIO_Init+0x334>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02b      	beq.n	800439e <HAL_GPIO_Init+0x236>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a55      	ldr	r2, [pc, #340]	; (80044a0 <HAL_GPIO_Init+0x338>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d025      	beq.n	800439a <HAL_GPIO_Init+0x232>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a54      	ldr	r2, [pc, #336]	; (80044a4 <HAL_GPIO_Init+0x33c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <HAL_GPIO_Init+0x22e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a53      	ldr	r2, [pc, #332]	; (80044a8 <HAL_GPIO_Init+0x340>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <HAL_GPIO_Init+0x22a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a52      	ldr	r2, [pc, #328]	; (80044ac <HAL_GPIO_Init+0x344>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_GPIO_Init+0x226>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a51      	ldr	r2, [pc, #324]	; (80044b0 <HAL_GPIO_Init+0x348>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00d      	beq.n	800438a <HAL_GPIO_Init+0x222>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a50      	ldr	r2, [pc, #320]	; (80044b4 <HAL_GPIO_Init+0x34c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x21e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a4f      	ldr	r2, [pc, #316]	; (80044b8 <HAL_GPIO_Init+0x350>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_GPIO_Init+0x21a>
 800437e:	2309      	movs	r3, #9
 8004380:	e012      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 8004382:	230a      	movs	r3, #10
 8004384:	e010      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 8004386:	2308      	movs	r3, #8
 8004388:	e00e      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 800438a:	2307      	movs	r3, #7
 800438c:	e00c      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 800438e:	2306      	movs	r3, #6
 8004390:	e00a      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 8004392:	2305      	movs	r3, #5
 8004394:	e008      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 8004396:	2304      	movs	r3, #4
 8004398:	e006      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 800439a:	2303      	movs	r3, #3
 800439c:	e004      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 800439e:	2302      	movs	r3, #2
 80043a0:	e002      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_GPIO_Init+0x240>
 80043a6:	2300      	movs	r3, #0
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	f002 0203 	and.w	r2, r2, #3
 80043ae:	0092      	lsls	r2, r2, #2
 80043b0:	4093      	lsls	r3, r2
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b8:	4935      	ldr	r1, [pc, #212]	; (8004490 <HAL_GPIO_Init+0x328>)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	3302      	adds	r3, #2
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_GPIO_Init+0x354>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_GPIO_Init+0x354>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f0:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_GPIO_Init+0x354>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004414:	4a29      	ldr	r2, [pc, #164]	; (80044bc <HAL_GPIO_Init+0x354>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_GPIO_Init+0x354>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_GPIO_Init+0x354>)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_GPIO_Init+0x354>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004468:	4a14      	ldr	r2, [pc, #80]	; (80044bc <HAL_GPIO_Init+0x354>)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	f67f ae84 	bls.w	8004184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	40013800 	.word	0x40013800
 8004494:	40020000 	.word	0x40020000
 8004498:	40020400 	.word	0x40020400
 800449c:	40020800 	.word	0x40020800
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40021400 	.word	0x40021400
 80044ac:	40021800 	.word	0x40021800
 80044b0:	40021c00 	.word	0x40021c00
 80044b4:	40022000 	.word	0x40022000
 80044b8:	40022400 	.word	0x40022400
 80044bc:	40013c00 	.word	0x40013c00

080044c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d0:	787b      	ldrb	r3, [r7, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044dc:	e003      	b.n	80044e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	041a      	lsls	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	619a      	str	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe f800 	bl	8002518 <HAL_GPIO_EXTI_Callback>
  }
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40013c00 	.word	0x40013c00

08004524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e12b      	b.n	800478e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fe fe4a 	bl	80031e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	; 0x24
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004588:	f002 fa08 	bl	800699c <HAL_RCC_GetPCLK1Freq>
 800458c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4a81      	ldr	r2, [pc, #516]	; (8004798 <HAL_I2C_Init+0x274>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d807      	bhi.n	80045a8 <HAL_I2C_Init+0x84>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_I2C_Init+0x278>)
 800459c:	4293      	cmp	r3, r2
 800459e:	bf94      	ite	ls
 80045a0:	2301      	movls	r3, #1
 80045a2:	2300      	movhi	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e006      	b.n	80045b6 <HAL_I2C_Init+0x92>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a7d      	ldr	r2, [pc, #500]	; (80047a0 <HAL_I2C_Init+0x27c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0e7      	b.n	800478e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a78      	ldr	r2, [pc, #480]	; (80047a4 <HAL_I2C_Init+0x280>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0c9b      	lsrs	r3, r3, #18
 80045c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a6a      	ldr	r2, [pc, #424]	; (8004798 <HAL_I2C_Init+0x274>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d802      	bhi.n	80045f8 <HAL_I2C_Init+0xd4>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	3301      	adds	r3, #1
 80045f6:	e009      	b.n	800460c <HAL_I2C_Init+0xe8>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	4a69      	ldr	r2, [pc, #420]	; (80047a8 <HAL_I2C_Init+0x284>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	099b      	lsrs	r3, r3, #6
 800460a:	3301      	adds	r3, #1
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	430b      	orrs	r3, r1
 8004612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800461e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	495c      	ldr	r1, [pc, #368]	; (8004798 <HAL_I2C_Init+0x274>)
 8004628:	428b      	cmp	r3, r1
 800462a:	d819      	bhi.n	8004660 <HAL_I2C_Init+0x13c>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1e59      	subs	r1, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fbb1 f3f3 	udiv	r3, r1, r3
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004640:	400b      	ands	r3, r1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_I2C_Init+0x138>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1e59      	subs	r1, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	fbb1 f3f3 	udiv	r3, r1, r3
 8004654:	3301      	adds	r3, #1
 8004656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465a:	e051      	b.n	8004700 <HAL_I2C_Init+0x1dc>
 800465c:	2304      	movs	r3, #4
 800465e:	e04f      	b.n	8004700 <HAL_I2C_Init+0x1dc>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d111      	bne.n	800468c <HAL_I2C_Init+0x168>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	440b      	add	r3, r1
 8004676:	fbb0 f3f3 	udiv	r3, r0, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e012      	b.n	80046b2 <HAL_I2C_Init+0x18e>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e58      	subs	r0, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	0099      	lsls	r1, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_I2C_Init+0x196>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e022      	b.n	8004700 <HAL_I2C_Init+0x1dc>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10e      	bne.n	80046e0 <HAL_I2C_Init+0x1bc>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1e58      	subs	r0, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	440b      	add	r3, r1
 80046d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	e00f      	b.n	8004700 <HAL_I2C_Init+0x1dc>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1e58      	subs	r0, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	0099      	lsls	r1, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	6809      	ldr	r1, [r1, #0]
 8004704:	4313      	orrs	r3, r2
 8004706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800472e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6911      	ldr	r1, [r2, #16]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68d2      	ldr	r2, [r2, #12]
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	430b      	orrs	r3, r1
 8004742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	000186a0 	.word	0x000186a0
 800479c:	001e847f 	.word	0x001e847f
 80047a0:	003d08ff 	.word	0x003d08ff
 80047a4:	431bde83 	.word	0x431bde83
 80047a8:	10624dd3 	.word	0x10624dd3

080047ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	461a      	mov	r2, r3
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
 80047bc:	4613      	mov	r3, r2
 80047be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7ff f868 	bl	8003894 <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	f040 80e0 	bne.w	8004994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	4970      	ldr	r1, [pc, #448]	; (80049a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f001 f8f6 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0d3      	b.n	8004996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_I2C_Master_Transmit+0x50>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0cc      	b.n	8004996 <HAL_I2C_Master_Transmit+0x1ea>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d007      	beq.n	8004822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2221      	movs	r2, #33	; 0x21
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2210      	movs	r2, #16
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	893a      	ldrh	r2, [r7, #8]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a50      	ldr	r2, [pc, #320]	; (80049a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004864:	8979      	ldrh	r1, [r7, #10]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fde2 	bl	8005434 <I2C_MasterRequestWrite>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e08d      	b.n	8004996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004890:	e066      	b.n	8004960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	6a39      	ldr	r1, [r7, #32]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f001 f970 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d107      	bne.n	80048ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06b      	b.n	8004996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d11b      	bne.n	8004934 <HAL_I2C_Master_Transmit+0x188>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d017      	beq.n	8004934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	6a39      	ldr	r1, [r7, #32]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f001 f960 	bl	8005bfe <I2C_WaitOnBTFFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b04      	cmp	r3, #4
 800494a:	d107      	bne.n	800495c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e01a      	b.n	8004996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d194      	bne.n	8004892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	00100002 	.word	0x00100002
 80049a4:	ffff0000 	.word	0xffff0000

080049a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	; 0x30
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	460b      	mov	r3, r1
 80049b6:	817b      	strh	r3, [r7, #10]
 80049b8:	4613      	mov	r3, r2
 80049ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049bc:	f7fe ff6a 	bl	8003894 <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	f040 820b 	bne.w	8004de6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2319      	movs	r3, #25
 80049d6:	2201      	movs	r2, #1
 80049d8:	497c      	ldr	r1, [pc, #496]	; (8004bcc <HAL_I2C_Master_Receive+0x224>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fff8 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	e1fe      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2C_Master_Receive+0x50>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e1f7      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d007      	beq.n	8004a1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2222      	movs	r2, #34	; 0x22
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	893a      	ldrh	r2, [r7, #8]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a5c      	ldr	r2, [pc, #368]	; (8004bd0 <HAL_I2C_Master_Receive+0x228>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a60:	8979      	ldrh	r1, [r7, #10]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fd66 	bl	8005538 <I2C_MasterRequestRead>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e1b8      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d113      	bne.n	8004aa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e18c      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d11b      	bne.n	8004ae6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e16c      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d11b      	bne.n	8004b26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	e14c      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b4c:	e138      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	f200 80f1 	bhi.w	8004d3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d123      	bne.n	8004ba8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f001 f88b 	bl	8005c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e139      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba6:	e10b      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d14e      	bne.n	8004c4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <HAL_I2C_Master_Receive+0x22c>)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 ff08 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e10e      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
 8004bca:	bf00      	nop
 8004bcc:	00100002 	.word	0x00100002
 8004bd0:	ffff0000 	.word	0xffff0000
 8004bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c4c:	e0b8      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	2200      	movs	r2, #0
 8004c56:	4966      	ldr	r1, [pc, #408]	; (8004df0 <HAL_I2C_Master_Receive+0x448>)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 feb9 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0bf      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	494f      	ldr	r1, [pc, #316]	; (8004df0 <HAL_I2C_Master_Receive+0x448>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fe8b 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e091      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d38:	e042      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 ff9e 	bl	8005c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e04c      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d118      	bne.n	8004dc0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f aec2 	bne.w	8004b4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	00010004 	.word	0x00010004

08004df4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	817b      	strh	r3, [r7, #10]
 8004e06:	460b      	mov	r3, r1
 8004e08:	813b      	strh	r3, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e0e:	f7fe fd41 	bl	8003894 <HAL_GetTick>
 8004e12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	f040 80d9 	bne.w	8004fd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	2319      	movs	r3, #25
 8004e28:	2201      	movs	r2, #1
 8004e2a:	496d      	ldr	r1, [pc, #436]	; (8004fe0 <HAL_I2C_Mem_Write+0x1ec>)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fdcf 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0cc      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_I2C_Mem_Write+0x56>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e0c5      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d007      	beq.n	8004e70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2221      	movs	r2, #33	; 0x21
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a4d      	ldr	r2, [pc, #308]	; (8004fe4 <HAL_I2C_Mem_Write+0x1f0>)
 8004eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eb2:	88f8      	ldrh	r0, [r7, #6]
 8004eb4:	893a      	ldrh	r2, [r7, #8]
 8004eb6:	8979      	ldrh	r1, [r7, #10]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fc06 	bl	80056d4 <I2C_RequestMemoryWrite>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d052      	beq.n	8004f74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e081      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fe50 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06b      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x180>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1aa      	bne.n	8004ed2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fe3c 	bl	8005bfe <I2C_WaitOnBTFFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d107      	bne.n	8004fa4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e016      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	00100002 	.word	0x00100002
 8004fe4:	ffff0000 	.word	0xffff0000

08004fe8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	817b      	strh	r3, [r7, #10]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	813b      	strh	r3, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005002:	f7fe fc47 	bl	8003894 <HAL_GetTick>
 8005006:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b20      	cmp	r3, #32
 8005012:	f040 8208 	bne.w	8005426 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	2319      	movs	r3, #25
 800501c:	2201      	movs	r2, #1
 800501e:	497b      	ldr	r1, [pc, #492]	; (800520c <HAL_I2C_Mem_Read+0x224>)
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fcd5 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
 800502e:	e1fb      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_I2C_Mem_Read+0x56>
 800503a:	2302      	movs	r3, #2
 800503c:	e1f4      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b01      	cmp	r3, #1
 8005052:	d007      	beq.n	8005064 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2222      	movs	r2, #34	; 0x22
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2240      	movs	r2, #64	; 0x40
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a5b      	ldr	r2, [pc, #364]	; (8005210 <HAL_I2C_Mem_Read+0x228>)
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050a6:	88f8      	ldrh	r0, [r7, #6]
 80050a8:	893a      	ldrh	r2, [r7, #8]
 80050aa:	8979      	ldrh	r1, [r7, #10]
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4603      	mov	r3, r0
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fba2 	bl	8005800 <I2C_RequestMemoryRead>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e1b0      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d113      	bne.n	80050f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ce:	2300      	movs	r3, #0
 80050d0:	623b      	str	r3, [r7, #32]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e184      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d11b      	bne.n	8005136 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e164      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b02      	cmp	r3, #2
 800513c:	d11b      	bne.n	8005176 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	e144      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800518c:	e138      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	2b03      	cmp	r3, #3
 8005194:	f200 80f1 	bhi.w	800537a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	2b01      	cmp	r3, #1
 800519e:	d123      	bne.n	80051e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fd6b 	bl	8005c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e139      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051e6:	e10b      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d14e      	bne.n	800528e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	2200      	movs	r2, #0
 80051f8:	4906      	ldr	r1, [pc, #24]	; (8005214 <HAL_I2C_Mem_Read+0x22c>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 fbe8 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e10e      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
 800520a:	bf00      	nop
 800520c:	00100002 	.word	0x00100002
 8005210:	ffff0000 	.word	0xffff0000
 8005214:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800528c:	e0b8      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2200      	movs	r2, #0
 8005296:	4966      	ldr	r1, [pc, #408]	; (8005430 <HAL_I2C_Mem_Read+0x448>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fb99 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0bf      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2200      	movs	r2, #0
 80052f2:	494f      	ldr	r1, [pc, #316]	; (8005430 <HAL_I2C_Mem_Read+0x448>)
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fb6b 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e091      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005378:	e042      	b.n	8005400 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fc7e 	bl	8005c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e04c      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d118      	bne.n	8005400 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	f47f aec2 	bne.w	800518e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	00010004 	.word	0x00010004

08005434 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	460b      	mov	r3, r1
 8005442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d006      	beq.n	800545e <I2C_MasterRequestWrite+0x2a>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d003      	beq.n	800545e <I2C_MasterRequestWrite+0x2a>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800545c:	d108      	bne.n	8005470 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e00b      	b.n	8005488 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	2b12      	cmp	r3, #18
 8005476:	d107      	bne.n	8005488 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005486:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fa9b 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00d      	beq.n	80054bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ae:	d103      	bne.n	80054b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e035      	b.n	8005528 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c4:	d108      	bne.n	80054d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c6:	897b      	ldrh	r3, [r7, #10]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054d4:	611a      	str	r2, [r3, #16]
 80054d6:	e01b      	b.n	8005510 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054d8:	897b      	ldrh	r3, [r7, #10]
 80054da:	11db      	asrs	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0306 	and.w	r3, r3, #6
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f063 030f 	orn	r3, r3, #15
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	490e      	ldr	r1, [pc, #56]	; (8005530 <I2C_MasterRequestWrite+0xfc>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fac1 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e010      	b.n	8005528 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005506:	897b      	ldrh	r3, [r7, #10]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4907      	ldr	r1, [pc, #28]	; (8005534 <I2C_MasterRequestWrite+0x100>)
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fab1 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	00010008 	.word	0x00010008
 8005534:	00010002 	.word	0x00010002

08005538 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	460b      	mov	r3, r1
 8005546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800555c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d006      	beq.n	8005572 <I2C_MasterRequestRead+0x3a>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d003      	beq.n	8005572 <I2C_MasterRequestRead+0x3a>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005570:	d108      	bne.n	8005584 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e00b      	b.n	800559c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	2b11      	cmp	r3, #17
 800558a:	d107      	bne.n	800559c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fa11 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c2:	d103      	bne.n	80055cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e079      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d8:	d108      	bne.n	80055ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	e05f      	b.n	80056ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055ec:	897b      	ldrh	r3, [r7, #10]
 80055ee:	11db      	asrs	r3, r3, #7
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 0306 	and.w	r3, r3, #6
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f063 030f 	orn	r3, r3, #15
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4930      	ldr	r1, [pc, #192]	; (80056cc <I2C_MasterRequestRead+0x194>)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fa37 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e054      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800561a:	897b      	ldrh	r3, [r7, #10]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4929      	ldr	r1, [pc, #164]	; (80056d0 <I2C_MasterRequestRead+0x198>)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fa27 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e044      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f9af 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	d103      	bne.n	8005690 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e017      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005694:	897b      	ldrh	r3, [r7, #10]
 8005696:	11db      	asrs	r3, r3, #7
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f063 030e 	orn	r3, r3, #14
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4907      	ldr	r1, [pc, #28]	; (80056d0 <I2C_MasterRequestRead+0x198>)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f9e3 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	00010008 	.word	0x00010008
 80056d0:	00010002 	.word	0x00010002

080056d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	4608      	mov	r0, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	461a      	mov	r2, r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	817b      	strh	r3, [r7, #10]
 80056e6:	460b      	mov	r3, r1
 80056e8:	813b      	strh	r3, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2200      	movs	r2, #0
 8005706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f960 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00d      	beq.n	8005732 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005724:	d103      	bne.n	800572e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e05f      	b.n	80057f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005732:	897b      	ldrh	r3, [r7, #10]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005740:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	492d      	ldr	r1, [pc, #180]	; (80057fc <I2C_RequestMemoryWrite+0x128>)
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f998 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e04c      	b.n	80057f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	6a39      	ldr	r1, [r7, #32]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fa02 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2b04      	cmp	r3, #4
 8005784:	d107      	bne.n	8005796 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005794:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e02b      	b.n	80057f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057a0:	893b      	ldrh	r3, [r7, #8]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	e021      	b.n	80057f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057ac:	893b      	ldrh	r3, [r7, #8]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	6a39      	ldr	r1, [r7, #32]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f9dc 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d107      	bne.n	80057e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e005      	b.n	80057f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057e6:	893b      	ldrh	r3, [r7, #8]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	00010002 	.word	0x00010002

08005800 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	461a      	mov	r2, r3
 800580e:	4603      	mov	r3, r0
 8005810:	817b      	strh	r3, [r7, #10]
 8005812:	460b      	mov	r3, r1
 8005814:	813b      	strh	r3, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005828:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	2200      	movs	r2, #0
 8005842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f8c2 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005860:	d103      	bne.n	800586a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e0aa      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800586e:	897b      	ldrh	r3, [r7, #10]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800587c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	4952      	ldr	r1, [pc, #328]	; (80059cc <I2C_RequestMemoryRead+0x1cc>)
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f8fa 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e097      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	6a39      	ldr	r1, [r7, #32]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f964 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d107      	bne.n	80058d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e076      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d105      	bne.n	80058e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058dc:	893b      	ldrh	r3, [r7, #8]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	e021      	b.n	800592c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058e8:	893b      	ldrh	r3, [r7, #8]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	6a39      	ldr	r1, [r7, #32]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f93e 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00d      	beq.n	8005922 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	2b04      	cmp	r3, #4
 800590c:	d107      	bne.n	800591e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e050      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005922:	893b      	ldrh	r3, [r7, #8]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	6a39      	ldr	r1, [r7, #32]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f923 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b04      	cmp	r3, #4
 8005942:	d107      	bne.n	8005954 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005952:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e035      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005966:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2200      	movs	r2, #0
 8005970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f82b 	bl	80059d0 <I2C_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00d      	beq.n	800599c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d103      	bne.n	8005998 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e013      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800599c:	897b      	ldrh	r3, [r7, #10]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	4906      	ldr	r1, [pc, #24]	; (80059cc <I2C_RequestMemoryRead+0x1cc>)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f863 	bl	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	00010002 	.word	0x00010002

080059d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059e0:	e025      	b.n	8005a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d021      	beq.n	8005a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fd ff53 	bl	8003894 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d116      	bne.n	8005a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e023      	b.n	8005a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10d      	bne.n	8005a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf0c      	ite	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	2300      	movne	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	e00c      	b.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	43da      	mvns	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d0b6      	beq.n	80059e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a8c:	e051      	b.n	8005b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9c:	d123      	bne.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f043 0204 	orr.w	r2, r3, #4
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e046      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d021      	beq.n	8005b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aee:	f7fd fed1 	bl	8003894 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d116      	bne.n	8005b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e020      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10c      	bne.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bf14      	ite	ne
 8005b4e:	2301      	movne	r3, #1
 8005b50:	2300      	moveq	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	e00b      	b.n	8005b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	43da      	mvns	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4013      	ands	r3, r2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf14      	ite	ne
 8005b68:	2301      	movne	r3, #1
 8005b6a:	2300      	moveq	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d18d      	bne.n	8005a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b88:	e02d      	b.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f8ce 	bl	8005d2c <I2C_IsAcknowledgeFailed>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e02d      	b.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d021      	beq.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7fd fe77 	bl	8003894 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d116      	bne.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e007      	b.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d1ca      	bne.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c0a:	e02d      	b.n	8005c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f88d 	bl	8005d2c <I2C_IsAcknowledgeFailed>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e02d      	b.n	8005c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d021      	beq.n	8005c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c24:	f7fd fe36 	bl	8003894 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d302      	bcc.n	8005c3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e007      	b.n	8005c78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d1ca      	bne.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c8c:	e042      	b.n	8005d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d119      	bne.n	8005cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0210 	mvn.w	r2, #16
 8005ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e029      	b.n	8005d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd0:	f7fd fde0 	bl	8003894 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d116      	bne.n	8005d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f043 0220 	orr.w	r2, r3, #32
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e007      	b.n	8005d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d1b5      	bne.n	8005c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d11b      	bne.n	8005d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f043 0204 	orr.w	r2, r3, #4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d129      	bne.n	8005df4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2224      	movs	r2, #36	; 0x24
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0210 	bic.w	r2, r2, #16
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d12a      	bne.n	8005e72 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	f023 030f 	bic.w	r3, r3, #15
 8005e42:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	89fa      	ldrh	r2, [r7, #14]
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	b08f      	sub	sp, #60	; 0x3c
 8005e84:	af0a      	add	r7, sp, #40	; 0x28
 8005e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e10f      	b.n	80060b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fd faef 	bl	8003490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 ff48 	bl	8007d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	687e      	ldr	r6, [r7, #4]
 8005ede:	466d      	mov	r5, sp
 8005ee0:	f106 0410 	add.w	r4, r6, #16
 8005ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ef4:	1d33      	adds	r3, r6, #4
 8005ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ef8:	6838      	ldr	r0, [r7, #0]
 8005efa:	f001 fed3 	bl	8007ca4 <USB_CoreInit>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0d0      	b.n	80060b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 ff36 	bl	8007d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e04a      	b.n	8005fb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f22:	7bfa      	ldrb	r2, [r7, #15]
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	333d      	adds	r3, #61	; 0x3d
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	333c      	adds	r3, #60	; 0x3c
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	b298      	uxth	r0, r3
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3344      	adds	r3, #68	; 0x44
 8005f5e:	4602      	mov	r2, r0
 8005f60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f62:	7bfa      	ldrb	r2, [r7, #15]
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	3340      	adds	r3, #64	; 0x40
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	3348      	adds	r3, #72	; 0x48
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f8a:	7bfa      	ldrb	r2, [r7, #15]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	334c      	adds	r3, #76	; 0x4c
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f9e:	7bfa      	ldrb	r2, [r7, #15]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3354      	adds	r3, #84	; 0x54
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3af      	bcc.n	8005f22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
 8005fc6:	e044      	b.n	8006052 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005fc8:	7bfa      	ldrb	r2, [r7, #15]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fde:	7bfa      	ldrb	r2, [r7, #15]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ff4:	7bfa      	ldrb	r2, [r7, #15]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800600a:	7bfa      	ldrb	r2, [r7, #15]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006020:	7bfa      	ldrb	r2, [r7, #15]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006036:	7bfa      	ldrb	r2, [r7, #15]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	3301      	adds	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d3b5      	bcc.n	8005fc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	687e      	ldr	r6, [r7, #4]
 8006064:	466d      	mov	r5, sp
 8006066:	f106 0410 	add.w	r4, r6, #16
 800606a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800606c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800606e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006076:	e885 0003 	stmia.w	r5, {r0, r1}
 800607a:	1d33      	adds	r3, r6, #4
 800607c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800607e:	6838      	ldr	r0, [r7, #0]
 8006080:	f001 fece 	bl	8007e20 <USB_DevInit>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e00d      	b.n	80060b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 f899 	bl	80081e2 <USB_DevDisconnect>

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080060bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e267      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d075      	beq.n	80061c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060da:	4b88      	ldr	r3, [pc, #544]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 030c 	and.w	r3, r3, #12
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d00c      	beq.n	8006100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060e6:	4b85      	ldr	r3, [pc, #532]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d112      	bne.n	8006118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060f2:	4b82      	ldr	r3, [pc, #520]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060fe:	d10b      	bne.n	8006118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	4b7e      	ldr	r3, [pc, #504]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d05b      	beq.n	80061c4 <HAL_RCC_OscConfig+0x108>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d157      	bne.n	80061c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e242      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006120:	d106      	bne.n	8006130 <HAL_RCC_OscConfig+0x74>
 8006122:	4b76      	ldr	r3, [pc, #472]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a75      	ldr	r2, [pc, #468]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	e01d      	b.n	800616c <HAL_RCC_OscConfig+0xb0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006138:	d10c      	bne.n	8006154 <HAL_RCC_OscConfig+0x98>
 800613a:	4b70      	ldr	r3, [pc, #448]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6f      	ldr	r2, [pc, #444]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	4b6d      	ldr	r3, [pc, #436]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a6c      	ldr	r2, [pc, #432]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 800614c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	e00b      	b.n	800616c <HAL_RCC_OscConfig+0xb0>
 8006154:	4b69      	ldr	r3, [pc, #420]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a68      	ldr	r2, [pc, #416]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 800615a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	4b66      	ldr	r3, [pc, #408]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a65      	ldr	r2, [pc, #404]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800616a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d013      	beq.n	800619c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006174:	f7fd fb8e 	bl	8003894 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800617c:	f7fd fb8a 	bl	8003894 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b64      	cmp	r3, #100	; 0x64
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e207      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618e:	4b5b      	ldr	r3, [pc, #364]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0xc0>
 800619a:	e014      	b.n	80061c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fd fb7a 	bl	8003894 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a4:	f7fd fb76 	bl	8003894 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	; 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e1f3      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061b6:	4b51      	ldr	r3, [pc, #324]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0xe8>
 80061c2:	e000      	b.n	80061c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d063      	beq.n	800629a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061d2:	4b4a      	ldr	r3, [pc, #296]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00b      	beq.n	80061f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d11c      	bne.n	8006224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ea:	4b44      	ldr	r3, [pc, #272]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d116      	bne.n	8006224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f6:	4b41      	ldr	r3, [pc, #260]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_RCC_OscConfig+0x152>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d001      	beq.n	800620e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e1c7      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620e:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4937      	ldr	r1, [pc, #220]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006222:	e03a      	b.n	800629a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800622c:	4b34      	ldr	r3, [pc, #208]	; (8006300 <HAL_RCC_OscConfig+0x244>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fd fb2f 	bl	8003894 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800623a:	f7fd fb2b 	bl	8003894 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e1a8      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624c:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006258:	4b28      	ldr	r3, [pc, #160]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4925      	ldr	r1, [pc, #148]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]
 800626c:	e015      	b.n	800629a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <HAL_RCC_OscConfig+0x244>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fd fb0e 	bl	8003894 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800627c:	f7fd fb0a 	bl	8003894 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e187      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628e:	4b1b      	ldr	r3, [pc, #108]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f0      	bne.n	800627c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d036      	beq.n	8006314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d016      	beq.n	80062dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ae:	4b15      	ldr	r3, [pc, #84]	; (8006304 <HAL_RCC_OscConfig+0x248>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fd faee 	bl	8003894 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062bc:	f7fd faea 	bl	8003894 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e167      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCC_OscConfig+0x240>)
 80062d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x200>
 80062da:	e01b      	b.n	8006314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_OscConfig+0x248>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e2:	f7fd fad7 	bl	8003894 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062e8:	e00e      	b.n	8006308 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ea:	f7fd fad3 	bl	8003894 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d907      	bls.n	8006308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e150      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
 80062fc:	40023800 	.word	0x40023800
 8006300:	42470000 	.word	0x42470000
 8006304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <HAL_RCC_OscConfig+0x470>)
 800630a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ea      	bne.n	80062ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8097 	beq.w	8006450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006326:	4b81      	ldr	r3, [pc, #516]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10f      	bne.n	8006352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	4b7d      	ldr	r3, [pc, #500]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	4a7c      	ldr	r2, [pc, #496]	; (800652c <HAL_RCC_OscConfig+0x470>)
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006340:	6413      	str	r3, [r2, #64]	; 0x40
 8006342:	4b7a      	ldr	r3, [pc, #488]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006352:	4b77      	ldr	r3, [pc, #476]	; (8006530 <HAL_RCC_OscConfig+0x474>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d118      	bne.n	8006390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800635e:	4b74      	ldr	r3, [pc, #464]	; (8006530 <HAL_RCC_OscConfig+0x474>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a73      	ldr	r2, [pc, #460]	; (8006530 <HAL_RCC_OscConfig+0x474>)
 8006364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800636a:	f7fd fa93 	bl	8003894 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006372:	f7fd fa8f 	bl	8003894 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e10c      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006384:	4b6a      	ldr	r3, [pc, #424]	; (8006530 <HAL_RCC_OscConfig+0x474>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d106      	bne.n	80063a6 <HAL_RCC_OscConfig+0x2ea>
 8006398:	4b64      	ldr	r3, [pc, #400]	; (800652c <HAL_RCC_OscConfig+0x470>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	4a63      	ldr	r2, [pc, #396]	; (800652c <HAL_RCC_OscConfig+0x470>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6713      	str	r3, [r2, #112]	; 0x70
 80063a4:	e01c      	b.n	80063e0 <HAL_RCC_OscConfig+0x324>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x30c>
 80063ae:	4b5f      	ldr	r3, [pc, #380]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a5e      	ldr	r2, [pc, #376]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063b4:	f043 0304 	orr.w	r3, r3, #4
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ba:	4b5c      	ldr	r3, [pc, #368]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a5b      	ldr	r2, [pc, #364]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
 80063c6:	e00b      	b.n	80063e0 <HAL_RCC_OscConfig+0x324>
 80063c8:	4b58      	ldr	r3, [pc, #352]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a57      	ldr	r2, [pc, #348]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
 80063d4:	4b55      	ldr	r3, [pc, #340]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4a54      	ldr	r2, [pc, #336]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80063da:	f023 0304 	bic.w	r3, r3, #4
 80063de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fd fa54 	bl	8003894 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fd fa50 	bl	8003894 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e0cb      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006406:	4b49      	ldr	r3, [pc, #292]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ee      	beq.n	80063f0 <HAL_RCC_OscConfig+0x334>
 8006412:	e014      	b.n	800643e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006414:	f7fd fa3e 	bl	8003894 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fd fa3a 	bl	8003894 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e0b5      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006432:	4b3e      	ldr	r3, [pc, #248]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ee      	bne.n	800641c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800643e:	7dfb      	ldrb	r3, [r7, #23]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d105      	bne.n	8006450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006444:	4b39      	ldr	r3, [pc, #228]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	4a38      	ldr	r2, [pc, #224]	; (800652c <HAL_RCC_OscConfig+0x470>)
 800644a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80a1 	beq.w	800659c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800645a:	4b34      	ldr	r3, [pc, #208]	; (800652c <HAL_RCC_OscConfig+0x470>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b08      	cmp	r3, #8
 8006464:	d05c      	beq.n	8006520 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d141      	bne.n	80064f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646e:	4b31      	ldr	r3, [pc, #196]	; (8006534 <HAL_RCC_OscConfig+0x478>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006474:	f7fd fa0e 	bl	8003894 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800647c:	f7fd fa0a 	bl	8003894 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e087      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648e:	4b27      	ldr	r3, [pc, #156]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	019b      	lsls	r3, r3, #6
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	3b01      	subs	r3, #1
 80064b4:	041b      	lsls	r3, r3, #16
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	491b      	ldr	r1, [pc, #108]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <HAL_RCC_OscConfig+0x478>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fd f9e3 	bl	8003894 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d2:	f7fd f9df 	bl	8003894 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e05c      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e4:	4b11      	ldr	r3, [pc, #68]	; (800652c <HAL_RCC_OscConfig+0x470>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x416>
 80064f0:	e054      	b.n	800659c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <HAL_RCC_OscConfig+0x478>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f8:	f7fd f9cc 	bl	8003894 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006500:	f7fd f9c8 	bl	8003894 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e045      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_RCC_OscConfig+0x470>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0x444>
 800651e:	e03d      	b.n	800659c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d107      	bne.n	8006538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e038      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
 800652c:	40023800 	.word	0x40023800
 8006530:	40007000 	.word	0x40007000
 8006534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <HAL_RCC_OscConfig+0x4ec>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d028      	beq.n	8006598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006550:	429a      	cmp	r2, r3
 8006552:	d121      	bne.n	8006598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d11a      	bne.n	8006598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800656e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006570:	4293      	cmp	r3, r2
 8006572:	d111      	bne.n	8006598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	3b01      	subs	r3, #1
 8006582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d107      	bne.n	8006598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006594:	429a      	cmp	r2, r3
 8006596:	d001      	beq.n	800659c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800

080065ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0cc      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065c0:	4b68      	ldr	r3, [pc, #416]	; (8006764 <HAL_RCC_ClockConfig+0x1b8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d90c      	bls.n	80065e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ce:	4b65      	ldr	r3, [pc, #404]	; (8006764 <HAL_RCC_ClockConfig+0x1b8>)
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d6:	4b63      	ldr	r3, [pc, #396]	; (8006764 <HAL_RCC_ClockConfig+0x1b8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0b8      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d020      	beq.n	8006636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006600:	4b59      	ldr	r3, [pc, #356]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4a58      	ldr	r2, [pc, #352]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800660a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006618:	4b53      	ldr	r3, [pc, #332]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	4a52      	ldr	r2, [pc, #328]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006624:	4b50      	ldr	r3, [pc, #320]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	494d      	ldr	r1, [pc, #308]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	4313      	orrs	r3, r2
 8006634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d044      	beq.n	80066cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d107      	bne.n	800665a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d119      	bne.n	800668a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e07f      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d003      	beq.n	800666a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006666:	2b03      	cmp	r3, #3
 8006668:	d107      	bne.n	800667a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800666a:	4b3f      	ldr	r3, [pc, #252]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e06f      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800667a:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e067      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800668a:	4b37      	ldr	r3, [pc, #220]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 0203 	bic.w	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4934      	ldr	r1, [pc, #208]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006698:	4313      	orrs	r3, r2
 800669a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800669c:	f7fd f8fa 	bl	8003894 <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a4:	f7fd f8f6 	bl	8003894 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e04f      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ba:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 020c 	and.w	r2, r3, #12
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d1eb      	bne.n	80066a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <HAL_RCC_ClockConfig+0x1b8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d20c      	bcs.n	80066f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066da:	4b22      	ldr	r3, [pc, #136]	; (8006764 <HAL_RCC_ClockConfig+0x1b8>)
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b20      	ldr	r3, [pc, #128]	; (8006764 <HAL_RCC_ClockConfig+0x1b8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d001      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e032      	b.n	800675a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006700:	4b19      	ldr	r3, [pc, #100]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4916      	ldr	r1, [pc, #88]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	4313      	orrs	r3, r2
 8006710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	490e      	ldr	r1, [pc, #56]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	4313      	orrs	r3, r2
 8006730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006732:	f000 f821 	bl	8006778 <HAL_RCC_GetSysClockFreq>
 8006736:	4602      	mov	r2, r0
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	091b      	lsrs	r3, r3, #4
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	490a      	ldr	r1, [pc, #40]	; (800676c <HAL_RCC_ClockConfig+0x1c0>)
 8006744:	5ccb      	ldrb	r3, [r1, r3]
 8006746:	fa22 f303 	lsr.w	r3, r2, r3
 800674a:	4a09      	ldr	r2, [pc, #36]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 800674c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f85a 	bl	800380c <HAL_InitTick>

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40023c00 	.word	0x40023c00
 8006768:	40023800 	.word	0x40023800
 800676c:	0800ce94 	.word	0x0800ce94
 8006770:	20000004 	.word	0x20000004
 8006774:	20000008 	.word	0x20000008

08006778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800677c:	b094      	sub	sp, #80	; 0x50
 800677e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	647b      	str	r3, [r7, #68]	; 0x44
 8006784:	2300      	movs	r3, #0
 8006786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006788:	2300      	movs	r3, #0
 800678a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006790:	4b79      	ldr	r3, [pc, #484]	; (8006978 <HAL_RCC_GetSysClockFreq+0x200>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b08      	cmp	r3, #8
 800679a:	d00d      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x40>
 800679c:	2b08      	cmp	r3, #8
 800679e:	f200 80e1 	bhi.w	8006964 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_RCC_GetSysClockFreq+0x34>
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d003      	beq.n	80067b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80067aa:	e0db      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067ac:	4b73      	ldr	r3, [pc, #460]	; (800697c <HAL_RCC_GetSysClockFreq+0x204>)
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80067b0:	e0db      	b.n	800696a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067b2:	4b73      	ldr	r3, [pc, #460]	; (8006980 <HAL_RCC_GetSysClockFreq+0x208>)
 80067b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067b6:	e0d8      	b.n	800696a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067b8:	4b6f      	ldr	r3, [pc, #444]	; (8006978 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067c2:	4b6d      	ldr	r3, [pc, #436]	; (8006978 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d063      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ce:	4b6a      	ldr	r3, [pc, #424]	; (8006978 <HAL_RCC_GetSysClockFreq+0x200>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	099b      	lsrs	r3, r3, #6
 80067d4:	2200      	movs	r2, #0
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e0:	633b      	str	r3, [r7, #48]	; 0x30
 80067e2:	2300      	movs	r3, #0
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
 80067e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	f04f 0000 	mov.w	r0, #0
 80067f2:	f04f 0100 	mov.w	r1, #0
 80067f6:	0159      	lsls	r1, r3, #5
 80067f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067fc:	0150      	lsls	r0, r2, #5
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4621      	mov	r1, r4
 8006804:	1a51      	subs	r1, r2, r1
 8006806:	6139      	str	r1, [r7, #16]
 8006808:	4629      	mov	r1, r5
 800680a:	eb63 0301 	sbc.w	r3, r3, r1
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800681c:	4659      	mov	r1, fp
 800681e:	018b      	lsls	r3, r1, #6
 8006820:	4651      	mov	r1, sl
 8006822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006826:	4651      	mov	r1, sl
 8006828:	018a      	lsls	r2, r1, #6
 800682a:	4651      	mov	r1, sl
 800682c:	ebb2 0801 	subs.w	r8, r2, r1
 8006830:	4659      	mov	r1, fp
 8006832:	eb63 0901 	sbc.w	r9, r3, r1
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800684a:	4690      	mov	r8, r2
 800684c:	4699      	mov	r9, r3
 800684e:	4623      	mov	r3, r4
 8006850:	eb18 0303 	adds.w	r3, r8, r3
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	462b      	mov	r3, r5
 8006858:	eb49 0303 	adc.w	r3, r9, r3
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800686a:	4629      	mov	r1, r5
 800686c:	024b      	lsls	r3, r1, #9
 800686e:	4621      	mov	r1, r4
 8006870:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006874:	4621      	mov	r1, r4
 8006876:	024a      	lsls	r2, r1, #9
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687e:	2200      	movs	r2, #0
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
 8006882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006884:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006888:	f7fa fa5e 	bl	8000d48 <__aeabi_uldivmod>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4613      	mov	r3, r2
 8006892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006894:	e058      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006896:	4b38      	ldr	r3, [pc, #224]	; (8006978 <HAL_RCC_GetSysClockFreq+0x200>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	099b      	lsrs	r3, r3, #6
 800689c:	2200      	movs	r2, #0
 800689e:	4618      	mov	r0, r3
 80068a0:	4611      	mov	r1, r2
 80068a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068a6:	623b      	str	r3, [r7, #32]
 80068a8:	2300      	movs	r3, #0
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	f04f 0000 	mov.w	r0, #0
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	0159      	lsls	r1, r3, #5
 80068be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068c2:	0150      	lsls	r0, r2, #5
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4641      	mov	r1, r8
 80068ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ce:	4649      	mov	r1, r9
 80068d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068e8:	ebb2 040a 	subs.w	r4, r2, sl
 80068ec:	eb63 050b 	sbc.w	r5, r3, fp
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	00eb      	lsls	r3, r5, #3
 80068fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068fe:	00e2      	lsls	r2, r4, #3
 8006900:	4614      	mov	r4, r2
 8006902:	461d      	mov	r5, r3
 8006904:	4643      	mov	r3, r8
 8006906:	18e3      	adds	r3, r4, r3
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	464b      	mov	r3, r9
 800690c:	eb45 0303 	adc.w	r3, r5, r3
 8006910:	607b      	str	r3, [r7, #4]
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800691e:	4629      	mov	r1, r5
 8006920:	028b      	lsls	r3, r1, #10
 8006922:	4621      	mov	r1, r4
 8006924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006928:	4621      	mov	r1, r4
 800692a:	028a      	lsls	r2, r1, #10
 800692c:	4610      	mov	r0, r2
 800692e:	4619      	mov	r1, r3
 8006930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006932:	2200      	movs	r2, #0
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	61fa      	str	r2, [r7, #28]
 8006938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800693c:	f7fa fa04 	bl	8000d48 <__aeabi_uldivmod>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4613      	mov	r3, r2
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_RCC_GetSysClockFreq+0x200>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	3301      	adds	r3, #1
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800695a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006962:	e002      	b.n	800696a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <HAL_RCC_GetSysClockFreq+0x204>)
 8006966:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800696a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800696c:	4618      	mov	r0, r3
 800696e:	3750      	adds	r7, #80	; 0x50
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006976:	bf00      	nop
 8006978:	40023800 	.word	0x40023800
 800697c:	00f42400 	.word	0x00f42400
 8006980:	007a1200 	.word	0x007a1200

08006984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006988:	4b03      	ldr	r3, [pc, #12]	; (8006998 <HAL_RCC_GetHCLKFreq+0x14>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	4618      	mov	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000004 	.word	0x20000004

0800699c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069a0:	f7ff fff0 	bl	8006984 <HAL_RCC_GetHCLKFreq>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4b05      	ldr	r3, [pc, #20]	; (80069bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	0a9b      	lsrs	r3, r3, #10
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	4903      	ldr	r1, [pc, #12]	; (80069c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069b2:	5ccb      	ldrb	r3, [r1, r3]
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40023800 	.word	0x40023800
 80069c0:	0800cea4 	.word	0x0800cea4

080069c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069c8:	f7ff ffdc 	bl	8006984 <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0b5b      	lsrs	r3, r3, #13
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4903      	ldr	r1, [pc, #12]	; (80069e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	0800cea4 	.word	0x0800cea4

080069ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e07b      	b.n	8006af6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d108      	bne.n	8006a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0e:	d009      	beq.n	8006a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	61da      	str	r2, [r3, #28]
 8006a16:	e005      	b.n	8006a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fc fc4e 	bl	80032e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	ea42 0103 	orr.w	r1, r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	f003 0104 	and.w	r1, r3, #4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0210 	and.w	r2, r3, #16
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b08c      	sub	sp, #48	; 0x30
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_SPI_TransmitReceive+0x26>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e18a      	b.n	8006e3a <HAL_SPI_TransmitReceive+0x33c>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b2c:	f7fc feb2 	bl	8003894 <HAL_GetTick>
 8006b30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b42:	887b      	ldrh	r3, [r7, #2]
 8006b44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d00f      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x70>
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b54:	d107      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <HAL_SPI_TransmitReceive+0x68>
 8006b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d003      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b66:	2302      	movs	r3, #2
 8006b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b6c:	e15b      	b.n	8006e26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x82>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x82>
 8006b7a:	887b      	ldrh	r3, [r7, #2]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b86:	e14e      	b.n	8006e26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d003      	beq.n	8006b9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2205      	movs	r2, #5
 8006b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	887a      	ldrh	r2, [r7, #2]
 8006bac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	887a      	ldrh	r2, [r7, #2]
 8006bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	887a      	ldrh	r2, [r7, #2]
 8006bbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	887a      	ldrh	r2, [r7, #2]
 8006bc4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d007      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf8:	d178      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_TransmitReceive+0x10a>
 8006c02:	8b7b      	ldrh	r3, [r7, #26]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d166      	bne.n	8006cd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2c:	e053      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d11b      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x176>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x176>
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d113      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	1c9a      	adds	r2, r3, #2
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d119      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x1b8>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d014      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	b292      	uxth	r2, r2
 8006c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cb6:	f7fc fded 	bl	8003894 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d807      	bhi.n	8006cd6 <HAL_SPI_TransmitReceive+0x1d8>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d003      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cd4:	e0a7      	b.n	8006e26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1a6      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x130>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1a1      	bne.n	8006c2e <HAL_SPI_TransmitReceive+0x130>
 8006cea:	e07c      	b.n	8006de6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_SPI_TransmitReceive+0x1fc>
 8006cf4:	8b7b      	ldrh	r3, [r7, #26]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d16b      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d20:	e057      	b.n	8006dd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d11c      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x26c>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d017      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x26c>
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d114      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d119      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x2ae>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006da8:	2301      	movs	r3, #1
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dac:	f7fc fd72 	bl	8003894 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d803      	bhi.n	8006dc4 <HAL_SPI_TransmitReceive+0x2c6>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d102      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x2cc>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dd0:	e029      	b.n	8006e26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1a2      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x224>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d19d      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f8b2 	bl	8006f54 <SPI_EndRxTxTransaction>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e02:	e010      	b.n	8006e26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	e000      	b.n	8006e26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006e24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3730      	adds	r7, #48	; 0x30
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	4613      	mov	r3, r2
 8006e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e54:	f7fc fd1e 	bl	8003894 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4413      	add	r3, r2
 8006e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e64:	f7fc fd16 	bl	8003894 <HAL_GetTick>
 8006e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e6a:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	015b      	lsls	r3, r3, #5
 8006e70:	0d1b      	lsrs	r3, r3, #20
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7a:	e054      	b.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d050      	beq.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e84:	f7fc fd06 	bl	8003894 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d902      	bls.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d13d      	bne.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb2:	d111      	bne.n	8006ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ebc:	d004      	beq.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec6:	d107      	bne.n	8006ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee0:	d10f      	bne.n	8006f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e017      	b.n	8006f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d19b      	bne.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000004 	.word	0x20000004

08006f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f60:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <SPI_EndRxTxTransaction+0x7c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <SPI_EndRxTxTransaction+0x80>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	0d5b      	lsrs	r3, r3, #21
 8006f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f7e:	d112      	bne.n	8006fa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	2180      	movs	r1, #128	; 0x80
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff ff5a 	bl	8006e44 <SPI_WaitFlagStateUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d016      	beq.n	8006fc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e00f      	b.n	8006fc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b80      	cmp	r3, #128	; 0x80
 8006fbe:	d0f2      	beq.n	8006fa6 <SPI_EndRxTxTransaction+0x52>
 8006fc0:	e000      	b.n	8006fc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006fc2:	bf00      	nop
  }

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000004 	.word	0x20000004
 8006fd4:	165e9f81 	.word	0x165e9f81

08006fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e041      	b.n	800706e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fc f9d6 	bl	80033b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f000 f9ce 	bl	80073b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e04e      	b.n	800712e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a23      	ldr	r2, [pc, #140]	; (800713c <HAL_TIM_Base_Start_IT+0xc4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d022      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ba:	d01d      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <HAL_TIM_Base_Start_IT+0xc8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d018      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <HAL_TIM_Base_Start_IT+0xcc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_TIM_Base_Start_IT+0xd0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_TIM_Base_Start_IT+0xd4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d009      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <HAL_TIM_Base_Start_IT+0x80>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a18      	ldr	r2, [pc, #96]	; (8007154 <HAL_TIM_Base_Start_IT+0xdc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d111      	bne.n	800711c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b06      	cmp	r3, #6
 8007108:	d010      	beq.n	800712c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	e007      	b.n	800712c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40010000 	.word	0x40010000
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40010400 	.word	0x40010400
 8007150:	40014000 	.word	0x40014000
 8007154:	40001800 	.word	0x40001800

08007158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b02      	cmp	r3, #2
 800716c:	d122      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b02      	cmp	r3, #2
 800717a:	d11b      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0202 	mvn.w	r2, #2
 8007184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8ee 	bl	800737c <HAL_TIM_IC_CaptureCallback>
 80071a0:	e005      	b.n	80071ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8e0 	bl	8007368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8f1 	bl	8007390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d122      	bne.n	8007208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d11b      	bne.n	8007208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0204 	mvn.w	r2, #4
 80071d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2202      	movs	r2, #2
 80071de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f8c4 	bl	800737c <HAL_TIM_IC_CaptureCallback>
 80071f4:	e005      	b.n	8007202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8b6 	bl	8007368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8c7 	bl	8007390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b08      	cmp	r3, #8
 8007214:	d122      	bne.n	800725c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b08      	cmp	r3, #8
 8007222:	d11b      	bne.n	800725c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0208 	mvn.w	r2, #8
 800722c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2204      	movs	r2, #4
 8007232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f89a 	bl	800737c <HAL_TIM_IC_CaptureCallback>
 8007248:	e005      	b.n	8007256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f88c 	bl	8007368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f89d 	bl	8007390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b10      	cmp	r3, #16
 8007268:	d122      	bne.n	80072b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b10      	cmp	r3, #16
 8007276:	d11b      	bne.n	80072b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0210 	mvn.w	r2, #16
 8007280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2208      	movs	r2, #8
 8007286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f870 	bl	800737c <HAL_TIM_IC_CaptureCallback>
 800729c:	e005      	b.n	80072aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f862 	bl	8007368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f873 	bl	8007390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d10e      	bne.n	80072dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d107      	bne.n	80072dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f06f 0201 	mvn.w	r2, #1
 80072d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fb f932 	bl	8002540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e6:	2b80      	cmp	r3, #128	; 0x80
 80072e8:	d10e      	bne.n	8007308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f4:	2b80      	cmp	r3, #128	; 0x80
 80072f6:	d107      	bne.n	8007308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f902 	bl	800750c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007312:	2b40      	cmp	r3, #64	; 0x40
 8007314:	d10e      	bne.n	8007334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d107      	bne.n	8007334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800732c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f838 	bl	80073a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b20      	cmp	r3, #32
 8007340:	d10e      	bne.n	8007360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b20      	cmp	r3, #32
 800734e:	d107      	bne.n	8007360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0220 	mvn.w	r2, #32
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f8cc 	bl	80074f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a40      	ldr	r2, [pc, #256]	; (80074cc <TIM_Base_SetConfig+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d013      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d00f      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a3d      	ldr	r2, [pc, #244]	; (80074d0 <TIM_Base_SetConfig+0x118>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3c      	ldr	r2, [pc, #240]	; (80074d4 <TIM_Base_SetConfig+0x11c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a3b      	ldr	r2, [pc, #236]	; (80074d8 <TIM_Base_SetConfig+0x120>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a3a      	ldr	r2, [pc, #232]	; (80074dc <TIM_Base_SetConfig+0x124>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d108      	bne.n	800740a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2f      	ldr	r2, [pc, #188]	; (80074cc <TIM_Base_SetConfig+0x114>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d02b      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007418:	d027      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2c      	ldr	r2, [pc, #176]	; (80074d0 <TIM_Base_SetConfig+0x118>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d023      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a2b      	ldr	r2, [pc, #172]	; (80074d4 <TIM_Base_SetConfig+0x11c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01f      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <TIM_Base_SetConfig+0x120>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01b      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a29      	ldr	r2, [pc, #164]	; (80074dc <TIM_Base_SetConfig+0x124>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d017      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a28      	ldr	r2, [pc, #160]	; (80074e0 <TIM_Base_SetConfig+0x128>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <TIM_Base_SetConfig+0x12c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00f      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a26      	ldr	r2, [pc, #152]	; (80074e8 <TIM_Base_SetConfig+0x130>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00b      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a25      	ldr	r2, [pc, #148]	; (80074ec <TIM_Base_SetConfig+0x134>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <TIM_Base_SetConfig+0x138>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d003      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a23      	ldr	r2, [pc, #140]	; (80074f4 <TIM_Base_SetConfig+0x13c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d108      	bne.n	800747c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <TIM_Base_SetConfig+0x114>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_Base_SetConfig+0xf8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <TIM_Base_SetConfig+0x124>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d103      	bne.n	80074b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	615a      	str	r2, [r3, #20]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40010400 	.word	0x40010400
 80074e0:	40014000 	.word	0x40014000
 80074e4:	40014400 	.word	0x40014400
 80074e8:	40014800 	.word	0x40014800
 80074ec:	40001800 	.word	0x40001800
 80074f0:	40001c00 	.word	0x40001c00
 80074f4:	40002000 	.word	0x40002000

080074f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e03f      	b.n	80075b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fb ff5a 	bl	8003400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2224      	movs	r2, #36	; 0x24
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f929 	bl	80077bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b08a      	sub	sp, #40	; 0x28
 80075be:	af02      	add	r7, sp, #8
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d17c      	bne.n	80076d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <HAL_UART_Transmit+0x2c>
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e075      	b.n	80076d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Transmit+0x3e>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e06e      	b.n	80076d6 <HAL_UART_Transmit+0x11c>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2221      	movs	r2, #33	; 0x21
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800760e:	f7fc f941 	bl	8003894 <HAL_GetTick>
 8007612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	88fa      	ldrh	r2, [r7, #6]
 8007618:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	88fa      	ldrh	r2, [r7, #6]
 800761e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d108      	bne.n	800763c <HAL_UART_Transmit+0x82>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e003      	b.n	8007644 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800764c:	e02a      	b.n	80076a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	2180      	movs	r1, #128	; 0x80
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f840 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e036      	b.n	80076d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	3302      	adds	r3, #2
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	e007      	b.n	8007696 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3301      	adds	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1cf      	bne.n	800764e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2140      	movs	r1, #64	; 0x40
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f810 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e006      	b.n	80076d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b090      	sub	sp, #64	; 0x40
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ee:	e050      	b.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f6:	d04c      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <UART_WaitOnFlagUntilTimeout+0x30>
 80076fe:	f7fc f8c9 	bl	8003894 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800770a:	429a      	cmp	r2, r3
 800770c:	d241      	bcs.n	8007792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	330c      	adds	r3, #12
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800772e:	637a      	str	r2, [r7, #52]	; 0x34
 8007730:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e5      	bne.n	800770e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3314      	adds	r3, #20
 8007748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	613b      	str	r3, [r7, #16]
   return(result);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007762:	623a      	str	r2, [r7, #32]
 8007764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	69f9      	ldr	r1, [r7, #28]
 8007768:	6a3a      	ldr	r2, [r7, #32]
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e00f      	b.n	80077b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	429a      	cmp	r2, r3
 80077a0:	bf0c      	ite	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	2300      	movne	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d09f      	beq.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3740      	adds	r7, #64	; 0x40
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077c0:	b0c0      	sub	sp, #256	; 0x100
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d8:	68d9      	ldr	r1, [r3, #12]
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	ea40 0301 	orr.w	r3, r0, r1
 80077e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007814:	f021 010c 	bic.w	r1, r1, #12
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007822:	430b      	orrs	r3, r1
 8007824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007836:	6999      	ldr	r1, [r3, #24]
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	ea40 0301 	orr.w	r3, r0, r1
 8007842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b8f      	ldr	r3, [pc, #572]	; (8007a88 <UART_SetConfig+0x2cc>)
 800784c:	429a      	cmp	r2, r3
 800784e:	d005      	beq.n	800785c <UART_SetConfig+0xa0>
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	4b8d      	ldr	r3, [pc, #564]	; (8007a8c <UART_SetConfig+0x2d0>)
 8007858:	429a      	cmp	r2, r3
 800785a:	d104      	bne.n	8007866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7ff f8b2 	bl	80069c4 <HAL_RCC_GetPCLK2Freq>
 8007860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007864:	e003      	b.n	800786e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007866:	f7ff f899 	bl	800699c <HAL_RCC_GetPCLK1Freq>
 800786a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800786e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007878:	f040 810c 	bne.w	8007a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800787c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007880:	2200      	movs	r2, #0
 8007882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800788a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	1891      	adds	r1, r2, r2
 8007894:	65b9      	str	r1, [r7, #88]	; 0x58
 8007896:	415b      	adcs	r3, r3
 8007898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800789a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800789e:	4621      	mov	r1, r4
 80078a0:	eb12 0801 	adds.w	r8, r2, r1
 80078a4:	4629      	mov	r1, r5
 80078a6:	eb43 0901 	adc.w	r9, r3, r1
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078be:	4690      	mov	r8, r2
 80078c0:	4699      	mov	r9, r3
 80078c2:	4623      	mov	r3, r4
 80078c4:	eb18 0303 	adds.w	r3, r8, r3
 80078c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078cc:	462b      	mov	r3, r5
 80078ce:	eb49 0303 	adc.w	r3, r9, r3
 80078d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078ea:	460b      	mov	r3, r1
 80078ec:	18db      	adds	r3, r3, r3
 80078ee:	653b      	str	r3, [r7, #80]	; 0x50
 80078f0:	4613      	mov	r3, r2
 80078f2:	eb42 0303 	adc.w	r3, r2, r3
 80078f6:	657b      	str	r3, [r7, #84]	; 0x54
 80078f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007900:	f7f9 fa22 	bl	8000d48 <__aeabi_uldivmod>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4b61      	ldr	r3, [pc, #388]	; (8007a90 <UART_SetConfig+0x2d4>)
 800790a:	fba3 2302 	umull	r2, r3, r3, r2
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	011c      	lsls	r4, r3, #4
 8007912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007916:	2200      	movs	r2, #0
 8007918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800791c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007924:	4642      	mov	r2, r8
 8007926:	464b      	mov	r3, r9
 8007928:	1891      	adds	r1, r2, r2
 800792a:	64b9      	str	r1, [r7, #72]	; 0x48
 800792c:	415b      	adcs	r3, r3
 800792e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007934:	4641      	mov	r1, r8
 8007936:	eb12 0a01 	adds.w	sl, r2, r1
 800793a:	4649      	mov	r1, r9
 800793c:	eb43 0b01 	adc.w	fp, r3, r1
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800794c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007954:	4692      	mov	sl, r2
 8007956:	469b      	mov	fp, r3
 8007958:	4643      	mov	r3, r8
 800795a:	eb1a 0303 	adds.w	r3, sl, r3
 800795e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007962:	464b      	mov	r3, r9
 8007964:	eb4b 0303 	adc.w	r3, fp, r3
 8007968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800797c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007980:	460b      	mov	r3, r1
 8007982:	18db      	adds	r3, r3, r3
 8007984:	643b      	str	r3, [r7, #64]	; 0x40
 8007986:	4613      	mov	r3, r2
 8007988:	eb42 0303 	adc.w	r3, r2, r3
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007996:	f7f9 f9d7 	bl	8000d48 <__aeabi_uldivmod>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	4b3b      	ldr	r3, [pc, #236]	; (8007a90 <UART_SetConfig+0x2d4>)
 80079a2:	fba3 2301 	umull	r2, r3, r3, r1
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	2264      	movs	r2, #100	; 0x64
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	1acb      	subs	r3, r1, r3
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80079b6:	4b36      	ldr	r3, [pc, #216]	; (8007a90 <UART_SetConfig+0x2d4>)
 80079b8:	fba3 2302 	umull	r2, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079c4:	441c      	add	r4, r3
 80079c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	1891      	adds	r1, r2, r2
 80079de:	63b9      	str	r1, [r7, #56]	; 0x38
 80079e0:	415b      	adcs	r3, r3
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079e8:	4641      	mov	r1, r8
 80079ea:	1851      	adds	r1, r2, r1
 80079ec:	6339      	str	r1, [r7, #48]	; 0x30
 80079ee:	4649      	mov	r1, r9
 80079f0:	414b      	adcs	r3, r1
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	f04f 0300 	mov.w	r3, #0
 80079fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a00:	4659      	mov	r1, fp
 8007a02:	00cb      	lsls	r3, r1, #3
 8007a04:	4651      	mov	r1, sl
 8007a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a0a:	4651      	mov	r1, sl
 8007a0c:	00ca      	lsls	r2, r1, #3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4619      	mov	r1, r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	4642      	mov	r2, r8
 8007a16:	189b      	adds	r3, r3, r2
 8007a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	460a      	mov	r2, r1
 8007a20:	eb42 0303 	adc.w	r3, r2, r3
 8007a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	18db      	adds	r3, r3, r3
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a42:	4613      	mov	r3, r2
 8007a44:	eb42 0303 	adc.w	r3, r2, r3
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a52:	f7f9 f979 	bl	8000d48 <__aeabi_uldivmod>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <UART_SetConfig+0x2d4>)
 8007a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	2164      	movs	r1, #100	; 0x64
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	3332      	adds	r3, #50	; 0x32
 8007a6e:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <UART_SetConfig+0x2d4>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	f003 0207 	and.w	r2, r3, #7
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4422      	add	r2, r4
 8007a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a84:	e105      	b.n	8007c92 <UART_SetConfig+0x4d6>
 8007a86:	bf00      	nop
 8007a88:	40011000 	.word	0x40011000
 8007a8c:	40011400 	.word	0x40011400
 8007a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	1891      	adds	r1, r2, r2
 8007aac:	6239      	str	r1, [r7, #32]
 8007aae:	415b      	adcs	r3, r3
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	1854      	adds	r4, r2, r1
 8007aba:	4649      	mov	r1, r9
 8007abc:	eb43 0501 	adc.w	r5, r3, r1
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	00eb      	lsls	r3, r5, #3
 8007aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ace:	00e2      	lsls	r2, r4, #3
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	461d      	mov	r5, r3
 8007ad4:	4643      	mov	r3, r8
 8007ad6:	18e3      	adds	r3, r4, r3
 8007ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007adc:	464b      	mov	r3, r9
 8007ade:	eb45 0303 	adc.w	r3, r5, r3
 8007ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b02:	4629      	mov	r1, r5
 8007b04:	008b      	lsls	r3, r1, #2
 8007b06:	4621      	mov	r1, r4
 8007b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	008a      	lsls	r2, r1, #2
 8007b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b14:	f7f9 f918 	bl	8000d48 <__aeabi_uldivmod>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4b60      	ldr	r3, [pc, #384]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	011c      	lsls	r4, r3, #4
 8007b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	1891      	adds	r1, r2, r2
 8007b3e:	61b9      	str	r1, [r7, #24]
 8007b40:	415b      	adcs	r3, r3
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b48:	4641      	mov	r1, r8
 8007b4a:	1851      	adds	r1, r2, r1
 8007b4c:	6139      	str	r1, [r7, #16]
 8007b4e:	4649      	mov	r1, r9
 8007b50:	414b      	adcs	r3, r1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b60:	4659      	mov	r1, fp
 8007b62:	00cb      	lsls	r3, r1, #3
 8007b64:	4651      	mov	r1, sl
 8007b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6a:	4651      	mov	r1, sl
 8007b6c:	00ca      	lsls	r2, r1, #3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	4642      	mov	r2, r8
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	460a      	mov	r2, r1
 8007b80:	eb42 0303 	adc.w	r3, r2, r3
 8007b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	008b      	lsls	r3, r1, #2
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007baa:	4641      	mov	r1, r8
 8007bac:	008a      	lsls	r2, r1, #2
 8007bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007bb2:	f7f9 f8c9 	bl	8000d48 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4b39      	ldr	r3, [pc, #228]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	2164      	movs	r1, #100	; 0x64
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	3332      	adds	r3, #50	; 0x32
 8007bce:	4a34      	ldr	r2, [pc, #208]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bda:	441c      	add	r4, r3
 8007bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007be0:	2200      	movs	r2, #0
 8007be2:	673b      	str	r3, [r7, #112]	; 0x70
 8007be4:	677a      	str	r2, [r7, #116]	; 0x74
 8007be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007bea:	4642      	mov	r2, r8
 8007bec:	464b      	mov	r3, r9
 8007bee:	1891      	adds	r1, r2, r2
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	415b      	adcs	r3, r3
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	1851      	adds	r1, r2, r1
 8007bfe:	6039      	str	r1, [r7, #0]
 8007c00:	4649      	mov	r1, r9
 8007c02:	414b      	adcs	r3, r1
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c12:	4659      	mov	r1, fp
 8007c14:	00cb      	lsls	r3, r1, #3
 8007c16:	4651      	mov	r1, sl
 8007c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c1c:	4651      	mov	r1, sl
 8007c1e:	00ca      	lsls	r2, r1, #3
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	4603      	mov	r3, r0
 8007c26:	4642      	mov	r2, r8
 8007c28:	189b      	adds	r3, r3, r2
 8007c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	460a      	mov	r2, r1
 8007c30:	eb42 0303 	adc.w	r3, r2, r3
 8007c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c40:	667a      	str	r2, [r7, #100]	; 0x64
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c4e:	4649      	mov	r1, r9
 8007c50:	008b      	lsls	r3, r1, #2
 8007c52:	4641      	mov	r1, r8
 8007c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c58:	4641      	mov	r1, r8
 8007c5a:	008a      	lsls	r2, r1, #2
 8007c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c60:	f7f9 f872 	bl	8000d48 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	2164      	movs	r1, #100	; 0x64
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	3332      	adds	r3, #50	; 0x32
 8007c7c:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	f003 020f 	and.w	r2, r3, #15
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4422      	add	r2, r4
 8007c90:	609a      	str	r2, [r3, #8]
}
 8007c92:	bf00      	nop
 8007c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c9e:	bf00      	nop
 8007ca0:	51eb851f 	.word	0x51eb851f

08007ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	f107 001c 	add.w	r0, r7, #28
 8007cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d122      	bne.n	8007d02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d105      	bne.n	8007cf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 faa2 	bl	8008240 <USB_CoreReset>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
 8007d00:	e01a      	b.n	8007d38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa96 	bl	8008240 <USB_CoreReset>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38
 8007d2a:	e005      	b.n	8007d38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10b      	bne.n	8007d56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f043 0206 	orr.w	r2, r3, #6
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d62:	b004      	add	sp, #16
 8007d64:	4770      	bx	lr

08007d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f023 0201 	bic.w	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d115      	bne.n	8007dd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007db6:	2001      	movs	r0, #1
 8007db8:	f7fb fd78 	bl	80038ac <HAL_Delay>
      ms++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa2e 	bl	8008224 <USB_GetMode>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d01e      	beq.n	8007e0c <USB_SetCurrentMode+0x84>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b31      	cmp	r3, #49	; 0x31
 8007dd2:	d9f0      	bls.n	8007db6 <USB_SetCurrentMode+0x2e>
 8007dd4:	e01a      	b.n	8007e0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d115      	bne.n	8007e08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007de8:	2001      	movs	r0, #1
 8007dea:	f7fb fd5f 	bl	80038ac <HAL_Delay>
      ms++;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa15 	bl	8008224 <USB_GetMode>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <USB_SetCurrentMode+0x84>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b31      	cmp	r3, #49	; 0x31
 8007e04:	d9f0      	bls.n	8007de8 <USB_SetCurrentMode+0x60>
 8007e06:	e001      	b.n	8007e0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e005      	b.n	8007e18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b32      	cmp	r3, #50	; 0x32
 8007e10:	d101      	bne.n	8007e16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e20:	b084      	sub	sp, #16
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	e009      	b.n	8007e54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3340      	adds	r3, #64	; 0x40
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3301      	adds	r3, #1
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b0e      	cmp	r3, #14
 8007e58:	d9f2      	bls.n	8007e40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11c      	bne.n	8007e9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6e:	f043 0302 	orr.w	r3, r3, #2
 8007e72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
 8007e98:	e00b      	b.n	8007eb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb8:	461a      	mov	r2, r3
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ecc:	461a      	mov	r2, r3
 8007ece:	680b      	ldr	r3, [r1, #0]
 8007ed0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d10c      	bne.n	8007ef2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f965 	bl	80081b0 <USB_SetDevSpeed>
 8007ee6:	e008      	b.n	8007efa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ee8:	2101      	movs	r1, #1
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f960 	bl	80081b0 <USB_SetDevSpeed>
 8007ef0:	e003      	b.n	8007efa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ef2:	2103      	movs	r1, #3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f95b 	bl	80081b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007efa:	2110      	movs	r1, #16
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f8f3 	bl	80080e8 <USB_FlushTxFifo>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f91f 	bl	8008150 <USB_FlushRxFifo>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f22:	461a      	mov	r2, r3
 8007f24:	2300      	movs	r3, #0
 8007f26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2300      	movs	r3, #0
 8007f32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f40:	2300      	movs	r3, #0
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	e043      	b.n	8007fce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5c:	d118      	bne.n	8007f90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	461a      	mov	r2, r3
 8007f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e013      	b.n	8007fa2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f86:	461a      	mov	r2, r3
 8007f88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e008      	b.n	8007fa2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d3b7      	bcc.n	8007f46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	e043      	b.n	8008064 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff2:	d118      	bne.n	8008026 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008006:	461a      	mov	r2, r3
 8008008:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	e013      	b.n	8008038 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	e008      	b.n	8008038 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	461a      	mov	r2, r3
 8008034:	2300      	movs	r3, #0
 8008036:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	461a      	mov	r2, r3
 8008046:	2300      	movs	r3, #0
 8008048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	461a      	mov	r2, r3
 8008058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800805c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	3301      	adds	r3, #1
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	429a      	cmp	r2, r3
 800806a:	d3b7      	bcc.n	8007fdc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800807e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800808c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f043 0210 	orr.w	r2, r3, #16
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699a      	ldr	r2, [r3, #24]
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <USB_DevInit+0x2c4>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f043 0208 	orr.w	r2, r3, #8
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d107      	bne.n	80080d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080cc:	f043 0304 	orr.w	r3, r3, #4
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080e0:	b004      	add	sp, #16
 80080e2:	4770      	bx	lr
 80080e4:	803c3800 	.word	0x803c3800

080080e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a13      	ldr	r2, [pc, #76]	; (800814c <USB_FlushTxFifo+0x64>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d901      	bls.n	8008108 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e01b      	b.n	8008140 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	daf2      	bge.n	80080f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	019b      	lsls	r3, r3, #6
 8008118:	f043 0220 	orr.w	r2, r3, #32
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <USB_FlushTxFifo+0x64>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d901      	bls.n	8008132 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e006      	b.n	8008140 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b20      	cmp	r3, #32
 800813c:	d0f0      	beq.n	8008120 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	00030d40 	.word	0x00030d40

08008150 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4a11      	ldr	r2, [pc, #68]	; (80081ac <USB_FlushRxFifo+0x5c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d901      	bls.n	800816e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e018      	b.n	80081a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	daf2      	bge.n	800815c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2210      	movs	r2, #16
 800817e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a08      	ldr	r2, [pc, #32]	; (80081ac <USB_FlushRxFifo+0x5c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d901      	bls.n	8008192 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e006      	b.n	80081a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b10      	cmp	r3, #16
 800819c:	d0f0      	beq.n	8008180 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	00030d40 	.word	0x00030d40

080081b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	68f9      	ldr	r1, [r7, #12]
 80081cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081d0:	4313      	orrs	r3, r2
 80081d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081fc:	f023 0303 	bic.w	r3, r3, #3
 8008200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008210:	f043 0302 	orr.w	r3, r3, #2
 8008214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	f003 0301 	and.w	r3, r3, #1
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <USB_CoreReset+0x64>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e01b      	b.n	8008296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	daf2      	bge.n	800824c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f043 0201 	orr.w	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <USB_CoreReset+0x64>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d901      	bls.n	8008288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e006      	b.n	8008296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d0f0      	beq.n	8008276 <USB_CoreReset+0x36>

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	00030d40 	.word	0x00030d40

080082a8 <__errno>:
 80082a8:	4b01      	ldr	r3, [pc, #4]	; (80082b0 <__errno+0x8>)
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000010 	.word	0x20000010

080082b4 <__libc_init_array>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4d0d      	ldr	r5, [pc, #52]	; (80082ec <__libc_init_array+0x38>)
 80082b8:	4c0d      	ldr	r4, [pc, #52]	; (80082f0 <__libc_init_array+0x3c>)
 80082ba:	1b64      	subs	r4, r4, r5
 80082bc:	10a4      	asrs	r4, r4, #2
 80082be:	2600      	movs	r6, #0
 80082c0:	42a6      	cmp	r6, r4
 80082c2:	d109      	bne.n	80082d8 <__libc_init_array+0x24>
 80082c4:	4d0b      	ldr	r5, [pc, #44]	; (80082f4 <__libc_init_array+0x40>)
 80082c6:	4c0c      	ldr	r4, [pc, #48]	; (80082f8 <__libc_init_array+0x44>)
 80082c8:	f004 fd7c 	bl	800cdc4 <_init>
 80082cc:	1b64      	subs	r4, r4, r5
 80082ce:	10a4      	asrs	r4, r4, #2
 80082d0:	2600      	movs	r6, #0
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	d105      	bne.n	80082e2 <__libc_init_array+0x2e>
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082dc:	4798      	blx	r3
 80082de:	3601      	adds	r6, #1
 80082e0:	e7ee      	b.n	80082c0 <__libc_init_array+0xc>
 80082e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e6:	4798      	blx	r3
 80082e8:	3601      	adds	r6, #1
 80082ea:	e7f2      	b.n	80082d2 <__libc_init_array+0x1e>
 80082ec:	0800d364 	.word	0x0800d364
 80082f0:	0800d364 	.word	0x0800d364
 80082f4:	0800d364 	.word	0x0800d364
 80082f8:	0800d368 	.word	0x0800d368

080082fc <memset>:
 80082fc:	4402      	add	r2, r0
 80082fe:	4603      	mov	r3, r0
 8008300:	4293      	cmp	r3, r2
 8008302:	d100      	bne.n	8008306 <memset+0xa>
 8008304:	4770      	bx	lr
 8008306:	f803 1b01 	strb.w	r1, [r3], #1
 800830a:	e7f9      	b.n	8008300 <memset+0x4>

0800830c <__cvt>:
 800830c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	ec55 4b10 	vmov	r4, r5, d0
 8008314:	2d00      	cmp	r5, #0
 8008316:	460e      	mov	r6, r1
 8008318:	4619      	mov	r1, r3
 800831a:	462b      	mov	r3, r5
 800831c:	bfbb      	ittet	lt
 800831e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008322:	461d      	movlt	r5, r3
 8008324:	2300      	movge	r3, #0
 8008326:	232d      	movlt	r3, #45	; 0x2d
 8008328:	700b      	strb	r3, [r1, #0]
 800832a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008330:	4691      	mov	r9, r2
 8008332:	f023 0820 	bic.w	r8, r3, #32
 8008336:	bfbc      	itt	lt
 8008338:	4622      	movlt	r2, r4
 800833a:	4614      	movlt	r4, r2
 800833c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008340:	d005      	beq.n	800834e <__cvt+0x42>
 8008342:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008346:	d100      	bne.n	800834a <__cvt+0x3e>
 8008348:	3601      	adds	r6, #1
 800834a:	2102      	movs	r1, #2
 800834c:	e000      	b.n	8008350 <__cvt+0x44>
 800834e:	2103      	movs	r1, #3
 8008350:	ab03      	add	r3, sp, #12
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	ab02      	add	r3, sp, #8
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	ec45 4b10 	vmov	d0, r4, r5
 800835c:	4653      	mov	r3, sl
 800835e:	4632      	mov	r2, r6
 8008360:	f001 ff12 	bl	800a188 <_dtoa_r>
 8008364:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008368:	4607      	mov	r7, r0
 800836a:	d102      	bne.n	8008372 <__cvt+0x66>
 800836c:	f019 0f01 	tst.w	r9, #1
 8008370:	d022      	beq.n	80083b8 <__cvt+0xac>
 8008372:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008376:	eb07 0906 	add.w	r9, r7, r6
 800837a:	d110      	bne.n	800839e <__cvt+0x92>
 800837c:	783b      	ldrb	r3, [r7, #0]
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	d10a      	bne.n	8008398 <__cvt+0x8c>
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f8 fbad 	bl	8000ae8 <__aeabi_dcmpeq>
 800838e:	b918      	cbnz	r0, 8008398 <__cvt+0x8c>
 8008390:	f1c6 0601 	rsb	r6, r6, #1
 8008394:	f8ca 6000 	str.w	r6, [sl]
 8008398:	f8da 3000 	ldr.w	r3, [sl]
 800839c:	4499      	add	r9, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f8 fb9f 	bl	8000ae8 <__aeabi_dcmpeq>
 80083aa:	b108      	cbz	r0, 80083b0 <__cvt+0xa4>
 80083ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80083b0:	2230      	movs	r2, #48	; 0x30
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	454b      	cmp	r3, r9
 80083b6:	d307      	bcc.n	80083c8 <__cvt+0xbc>
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083bc:	1bdb      	subs	r3, r3, r7
 80083be:	4638      	mov	r0, r7
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	b004      	add	sp, #16
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	1c59      	adds	r1, r3, #1
 80083ca:	9103      	str	r1, [sp, #12]
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e7f0      	b.n	80083b2 <__cvt+0xa6>

080083d0 <__exponent>:
 80083d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d2:	4603      	mov	r3, r0
 80083d4:	2900      	cmp	r1, #0
 80083d6:	bfb8      	it	lt
 80083d8:	4249      	neglt	r1, r1
 80083da:	f803 2b02 	strb.w	r2, [r3], #2
 80083de:	bfb4      	ite	lt
 80083e0:	222d      	movlt	r2, #45	; 0x2d
 80083e2:	222b      	movge	r2, #43	; 0x2b
 80083e4:	2909      	cmp	r1, #9
 80083e6:	7042      	strb	r2, [r0, #1]
 80083e8:	dd2a      	ble.n	8008440 <__exponent+0x70>
 80083ea:	f10d 0407 	add.w	r4, sp, #7
 80083ee:	46a4      	mov	ip, r4
 80083f0:	270a      	movs	r7, #10
 80083f2:	46a6      	mov	lr, r4
 80083f4:	460a      	mov	r2, r1
 80083f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80083fa:	fb07 1516 	mls	r5, r7, r6, r1
 80083fe:	3530      	adds	r5, #48	; 0x30
 8008400:	2a63      	cmp	r2, #99	; 0x63
 8008402:	f104 34ff 	add.w	r4, r4, #4294967295
 8008406:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800840a:	4631      	mov	r1, r6
 800840c:	dcf1      	bgt.n	80083f2 <__exponent+0x22>
 800840e:	3130      	adds	r1, #48	; 0x30
 8008410:	f1ae 0502 	sub.w	r5, lr, #2
 8008414:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008418:	1c44      	adds	r4, r0, #1
 800841a:	4629      	mov	r1, r5
 800841c:	4561      	cmp	r1, ip
 800841e:	d30a      	bcc.n	8008436 <__exponent+0x66>
 8008420:	f10d 0209 	add.w	r2, sp, #9
 8008424:	eba2 020e 	sub.w	r2, r2, lr
 8008428:	4565      	cmp	r5, ip
 800842a:	bf88      	it	hi
 800842c:	2200      	movhi	r2, #0
 800842e:	4413      	add	r3, r2
 8008430:	1a18      	subs	r0, r3, r0
 8008432:	b003      	add	sp, #12
 8008434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800843e:	e7ed      	b.n	800841c <__exponent+0x4c>
 8008440:	2330      	movs	r3, #48	; 0x30
 8008442:	3130      	adds	r1, #48	; 0x30
 8008444:	7083      	strb	r3, [r0, #2]
 8008446:	70c1      	strb	r1, [r0, #3]
 8008448:	1d03      	adds	r3, r0, #4
 800844a:	e7f1      	b.n	8008430 <__exponent+0x60>

0800844c <_printf_float>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	ed2d 8b02 	vpush	{d8}
 8008454:	b08d      	sub	sp, #52	; 0x34
 8008456:	460c      	mov	r4, r1
 8008458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800845c:	4616      	mov	r6, r2
 800845e:	461f      	mov	r7, r3
 8008460:	4605      	mov	r5, r0
 8008462:	f003 f9a5 	bl	800b7b0 <_localeconv_r>
 8008466:	f8d0 a000 	ldr.w	sl, [r0]
 800846a:	4650      	mov	r0, sl
 800846c:	f7f7 fec0 	bl	80001f0 <strlen>
 8008470:	2300      	movs	r3, #0
 8008472:	930a      	str	r3, [sp, #40]	; 0x28
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	9305      	str	r3, [sp, #20]
 8008478:	f8d8 3000 	ldr.w	r3, [r8]
 800847c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008480:	3307      	adds	r3, #7
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	f103 0208 	add.w	r2, r3, #8
 800848a:	f8c8 2000 	str.w	r2, [r8]
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008496:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800849a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800849e:	9307      	str	r3, [sp, #28]
 80084a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80084a4:	ee08 0a10 	vmov	s16, r0
 80084a8:	4b9f      	ldr	r3, [pc, #636]	; (8008728 <_printf_float+0x2dc>)
 80084aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ae:	f04f 32ff 	mov.w	r2, #4294967295
 80084b2:	f7f8 fb4b 	bl	8000b4c <__aeabi_dcmpun>
 80084b6:	bb88      	cbnz	r0, 800851c <_printf_float+0xd0>
 80084b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084bc:	4b9a      	ldr	r3, [pc, #616]	; (8008728 <_printf_float+0x2dc>)
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	f7f8 fb25 	bl	8000b10 <__aeabi_dcmple>
 80084c6:	bb48      	cbnz	r0, 800851c <_printf_float+0xd0>
 80084c8:	2200      	movs	r2, #0
 80084ca:	2300      	movs	r3, #0
 80084cc:	4640      	mov	r0, r8
 80084ce:	4649      	mov	r1, r9
 80084d0:	f7f8 fb14 	bl	8000afc <__aeabi_dcmplt>
 80084d4:	b110      	cbz	r0, 80084dc <_printf_float+0x90>
 80084d6:	232d      	movs	r3, #45	; 0x2d
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	4b93      	ldr	r3, [pc, #588]	; (800872c <_printf_float+0x2e0>)
 80084de:	4894      	ldr	r0, [pc, #592]	; (8008730 <_printf_float+0x2e4>)
 80084e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084e4:	bf94      	ite	ls
 80084e6:	4698      	movls	r8, r3
 80084e8:	4680      	movhi	r8, r0
 80084ea:	2303      	movs	r3, #3
 80084ec:	6123      	str	r3, [r4, #16]
 80084ee:	9b05      	ldr	r3, [sp, #20]
 80084f0:	f023 0204 	bic.w	r2, r3, #4
 80084f4:	6022      	str	r2, [r4, #0]
 80084f6:	f04f 0900 	mov.w	r9, #0
 80084fa:	9700      	str	r7, [sp, #0]
 80084fc:	4633      	mov	r3, r6
 80084fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f9d8 	bl	80088b8 <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	f040 8090 	bne.w	800862e <_printf_float+0x1e2>
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	b00d      	add	sp, #52	; 0x34
 8008514:	ecbd 8b02 	vpop	{d8}
 8008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	4642      	mov	r2, r8
 800851e:	464b      	mov	r3, r9
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f8 fb12 	bl	8000b4c <__aeabi_dcmpun>
 8008528:	b140      	cbz	r0, 800853c <_printf_float+0xf0>
 800852a:	464b      	mov	r3, r9
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfbc      	itt	lt
 8008530:	232d      	movlt	r3, #45	; 0x2d
 8008532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008536:	487f      	ldr	r0, [pc, #508]	; (8008734 <_printf_float+0x2e8>)
 8008538:	4b7f      	ldr	r3, [pc, #508]	; (8008738 <_printf_float+0x2ec>)
 800853a:	e7d1      	b.n	80084e0 <_printf_float+0x94>
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008542:	9206      	str	r2, [sp, #24]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	d13f      	bne.n	80085c8 <_printf_float+0x17c>
 8008548:	2306      	movs	r3, #6
 800854a:	6063      	str	r3, [r4, #4]
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	6861      	ldr	r1, [r4, #4]
 8008550:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008554:	2300      	movs	r3, #0
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	ab0a      	add	r3, sp, #40	; 0x28
 800855a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800855e:	ab09      	add	r3, sp, #36	; 0x24
 8008560:	ec49 8b10 	vmov	d0, r8, r9
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	6022      	str	r2, [r4, #0]
 8008568:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800856c:	4628      	mov	r0, r5
 800856e:	f7ff fecd 	bl	800830c <__cvt>
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008576:	2b47      	cmp	r3, #71	; 0x47
 8008578:	4680      	mov	r8, r0
 800857a:	d108      	bne.n	800858e <_printf_float+0x142>
 800857c:	1cc8      	adds	r0, r1, #3
 800857e:	db02      	blt.n	8008586 <_printf_float+0x13a>
 8008580:	6863      	ldr	r3, [r4, #4]
 8008582:	4299      	cmp	r1, r3
 8008584:	dd41      	ble.n	800860a <_printf_float+0x1be>
 8008586:	f1ab 0b02 	sub.w	fp, fp, #2
 800858a:	fa5f fb8b 	uxtb.w	fp, fp
 800858e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008592:	d820      	bhi.n	80085d6 <_printf_float+0x18a>
 8008594:	3901      	subs	r1, #1
 8008596:	465a      	mov	r2, fp
 8008598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800859c:	9109      	str	r1, [sp, #36]	; 0x24
 800859e:	f7ff ff17 	bl	80083d0 <__exponent>
 80085a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a4:	1813      	adds	r3, r2, r0
 80085a6:	2a01      	cmp	r2, #1
 80085a8:	4681      	mov	r9, r0
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	dc02      	bgt.n	80085b4 <_printf_float+0x168>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	07d2      	lsls	r2, r2, #31
 80085b2:	d501      	bpl.n	80085b8 <_printf_float+0x16c>
 80085b4:	3301      	adds	r3, #1
 80085b6:	6123      	str	r3, [r4, #16]
 80085b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d09c      	beq.n	80084fa <_printf_float+0xae>
 80085c0:	232d      	movs	r3, #45	; 0x2d
 80085c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c6:	e798      	b.n	80084fa <_printf_float+0xae>
 80085c8:	9a06      	ldr	r2, [sp, #24]
 80085ca:	2a47      	cmp	r2, #71	; 0x47
 80085cc:	d1be      	bne.n	800854c <_printf_float+0x100>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1bc      	bne.n	800854c <_printf_float+0x100>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7b9      	b.n	800854a <_printf_float+0xfe>
 80085d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085da:	d118      	bne.n	800860e <_printf_float+0x1c2>
 80085dc:	2900      	cmp	r1, #0
 80085de:	6863      	ldr	r3, [r4, #4]
 80085e0:	dd0b      	ble.n	80085fa <_printf_float+0x1ae>
 80085e2:	6121      	str	r1, [r4, #16]
 80085e4:	b913      	cbnz	r3, 80085ec <_printf_float+0x1a0>
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	07d0      	lsls	r0, r2, #31
 80085ea:	d502      	bpl.n	80085f2 <_printf_float+0x1a6>
 80085ec:	3301      	adds	r3, #1
 80085ee:	440b      	add	r3, r1
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80085f4:	f04f 0900 	mov.w	r9, #0
 80085f8:	e7de      	b.n	80085b8 <_printf_float+0x16c>
 80085fa:	b913      	cbnz	r3, 8008602 <_printf_float+0x1b6>
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	07d2      	lsls	r2, r2, #31
 8008600:	d501      	bpl.n	8008606 <_printf_float+0x1ba>
 8008602:	3302      	adds	r3, #2
 8008604:	e7f4      	b.n	80085f0 <_printf_float+0x1a4>
 8008606:	2301      	movs	r3, #1
 8008608:	e7f2      	b.n	80085f0 <_printf_float+0x1a4>
 800860a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	4299      	cmp	r1, r3
 8008612:	db05      	blt.n	8008620 <_printf_float+0x1d4>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	6121      	str	r1, [r4, #16]
 8008618:	07d8      	lsls	r0, r3, #31
 800861a:	d5ea      	bpl.n	80085f2 <_printf_float+0x1a6>
 800861c:	1c4b      	adds	r3, r1, #1
 800861e:	e7e7      	b.n	80085f0 <_printf_float+0x1a4>
 8008620:	2900      	cmp	r1, #0
 8008622:	bfd4      	ite	le
 8008624:	f1c1 0202 	rsble	r2, r1, #2
 8008628:	2201      	movgt	r2, #1
 800862a:	4413      	add	r3, r2
 800862c:	e7e0      	b.n	80085f0 <_printf_float+0x1a4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	055a      	lsls	r2, r3, #21
 8008632:	d407      	bmi.n	8008644 <_printf_float+0x1f8>
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	4642      	mov	r2, r8
 8008638:	4631      	mov	r1, r6
 800863a:	4628      	mov	r0, r5
 800863c:	47b8      	blx	r7
 800863e:	3001      	adds	r0, #1
 8008640:	d12c      	bne.n	800869c <_printf_float+0x250>
 8008642:	e764      	b.n	800850e <_printf_float+0xc2>
 8008644:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008648:	f240 80e0 	bls.w	800880c <_printf_float+0x3c0>
 800864c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008650:	2200      	movs	r2, #0
 8008652:	2300      	movs	r3, #0
 8008654:	f7f8 fa48 	bl	8000ae8 <__aeabi_dcmpeq>
 8008658:	2800      	cmp	r0, #0
 800865a:	d034      	beq.n	80086c6 <_printf_float+0x27a>
 800865c:	4a37      	ldr	r2, [pc, #220]	; (800873c <_printf_float+0x2f0>)
 800865e:	2301      	movs	r3, #1
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f af51 	beq.w	800850e <_printf_float+0xc2>
 800866c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008670:	429a      	cmp	r2, r3
 8008672:	db02      	blt.n	800867a <_printf_float+0x22e>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	07d8      	lsls	r0, r3, #31
 8008678:	d510      	bpl.n	800869c <_printf_float+0x250>
 800867a:	ee18 3a10 	vmov	r3, s16
 800867e:	4652      	mov	r2, sl
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f af41 	beq.w	800850e <_printf_float+0xc2>
 800868c:	f04f 0800 	mov.w	r8, #0
 8008690:	f104 091a 	add.w	r9, r4, #26
 8008694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008696:	3b01      	subs	r3, #1
 8008698:	4543      	cmp	r3, r8
 800869a:	dc09      	bgt.n	80086b0 <_printf_float+0x264>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	079b      	lsls	r3, r3, #30
 80086a0:	f100 8105 	bmi.w	80088ae <_printf_float+0x462>
 80086a4:	68e0      	ldr	r0, [r4, #12]
 80086a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a8:	4298      	cmp	r0, r3
 80086aa:	bfb8      	it	lt
 80086ac:	4618      	movlt	r0, r3
 80086ae:	e730      	b.n	8008512 <_printf_float+0xc6>
 80086b0:	2301      	movs	r3, #1
 80086b2:	464a      	mov	r2, r9
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	f43f af27 	beq.w	800850e <_printf_float+0xc2>
 80086c0:	f108 0801 	add.w	r8, r8, #1
 80086c4:	e7e6      	b.n	8008694 <_printf_float+0x248>
 80086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc39      	bgt.n	8008740 <_printf_float+0x2f4>
 80086cc:	4a1b      	ldr	r2, [pc, #108]	; (800873c <_printf_float+0x2f0>)
 80086ce:	2301      	movs	r3, #1
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	f43f af19 	beq.w	800850e <_printf_float+0xc2>
 80086dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086e0:	4313      	orrs	r3, r2
 80086e2:	d102      	bne.n	80086ea <_printf_float+0x29e>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	d5d8      	bpl.n	800869c <_printf_float+0x250>
 80086ea:	ee18 3a10 	vmov	r3, s16
 80086ee:	4652      	mov	r2, sl
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	f43f af09 	beq.w	800850e <_printf_float+0xc2>
 80086fc:	f04f 0900 	mov.w	r9, #0
 8008700:	f104 0a1a 	add.w	sl, r4, #26
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	425b      	negs	r3, r3
 8008708:	454b      	cmp	r3, r9
 800870a:	dc01      	bgt.n	8008710 <_printf_float+0x2c4>
 800870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870e:	e792      	b.n	8008636 <_printf_float+0x1ea>
 8008710:	2301      	movs	r3, #1
 8008712:	4652      	mov	r2, sl
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f aef7 	beq.w	800850e <_printf_float+0xc2>
 8008720:	f109 0901 	add.w	r9, r9, #1
 8008724:	e7ee      	b.n	8008704 <_printf_float+0x2b8>
 8008726:	bf00      	nop
 8008728:	7fefffff 	.word	0x7fefffff
 800872c:	0800ceb0 	.word	0x0800ceb0
 8008730:	0800ceb4 	.word	0x0800ceb4
 8008734:	0800cebc 	.word	0x0800cebc
 8008738:	0800ceb8 	.word	0x0800ceb8
 800873c:	0800cec0 	.word	0x0800cec0
 8008740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008744:	429a      	cmp	r2, r3
 8008746:	bfa8      	it	ge
 8008748:	461a      	movge	r2, r3
 800874a:	2a00      	cmp	r2, #0
 800874c:	4691      	mov	r9, r2
 800874e:	dc37      	bgt.n	80087c0 <_printf_float+0x374>
 8008750:	f04f 0b00 	mov.w	fp, #0
 8008754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008758:	f104 021a 	add.w	r2, r4, #26
 800875c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	eba3 0309 	sub.w	r3, r3, r9
 8008764:	455b      	cmp	r3, fp
 8008766:	dc33      	bgt.n	80087d0 <_printf_float+0x384>
 8008768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800876c:	429a      	cmp	r2, r3
 800876e:	db3b      	blt.n	80087e8 <_printf_float+0x39c>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	07da      	lsls	r2, r3, #31
 8008774:	d438      	bmi.n	80087e8 <_printf_float+0x39c>
 8008776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800877c:	1a9a      	subs	r2, r3, r2
 800877e:	eba3 0901 	sub.w	r9, r3, r1
 8008782:	4591      	cmp	r9, r2
 8008784:	bfa8      	it	ge
 8008786:	4691      	movge	r9, r2
 8008788:	f1b9 0f00 	cmp.w	r9, #0
 800878c:	dc35      	bgt.n	80087fa <_printf_float+0x3ae>
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008796:	f104 0a1a 	add.w	sl, r4, #26
 800879a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	eba3 0309 	sub.w	r3, r3, r9
 80087a4:	4543      	cmp	r3, r8
 80087a6:	f77f af79 	ble.w	800869c <_printf_float+0x250>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4652      	mov	r2, sl
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	f43f aeaa 	beq.w	800850e <_printf_float+0xc2>
 80087ba:	f108 0801 	add.w	r8, r8, #1
 80087be:	e7ec      	b.n	800879a <_printf_float+0x34e>
 80087c0:	4613      	mov	r3, r2
 80087c2:	4631      	mov	r1, r6
 80087c4:	4642      	mov	r2, r8
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	d1c0      	bne.n	8008750 <_printf_float+0x304>
 80087ce:	e69e      	b.n	800850e <_printf_float+0xc2>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4631      	mov	r1, r6
 80087d4:	4628      	mov	r0, r5
 80087d6:	9205      	str	r2, [sp, #20]
 80087d8:	47b8      	blx	r7
 80087da:	3001      	adds	r0, #1
 80087dc:	f43f ae97 	beq.w	800850e <_printf_float+0xc2>
 80087e0:	9a05      	ldr	r2, [sp, #20]
 80087e2:	f10b 0b01 	add.w	fp, fp, #1
 80087e6:	e7b9      	b.n	800875c <_printf_float+0x310>
 80087e8:	ee18 3a10 	vmov	r3, s16
 80087ec:	4652      	mov	r2, sl
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	d1be      	bne.n	8008776 <_printf_float+0x32a>
 80087f8:	e689      	b.n	800850e <_printf_float+0xc2>
 80087fa:	9a05      	ldr	r2, [sp, #20]
 80087fc:	464b      	mov	r3, r9
 80087fe:	4442      	add	r2, r8
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	d1c1      	bne.n	800878e <_printf_float+0x342>
 800880a:	e680      	b.n	800850e <_printf_float+0xc2>
 800880c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800880e:	2a01      	cmp	r2, #1
 8008810:	dc01      	bgt.n	8008816 <_printf_float+0x3ca>
 8008812:	07db      	lsls	r3, r3, #31
 8008814:	d538      	bpl.n	8008888 <_printf_float+0x43c>
 8008816:	2301      	movs	r3, #1
 8008818:	4642      	mov	r2, r8
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	f43f ae74 	beq.w	800850e <_printf_float+0xc2>
 8008826:	ee18 3a10 	vmov	r3, s16
 800882a:	4652      	mov	r2, sl
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f ae6b 	beq.w	800850e <_printf_float+0xc2>
 8008838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800883c:	2200      	movs	r2, #0
 800883e:	2300      	movs	r3, #0
 8008840:	f7f8 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 8008844:	b9d8      	cbnz	r0, 800887e <_printf_float+0x432>
 8008846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008848:	f108 0201 	add.w	r2, r8, #1
 800884c:	3b01      	subs	r3, #1
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	d10e      	bne.n	8008876 <_printf_float+0x42a>
 8008858:	e659      	b.n	800850e <_printf_float+0xc2>
 800885a:	2301      	movs	r3, #1
 800885c:	4652      	mov	r2, sl
 800885e:	4631      	mov	r1, r6
 8008860:	4628      	mov	r0, r5
 8008862:	47b8      	blx	r7
 8008864:	3001      	adds	r0, #1
 8008866:	f43f ae52 	beq.w	800850e <_printf_float+0xc2>
 800886a:	f108 0801 	add.w	r8, r8, #1
 800886e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008870:	3b01      	subs	r3, #1
 8008872:	4543      	cmp	r3, r8
 8008874:	dcf1      	bgt.n	800885a <_printf_float+0x40e>
 8008876:	464b      	mov	r3, r9
 8008878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800887c:	e6dc      	b.n	8008638 <_printf_float+0x1ec>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	f104 0a1a 	add.w	sl, r4, #26
 8008886:	e7f2      	b.n	800886e <_printf_float+0x422>
 8008888:	2301      	movs	r3, #1
 800888a:	4642      	mov	r2, r8
 800888c:	e7df      	b.n	800884e <_printf_float+0x402>
 800888e:	2301      	movs	r3, #1
 8008890:	464a      	mov	r2, r9
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	f43f ae38 	beq.w	800850e <_printf_float+0xc2>
 800889e:	f108 0801 	add.w	r8, r8, #1
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088a6:	1a5b      	subs	r3, r3, r1
 80088a8:	4543      	cmp	r3, r8
 80088aa:	dcf0      	bgt.n	800888e <_printf_float+0x442>
 80088ac:	e6fa      	b.n	80086a4 <_printf_float+0x258>
 80088ae:	f04f 0800 	mov.w	r8, #0
 80088b2:	f104 0919 	add.w	r9, r4, #25
 80088b6:	e7f4      	b.n	80088a2 <_printf_float+0x456>

080088b8 <_printf_common>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	4616      	mov	r6, r2
 80088be:	4699      	mov	r9, r3
 80088c0:	688a      	ldr	r2, [r1, #8]
 80088c2:	690b      	ldr	r3, [r1, #16]
 80088c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088c8:	4293      	cmp	r3, r2
 80088ca:	bfb8      	it	lt
 80088cc:	4613      	movlt	r3, r2
 80088ce:	6033      	str	r3, [r6, #0]
 80088d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088d4:	4607      	mov	r7, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b10a      	cbz	r2, 80088de <_printf_common+0x26>
 80088da:	3301      	adds	r3, #1
 80088dc:	6033      	str	r3, [r6, #0]
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	0699      	lsls	r1, r3, #26
 80088e2:	bf42      	ittt	mi
 80088e4:	6833      	ldrmi	r3, [r6, #0]
 80088e6:	3302      	addmi	r3, #2
 80088e8:	6033      	strmi	r3, [r6, #0]
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	f015 0506 	ands.w	r5, r5, #6
 80088f0:	d106      	bne.n	8008900 <_printf_common+0x48>
 80088f2:	f104 0a19 	add.w	sl, r4, #25
 80088f6:	68e3      	ldr	r3, [r4, #12]
 80088f8:	6832      	ldr	r2, [r6, #0]
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	42ab      	cmp	r3, r5
 80088fe:	dc26      	bgt.n	800894e <_printf_common+0x96>
 8008900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008904:	1e13      	subs	r3, r2, #0
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	bf18      	it	ne
 800890a:	2301      	movne	r3, #1
 800890c:	0692      	lsls	r2, r2, #26
 800890e:	d42b      	bmi.n	8008968 <_printf_common+0xb0>
 8008910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008914:	4649      	mov	r1, r9
 8008916:	4638      	mov	r0, r7
 8008918:	47c0      	blx	r8
 800891a:	3001      	adds	r0, #1
 800891c:	d01e      	beq.n	800895c <_printf_common+0xa4>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	68e5      	ldr	r5, [r4, #12]
 8008922:	6832      	ldr	r2, [r6, #0]
 8008924:	f003 0306 	and.w	r3, r3, #6
 8008928:	2b04      	cmp	r3, #4
 800892a:	bf08      	it	eq
 800892c:	1aad      	subeq	r5, r5, r2
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	6922      	ldr	r2, [r4, #16]
 8008932:	bf0c      	ite	eq
 8008934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008938:	2500      	movne	r5, #0
 800893a:	4293      	cmp	r3, r2
 800893c:	bfc4      	itt	gt
 800893e:	1a9b      	subgt	r3, r3, r2
 8008940:	18ed      	addgt	r5, r5, r3
 8008942:	2600      	movs	r6, #0
 8008944:	341a      	adds	r4, #26
 8008946:	42b5      	cmp	r5, r6
 8008948:	d11a      	bne.n	8008980 <_printf_common+0xc8>
 800894a:	2000      	movs	r0, #0
 800894c:	e008      	b.n	8008960 <_printf_common+0xa8>
 800894e:	2301      	movs	r3, #1
 8008950:	4652      	mov	r2, sl
 8008952:	4649      	mov	r1, r9
 8008954:	4638      	mov	r0, r7
 8008956:	47c0      	blx	r8
 8008958:	3001      	adds	r0, #1
 800895a:	d103      	bne.n	8008964 <_printf_common+0xac>
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008964:	3501      	adds	r5, #1
 8008966:	e7c6      	b.n	80088f6 <_printf_common+0x3e>
 8008968:	18e1      	adds	r1, r4, r3
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	2030      	movs	r0, #48	; 0x30
 800896e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008972:	4422      	add	r2, r4
 8008974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800897c:	3302      	adds	r3, #2
 800897e:	e7c7      	b.n	8008910 <_printf_common+0x58>
 8008980:	2301      	movs	r3, #1
 8008982:	4622      	mov	r2, r4
 8008984:	4649      	mov	r1, r9
 8008986:	4638      	mov	r0, r7
 8008988:	47c0      	blx	r8
 800898a:	3001      	adds	r0, #1
 800898c:	d0e6      	beq.n	800895c <_printf_common+0xa4>
 800898e:	3601      	adds	r6, #1
 8008990:	e7d9      	b.n	8008946 <_printf_common+0x8e>
	...

08008994 <_printf_i>:
 8008994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	7e0f      	ldrb	r7, [r1, #24]
 800899a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800899c:	2f78      	cmp	r7, #120	; 0x78
 800899e:	4691      	mov	r9, r2
 80089a0:	4680      	mov	r8, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	469a      	mov	sl, r3
 80089a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089aa:	d807      	bhi.n	80089bc <_printf_i+0x28>
 80089ac:	2f62      	cmp	r7, #98	; 0x62
 80089ae:	d80a      	bhi.n	80089c6 <_printf_i+0x32>
 80089b0:	2f00      	cmp	r7, #0
 80089b2:	f000 80d8 	beq.w	8008b66 <_printf_i+0x1d2>
 80089b6:	2f58      	cmp	r7, #88	; 0x58
 80089b8:	f000 80a3 	beq.w	8008b02 <_printf_i+0x16e>
 80089bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089c4:	e03a      	b.n	8008a3c <_printf_i+0xa8>
 80089c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ca:	2b15      	cmp	r3, #21
 80089cc:	d8f6      	bhi.n	80089bc <_printf_i+0x28>
 80089ce:	a101      	add	r1, pc, #4	; (adr r1, 80089d4 <_printf_i+0x40>)
 80089d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089d4:	08008a2d 	.word	0x08008a2d
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	080089bd 	.word	0x080089bd
 80089e0:	080089bd 	.word	0x080089bd
 80089e4:	080089bd 	.word	0x080089bd
 80089e8:	080089bd 	.word	0x080089bd
 80089ec:	08008a41 	.word	0x08008a41
 80089f0:	080089bd 	.word	0x080089bd
 80089f4:	080089bd 	.word	0x080089bd
 80089f8:	080089bd 	.word	0x080089bd
 80089fc:	080089bd 	.word	0x080089bd
 8008a00:	08008b4d 	.word	0x08008b4d
 8008a04:	08008a71 	.word	0x08008a71
 8008a08:	08008b2f 	.word	0x08008b2f
 8008a0c:	080089bd 	.word	0x080089bd
 8008a10:	080089bd 	.word	0x080089bd
 8008a14:	08008b6f 	.word	0x08008b6f
 8008a18:	080089bd 	.word	0x080089bd
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	080089bd 	.word	0x080089bd
 8008a24:	080089bd 	.word	0x080089bd
 8008a28:	08008b37 	.word	0x08008b37
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	602a      	str	r2, [r5, #0]
 8008a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e0a3      	b.n	8008b88 <_printf_i+0x1f4>
 8008a40:	6820      	ldr	r0, [r4, #0]
 8008a42:	6829      	ldr	r1, [r5, #0]
 8008a44:	0606      	lsls	r6, r0, #24
 8008a46:	f101 0304 	add.w	r3, r1, #4
 8008a4a:	d50a      	bpl.n	8008a62 <_printf_i+0xce>
 8008a4c:	680e      	ldr	r6, [r1, #0]
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	da03      	bge.n	8008a5c <_printf_i+0xc8>
 8008a54:	232d      	movs	r3, #45	; 0x2d
 8008a56:	4276      	negs	r6, r6
 8008a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a5c:	485e      	ldr	r0, [pc, #376]	; (8008bd8 <_printf_i+0x244>)
 8008a5e:	230a      	movs	r3, #10
 8008a60:	e019      	b.n	8008a96 <_printf_i+0x102>
 8008a62:	680e      	ldr	r6, [r1, #0]
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a6a:	bf18      	it	ne
 8008a6c:	b236      	sxthne	r6, r6
 8008a6e:	e7ef      	b.n	8008a50 <_printf_i+0xbc>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	6820      	ldr	r0, [r4, #0]
 8008a74:	1d19      	adds	r1, r3, #4
 8008a76:	6029      	str	r1, [r5, #0]
 8008a78:	0601      	lsls	r1, r0, #24
 8008a7a:	d501      	bpl.n	8008a80 <_printf_i+0xec>
 8008a7c:	681e      	ldr	r6, [r3, #0]
 8008a7e:	e002      	b.n	8008a86 <_printf_i+0xf2>
 8008a80:	0646      	lsls	r6, r0, #25
 8008a82:	d5fb      	bpl.n	8008a7c <_printf_i+0xe8>
 8008a84:	881e      	ldrh	r6, [r3, #0]
 8008a86:	4854      	ldr	r0, [pc, #336]	; (8008bd8 <_printf_i+0x244>)
 8008a88:	2f6f      	cmp	r7, #111	; 0x6f
 8008a8a:	bf0c      	ite	eq
 8008a8c:	2308      	moveq	r3, #8
 8008a8e:	230a      	movne	r3, #10
 8008a90:	2100      	movs	r1, #0
 8008a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a96:	6865      	ldr	r5, [r4, #4]
 8008a98:	60a5      	str	r5, [r4, #8]
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	bfa2      	ittt	ge
 8008a9e:	6821      	ldrge	r1, [r4, #0]
 8008aa0:	f021 0104 	bicge.w	r1, r1, #4
 8008aa4:	6021      	strge	r1, [r4, #0]
 8008aa6:	b90e      	cbnz	r6, 8008aac <_printf_i+0x118>
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	d04d      	beq.n	8008b48 <_printf_i+0x1b4>
 8008aac:	4615      	mov	r5, r2
 8008aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ab6:	5dc7      	ldrb	r7, [r0, r7]
 8008ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008abc:	4637      	mov	r7, r6
 8008abe:	42bb      	cmp	r3, r7
 8008ac0:	460e      	mov	r6, r1
 8008ac2:	d9f4      	bls.n	8008aae <_printf_i+0x11a>
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d10b      	bne.n	8008ae0 <_printf_i+0x14c>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	07de      	lsls	r6, r3, #31
 8008acc:	d508      	bpl.n	8008ae0 <_printf_i+0x14c>
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	6861      	ldr	r1, [r4, #4]
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	bfde      	ittt	le
 8008ad6:	2330      	movle	r3, #48	; 0x30
 8008ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ae0:	1b52      	subs	r2, r2, r5
 8008ae2:	6122      	str	r2, [r4, #16]
 8008ae4:	f8cd a000 	str.w	sl, [sp]
 8008ae8:	464b      	mov	r3, r9
 8008aea:	aa03      	add	r2, sp, #12
 8008aec:	4621      	mov	r1, r4
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7ff fee2 	bl	80088b8 <_printf_common>
 8008af4:	3001      	adds	r0, #1
 8008af6:	d14c      	bne.n	8008b92 <_printf_i+0x1fe>
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	b004      	add	sp, #16
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	4835      	ldr	r0, [pc, #212]	; (8008bd8 <_printf_i+0x244>)
 8008b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b08:	6829      	ldr	r1, [r5, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b10:	6029      	str	r1, [r5, #0]
 8008b12:	061d      	lsls	r5, r3, #24
 8008b14:	d514      	bpl.n	8008b40 <_printf_i+0x1ac>
 8008b16:	07df      	lsls	r7, r3, #31
 8008b18:	bf44      	itt	mi
 8008b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b1e:	6023      	strmi	r3, [r4, #0]
 8008b20:	b91e      	cbnz	r6, 8008b2a <_printf_i+0x196>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	f023 0320 	bic.w	r3, r3, #32
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	2310      	movs	r3, #16
 8008b2c:	e7b0      	b.n	8008a90 <_printf_i+0xfc>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	f043 0320 	orr.w	r3, r3, #32
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	2378      	movs	r3, #120	; 0x78
 8008b38:	4828      	ldr	r0, [pc, #160]	; (8008bdc <_printf_i+0x248>)
 8008b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b3e:	e7e3      	b.n	8008b08 <_printf_i+0x174>
 8008b40:	0659      	lsls	r1, r3, #25
 8008b42:	bf48      	it	mi
 8008b44:	b2b6      	uxthmi	r6, r6
 8008b46:	e7e6      	b.n	8008b16 <_printf_i+0x182>
 8008b48:	4615      	mov	r5, r2
 8008b4a:	e7bb      	b.n	8008ac4 <_printf_i+0x130>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	6826      	ldr	r6, [r4, #0]
 8008b50:	6961      	ldr	r1, [r4, #20]
 8008b52:	1d18      	adds	r0, r3, #4
 8008b54:	6028      	str	r0, [r5, #0]
 8008b56:	0635      	lsls	r5, r6, #24
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0x1cc>
 8008b5c:	6019      	str	r1, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0x1d2>
 8008b60:	0670      	lsls	r0, r6, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0x1c8>
 8008b64:	8019      	strh	r1, [r3, #0]
 8008b66:	2300      	movs	r3, #0
 8008b68:	6123      	str	r3, [r4, #16]
 8008b6a:	4615      	mov	r5, r2
 8008b6c:	e7ba      	b.n	8008ae4 <_printf_i+0x150>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	1d1a      	adds	r2, r3, #4
 8008b72:	602a      	str	r2, [r5, #0]
 8008b74:	681d      	ldr	r5, [r3, #0]
 8008b76:	6862      	ldr	r2, [r4, #4]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f7f7 fb40 	bl	8000200 <memchr>
 8008b80:	b108      	cbz	r0, 8008b86 <_printf_i+0x1f2>
 8008b82:	1b40      	subs	r0, r0, r5
 8008b84:	6060      	str	r0, [r4, #4]
 8008b86:	6863      	ldr	r3, [r4, #4]
 8008b88:	6123      	str	r3, [r4, #16]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b90:	e7a8      	b.n	8008ae4 <_printf_i+0x150>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4649      	mov	r1, r9
 8008b98:	4640      	mov	r0, r8
 8008b9a:	47d0      	blx	sl
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d0ab      	beq.n	8008af8 <_printf_i+0x164>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	079b      	lsls	r3, r3, #30
 8008ba4:	d413      	bmi.n	8008bce <_printf_i+0x23a>
 8008ba6:	68e0      	ldr	r0, [r4, #12]
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	4298      	cmp	r0, r3
 8008bac:	bfb8      	it	lt
 8008bae:	4618      	movlt	r0, r3
 8008bb0:	e7a4      	b.n	8008afc <_printf_i+0x168>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4640      	mov	r0, r8
 8008bba:	47d0      	blx	sl
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d09b      	beq.n	8008af8 <_printf_i+0x164>
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	9903      	ldr	r1, [sp, #12]
 8008bc6:	1a5b      	subs	r3, r3, r1
 8008bc8:	42ab      	cmp	r3, r5
 8008bca:	dcf2      	bgt.n	8008bb2 <_printf_i+0x21e>
 8008bcc:	e7eb      	b.n	8008ba6 <_printf_i+0x212>
 8008bce:	2500      	movs	r5, #0
 8008bd0:	f104 0619 	add.w	r6, r4, #25
 8008bd4:	e7f5      	b.n	8008bc2 <_printf_i+0x22e>
 8008bd6:	bf00      	nop
 8008bd8:	0800cec2 	.word	0x0800cec2
 8008bdc:	0800ced3 	.word	0x0800ced3

08008be0 <_scanf_float>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	b087      	sub	sp, #28
 8008be6:	4617      	mov	r7, r2
 8008be8:	9303      	str	r3, [sp, #12]
 8008bea:	688b      	ldr	r3, [r1, #8]
 8008bec:	1e5a      	subs	r2, r3, #1
 8008bee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008bf2:	bf83      	ittte	hi
 8008bf4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008bf8:	195b      	addhi	r3, r3, r5
 8008bfa:	9302      	strhi	r3, [sp, #8]
 8008bfc:	2300      	movls	r3, #0
 8008bfe:	bf86      	itte	hi
 8008c00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c04:	608b      	strhi	r3, [r1, #8]
 8008c06:	9302      	strls	r3, [sp, #8]
 8008c08:	680b      	ldr	r3, [r1, #0]
 8008c0a:	468b      	mov	fp, r1
 8008c0c:	2500      	movs	r5, #0
 8008c0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c12:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	465e      	mov	r6, fp
 8008c20:	46aa      	mov	sl, r5
 8008c22:	46a9      	mov	r9, r5
 8008c24:	9501      	str	r5, [sp, #4]
 8008c26:	68a2      	ldr	r2, [r4, #8]
 8008c28:	b152      	cbz	r2, 8008c40 <_scanf_float+0x60>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b4e      	cmp	r3, #78	; 0x4e
 8008c30:	d864      	bhi.n	8008cfc <_scanf_float+0x11c>
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d83c      	bhi.n	8008cb0 <_scanf_float+0xd0>
 8008c36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c3a:	b2c8      	uxtb	r0, r1
 8008c3c:	280e      	cmp	r0, #14
 8008c3e:	d93a      	bls.n	8008cb6 <_scanf_float+0xd6>
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	d003      	beq.n	8008c4e <_scanf_float+0x6e>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c52:	f1ba 0f01 	cmp.w	sl, #1
 8008c56:	f200 8113 	bhi.w	8008e80 <_scanf_float+0x2a0>
 8008c5a:	455e      	cmp	r6, fp
 8008c5c:	f200 8105 	bhi.w	8008e6a <_scanf_float+0x28a>
 8008c60:	2501      	movs	r5, #1
 8008c62:	4628      	mov	r0, r5
 8008c64:	b007      	add	sp, #28
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c6e:	2a0d      	cmp	r2, #13
 8008c70:	d8e6      	bhi.n	8008c40 <_scanf_float+0x60>
 8008c72:	a101      	add	r1, pc, #4	; (adr r1, 8008c78 <_scanf_float+0x98>)
 8008c74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c78:	08008db7 	.word	0x08008db7
 8008c7c:	08008c41 	.word	0x08008c41
 8008c80:	08008c41 	.word	0x08008c41
 8008c84:	08008c41 	.word	0x08008c41
 8008c88:	08008e17 	.word	0x08008e17
 8008c8c:	08008def 	.word	0x08008def
 8008c90:	08008c41 	.word	0x08008c41
 8008c94:	08008c41 	.word	0x08008c41
 8008c98:	08008dc5 	.word	0x08008dc5
 8008c9c:	08008c41 	.word	0x08008c41
 8008ca0:	08008c41 	.word	0x08008c41
 8008ca4:	08008c41 	.word	0x08008c41
 8008ca8:	08008c41 	.word	0x08008c41
 8008cac:	08008d7d 	.word	0x08008d7d
 8008cb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008cb4:	e7db      	b.n	8008c6e <_scanf_float+0x8e>
 8008cb6:	290e      	cmp	r1, #14
 8008cb8:	d8c2      	bhi.n	8008c40 <_scanf_float+0x60>
 8008cba:	a001      	add	r0, pc, #4	; (adr r0, 8008cc0 <_scanf_float+0xe0>)
 8008cbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008cc0:	08008d6f 	.word	0x08008d6f
 8008cc4:	08008c41 	.word	0x08008c41
 8008cc8:	08008d6f 	.word	0x08008d6f
 8008ccc:	08008e03 	.word	0x08008e03
 8008cd0:	08008c41 	.word	0x08008c41
 8008cd4:	08008d1d 	.word	0x08008d1d
 8008cd8:	08008d59 	.word	0x08008d59
 8008cdc:	08008d59 	.word	0x08008d59
 8008ce0:	08008d59 	.word	0x08008d59
 8008ce4:	08008d59 	.word	0x08008d59
 8008ce8:	08008d59 	.word	0x08008d59
 8008cec:	08008d59 	.word	0x08008d59
 8008cf0:	08008d59 	.word	0x08008d59
 8008cf4:	08008d59 	.word	0x08008d59
 8008cf8:	08008d59 	.word	0x08008d59
 8008cfc:	2b6e      	cmp	r3, #110	; 0x6e
 8008cfe:	d809      	bhi.n	8008d14 <_scanf_float+0x134>
 8008d00:	2b60      	cmp	r3, #96	; 0x60
 8008d02:	d8b2      	bhi.n	8008c6a <_scanf_float+0x8a>
 8008d04:	2b54      	cmp	r3, #84	; 0x54
 8008d06:	d077      	beq.n	8008df8 <_scanf_float+0x218>
 8008d08:	2b59      	cmp	r3, #89	; 0x59
 8008d0a:	d199      	bne.n	8008c40 <_scanf_float+0x60>
 8008d0c:	2d07      	cmp	r5, #7
 8008d0e:	d197      	bne.n	8008c40 <_scanf_float+0x60>
 8008d10:	2508      	movs	r5, #8
 8008d12:	e029      	b.n	8008d68 <_scanf_float+0x188>
 8008d14:	2b74      	cmp	r3, #116	; 0x74
 8008d16:	d06f      	beq.n	8008df8 <_scanf_float+0x218>
 8008d18:	2b79      	cmp	r3, #121	; 0x79
 8008d1a:	e7f6      	b.n	8008d0a <_scanf_float+0x12a>
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	05c8      	lsls	r0, r1, #23
 8008d20:	d51a      	bpl.n	8008d58 <_scanf_float+0x178>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d28:	6021      	str	r1, [r4, #0]
 8008d2a:	f109 0901 	add.w	r9, r9, #1
 8008d2e:	b11b      	cbz	r3, 8008d38 <_scanf_float+0x158>
 8008d30:	3b01      	subs	r3, #1
 8008d32:	3201      	adds	r2, #1
 8008d34:	9302      	str	r3, [sp, #8]
 8008d36:	60a2      	str	r2, [r4, #8]
 8008d38:	68a3      	ldr	r3, [r4, #8]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	60a3      	str	r3, [r4, #8]
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	3301      	adds	r3, #1
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	f340 8084 	ble.w	8008e58 <_scanf_float+0x278>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	603b      	str	r3, [r7, #0]
 8008d56:	e766      	b.n	8008c26 <_scanf_float+0x46>
 8008d58:	eb1a 0f05 	cmn.w	sl, r5
 8008d5c:	f47f af70 	bne.w	8008c40 <_scanf_float+0x60>
 8008d60:	6822      	ldr	r2, [r4, #0]
 8008d62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d66:	6022      	str	r2, [r4, #0]
 8008d68:	f806 3b01 	strb.w	r3, [r6], #1
 8008d6c:	e7e4      	b.n	8008d38 <_scanf_float+0x158>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	0610      	lsls	r0, r2, #24
 8008d72:	f57f af65 	bpl.w	8008c40 <_scanf_float+0x60>
 8008d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d7a:	e7f4      	b.n	8008d66 <_scanf_float+0x186>
 8008d7c:	f1ba 0f00 	cmp.w	sl, #0
 8008d80:	d10e      	bne.n	8008da0 <_scanf_float+0x1c0>
 8008d82:	f1b9 0f00 	cmp.w	r9, #0
 8008d86:	d10e      	bne.n	8008da6 <_scanf_float+0x1c6>
 8008d88:	6822      	ldr	r2, [r4, #0]
 8008d8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d92:	d108      	bne.n	8008da6 <_scanf_float+0x1c6>
 8008d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d98:	6022      	str	r2, [r4, #0]
 8008d9a:	f04f 0a01 	mov.w	sl, #1
 8008d9e:	e7e3      	b.n	8008d68 <_scanf_float+0x188>
 8008da0:	f1ba 0f02 	cmp.w	sl, #2
 8008da4:	d055      	beq.n	8008e52 <_scanf_float+0x272>
 8008da6:	2d01      	cmp	r5, #1
 8008da8:	d002      	beq.n	8008db0 <_scanf_float+0x1d0>
 8008daa:	2d04      	cmp	r5, #4
 8008dac:	f47f af48 	bne.w	8008c40 <_scanf_float+0x60>
 8008db0:	3501      	adds	r5, #1
 8008db2:	b2ed      	uxtb	r5, r5
 8008db4:	e7d8      	b.n	8008d68 <_scanf_float+0x188>
 8008db6:	f1ba 0f01 	cmp.w	sl, #1
 8008dba:	f47f af41 	bne.w	8008c40 <_scanf_float+0x60>
 8008dbe:	f04f 0a02 	mov.w	sl, #2
 8008dc2:	e7d1      	b.n	8008d68 <_scanf_float+0x188>
 8008dc4:	b97d      	cbnz	r5, 8008de6 <_scanf_float+0x206>
 8008dc6:	f1b9 0f00 	cmp.w	r9, #0
 8008dca:	f47f af3c 	bne.w	8008c46 <_scanf_float+0x66>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008dd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dd8:	f47f af39 	bne.w	8008c4e <_scanf_float+0x6e>
 8008ddc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008de0:	6022      	str	r2, [r4, #0]
 8008de2:	2501      	movs	r5, #1
 8008de4:	e7c0      	b.n	8008d68 <_scanf_float+0x188>
 8008de6:	2d03      	cmp	r5, #3
 8008de8:	d0e2      	beq.n	8008db0 <_scanf_float+0x1d0>
 8008dea:	2d05      	cmp	r5, #5
 8008dec:	e7de      	b.n	8008dac <_scanf_float+0x1cc>
 8008dee:	2d02      	cmp	r5, #2
 8008df0:	f47f af26 	bne.w	8008c40 <_scanf_float+0x60>
 8008df4:	2503      	movs	r5, #3
 8008df6:	e7b7      	b.n	8008d68 <_scanf_float+0x188>
 8008df8:	2d06      	cmp	r5, #6
 8008dfa:	f47f af21 	bne.w	8008c40 <_scanf_float+0x60>
 8008dfe:	2507      	movs	r5, #7
 8008e00:	e7b2      	b.n	8008d68 <_scanf_float+0x188>
 8008e02:	6822      	ldr	r2, [r4, #0]
 8008e04:	0591      	lsls	r1, r2, #22
 8008e06:	f57f af1b 	bpl.w	8008c40 <_scanf_float+0x60>
 8008e0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e0e:	6022      	str	r2, [r4, #0]
 8008e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e14:	e7a8      	b.n	8008d68 <_scanf_float+0x188>
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e20:	d006      	beq.n	8008e30 <_scanf_float+0x250>
 8008e22:	0550      	lsls	r0, r2, #21
 8008e24:	f57f af0c 	bpl.w	8008c40 <_scanf_float+0x60>
 8008e28:	f1b9 0f00 	cmp.w	r9, #0
 8008e2c:	f43f af0f 	beq.w	8008c4e <_scanf_float+0x6e>
 8008e30:	0591      	lsls	r1, r2, #22
 8008e32:	bf58      	it	pl
 8008e34:	9901      	ldrpl	r1, [sp, #4]
 8008e36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e3a:	bf58      	it	pl
 8008e3c:	eba9 0101 	subpl.w	r1, r9, r1
 8008e40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e44:	bf58      	it	pl
 8008e46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	f04f 0900 	mov.w	r9, #0
 8008e50:	e78a      	b.n	8008d68 <_scanf_float+0x188>
 8008e52:	f04f 0a03 	mov.w	sl, #3
 8008e56:	e787      	b.n	8008d68 <_scanf_float+0x188>
 8008e58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4798      	blx	r3
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f43f aedf 	beq.w	8008c26 <_scanf_float+0x46>
 8008e68:	e6ea      	b.n	8008c40 <_scanf_float+0x60>
 8008e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e72:	463a      	mov	r2, r7
 8008e74:	4640      	mov	r0, r8
 8008e76:	4798      	blx	r3
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6123      	str	r3, [r4, #16]
 8008e7e:	e6ec      	b.n	8008c5a <_scanf_float+0x7a>
 8008e80:	1e6b      	subs	r3, r5, #1
 8008e82:	2b06      	cmp	r3, #6
 8008e84:	d825      	bhi.n	8008ed2 <_scanf_float+0x2f2>
 8008e86:	2d02      	cmp	r5, #2
 8008e88:	d836      	bhi.n	8008ef8 <_scanf_float+0x318>
 8008e8a:	455e      	cmp	r6, fp
 8008e8c:	f67f aee8 	bls.w	8008c60 <_scanf_float+0x80>
 8008e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e98:	463a      	mov	r2, r7
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4798      	blx	r3
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	6123      	str	r3, [r4, #16]
 8008ea4:	e7f1      	b.n	8008e8a <_scanf_float+0x2aa>
 8008ea6:	9802      	ldr	r0, [sp, #8]
 8008ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008eb0:	9002      	str	r0, [sp, #8]
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4798      	blx	r3
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ec2:	fa5f fa8a 	uxtb.w	sl, sl
 8008ec6:	f1ba 0f02 	cmp.w	sl, #2
 8008eca:	d1ec      	bne.n	8008ea6 <_scanf_float+0x2c6>
 8008ecc:	3d03      	subs	r5, #3
 8008ece:	b2ed      	uxtb	r5, r5
 8008ed0:	1b76      	subs	r6, r6, r5
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	05da      	lsls	r2, r3, #23
 8008ed6:	d52f      	bpl.n	8008f38 <_scanf_float+0x358>
 8008ed8:	055b      	lsls	r3, r3, #21
 8008eda:	d510      	bpl.n	8008efe <_scanf_float+0x31e>
 8008edc:	455e      	cmp	r6, fp
 8008ede:	f67f aebf 	bls.w	8008c60 <_scanf_float+0x80>
 8008ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eea:	463a      	mov	r2, r7
 8008eec:	4640      	mov	r0, r8
 8008eee:	4798      	blx	r3
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	6123      	str	r3, [r4, #16]
 8008ef6:	e7f1      	b.n	8008edc <_scanf_float+0x2fc>
 8008ef8:	46aa      	mov	sl, r5
 8008efa:	9602      	str	r6, [sp, #8]
 8008efc:	e7df      	b.n	8008ebe <_scanf_float+0x2de>
 8008efe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	2965      	cmp	r1, #101	; 0x65
 8008f06:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	d00c      	beq.n	8008f2c <_scanf_float+0x34c>
 8008f12:	2945      	cmp	r1, #69	; 0x45
 8008f14:	d00a      	beq.n	8008f2c <_scanf_float+0x34c>
 8008f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f1a:	463a      	mov	r2, r7
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4798      	blx	r3
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	1eb5      	subs	r5, r6, #2
 8008f2a:	6123      	str	r3, [r4, #16]
 8008f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f30:	463a      	mov	r2, r7
 8008f32:	4640      	mov	r0, r8
 8008f34:	4798      	blx	r3
 8008f36:	462e      	mov	r6, r5
 8008f38:	6825      	ldr	r5, [r4, #0]
 8008f3a:	f015 0510 	ands.w	r5, r5, #16
 8008f3e:	d159      	bne.n	8008ff4 <_scanf_float+0x414>
 8008f40:	7035      	strb	r5, [r6, #0]
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4c:	d11b      	bne.n	8008f86 <_scanf_float+0x3a6>
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	454b      	cmp	r3, r9
 8008f52:	eba3 0209 	sub.w	r2, r3, r9
 8008f56:	d123      	bne.n	8008fa0 <_scanf_float+0x3c0>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	f000 ff3d 	bl	8009ddc <_strtod_r>
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	f012 0f02 	tst.w	r2, #2
 8008f6a:	ec57 6b10 	vmov	r6, r7, d0
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	d021      	beq.n	8008fb6 <_scanf_float+0x3d6>
 8008f72:	9903      	ldr	r1, [sp, #12]
 8008f74:	1d1a      	adds	r2, r3, #4
 8008f76:	600a      	str	r2, [r1, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	e9c3 6700 	strd	r6, r7, [r3]
 8008f7e:	68e3      	ldr	r3, [r4, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	60e3      	str	r3, [r4, #12]
 8008f84:	e66d      	b.n	8008c62 <_scanf_float+0x82>
 8008f86:	9b04      	ldr	r3, [sp, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0e5      	beq.n	8008f58 <_scanf_float+0x378>
 8008f8c:	9905      	ldr	r1, [sp, #20]
 8008f8e:	230a      	movs	r3, #10
 8008f90:	462a      	mov	r2, r5
 8008f92:	3101      	adds	r1, #1
 8008f94:	4640      	mov	r0, r8
 8008f96:	f000 ffa9 	bl	8009eec <_strtol_r>
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	9e05      	ldr	r6, [sp, #20]
 8008f9e:	1ac2      	subs	r2, r0, r3
 8008fa0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008fa4:	429e      	cmp	r6, r3
 8008fa6:	bf28      	it	cs
 8008fa8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008fac:	4912      	ldr	r1, [pc, #72]	; (8008ff8 <_scanf_float+0x418>)
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f8d0 	bl	8009154 <siprintf>
 8008fb4:	e7d0      	b.n	8008f58 <_scanf_float+0x378>
 8008fb6:	9903      	ldr	r1, [sp, #12]
 8008fb8:	f012 0f04 	tst.w	r2, #4
 8008fbc:	f103 0204 	add.w	r2, r3, #4
 8008fc0:	600a      	str	r2, [r1, #0]
 8008fc2:	d1d9      	bne.n	8008f78 <_scanf_float+0x398>
 8008fc4:	f8d3 8000 	ldr.w	r8, [r3]
 8008fc8:	ee10 2a10 	vmov	r2, s0
 8008fcc:	ee10 0a10 	vmov	r0, s0
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 fdba 	bl	8000b4c <__aeabi_dcmpun>
 8008fd8:	b128      	cbz	r0, 8008fe6 <_scanf_float+0x406>
 8008fda:	4808      	ldr	r0, [pc, #32]	; (8008ffc <_scanf_float+0x41c>)
 8008fdc:	f000 f8b4 	bl	8009148 <nanf>
 8008fe0:	ed88 0a00 	vstr	s0, [r8]
 8008fe4:	e7cb      	b.n	8008f7e <_scanf_float+0x39e>
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	f7f7 fe0d 	bl	8000c08 <__aeabi_d2f>
 8008fee:	f8c8 0000 	str.w	r0, [r8]
 8008ff2:	e7c4      	b.n	8008f7e <_scanf_float+0x39e>
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	e634      	b.n	8008c62 <_scanf_float+0x82>
 8008ff8:	0800cee4 	.word	0x0800cee4
 8008ffc:	0800d358 	.word	0x0800d358

08009000 <iprintf>:
 8009000:	b40f      	push	{r0, r1, r2, r3}
 8009002:	4b0a      	ldr	r3, [pc, #40]	; (800902c <iprintf+0x2c>)
 8009004:	b513      	push	{r0, r1, r4, lr}
 8009006:	681c      	ldr	r4, [r3, #0]
 8009008:	b124      	cbz	r4, 8009014 <iprintf+0x14>
 800900a:	69a3      	ldr	r3, [r4, #24]
 800900c:	b913      	cbnz	r3, 8009014 <iprintf+0x14>
 800900e:	4620      	mov	r0, r4
 8009010:	f001 ffc2 	bl	800af98 <__sinit>
 8009014:	ab05      	add	r3, sp, #20
 8009016:	9a04      	ldr	r2, [sp, #16]
 8009018:	68a1      	ldr	r1, [r4, #8]
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	4620      	mov	r0, r4
 800901e:	f003 fb99 	bl	800c754 <_vfiprintf_r>
 8009022:	b002      	add	sp, #8
 8009024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009028:	b004      	add	sp, #16
 800902a:	4770      	bx	lr
 800902c:	20000010 	.word	0x20000010

08009030 <putchar>:
 8009030:	4b09      	ldr	r3, [pc, #36]	; (8009058 <putchar+0x28>)
 8009032:	b513      	push	{r0, r1, r4, lr}
 8009034:	681c      	ldr	r4, [r3, #0]
 8009036:	4601      	mov	r1, r0
 8009038:	b134      	cbz	r4, 8009048 <putchar+0x18>
 800903a:	69a3      	ldr	r3, [r4, #24]
 800903c:	b923      	cbnz	r3, 8009048 <putchar+0x18>
 800903e:	9001      	str	r0, [sp, #4]
 8009040:	4620      	mov	r0, r4
 8009042:	f001 ffa9 	bl	800af98 <__sinit>
 8009046:	9901      	ldr	r1, [sp, #4]
 8009048:	68a2      	ldr	r2, [r4, #8]
 800904a:	4620      	mov	r0, r4
 800904c:	b002      	add	sp, #8
 800904e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009052:	f003 bcaf 	b.w	800c9b4 <_putc_r>
 8009056:	bf00      	nop
 8009058:	20000010 	.word	0x20000010

0800905c <_puts_r>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	460e      	mov	r6, r1
 8009060:	4605      	mov	r5, r0
 8009062:	b118      	cbz	r0, 800906c <_puts_r+0x10>
 8009064:	6983      	ldr	r3, [r0, #24]
 8009066:	b90b      	cbnz	r3, 800906c <_puts_r+0x10>
 8009068:	f001 ff96 	bl	800af98 <__sinit>
 800906c:	69ab      	ldr	r3, [r5, #24]
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	b913      	cbnz	r3, 8009078 <_puts_r+0x1c>
 8009072:	4628      	mov	r0, r5
 8009074:	f001 ff90 	bl	800af98 <__sinit>
 8009078:	4b2c      	ldr	r3, [pc, #176]	; (800912c <_puts_r+0xd0>)
 800907a:	429c      	cmp	r4, r3
 800907c:	d120      	bne.n	80090c0 <_puts_r+0x64>
 800907e:	686c      	ldr	r4, [r5, #4]
 8009080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009082:	07db      	lsls	r3, r3, #31
 8009084:	d405      	bmi.n	8009092 <_puts_r+0x36>
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	0598      	lsls	r0, r3, #22
 800908a:	d402      	bmi.n	8009092 <_puts_r+0x36>
 800908c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800908e:	f002 fb94 	bl	800b7ba <__retarget_lock_acquire_recursive>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	0719      	lsls	r1, r3, #28
 8009096:	d51d      	bpl.n	80090d4 <_puts_r+0x78>
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	b1db      	cbz	r3, 80090d4 <_puts_r+0x78>
 800909c:	3e01      	subs	r6, #1
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090a4:	3b01      	subs	r3, #1
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	bb39      	cbnz	r1, 80090fa <_puts_r+0x9e>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da38      	bge.n	8009120 <_puts_r+0xc4>
 80090ae:	4622      	mov	r2, r4
 80090b0:	210a      	movs	r1, #10
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 ff1c 	bl	8009ef0 <__swbuf_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d011      	beq.n	80090e0 <_puts_r+0x84>
 80090bc:	250a      	movs	r5, #10
 80090be:	e011      	b.n	80090e4 <_puts_r+0x88>
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <_puts_r+0xd4>)
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d101      	bne.n	80090ca <_puts_r+0x6e>
 80090c6:	68ac      	ldr	r4, [r5, #8]
 80090c8:	e7da      	b.n	8009080 <_puts_r+0x24>
 80090ca:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <_puts_r+0xd8>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	bf08      	it	eq
 80090d0:	68ec      	ldreq	r4, [r5, #12]
 80090d2:	e7d5      	b.n	8009080 <_puts_r+0x24>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 ff5c 	bl	8009f94 <__swsetup_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d0dd      	beq.n	800909c <_puts_r+0x40>
 80090e0:	f04f 35ff 	mov.w	r5, #4294967295
 80090e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090e6:	07da      	lsls	r2, r3, #31
 80090e8:	d405      	bmi.n	80090f6 <_puts_r+0x9a>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	059b      	lsls	r3, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_puts_r+0x9a>
 80090f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090f2:	f002 fb63 	bl	800b7bc <__retarget_lock_release_recursive>
 80090f6:	4628      	mov	r0, r5
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	da04      	bge.n	8009108 <_puts_r+0xac>
 80090fe:	69a2      	ldr	r2, [r4, #24]
 8009100:	429a      	cmp	r2, r3
 8009102:	dc06      	bgt.n	8009112 <_puts_r+0xb6>
 8009104:	290a      	cmp	r1, #10
 8009106:	d004      	beq.n	8009112 <_puts_r+0xb6>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	6022      	str	r2, [r4, #0]
 800910e:	7019      	strb	r1, [r3, #0]
 8009110:	e7c5      	b.n	800909e <_puts_r+0x42>
 8009112:	4622      	mov	r2, r4
 8009114:	4628      	mov	r0, r5
 8009116:	f000 feeb 	bl	8009ef0 <__swbuf_r>
 800911a:	3001      	adds	r0, #1
 800911c:	d1bf      	bne.n	800909e <_puts_r+0x42>
 800911e:	e7df      	b.n	80090e0 <_puts_r+0x84>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	250a      	movs	r5, #10
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	701d      	strb	r5, [r3, #0]
 800912a:	e7db      	b.n	80090e4 <_puts_r+0x88>
 800912c:	0800d0f4 	.word	0x0800d0f4
 8009130:	0800d114 	.word	0x0800d114
 8009134:	0800d0d4 	.word	0x0800d0d4

08009138 <puts>:
 8009138:	4b02      	ldr	r3, [pc, #8]	; (8009144 <puts+0xc>)
 800913a:	4601      	mov	r1, r0
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	f7ff bf8d 	b.w	800905c <_puts_r>
 8009142:	bf00      	nop
 8009144:	20000010 	.word	0x20000010

08009148 <nanf>:
 8009148:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009150 <nanf+0x8>
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	7fc00000 	.word	0x7fc00000

08009154 <siprintf>:
 8009154:	b40e      	push	{r1, r2, r3}
 8009156:	b500      	push	{lr}
 8009158:	b09c      	sub	sp, #112	; 0x70
 800915a:	ab1d      	add	r3, sp, #116	; 0x74
 800915c:	9002      	str	r0, [sp, #8]
 800915e:	9006      	str	r0, [sp, #24]
 8009160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009164:	4809      	ldr	r0, [pc, #36]	; (800918c <siprintf+0x38>)
 8009166:	9107      	str	r1, [sp, #28]
 8009168:	9104      	str	r1, [sp, #16]
 800916a:	4909      	ldr	r1, [pc, #36]	; (8009190 <siprintf+0x3c>)
 800916c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009170:	9105      	str	r1, [sp, #20]
 8009172:	6800      	ldr	r0, [r0, #0]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	a902      	add	r1, sp, #8
 8009178:	f003 f9c2 	bl	800c500 <_svfiprintf_r>
 800917c:	9b02      	ldr	r3, [sp, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	b01c      	add	sp, #112	; 0x70
 8009184:	f85d eb04 	ldr.w	lr, [sp], #4
 8009188:	b003      	add	sp, #12
 800918a:	4770      	bx	lr
 800918c:	20000010 	.word	0x20000010
 8009190:	ffff0208 	.word	0xffff0208

08009194 <sulp>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4604      	mov	r4, r0
 8009198:	460d      	mov	r5, r1
 800919a:	ec45 4b10 	vmov	d0, r4, r5
 800919e:	4616      	mov	r6, r2
 80091a0:	f002 ff0c 	bl	800bfbc <__ulp>
 80091a4:	ec51 0b10 	vmov	r0, r1, d0
 80091a8:	b17e      	cbz	r6, 80091ca <sulp+0x36>
 80091aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd09      	ble.n	80091ca <sulp+0x36>
 80091b6:	051b      	lsls	r3, r3, #20
 80091b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091bc:	2400      	movs	r4, #0
 80091be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091c2:	4622      	mov	r2, r4
 80091c4:	462b      	mov	r3, r5
 80091c6:	f7f7 fa27 	bl	8000618 <__aeabi_dmul>
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	0000      	movs	r0, r0
	...

080091d0 <_strtod_l>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	ed2d 8b02 	vpush	{d8}
 80091d8:	b09d      	sub	sp, #116	; 0x74
 80091da:	461f      	mov	r7, r3
 80091dc:	2300      	movs	r3, #0
 80091de:	9318      	str	r3, [sp, #96]	; 0x60
 80091e0:	4ba2      	ldr	r3, [pc, #648]	; (800946c <_strtod_l+0x29c>)
 80091e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	4604      	mov	r4, r0
 80091ea:	4618      	mov	r0, r3
 80091ec:	4688      	mov	r8, r1
 80091ee:	f7f6 ffff 	bl	80001f0 <strlen>
 80091f2:	f04f 0a00 	mov.w	sl, #0
 80091f6:	4605      	mov	r5, r0
 80091f8:	f04f 0b00 	mov.w	fp, #0
 80091fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009202:	781a      	ldrb	r2, [r3, #0]
 8009204:	2a2b      	cmp	r2, #43	; 0x2b
 8009206:	d04e      	beq.n	80092a6 <_strtod_l+0xd6>
 8009208:	d83b      	bhi.n	8009282 <_strtod_l+0xb2>
 800920a:	2a0d      	cmp	r2, #13
 800920c:	d834      	bhi.n	8009278 <_strtod_l+0xa8>
 800920e:	2a08      	cmp	r2, #8
 8009210:	d834      	bhi.n	800927c <_strtod_l+0xac>
 8009212:	2a00      	cmp	r2, #0
 8009214:	d03e      	beq.n	8009294 <_strtod_l+0xc4>
 8009216:	2300      	movs	r3, #0
 8009218:	930a      	str	r3, [sp, #40]	; 0x28
 800921a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800921c:	7833      	ldrb	r3, [r6, #0]
 800921e:	2b30      	cmp	r3, #48	; 0x30
 8009220:	f040 80b0 	bne.w	8009384 <_strtod_l+0x1b4>
 8009224:	7873      	ldrb	r3, [r6, #1]
 8009226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800922a:	2b58      	cmp	r3, #88	; 0x58
 800922c:	d168      	bne.n	8009300 <_strtod_l+0x130>
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	ab18      	add	r3, sp, #96	; 0x60
 8009234:	9702      	str	r7, [sp, #8]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4a8d      	ldr	r2, [pc, #564]	; (8009470 <_strtod_l+0x2a0>)
 800923a:	ab19      	add	r3, sp, #100	; 0x64
 800923c:	a917      	add	r1, sp, #92	; 0x5c
 800923e:	4620      	mov	r0, r4
 8009240:	f001 ffae 	bl	800b1a0 <__gethex>
 8009244:	f010 0707 	ands.w	r7, r0, #7
 8009248:	4605      	mov	r5, r0
 800924a:	d005      	beq.n	8009258 <_strtod_l+0x88>
 800924c:	2f06      	cmp	r7, #6
 800924e:	d12c      	bne.n	80092aa <_strtod_l+0xda>
 8009250:	3601      	adds	r6, #1
 8009252:	2300      	movs	r3, #0
 8009254:	9617      	str	r6, [sp, #92]	; 0x5c
 8009256:	930a      	str	r3, [sp, #40]	; 0x28
 8009258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 8590 	bne.w	8009d80 <_strtod_l+0xbb0>
 8009260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009262:	b1eb      	cbz	r3, 80092a0 <_strtod_l+0xd0>
 8009264:	4652      	mov	r2, sl
 8009266:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800926a:	ec43 2b10 	vmov	d0, r2, r3
 800926e:	b01d      	add	sp, #116	; 0x74
 8009270:	ecbd 8b02 	vpop	{d8}
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	2a20      	cmp	r2, #32
 800927a:	d1cc      	bne.n	8009216 <_strtod_l+0x46>
 800927c:	3301      	adds	r3, #1
 800927e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009280:	e7be      	b.n	8009200 <_strtod_l+0x30>
 8009282:	2a2d      	cmp	r2, #45	; 0x2d
 8009284:	d1c7      	bne.n	8009216 <_strtod_l+0x46>
 8009286:	2201      	movs	r2, #1
 8009288:	920a      	str	r2, [sp, #40]	; 0x28
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	9217      	str	r2, [sp, #92]	; 0x5c
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1c2      	bne.n	800921a <_strtod_l+0x4a>
 8009294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009296:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800929a:	2b00      	cmp	r3, #0
 800929c:	f040 856e 	bne.w	8009d7c <_strtod_l+0xbac>
 80092a0:	4652      	mov	r2, sl
 80092a2:	465b      	mov	r3, fp
 80092a4:	e7e1      	b.n	800926a <_strtod_l+0x9a>
 80092a6:	2200      	movs	r2, #0
 80092a8:	e7ee      	b.n	8009288 <_strtod_l+0xb8>
 80092aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092ac:	b13a      	cbz	r2, 80092be <_strtod_l+0xee>
 80092ae:	2135      	movs	r1, #53	; 0x35
 80092b0:	a81a      	add	r0, sp, #104	; 0x68
 80092b2:	f002 ff8e 	bl	800c1d2 <__copybits>
 80092b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092b8:	4620      	mov	r0, r4
 80092ba:	f002 fb4d 	bl	800b958 <_Bfree>
 80092be:	3f01      	subs	r7, #1
 80092c0:	2f04      	cmp	r7, #4
 80092c2:	d806      	bhi.n	80092d2 <_strtod_l+0x102>
 80092c4:	e8df f007 	tbb	[pc, r7]
 80092c8:	1714030a 	.word	0x1714030a
 80092cc:	0a          	.byte	0x0a
 80092cd:	00          	.byte	0x00
 80092ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80092d2:	0728      	lsls	r0, r5, #28
 80092d4:	d5c0      	bpl.n	8009258 <_strtod_l+0x88>
 80092d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80092da:	e7bd      	b.n	8009258 <_strtod_l+0x88>
 80092dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80092e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80092e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80092e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80092ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092ee:	e7f0      	b.n	80092d2 <_strtod_l+0x102>
 80092f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009474 <_strtod_l+0x2a4>
 80092f4:	e7ed      	b.n	80092d2 <_strtod_l+0x102>
 80092f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80092fa:	f04f 3aff 	mov.w	sl, #4294967295
 80092fe:	e7e8      	b.n	80092d2 <_strtod_l+0x102>
 8009300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	9217      	str	r2, [sp, #92]	; 0x5c
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b30      	cmp	r3, #48	; 0x30
 800930a:	d0f9      	beq.n	8009300 <_strtod_l+0x130>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0a3      	beq.n	8009258 <_strtod_l+0x88>
 8009310:	2301      	movs	r3, #1
 8009312:	f04f 0900 	mov.w	r9, #0
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800931a:	9308      	str	r3, [sp, #32]
 800931c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009320:	464f      	mov	r7, r9
 8009322:	220a      	movs	r2, #10
 8009324:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009326:	7806      	ldrb	r6, [r0, #0]
 8009328:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800932c:	b2d9      	uxtb	r1, r3
 800932e:	2909      	cmp	r1, #9
 8009330:	d92a      	bls.n	8009388 <_strtod_l+0x1b8>
 8009332:	9905      	ldr	r1, [sp, #20]
 8009334:	462a      	mov	r2, r5
 8009336:	f003 fbe2 	bl	800cafe <strncmp>
 800933a:	b398      	cbz	r0, 80093a4 <_strtod_l+0x1d4>
 800933c:	2000      	movs	r0, #0
 800933e:	4632      	mov	r2, r6
 8009340:	463d      	mov	r5, r7
 8009342:	9005      	str	r0, [sp, #20]
 8009344:	4603      	mov	r3, r0
 8009346:	2a65      	cmp	r2, #101	; 0x65
 8009348:	d001      	beq.n	800934e <_strtod_l+0x17e>
 800934a:	2a45      	cmp	r2, #69	; 0x45
 800934c:	d118      	bne.n	8009380 <_strtod_l+0x1b0>
 800934e:	b91d      	cbnz	r5, 8009358 <_strtod_l+0x188>
 8009350:	9a04      	ldr	r2, [sp, #16]
 8009352:	4302      	orrs	r2, r0
 8009354:	d09e      	beq.n	8009294 <_strtod_l+0xc4>
 8009356:	2500      	movs	r5, #0
 8009358:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800935c:	f108 0201 	add.w	r2, r8, #1
 8009360:	9217      	str	r2, [sp, #92]	; 0x5c
 8009362:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009366:	2a2b      	cmp	r2, #43	; 0x2b
 8009368:	d075      	beq.n	8009456 <_strtod_l+0x286>
 800936a:	2a2d      	cmp	r2, #45	; 0x2d
 800936c:	d07b      	beq.n	8009466 <_strtod_l+0x296>
 800936e:	f04f 0c00 	mov.w	ip, #0
 8009372:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009376:	2909      	cmp	r1, #9
 8009378:	f240 8082 	bls.w	8009480 <_strtod_l+0x2b0>
 800937c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009380:	2600      	movs	r6, #0
 8009382:	e09d      	b.n	80094c0 <_strtod_l+0x2f0>
 8009384:	2300      	movs	r3, #0
 8009386:	e7c4      	b.n	8009312 <_strtod_l+0x142>
 8009388:	2f08      	cmp	r7, #8
 800938a:	bfd8      	it	le
 800938c:	9907      	ldrle	r1, [sp, #28]
 800938e:	f100 0001 	add.w	r0, r0, #1
 8009392:	bfda      	itte	le
 8009394:	fb02 3301 	mlale	r3, r2, r1, r3
 8009398:	9307      	strle	r3, [sp, #28]
 800939a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800939e:	3701      	adds	r7, #1
 80093a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80093a2:	e7bf      	b.n	8009324 <_strtod_l+0x154>
 80093a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093a6:	195a      	adds	r2, r3, r5
 80093a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80093aa:	5d5a      	ldrb	r2, [r3, r5]
 80093ac:	2f00      	cmp	r7, #0
 80093ae:	d037      	beq.n	8009420 <_strtod_l+0x250>
 80093b0:	9005      	str	r0, [sp, #20]
 80093b2:	463d      	mov	r5, r7
 80093b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093b8:	2b09      	cmp	r3, #9
 80093ba:	d912      	bls.n	80093e2 <_strtod_l+0x212>
 80093bc:	2301      	movs	r3, #1
 80093be:	e7c2      	b.n	8009346 <_strtod_l+0x176>
 80093c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80093c6:	785a      	ldrb	r2, [r3, #1]
 80093c8:	3001      	adds	r0, #1
 80093ca:	2a30      	cmp	r2, #48	; 0x30
 80093cc:	d0f8      	beq.n	80093c0 <_strtod_l+0x1f0>
 80093ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80093d2:	2b08      	cmp	r3, #8
 80093d4:	f200 84d9 	bhi.w	8009d8a <_strtod_l+0xbba>
 80093d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093da:	9005      	str	r0, [sp, #20]
 80093dc:	2000      	movs	r0, #0
 80093de:	9308      	str	r3, [sp, #32]
 80093e0:	4605      	mov	r5, r0
 80093e2:	3a30      	subs	r2, #48	; 0x30
 80093e4:	f100 0301 	add.w	r3, r0, #1
 80093e8:	d014      	beq.n	8009414 <_strtod_l+0x244>
 80093ea:	9905      	ldr	r1, [sp, #20]
 80093ec:	4419      	add	r1, r3
 80093ee:	9105      	str	r1, [sp, #20]
 80093f0:	462b      	mov	r3, r5
 80093f2:	eb00 0e05 	add.w	lr, r0, r5
 80093f6:	210a      	movs	r1, #10
 80093f8:	4573      	cmp	r3, lr
 80093fa:	d113      	bne.n	8009424 <_strtod_l+0x254>
 80093fc:	182b      	adds	r3, r5, r0
 80093fe:	2b08      	cmp	r3, #8
 8009400:	f105 0501 	add.w	r5, r5, #1
 8009404:	4405      	add	r5, r0
 8009406:	dc1c      	bgt.n	8009442 <_strtod_l+0x272>
 8009408:	9907      	ldr	r1, [sp, #28]
 800940a:	230a      	movs	r3, #10
 800940c:	fb03 2301 	mla	r3, r3, r1, r2
 8009410:	9307      	str	r3, [sp, #28]
 8009412:	2300      	movs	r3, #0
 8009414:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009416:	1c51      	adds	r1, r2, #1
 8009418:	9117      	str	r1, [sp, #92]	; 0x5c
 800941a:	7852      	ldrb	r2, [r2, #1]
 800941c:	4618      	mov	r0, r3
 800941e:	e7c9      	b.n	80093b4 <_strtod_l+0x1e4>
 8009420:	4638      	mov	r0, r7
 8009422:	e7d2      	b.n	80093ca <_strtod_l+0x1fa>
 8009424:	2b08      	cmp	r3, #8
 8009426:	dc04      	bgt.n	8009432 <_strtod_l+0x262>
 8009428:	9e07      	ldr	r6, [sp, #28]
 800942a:	434e      	muls	r6, r1
 800942c:	9607      	str	r6, [sp, #28]
 800942e:	3301      	adds	r3, #1
 8009430:	e7e2      	b.n	80093f8 <_strtod_l+0x228>
 8009432:	f103 0c01 	add.w	ip, r3, #1
 8009436:	f1bc 0f10 	cmp.w	ip, #16
 800943a:	bfd8      	it	le
 800943c:	fb01 f909 	mulle.w	r9, r1, r9
 8009440:	e7f5      	b.n	800942e <_strtod_l+0x25e>
 8009442:	2d10      	cmp	r5, #16
 8009444:	bfdc      	itt	le
 8009446:	230a      	movle	r3, #10
 8009448:	fb03 2909 	mlale	r9, r3, r9, r2
 800944c:	e7e1      	b.n	8009412 <_strtod_l+0x242>
 800944e:	2300      	movs	r3, #0
 8009450:	9305      	str	r3, [sp, #20]
 8009452:	2301      	movs	r3, #1
 8009454:	e77c      	b.n	8009350 <_strtod_l+0x180>
 8009456:	f04f 0c00 	mov.w	ip, #0
 800945a:	f108 0202 	add.w	r2, r8, #2
 800945e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009460:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009464:	e785      	b.n	8009372 <_strtod_l+0x1a2>
 8009466:	f04f 0c01 	mov.w	ip, #1
 800946a:	e7f6      	b.n	800945a <_strtod_l+0x28a>
 800946c:	0800d19c 	.word	0x0800d19c
 8009470:	0800ceec 	.word	0x0800ceec
 8009474:	7ff00000 	.word	0x7ff00000
 8009478:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800947a:	1c51      	adds	r1, r2, #1
 800947c:	9117      	str	r1, [sp, #92]	; 0x5c
 800947e:	7852      	ldrb	r2, [r2, #1]
 8009480:	2a30      	cmp	r2, #48	; 0x30
 8009482:	d0f9      	beq.n	8009478 <_strtod_l+0x2a8>
 8009484:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009488:	2908      	cmp	r1, #8
 800948a:	f63f af79 	bhi.w	8009380 <_strtod_l+0x1b0>
 800948e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009492:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009494:	9206      	str	r2, [sp, #24]
 8009496:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009498:	1c51      	adds	r1, r2, #1
 800949a:	9117      	str	r1, [sp, #92]	; 0x5c
 800949c:	7852      	ldrb	r2, [r2, #1]
 800949e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80094a2:	2e09      	cmp	r6, #9
 80094a4:	d937      	bls.n	8009516 <_strtod_l+0x346>
 80094a6:	9e06      	ldr	r6, [sp, #24]
 80094a8:	1b89      	subs	r1, r1, r6
 80094aa:	2908      	cmp	r1, #8
 80094ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80094b0:	dc02      	bgt.n	80094b8 <_strtod_l+0x2e8>
 80094b2:	4576      	cmp	r6, lr
 80094b4:	bfa8      	it	ge
 80094b6:	4676      	movge	r6, lr
 80094b8:	f1bc 0f00 	cmp.w	ip, #0
 80094bc:	d000      	beq.n	80094c0 <_strtod_l+0x2f0>
 80094be:	4276      	negs	r6, r6
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	d14d      	bne.n	8009560 <_strtod_l+0x390>
 80094c4:	9904      	ldr	r1, [sp, #16]
 80094c6:	4301      	orrs	r1, r0
 80094c8:	f47f aec6 	bne.w	8009258 <_strtod_l+0x88>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f47f aee1 	bne.w	8009294 <_strtod_l+0xc4>
 80094d2:	2a69      	cmp	r2, #105	; 0x69
 80094d4:	d027      	beq.n	8009526 <_strtod_l+0x356>
 80094d6:	dc24      	bgt.n	8009522 <_strtod_l+0x352>
 80094d8:	2a49      	cmp	r2, #73	; 0x49
 80094da:	d024      	beq.n	8009526 <_strtod_l+0x356>
 80094dc:	2a4e      	cmp	r2, #78	; 0x4e
 80094de:	f47f aed9 	bne.w	8009294 <_strtod_l+0xc4>
 80094e2:	499f      	ldr	r1, [pc, #636]	; (8009760 <_strtod_l+0x590>)
 80094e4:	a817      	add	r0, sp, #92	; 0x5c
 80094e6:	f002 f8b3 	bl	800b650 <__match>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f43f aed2 	beq.w	8009294 <_strtod_l+0xc4>
 80094f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b28      	cmp	r3, #40	; 0x28
 80094f6:	d12d      	bne.n	8009554 <_strtod_l+0x384>
 80094f8:	499a      	ldr	r1, [pc, #616]	; (8009764 <_strtod_l+0x594>)
 80094fa:	aa1a      	add	r2, sp, #104	; 0x68
 80094fc:	a817      	add	r0, sp, #92	; 0x5c
 80094fe:	f002 f8bb 	bl	800b678 <__hexnan>
 8009502:	2805      	cmp	r0, #5
 8009504:	d126      	bne.n	8009554 <_strtod_l+0x384>
 8009506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009508:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800950c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009510:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009514:	e6a0      	b.n	8009258 <_strtod_l+0x88>
 8009516:	210a      	movs	r1, #10
 8009518:	fb01 2e0e 	mla	lr, r1, lr, r2
 800951c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009520:	e7b9      	b.n	8009496 <_strtod_l+0x2c6>
 8009522:	2a6e      	cmp	r2, #110	; 0x6e
 8009524:	e7db      	b.n	80094de <_strtod_l+0x30e>
 8009526:	4990      	ldr	r1, [pc, #576]	; (8009768 <_strtod_l+0x598>)
 8009528:	a817      	add	r0, sp, #92	; 0x5c
 800952a:	f002 f891 	bl	800b650 <__match>
 800952e:	2800      	cmp	r0, #0
 8009530:	f43f aeb0 	beq.w	8009294 <_strtod_l+0xc4>
 8009534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009536:	498d      	ldr	r1, [pc, #564]	; (800976c <_strtod_l+0x59c>)
 8009538:	3b01      	subs	r3, #1
 800953a:	a817      	add	r0, sp, #92	; 0x5c
 800953c:	9317      	str	r3, [sp, #92]	; 0x5c
 800953e:	f002 f887 	bl	800b650 <__match>
 8009542:	b910      	cbnz	r0, 800954a <_strtod_l+0x37a>
 8009544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009546:	3301      	adds	r3, #1
 8009548:	9317      	str	r3, [sp, #92]	; 0x5c
 800954a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800977c <_strtod_l+0x5ac>
 800954e:	f04f 0a00 	mov.w	sl, #0
 8009552:	e681      	b.n	8009258 <_strtod_l+0x88>
 8009554:	4886      	ldr	r0, [pc, #536]	; (8009770 <_strtod_l+0x5a0>)
 8009556:	f003 fa77 	bl	800ca48 <nan>
 800955a:	ec5b ab10 	vmov	sl, fp, d0
 800955e:	e67b      	b.n	8009258 <_strtod_l+0x88>
 8009560:	9b05      	ldr	r3, [sp, #20]
 8009562:	9807      	ldr	r0, [sp, #28]
 8009564:	1af3      	subs	r3, r6, r3
 8009566:	2f00      	cmp	r7, #0
 8009568:	bf08      	it	eq
 800956a:	462f      	moveq	r7, r5
 800956c:	2d10      	cmp	r5, #16
 800956e:	9306      	str	r3, [sp, #24]
 8009570:	46a8      	mov	r8, r5
 8009572:	bfa8      	it	ge
 8009574:	f04f 0810 	movge.w	r8, #16
 8009578:	f7f6 ffd4 	bl	8000524 <__aeabi_ui2d>
 800957c:	2d09      	cmp	r5, #9
 800957e:	4682      	mov	sl, r0
 8009580:	468b      	mov	fp, r1
 8009582:	dd13      	ble.n	80095ac <_strtod_l+0x3dc>
 8009584:	4b7b      	ldr	r3, [pc, #492]	; (8009774 <_strtod_l+0x5a4>)
 8009586:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800958a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800958e:	f7f7 f843 	bl	8000618 <__aeabi_dmul>
 8009592:	4682      	mov	sl, r0
 8009594:	4648      	mov	r0, r9
 8009596:	468b      	mov	fp, r1
 8009598:	f7f6 ffc4 	bl	8000524 <__aeabi_ui2d>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4650      	mov	r0, sl
 80095a2:	4659      	mov	r1, fp
 80095a4:	f7f6 fe82 	bl	80002ac <__adddf3>
 80095a8:	4682      	mov	sl, r0
 80095aa:	468b      	mov	fp, r1
 80095ac:	2d0f      	cmp	r5, #15
 80095ae:	dc38      	bgt.n	8009622 <_strtod_l+0x452>
 80095b0:	9b06      	ldr	r3, [sp, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f43f ae50 	beq.w	8009258 <_strtod_l+0x88>
 80095b8:	dd24      	ble.n	8009604 <_strtod_l+0x434>
 80095ba:	2b16      	cmp	r3, #22
 80095bc:	dc0b      	bgt.n	80095d6 <_strtod_l+0x406>
 80095be:	496d      	ldr	r1, [pc, #436]	; (8009774 <_strtod_l+0x5a4>)
 80095c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c8:	4652      	mov	r2, sl
 80095ca:	465b      	mov	r3, fp
 80095cc:	f7f7 f824 	bl	8000618 <__aeabi_dmul>
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	e640      	b.n	8009258 <_strtod_l+0x88>
 80095d6:	9a06      	ldr	r2, [sp, #24]
 80095d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80095dc:	4293      	cmp	r3, r2
 80095de:	db20      	blt.n	8009622 <_strtod_l+0x452>
 80095e0:	4c64      	ldr	r4, [pc, #400]	; (8009774 <_strtod_l+0x5a4>)
 80095e2:	f1c5 050f 	rsb	r5, r5, #15
 80095e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f2:	f7f7 f811 	bl	8000618 <__aeabi_dmul>
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	1b5d      	subs	r5, r3, r5
 80095fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009602:	e7e3      	b.n	80095cc <_strtod_l+0x3fc>
 8009604:	9b06      	ldr	r3, [sp, #24]
 8009606:	3316      	adds	r3, #22
 8009608:	db0b      	blt.n	8009622 <_strtod_l+0x452>
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	1b9e      	subs	r6, r3, r6
 800960e:	4b59      	ldr	r3, [pc, #356]	; (8009774 <_strtod_l+0x5a4>)
 8009610:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009614:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009618:	4650      	mov	r0, sl
 800961a:	4659      	mov	r1, fp
 800961c:	f7f7 f926 	bl	800086c <__aeabi_ddiv>
 8009620:	e7d6      	b.n	80095d0 <_strtod_l+0x400>
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	eba5 0808 	sub.w	r8, r5, r8
 8009628:	4498      	add	r8, r3
 800962a:	f1b8 0f00 	cmp.w	r8, #0
 800962e:	dd74      	ble.n	800971a <_strtod_l+0x54a>
 8009630:	f018 030f 	ands.w	r3, r8, #15
 8009634:	d00a      	beq.n	800964c <_strtod_l+0x47c>
 8009636:	494f      	ldr	r1, [pc, #316]	; (8009774 <_strtod_l+0x5a4>)
 8009638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800963c:	4652      	mov	r2, sl
 800963e:	465b      	mov	r3, fp
 8009640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009644:	f7f6 ffe8 	bl	8000618 <__aeabi_dmul>
 8009648:	4682      	mov	sl, r0
 800964a:	468b      	mov	fp, r1
 800964c:	f038 080f 	bics.w	r8, r8, #15
 8009650:	d04f      	beq.n	80096f2 <_strtod_l+0x522>
 8009652:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009656:	dd22      	ble.n	800969e <_strtod_l+0x4ce>
 8009658:	2500      	movs	r5, #0
 800965a:	462e      	mov	r6, r5
 800965c:	9507      	str	r5, [sp, #28]
 800965e:	9505      	str	r5, [sp, #20]
 8009660:	2322      	movs	r3, #34	; 0x22
 8009662:	f8df b118 	ldr.w	fp, [pc, #280]	; 800977c <_strtod_l+0x5ac>
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	f04f 0a00 	mov.w	sl, #0
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	2b00      	cmp	r3, #0
 8009670:	f43f adf2 	beq.w	8009258 <_strtod_l+0x88>
 8009674:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009676:	4620      	mov	r0, r4
 8009678:	f002 f96e 	bl	800b958 <_Bfree>
 800967c:	9905      	ldr	r1, [sp, #20]
 800967e:	4620      	mov	r0, r4
 8009680:	f002 f96a 	bl	800b958 <_Bfree>
 8009684:	4631      	mov	r1, r6
 8009686:	4620      	mov	r0, r4
 8009688:	f002 f966 	bl	800b958 <_Bfree>
 800968c:	9907      	ldr	r1, [sp, #28]
 800968e:	4620      	mov	r0, r4
 8009690:	f002 f962 	bl	800b958 <_Bfree>
 8009694:	4629      	mov	r1, r5
 8009696:	4620      	mov	r0, r4
 8009698:	f002 f95e 	bl	800b958 <_Bfree>
 800969c:	e5dc      	b.n	8009258 <_strtod_l+0x88>
 800969e:	4b36      	ldr	r3, [pc, #216]	; (8009778 <_strtod_l+0x5a8>)
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	2300      	movs	r3, #0
 80096a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80096a8:	4650      	mov	r0, sl
 80096aa:	4659      	mov	r1, fp
 80096ac:	4699      	mov	r9, r3
 80096ae:	f1b8 0f01 	cmp.w	r8, #1
 80096b2:	dc21      	bgt.n	80096f8 <_strtod_l+0x528>
 80096b4:	b10b      	cbz	r3, 80096ba <_strtod_l+0x4ea>
 80096b6:	4682      	mov	sl, r0
 80096b8:	468b      	mov	fp, r1
 80096ba:	4b2f      	ldr	r3, [pc, #188]	; (8009778 <_strtod_l+0x5a8>)
 80096bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80096c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80096c4:	4652      	mov	r2, sl
 80096c6:	465b      	mov	r3, fp
 80096c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80096cc:	f7f6 ffa4 	bl	8000618 <__aeabi_dmul>
 80096d0:	4b2a      	ldr	r3, [pc, #168]	; (800977c <_strtod_l+0x5ac>)
 80096d2:	460a      	mov	r2, r1
 80096d4:	400b      	ands	r3, r1
 80096d6:	492a      	ldr	r1, [pc, #168]	; (8009780 <_strtod_l+0x5b0>)
 80096d8:	428b      	cmp	r3, r1
 80096da:	4682      	mov	sl, r0
 80096dc:	d8bc      	bhi.n	8009658 <_strtod_l+0x488>
 80096de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80096e2:	428b      	cmp	r3, r1
 80096e4:	bf86      	itte	hi
 80096e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009784 <_strtod_l+0x5b4>
 80096ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80096ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80096f2:	2300      	movs	r3, #0
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	e084      	b.n	8009802 <_strtod_l+0x632>
 80096f8:	f018 0f01 	tst.w	r8, #1
 80096fc:	d005      	beq.n	800970a <_strtod_l+0x53a>
 80096fe:	9b04      	ldr	r3, [sp, #16]
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 ff88 	bl	8000618 <__aeabi_dmul>
 8009708:	2301      	movs	r3, #1
 800970a:	9a04      	ldr	r2, [sp, #16]
 800970c:	3208      	adds	r2, #8
 800970e:	f109 0901 	add.w	r9, r9, #1
 8009712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009716:	9204      	str	r2, [sp, #16]
 8009718:	e7c9      	b.n	80096ae <_strtod_l+0x4de>
 800971a:	d0ea      	beq.n	80096f2 <_strtod_l+0x522>
 800971c:	f1c8 0800 	rsb	r8, r8, #0
 8009720:	f018 020f 	ands.w	r2, r8, #15
 8009724:	d00a      	beq.n	800973c <_strtod_l+0x56c>
 8009726:	4b13      	ldr	r3, [pc, #76]	; (8009774 <_strtod_l+0x5a4>)
 8009728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800972c:	4650      	mov	r0, sl
 800972e:	4659      	mov	r1, fp
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	f7f7 f89a 	bl	800086c <__aeabi_ddiv>
 8009738:	4682      	mov	sl, r0
 800973a:	468b      	mov	fp, r1
 800973c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009740:	d0d7      	beq.n	80096f2 <_strtod_l+0x522>
 8009742:	f1b8 0f1f 	cmp.w	r8, #31
 8009746:	dd1f      	ble.n	8009788 <_strtod_l+0x5b8>
 8009748:	2500      	movs	r5, #0
 800974a:	462e      	mov	r6, r5
 800974c:	9507      	str	r5, [sp, #28]
 800974e:	9505      	str	r5, [sp, #20]
 8009750:	2322      	movs	r3, #34	; 0x22
 8009752:	f04f 0a00 	mov.w	sl, #0
 8009756:	f04f 0b00 	mov.w	fp, #0
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	e786      	b.n	800966c <_strtod_l+0x49c>
 800975e:	bf00      	nop
 8009760:	0800cebd 	.word	0x0800cebd
 8009764:	0800cf00 	.word	0x0800cf00
 8009768:	0800ceb5 	.word	0x0800ceb5
 800976c:	0800d044 	.word	0x0800d044
 8009770:	0800d358 	.word	0x0800d358
 8009774:	0800d238 	.word	0x0800d238
 8009778:	0800d210 	.word	0x0800d210
 800977c:	7ff00000 	.word	0x7ff00000
 8009780:	7ca00000 	.word	0x7ca00000
 8009784:	7fefffff 	.word	0x7fefffff
 8009788:	f018 0310 	ands.w	r3, r8, #16
 800978c:	bf18      	it	ne
 800978e:	236a      	movne	r3, #106	; 0x6a
 8009790:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009b40 <_strtod_l+0x970>
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	4650      	mov	r0, sl
 8009798:	4659      	mov	r1, fp
 800979a:	2300      	movs	r3, #0
 800979c:	f018 0f01 	tst.w	r8, #1
 80097a0:	d004      	beq.n	80097ac <_strtod_l+0x5dc>
 80097a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80097a6:	f7f6 ff37 	bl	8000618 <__aeabi_dmul>
 80097aa:	2301      	movs	r3, #1
 80097ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80097b0:	f109 0908 	add.w	r9, r9, #8
 80097b4:	d1f2      	bne.n	800979c <_strtod_l+0x5cc>
 80097b6:	b10b      	cbz	r3, 80097bc <_strtod_l+0x5ec>
 80097b8:	4682      	mov	sl, r0
 80097ba:	468b      	mov	fp, r1
 80097bc:	9b04      	ldr	r3, [sp, #16]
 80097be:	b1c3      	cbz	r3, 80097f2 <_strtod_l+0x622>
 80097c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	4659      	mov	r1, fp
 80097cc:	dd11      	ble.n	80097f2 <_strtod_l+0x622>
 80097ce:	2b1f      	cmp	r3, #31
 80097d0:	f340 8124 	ble.w	8009a1c <_strtod_l+0x84c>
 80097d4:	2b34      	cmp	r3, #52	; 0x34
 80097d6:	bfde      	ittt	le
 80097d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80097dc:	f04f 33ff 	movle.w	r3, #4294967295
 80097e0:	fa03 f202 	lslle.w	r2, r3, r2
 80097e4:	f04f 0a00 	mov.w	sl, #0
 80097e8:	bfcc      	ite	gt
 80097ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80097ee:	ea02 0b01 	andle.w	fp, r2, r1
 80097f2:	2200      	movs	r2, #0
 80097f4:	2300      	movs	r3, #0
 80097f6:	4650      	mov	r0, sl
 80097f8:	4659      	mov	r1, fp
 80097fa:	f7f7 f975 	bl	8000ae8 <__aeabi_dcmpeq>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1a2      	bne.n	8009748 <_strtod_l+0x578>
 8009802:	9b07      	ldr	r3, [sp, #28]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	9908      	ldr	r1, [sp, #32]
 8009808:	462b      	mov	r3, r5
 800980a:	463a      	mov	r2, r7
 800980c:	4620      	mov	r0, r4
 800980e:	f002 f90b 	bl	800ba28 <__s2b>
 8009812:	9007      	str	r0, [sp, #28]
 8009814:	2800      	cmp	r0, #0
 8009816:	f43f af1f 	beq.w	8009658 <_strtod_l+0x488>
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	1b9e      	subs	r6, r3, r6
 800981e:	9b06      	ldr	r3, [sp, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	bfb4      	ite	lt
 8009824:	4633      	movlt	r3, r6
 8009826:	2300      	movge	r3, #0
 8009828:	930c      	str	r3, [sp, #48]	; 0x30
 800982a:	9b06      	ldr	r3, [sp, #24]
 800982c:	2500      	movs	r5, #0
 800982e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009832:	9312      	str	r3, [sp, #72]	; 0x48
 8009834:	462e      	mov	r6, r5
 8009836:	9b07      	ldr	r3, [sp, #28]
 8009838:	4620      	mov	r0, r4
 800983a:	6859      	ldr	r1, [r3, #4]
 800983c:	f002 f84c 	bl	800b8d8 <_Balloc>
 8009840:	9005      	str	r0, [sp, #20]
 8009842:	2800      	cmp	r0, #0
 8009844:	f43f af0c 	beq.w	8009660 <_strtod_l+0x490>
 8009848:	9b07      	ldr	r3, [sp, #28]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	3202      	adds	r2, #2
 800984e:	f103 010c 	add.w	r1, r3, #12
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	300c      	adds	r0, #12
 8009856:	f002 f831 	bl	800b8bc <memcpy>
 800985a:	ec4b ab10 	vmov	d0, sl, fp
 800985e:	aa1a      	add	r2, sp, #104	; 0x68
 8009860:	a919      	add	r1, sp, #100	; 0x64
 8009862:	4620      	mov	r0, r4
 8009864:	f002 fc26 	bl	800c0b4 <__d2b>
 8009868:	ec4b ab18 	vmov	d8, sl, fp
 800986c:	9018      	str	r0, [sp, #96]	; 0x60
 800986e:	2800      	cmp	r0, #0
 8009870:	f43f aef6 	beq.w	8009660 <_strtod_l+0x490>
 8009874:	2101      	movs	r1, #1
 8009876:	4620      	mov	r0, r4
 8009878:	f002 f970 	bl	800bb5c <__i2b>
 800987c:	4606      	mov	r6, r0
 800987e:	2800      	cmp	r0, #0
 8009880:	f43f aeee 	beq.w	8009660 <_strtod_l+0x490>
 8009884:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009886:	9904      	ldr	r1, [sp, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfab      	itete	ge
 800988c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800988e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009890:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009892:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009896:	bfac      	ite	ge
 8009898:	eb03 0902 	addge.w	r9, r3, r2
 800989c:	1ad7      	sublt	r7, r2, r3
 800989e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098a0:	eba3 0801 	sub.w	r8, r3, r1
 80098a4:	4490      	add	r8, r2
 80098a6:	4ba1      	ldr	r3, [pc, #644]	; (8009b2c <_strtod_l+0x95c>)
 80098a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098ac:	4598      	cmp	r8, r3
 80098ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80098b2:	f280 80c7 	bge.w	8009a44 <_strtod_l+0x874>
 80098b6:	eba3 0308 	sub.w	r3, r3, r8
 80098ba:	2b1f      	cmp	r3, #31
 80098bc:	eba2 0203 	sub.w	r2, r2, r3
 80098c0:	f04f 0101 	mov.w	r1, #1
 80098c4:	f300 80b1 	bgt.w	8009a2a <_strtod_l+0x85a>
 80098c8:	fa01 f303 	lsl.w	r3, r1, r3
 80098cc:	930d      	str	r3, [sp, #52]	; 0x34
 80098ce:	2300      	movs	r3, #0
 80098d0:	9308      	str	r3, [sp, #32]
 80098d2:	eb09 0802 	add.w	r8, r9, r2
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	45c1      	cmp	r9, r8
 80098da:	4417      	add	r7, r2
 80098dc:	441f      	add	r7, r3
 80098de:	464b      	mov	r3, r9
 80098e0:	bfa8      	it	ge
 80098e2:	4643      	movge	r3, r8
 80098e4:	42bb      	cmp	r3, r7
 80098e6:	bfa8      	it	ge
 80098e8:	463b      	movge	r3, r7
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bfc2      	ittt	gt
 80098ee:	eba8 0803 	subgt.w	r8, r8, r3
 80098f2:	1aff      	subgt	r7, r7, r3
 80098f4:	eba9 0903 	subgt.w	r9, r9, r3
 80098f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	dd17      	ble.n	800992e <_strtod_l+0x75e>
 80098fe:	4631      	mov	r1, r6
 8009900:	461a      	mov	r2, r3
 8009902:	4620      	mov	r0, r4
 8009904:	f002 f9ea 	bl	800bcdc <__pow5mult>
 8009908:	4606      	mov	r6, r0
 800990a:	2800      	cmp	r0, #0
 800990c:	f43f aea8 	beq.w	8009660 <_strtod_l+0x490>
 8009910:	4601      	mov	r1, r0
 8009912:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009914:	4620      	mov	r0, r4
 8009916:	f002 f937 	bl	800bb88 <__multiply>
 800991a:	900b      	str	r0, [sp, #44]	; 0x2c
 800991c:	2800      	cmp	r0, #0
 800991e:	f43f ae9f 	beq.w	8009660 <_strtod_l+0x490>
 8009922:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009924:	4620      	mov	r0, r4
 8009926:	f002 f817 	bl	800b958 <_Bfree>
 800992a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800992c:	9318      	str	r3, [sp, #96]	; 0x60
 800992e:	f1b8 0f00 	cmp.w	r8, #0
 8009932:	f300 808c 	bgt.w	8009a4e <_strtod_l+0x87e>
 8009936:	9b06      	ldr	r3, [sp, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	dd08      	ble.n	800994e <_strtod_l+0x77e>
 800993c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800993e:	9905      	ldr	r1, [sp, #20]
 8009940:	4620      	mov	r0, r4
 8009942:	f002 f9cb 	bl	800bcdc <__pow5mult>
 8009946:	9005      	str	r0, [sp, #20]
 8009948:	2800      	cmp	r0, #0
 800994a:	f43f ae89 	beq.w	8009660 <_strtod_l+0x490>
 800994e:	2f00      	cmp	r7, #0
 8009950:	dd08      	ble.n	8009964 <_strtod_l+0x794>
 8009952:	9905      	ldr	r1, [sp, #20]
 8009954:	463a      	mov	r2, r7
 8009956:	4620      	mov	r0, r4
 8009958:	f002 fa1a 	bl	800bd90 <__lshift>
 800995c:	9005      	str	r0, [sp, #20]
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f ae7e 	beq.w	8009660 <_strtod_l+0x490>
 8009964:	f1b9 0f00 	cmp.w	r9, #0
 8009968:	dd08      	ble.n	800997c <_strtod_l+0x7ac>
 800996a:	4631      	mov	r1, r6
 800996c:	464a      	mov	r2, r9
 800996e:	4620      	mov	r0, r4
 8009970:	f002 fa0e 	bl	800bd90 <__lshift>
 8009974:	4606      	mov	r6, r0
 8009976:	2800      	cmp	r0, #0
 8009978:	f43f ae72 	beq.w	8009660 <_strtod_l+0x490>
 800997c:	9a05      	ldr	r2, [sp, #20]
 800997e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009980:	4620      	mov	r0, r4
 8009982:	f002 fa91 	bl	800bea8 <__mdiff>
 8009986:	4605      	mov	r5, r0
 8009988:	2800      	cmp	r0, #0
 800998a:	f43f ae69 	beq.w	8009660 <_strtod_l+0x490>
 800998e:	68c3      	ldr	r3, [r0, #12]
 8009990:	930b      	str	r3, [sp, #44]	; 0x2c
 8009992:	2300      	movs	r3, #0
 8009994:	60c3      	str	r3, [r0, #12]
 8009996:	4631      	mov	r1, r6
 8009998:	f002 fa6a 	bl	800be70 <__mcmp>
 800999c:	2800      	cmp	r0, #0
 800999e:	da60      	bge.n	8009a62 <_strtod_l+0x892>
 80099a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a2:	ea53 030a 	orrs.w	r3, r3, sl
 80099a6:	f040 8082 	bne.w	8009aae <_strtod_l+0x8de>
 80099aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d17d      	bne.n	8009aae <_strtod_l+0x8de>
 80099b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099b6:	0d1b      	lsrs	r3, r3, #20
 80099b8:	051b      	lsls	r3, r3, #20
 80099ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80099be:	d976      	bls.n	8009aae <_strtod_l+0x8de>
 80099c0:	696b      	ldr	r3, [r5, #20]
 80099c2:	b913      	cbnz	r3, 80099ca <_strtod_l+0x7fa>
 80099c4:	692b      	ldr	r3, [r5, #16]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	dd71      	ble.n	8009aae <_strtod_l+0x8de>
 80099ca:	4629      	mov	r1, r5
 80099cc:	2201      	movs	r2, #1
 80099ce:	4620      	mov	r0, r4
 80099d0:	f002 f9de 	bl	800bd90 <__lshift>
 80099d4:	4631      	mov	r1, r6
 80099d6:	4605      	mov	r5, r0
 80099d8:	f002 fa4a 	bl	800be70 <__mcmp>
 80099dc:	2800      	cmp	r0, #0
 80099de:	dd66      	ble.n	8009aae <_strtod_l+0x8de>
 80099e0:	9904      	ldr	r1, [sp, #16]
 80099e2:	4a53      	ldr	r2, [pc, #332]	; (8009b30 <_strtod_l+0x960>)
 80099e4:	465b      	mov	r3, fp
 80099e6:	2900      	cmp	r1, #0
 80099e8:	f000 8081 	beq.w	8009aee <_strtod_l+0x91e>
 80099ec:	ea02 010b 	and.w	r1, r2, fp
 80099f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099f4:	dc7b      	bgt.n	8009aee <_strtod_l+0x91e>
 80099f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099fa:	f77f aea9 	ble.w	8009750 <_strtod_l+0x580>
 80099fe:	4b4d      	ldr	r3, [pc, #308]	; (8009b34 <_strtod_l+0x964>)
 8009a00:	4650      	mov	r0, sl
 8009a02:	4659      	mov	r1, fp
 8009a04:	2200      	movs	r2, #0
 8009a06:	f7f6 fe07 	bl	8000618 <__aeabi_dmul>
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4303      	orrs	r3, r0
 8009a0e:	bf08      	it	eq
 8009a10:	2322      	moveq	r3, #34	; 0x22
 8009a12:	4682      	mov	sl, r0
 8009a14:	468b      	mov	fp, r1
 8009a16:	bf08      	it	eq
 8009a18:	6023      	streq	r3, [r4, #0]
 8009a1a:	e62b      	b.n	8009674 <_strtod_l+0x4a4>
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a20:	fa02 f303 	lsl.w	r3, r2, r3
 8009a24:	ea03 0a0a 	and.w	sl, r3, sl
 8009a28:	e6e3      	b.n	80097f2 <_strtod_l+0x622>
 8009a2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009a2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009a32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009a36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009a3a:	fa01 f308 	lsl.w	r3, r1, r8
 8009a3e:	9308      	str	r3, [sp, #32]
 8009a40:	910d      	str	r1, [sp, #52]	; 0x34
 8009a42:	e746      	b.n	80098d2 <_strtod_l+0x702>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9308      	str	r3, [sp, #32]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4c:	e741      	b.n	80098d2 <_strtod_l+0x702>
 8009a4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a50:	4642      	mov	r2, r8
 8009a52:	4620      	mov	r0, r4
 8009a54:	f002 f99c 	bl	800bd90 <__lshift>
 8009a58:	9018      	str	r0, [sp, #96]	; 0x60
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f47f af6b 	bne.w	8009936 <_strtod_l+0x766>
 8009a60:	e5fe      	b.n	8009660 <_strtod_l+0x490>
 8009a62:	465f      	mov	r7, fp
 8009a64:	d16e      	bne.n	8009b44 <_strtod_l+0x974>
 8009a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a6c:	b342      	cbz	r2, 8009ac0 <_strtod_l+0x8f0>
 8009a6e:	4a32      	ldr	r2, [pc, #200]	; (8009b38 <_strtod_l+0x968>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d128      	bne.n	8009ac6 <_strtod_l+0x8f6>
 8009a74:	9b04      	ldr	r3, [sp, #16]
 8009a76:	4651      	mov	r1, sl
 8009a78:	b1eb      	cbz	r3, 8009ab6 <_strtod_l+0x8e6>
 8009a7a:	4b2d      	ldr	r3, [pc, #180]	; (8009b30 <_strtod_l+0x960>)
 8009a7c:	403b      	ands	r3, r7
 8009a7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a82:	f04f 32ff 	mov.w	r2, #4294967295
 8009a86:	d819      	bhi.n	8009abc <_strtod_l+0x8ec>
 8009a88:	0d1b      	lsrs	r3, r3, #20
 8009a8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	4299      	cmp	r1, r3
 8009a94:	d117      	bne.n	8009ac6 <_strtod_l+0x8f6>
 8009a96:	4b29      	ldr	r3, [pc, #164]	; (8009b3c <_strtod_l+0x96c>)
 8009a98:	429f      	cmp	r7, r3
 8009a9a:	d102      	bne.n	8009aa2 <_strtod_l+0x8d2>
 8009a9c:	3101      	adds	r1, #1
 8009a9e:	f43f addf 	beq.w	8009660 <_strtod_l+0x490>
 8009aa2:	4b23      	ldr	r3, [pc, #140]	; (8009b30 <_strtod_l+0x960>)
 8009aa4:	403b      	ands	r3, r7
 8009aa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009aaa:	f04f 0a00 	mov.w	sl, #0
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1a4      	bne.n	80099fe <_strtod_l+0x82e>
 8009ab4:	e5de      	b.n	8009674 <_strtod_l+0x4a4>
 8009ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aba:	e7ea      	b.n	8009a92 <_strtod_l+0x8c2>
 8009abc:	4613      	mov	r3, r2
 8009abe:	e7e8      	b.n	8009a92 <_strtod_l+0x8c2>
 8009ac0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ac4:	d08c      	beq.n	80099e0 <_strtod_l+0x810>
 8009ac6:	9b08      	ldr	r3, [sp, #32]
 8009ac8:	b1db      	cbz	r3, 8009b02 <_strtod_l+0x932>
 8009aca:	423b      	tst	r3, r7
 8009acc:	d0ef      	beq.n	8009aae <_strtod_l+0x8de>
 8009ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad0:	9a04      	ldr	r2, [sp, #16]
 8009ad2:	4650      	mov	r0, sl
 8009ad4:	4659      	mov	r1, fp
 8009ad6:	b1c3      	cbz	r3, 8009b0a <_strtod_l+0x93a>
 8009ad8:	f7ff fb5c 	bl	8009194 <sulp>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	ec51 0b18 	vmov	r0, r1, d8
 8009ae4:	f7f6 fbe2 	bl	80002ac <__adddf3>
 8009ae8:	4682      	mov	sl, r0
 8009aea:	468b      	mov	fp, r1
 8009aec:	e7df      	b.n	8009aae <_strtod_l+0x8de>
 8009aee:	4013      	ands	r3, r2
 8009af0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009af4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009af8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009afc:	f04f 3aff 	mov.w	sl, #4294967295
 8009b00:	e7d5      	b.n	8009aae <_strtod_l+0x8de>
 8009b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b04:	ea13 0f0a 	tst.w	r3, sl
 8009b08:	e7e0      	b.n	8009acc <_strtod_l+0x8fc>
 8009b0a:	f7ff fb43 	bl	8009194 <sulp>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	ec51 0b18 	vmov	r0, r1, d8
 8009b16:	f7f6 fbc7 	bl	80002a8 <__aeabi_dsub>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4682      	mov	sl, r0
 8009b20:	468b      	mov	fp, r1
 8009b22:	f7f6 ffe1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d0c1      	beq.n	8009aae <_strtod_l+0x8de>
 8009b2a:	e611      	b.n	8009750 <_strtod_l+0x580>
 8009b2c:	fffffc02 	.word	0xfffffc02
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	39500000 	.word	0x39500000
 8009b38:	000fffff 	.word	0x000fffff
 8009b3c:	7fefffff 	.word	0x7fefffff
 8009b40:	0800cf18 	.word	0x0800cf18
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	f002 fb10 	bl	800c16c <__ratio>
 8009b4c:	ec59 8b10 	vmov	r8, r9, d0
 8009b50:	ee10 0a10 	vmov	r0, s0
 8009b54:	2200      	movs	r2, #0
 8009b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	f7f6 ffd8 	bl	8000b10 <__aeabi_dcmple>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d07a      	beq.n	8009c5a <_strtod_l+0xa8a>
 8009b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d04a      	beq.n	8009c00 <_strtod_l+0xa30>
 8009b6a:	4b95      	ldr	r3, [pc, #596]	; (8009dc0 <_strtod_l+0xbf0>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009dc0 <_strtod_l+0xbf0>
 8009b76:	f04f 0800 	mov.w	r8, #0
 8009b7a:	4b92      	ldr	r3, [pc, #584]	; (8009dc4 <_strtod_l+0xbf4>)
 8009b7c:	403b      	ands	r3, r7
 8009b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b82:	4b91      	ldr	r3, [pc, #580]	; (8009dc8 <_strtod_l+0xbf8>)
 8009b84:	429a      	cmp	r2, r3
 8009b86:	f040 80b0 	bne.w	8009cea <_strtod_l+0xb1a>
 8009b8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009b92:	ec4b ab10 	vmov	d0, sl, fp
 8009b96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b9a:	f002 fa0f 	bl	800bfbc <__ulp>
 8009b9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ba2:	ec53 2b10 	vmov	r2, r3, d0
 8009ba6:	f7f6 fd37 	bl	8000618 <__aeabi_dmul>
 8009baa:	4652      	mov	r2, sl
 8009bac:	465b      	mov	r3, fp
 8009bae:	f7f6 fb7d 	bl	80002ac <__adddf3>
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4983      	ldr	r1, [pc, #524]	; (8009dc4 <_strtod_l+0xbf4>)
 8009bb6:	4a85      	ldr	r2, [pc, #532]	; (8009dcc <_strtod_l+0xbfc>)
 8009bb8:	4019      	ands	r1, r3
 8009bba:	4291      	cmp	r1, r2
 8009bbc:	4682      	mov	sl, r0
 8009bbe:	d960      	bls.n	8009c82 <_strtod_l+0xab2>
 8009bc0:	ee18 3a90 	vmov	r3, s17
 8009bc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d104      	bne.n	8009bd6 <_strtod_l+0xa06>
 8009bcc:	ee18 3a10 	vmov	r3, s16
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	f43f ad45 	beq.w	8009660 <_strtod_l+0x490>
 8009bd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009dd8 <_strtod_l+0xc08>
 8009bda:	f04f 3aff 	mov.w	sl, #4294967295
 8009bde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009be0:	4620      	mov	r0, r4
 8009be2:	f001 feb9 	bl	800b958 <_Bfree>
 8009be6:	9905      	ldr	r1, [sp, #20]
 8009be8:	4620      	mov	r0, r4
 8009bea:	f001 feb5 	bl	800b958 <_Bfree>
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f001 feb1 	bl	800b958 <_Bfree>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f001 fead 	bl	800b958 <_Bfree>
 8009bfe:	e61a      	b.n	8009836 <_strtod_l+0x666>
 8009c00:	f1ba 0f00 	cmp.w	sl, #0
 8009c04:	d11b      	bne.n	8009c3e <_strtod_l+0xa6e>
 8009c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c0a:	b9f3      	cbnz	r3, 8009c4a <_strtod_l+0xa7a>
 8009c0c:	4b6c      	ldr	r3, [pc, #432]	; (8009dc0 <_strtod_l+0xbf0>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4640      	mov	r0, r8
 8009c12:	4649      	mov	r1, r9
 8009c14:	f7f6 ff72 	bl	8000afc <__aeabi_dcmplt>
 8009c18:	b9d0      	cbnz	r0, 8009c50 <_strtod_l+0xa80>
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4b6c      	ldr	r3, [pc, #432]	; (8009dd0 <_strtod_l+0xc00>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7f6 fcf9 	bl	8000618 <__aeabi_dmul>
 8009c26:	4680      	mov	r8, r0
 8009c28:	4689      	mov	r9, r1
 8009c2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009c32:	9315      	str	r3, [sp, #84]	; 0x54
 8009c34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c3c:	e79d      	b.n	8009b7a <_strtod_l+0x9aa>
 8009c3e:	f1ba 0f01 	cmp.w	sl, #1
 8009c42:	d102      	bne.n	8009c4a <_strtod_l+0xa7a>
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	f43f ad83 	beq.w	8009750 <_strtod_l+0x580>
 8009c4a:	4b62      	ldr	r3, [pc, #392]	; (8009dd4 <_strtod_l+0xc04>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	e78e      	b.n	8009b6e <_strtod_l+0x99e>
 8009c50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009dd0 <_strtod_l+0xc00>
 8009c54:	f04f 0800 	mov.w	r8, #0
 8009c58:	e7e7      	b.n	8009c2a <_strtod_l+0xa5a>
 8009c5a:	4b5d      	ldr	r3, [pc, #372]	; (8009dd0 <_strtod_l+0xc00>)
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4649      	mov	r1, r9
 8009c60:	2200      	movs	r2, #0
 8009c62:	f7f6 fcd9 	bl	8000618 <__aeabi_dmul>
 8009c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	b933      	cbnz	r3, 8009c7c <_strtod_l+0xaac>
 8009c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c72:	900e      	str	r0, [sp, #56]	; 0x38
 8009c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c7a:	e7dd      	b.n	8009c38 <_strtod_l+0xa68>
 8009c7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009c80:	e7f9      	b.n	8009c76 <_strtod_l+0xaa6>
 8009c82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1a8      	bne.n	8009bde <_strtod_l+0xa0e>
 8009c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c92:	0d1b      	lsrs	r3, r3, #20
 8009c94:	051b      	lsls	r3, r3, #20
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d1a1      	bne.n	8009bde <_strtod_l+0xa0e>
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	f7f7 f86b 	bl	8000d78 <__aeabi_d2lz>
 8009ca2:	f7f6 fc8b 	bl	80005bc <__aeabi_l2d>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4640      	mov	r0, r8
 8009cac:	4649      	mov	r1, r9
 8009cae:	f7f6 fafb 	bl	80002a8 <__aeabi_dsub>
 8009cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cb8:	ea43 030a 	orr.w	r3, r3, sl
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	4680      	mov	r8, r0
 8009cc0:	4689      	mov	r9, r1
 8009cc2:	d055      	beq.n	8009d70 <_strtod_l+0xba0>
 8009cc4:	a336      	add	r3, pc, #216	; (adr r3, 8009da0 <_strtod_l+0xbd0>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 ff17 	bl	8000afc <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f47f acd0 	bne.w	8009674 <_strtod_l+0x4a4>
 8009cd4:	a334      	add	r3, pc, #208	; (adr r3, 8009da8 <_strtod_l+0xbd8>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	4640      	mov	r0, r8
 8009cdc:	4649      	mov	r1, r9
 8009cde:	f7f6 ff2b 	bl	8000b38 <__aeabi_dcmpgt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f43f af7b 	beq.w	8009bde <_strtod_l+0xa0e>
 8009ce8:	e4c4      	b.n	8009674 <_strtod_l+0x4a4>
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	b333      	cbz	r3, 8009d3c <_strtod_l+0xb6c>
 8009cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cf4:	d822      	bhi.n	8009d3c <_strtod_l+0xb6c>
 8009cf6:	a32e      	add	r3, pc, #184	; (adr r3, 8009db0 <_strtod_l+0xbe0>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 ff06 	bl	8000b10 <__aeabi_dcmple>
 8009d04:	b1a0      	cbz	r0, 8009d30 <_strtod_l+0xb60>
 8009d06:	4649      	mov	r1, r9
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f7f6 ff5d 	bl	8000bc8 <__aeabi_d2uiz>
 8009d0e:	2801      	cmp	r0, #1
 8009d10:	bf38      	it	cc
 8009d12:	2001      	movcc	r0, #1
 8009d14:	f7f6 fc06 	bl	8000524 <__aeabi_ui2d>
 8009d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	4689      	mov	r9, r1
 8009d1e:	bb23      	cbnz	r3, 8009d6a <_strtod_l+0xb9a>
 8009d20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d24:	9010      	str	r0, [sp, #64]	; 0x40
 8009d26:	9311      	str	r3, [sp, #68]	; 0x44
 8009d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d40:	eeb0 0a48 	vmov.f32	s0, s16
 8009d44:	eef0 0a68 	vmov.f32	s1, s17
 8009d48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d4c:	f002 f936 	bl	800bfbc <__ulp>
 8009d50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d54:	ec53 2b10 	vmov	r2, r3, d0
 8009d58:	f7f6 fc5e 	bl	8000618 <__aeabi_dmul>
 8009d5c:	ec53 2b18 	vmov	r2, r3, d8
 8009d60:	f7f6 faa4 	bl	80002ac <__adddf3>
 8009d64:	4682      	mov	sl, r0
 8009d66:	468b      	mov	fp, r1
 8009d68:	e78d      	b.n	8009c86 <_strtod_l+0xab6>
 8009d6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009d6e:	e7db      	b.n	8009d28 <_strtod_l+0xb58>
 8009d70:	a311      	add	r3, pc, #68	; (adr r3, 8009db8 <_strtod_l+0xbe8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fec1 	bl	8000afc <__aeabi_dcmplt>
 8009d7a:	e7b2      	b.n	8009ce2 <_strtod_l+0xb12>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	f7ff ba6b 	b.w	8009260 <_strtod_l+0x90>
 8009d8a:	2a65      	cmp	r2, #101	; 0x65
 8009d8c:	f43f ab5f 	beq.w	800944e <_strtod_l+0x27e>
 8009d90:	2a45      	cmp	r2, #69	; 0x45
 8009d92:	f43f ab5c 	beq.w	800944e <_strtod_l+0x27e>
 8009d96:	2301      	movs	r3, #1
 8009d98:	f7ff bb94 	b.w	80094c4 <_strtod_l+0x2f4>
 8009d9c:	f3af 8000 	nop.w
 8009da0:	94a03595 	.word	0x94a03595
 8009da4:	3fdfffff 	.word	0x3fdfffff
 8009da8:	35afe535 	.word	0x35afe535
 8009dac:	3fe00000 	.word	0x3fe00000
 8009db0:	ffc00000 	.word	0xffc00000
 8009db4:	41dfffff 	.word	0x41dfffff
 8009db8:	94a03595 	.word	0x94a03595
 8009dbc:	3fcfffff 	.word	0x3fcfffff
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	7ff00000 	.word	0x7ff00000
 8009dc8:	7fe00000 	.word	0x7fe00000
 8009dcc:	7c9fffff 	.word	0x7c9fffff
 8009dd0:	3fe00000 	.word	0x3fe00000
 8009dd4:	bff00000 	.word	0xbff00000
 8009dd8:	7fefffff 	.word	0x7fefffff

08009ddc <_strtod_r>:
 8009ddc:	4b01      	ldr	r3, [pc, #4]	; (8009de4 <_strtod_r+0x8>)
 8009dde:	f7ff b9f7 	b.w	80091d0 <_strtod_l>
 8009de2:	bf00      	nop
 8009de4:	20000078 	.word	0x20000078

08009de8 <_strtol_l.constprop.0>:
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dee:	d001      	beq.n	8009df4 <_strtol_l.constprop.0+0xc>
 8009df0:	2b24      	cmp	r3, #36	; 0x24
 8009df2:	d906      	bls.n	8009e02 <_strtol_l.constprop.0+0x1a>
 8009df4:	f7fe fa58 	bl	80082a8 <__errno>
 8009df8:	2316      	movs	r3, #22
 8009dfa:	6003      	str	r3, [r0, #0]
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ee8 <_strtol_l.constprop.0+0x100>
 8009e06:	460d      	mov	r5, r1
 8009e08:	462e      	mov	r6, r5
 8009e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009e12:	f017 0708 	ands.w	r7, r7, #8
 8009e16:	d1f7      	bne.n	8009e08 <_strtol_l.constprop.0+0x20>
 8009e18:	2c2d      	cmp	r4, #45	; 0x2d
 8009e1a:	d132      	bne.n	8009e82 <_strtol_l.constprop.0+0x9a>
 8009e1c:	782c      	ldrb	r4, [r5, #0]
 8009e1e:	2701      	movs	r7, #1
 8009e20:	1cb5      	adds	r5, r6, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d05b      	beq.n	8009ede <_strtol_l.constprop.0+0xf6>
 8009e26:	2b10      	cmp	r3, #16
 8009e28:	d109      	bne.n	8009e3e <_strtol_l.constprop.0+0x56>
 8009e2a:	2c30      	cmp	r4, #48	; 0x30
 8009e2c:	d107      	bne.n	8009e3e <_strtol_l.constprop.0+0x56>
 8009e2e:	782c      	ldrb	r4, [r5, #0]
 8009e30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e34:	2c58      	cmp	r4, #88	; 0x58
 8009e36:	d14d      	bne.n	8009ed4 <_strtol_l.constprop.0+0xec>
 8009e38:	786c      	ldrb	r4, [r5, #1]
 8009e3a:	2310      	movs	r3, #16
 8009e3c:	3502      	adds	r5, #2
 8009e3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e46:	f04f 0c00 	mov.w	ip, #0
 8009e4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e4e:	4666      	mov	r6, ip
 8009e50:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009e58:	f1be 0f09 	cmp.w	lr, #9
 8009e5c:	d816      	bhi.n	8009e8c <_strtol_l.constprop.0+0xa4>
 8009e5e:	4674      	mov	r4, lr
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	dd24      	ble.n	8009eae <_strtol_l.constprop.0+0xc6>
 8009e64:	f1bc 0f00 	cmp.w	ip, #0
 8009e68:	db1e      	blt.n	8009ea8 <_strtol_l.constprop.0+0xc0>
 8009e6a:	45b1      	cmp	r9, r6
 8009e6c:	d31c      	bcc.n	8009ea8 <_strtol_l.constprop.0+0xc0>
 8009e6e:	d101      	bne.n	8009e74 <_strtol_l.constprop.0+0x8c>
 8009e70:	45a2      	cmp	sl, r4
 8009e72:	db19      	blt.n	8009ea8 <_strtol_l.constprop.0+0xc0>
 8009e74:	fb06 4603 	mla	r6, r6, r3, r4
 8009e78:	f04f 0c01 	mov.w	ip, #1
 8009e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e80:	e7e8      	b.n	8009e54 <_strtol_l.constprop.0+0x6c>
 8009e82:	2c2b      	cmp	r4, #43	; 0x2b
 8009e84:	bf04      	itt	eq
 8009e86:	782c      	ldrbeq	r4, [r5, #0]
 8009e88:	1cb5      	addeq	r5, r6, #2
 8009e8a:	e7ca      	b.n	8009e22 <_strtol_l.constprop.0+0x3a>
 8009e8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009e90:	f1be 0f19 	cmp.w	lr, #25
 8009e94:	d801      	bhi.n	8009e9a <_strtol_l.constprop.0+0xb2>
 8009e96:	3c37      	subs	r4, #55	; 0x37
 8009e98:	e7e2      	b.n	8009e60 <_strtol_l.constprop.0+0x78>
 8009e9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009e9e:	f1be 0f19 	cmp.w	lr, #25
 8009ea2:	d804      	bhi.n	8009eae <_strtol_l.constprop.0+0xc6>
 8009ea4:	3c57      	subs	r4, #87	; 0x57
 8009ea6:	e7db      	b.n	8009e60 <_strtol_l.constprop.0+0x78>
 8009ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8009eac:	e7e6      	b.n	8009e7c <_strtol_l.constprop.0+0x94>
 8009eae:	f1bc 0f00 	cmp.w	ip, #0
 8009eb2:	da05      	bge.n	8009ec0 <_strtol_l.constprop.0+0xd8>
 8009eb4:	2322      	movs	r3, #34	; 0x22
 8009eb6:	6003      	str	r3, [r0, #0]
 8009eb8:	4646      	mov	r6, r8
 8009eba:	b942      	cbnz	r2, 8009ece <_strtol_l.constprop.0+0xe6>
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	e79e      	b.n	8009dfe <_strtol_l.constprop.0+0x16>
 8009ec0:	b107      	cbz	r7, 8009ec4 <_strtol_l.constprop.0+0xdc>
 8009ec2:	4276      	negs	r6, r6
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	d0f9      	beq.n	8009ebc <_strtol_l.constprop.0+0xd4>
 8009ec8:	f1bc 0f00 	cmp.w	ip, #0
 8009ecc:	d000      	beq.n	8009ed0 <_strtol_l.constprop.0+0xe8>
 8009ece:	1e69      	subs	r1, r5, #1
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	e7f3      	b.n	8009ebc <_strtol_l.constprop.0+0xd4>
 8009ed4:	2430      	movs	r4, #48	; 0x30
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1b1      	bne.n	8009e3e <_strtol_l.constprop.0+0x56>
 8009eda:	2308      	movs	r3, #8
 8009edc:	e7af      	b.n	8009e3e <_strtol_l.constprop.0+0x56>
 8009ede:	2c30      	cmp	r4, #48	; 0x30
 8009ee0:	d0a5      	beq.n	8009e2e <_strtol_l.constprop.0+0x46>
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	e7ab      	b.n	8009e3e <_strtol_l.constprop.0+0x56>
 8009ee6:	bf00      	nop
 8009ee8:	0800cf41 	.word	0x0800cf41

08009eec <_strtol_r>:
 8009eec:	f7ff bf7c 	b.w	8009de8 <_strtol_l.constprop.0>

08009ef0 <__swbuf_r>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	460e      	mov	r6, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	b118      	cbz	r0, 8009f02 <__swbuf_r+0x12>
 8009efa:	6983      	ldr	r3, [r0, #24]
 8009efc:	b90b      	cbnz	r3, 8009f02 <__swbuf_r+0x12>
 8009efe:	f001 f84b 	bl	800af98 <__sinit>
 8009f02:	4b21      	ldr	r3, [pc, #132]	; (8009f88 <__swbuf_r+0x98>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	d12b      	bne.n	8009f60 <__swbuf_r+0x70>
 8009f08:	686c      	ldr	r4, [r5, #4]
 8009f0a:	69a3      	ldr	r3, [r4, #24]
 8009f0c:	60a3      	str	r3, [r4, #8]
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	071a      	lsls	r2, r3, #28
 8009f12:	d52f      	bpl.n	8009f74 <__swbuf_r+0x84>
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	b36b      	cbz	r3, 8009f74 <__swbuf_r+0x84>
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	6820      	ldr	r0, [r4, #0]
 8009f1c:	1ac0      	subs	r0, r0, r3
 8009f1e:	6963      	ldr	r3, [r4, #20]
 8009f20:	b2f6      	uxtb	r6, r6
 8009f22:	4283      	cmp	r3, r0
 8009f24:	4637      	mov	r7, r6
 8009f26:	dc04      	bgt.n	8009f32 <__swbuf_r+0x42>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 ffa0 	bl	800ae70 <_fflush_r>
 8009f30:	bb30      	cbnz	r0, 8009f80 <__swbuf_r+0x90>
 8009f32:	68a3      	ldr	r3, [r4, #8]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	60a3      	str	r3, [r4, #8]
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	6022      	str	r2, [r4, #0]
 8009f3e:	701e      	strb	r6, [r3, #0]
 8009f40:	6963      	ldr	r3, [r4, #20]
 8009f42:	3001      	adds	r0, #1
 8009f44:	4283      	cmp	r3, r0
 8009f46:	d004      	beq.n	8009f52 <__swbuf_r+0x62>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	07db      	lsls	r3, r3, #31
 8009f4c:	d506      	bpl.n	8009f5c <__swbuf_r+0x6c>
 8009f4e:	2e0a      	cmp	r6, #10
 8009f50:	d104      	bne.n	8009f5c <__swbuf_r+0x6c>
 8009f52:	4621      	mov	r1, r4
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 ff8b 	bl	800ae70 <_fflush_r>
 8009f5a:	b988      	cbnz	r0, 8009f80 <__swbuf_r+0x90>
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <__swbuf_r+0x9c>)
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d101      	bne.n	8009f6a <__swbuf_r+0x7a>
 8009f66:	68ac      	ldr	r4, [r5, #8]
 8009f68:	e7cf      	b.n	8009f0a <__swbuf_r+0x1a>
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <__swbuf_r+0xa0>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	bf08      	it	eq
 8009f70:	68ec      	ldreq	r4, [r5, #12]
 8009f72:	e7ca      	b.n	8009f0a <__swbuf_r+0x1a>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 f80c 	bl	8009f94 <__swsetup_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d0cb      	beq.n	8009f18 <__swbuf_r+0x28>
 8009f80:	f04f 37ff 	mov.w	r7, #4294967295
 8009f84:	e7ea      	b.n	8009f5c <__swbuf_r+0x6c>
 8009f86:	bf00      	nop
 8009f88:	0800d0f4 	.word	0x0800d0f4
 8009f8c:	0800d114 	.word	0x0800d114
 8009f90:	0800d0d4 	.word	0x0800d0d4

08009f94 <__swsetup_r>:
 8009f94:	4b32      	ldr	r3, [pc, #200]	; (800a060 <__swsetup_r+0xcc>)
 8009f96:	b570      	push	{r4, r5, r6, lr}
 8009f98:	681d      	ldr	r5, [r3, #0]
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	b125      	cbz	r5, 8009faa <__swsetup_r+0x16>
 8009fa0:	69ab      	ldr	r3, [r5, #24]
 8009fa2:	b913      	cbnz	r3, 8009faa <__swsetup_r+0x16>
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f000 fff7 	bl	800af98 <__sinit>
 8009faa:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <__swsetup_r+0xd0>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	d10f      	bne.n	8009fd0 <__swsetup_r+0x3c>
 8009fb0:	686c      	ldr	r4, [r5, #4]
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fb8:	0719      	lsls	r1, r3, #28
 8009fba:	d42c      	bmi.n	800a016 <__swsetup_r+0x82>
 8009fbc:	06dd      	lsls	r5, r3, #27
 8009fbe:	d411      	bmi.n	8009fe4 <__swsetup_r+0x50>
 8009fc0:	2309      	movs	r3, #9
 8009fc2:	6033      	str	r3, [r6, #0]
 8009fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	e03e      	b.n	800a04e <__swsetup_r+0xba>
 8009fd0:	4b25      	ldr	r3, [pc, #148]	; (800a068 <__swsetup_r+0xd4>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d101      	bne.n	8009fda <__swsetup_r+0x46>
 8009fd6:	68ac      	ldr	r4, [r5, #8]
 8009fd8:	e7eb      	b.n	8009fb2 <__swsetup_r+0x1e>
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <__swsetup_r+0xd8>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	bf08      	it	eq
 8009fe0:	68ec      	ldreq	r4, [r5, #12]
 8009fe2:	e7e6      	b.n	8009fb2 <__swsetup_r+0x1e>
 8009fe4:	0758      	lsls	r0, r3, #29
 8009fe6:	d512      	bpl.n	800a00e <__swsetup_r+0x7a>
 8009fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fea:	b141      	cbz	r1, 8009ffe <__swsetup_r+0x6a>
 8009fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ff0:	4299      	cmp	r1, r3
 8009ff2:	d002      	beq.n	8009ffa <__swsetup_r+0x66>
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f002 f947 	bl	800c288 <_free_r>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a004:	81a3      	strh	r3, [r4, #12]
 800a006:	2300      	movs	r3, #0
 800a008:	6063      	str	r3, [r4, #4]
 800a00a:	6923      	ldr	r3, [r4, #16]
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	89a3      	ldrh	r3, [r4, #12]
 800a010:	f043 0308 	orr.w	r3, r3, #8
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	b94b      	cbnz	r3, 800a02e <__swsetup_r+0x9a>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a024:	d003      	beq.n	800a02e <__swsetup_r+0x9a>
 800a026:	4621      	mov	r1, r4
 800a028:	4630      	mov	r0, r6
 800a02a:	f001 fbed 	bl	800b808 <__smakebuf_r>
 800a02e:	89a0      	ldrh	r0, [r4, #12]
 800a030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a034:	f010 0301 	ands.w	r3, r0, #1
 800a038:	d00a      	beq.n	800a050 <__swsetup_r+0xbc>
 800a03a:	2300      	movs	r3, #0
 800a03c:	60a3      	str	r3, [r4, #8]
 800a03e:	6963      	ldr	r3, [r4, #20]
 800a040:	425b      	negs	r3, r3
 800a042:	61a3      	str	r3, [r4, #24]
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	b943      	cbnz	r3, 800a05a <__swsetup_r+0xc6>
 800a048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a04c:	d1ba      	bne.n	8009fc4 <__swsetup_r+0x30>
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	0781      	lsls	r1, r0, #30
 800a052:	bf58      	it	pl
 800a054:	6963      	ldrpl	r3, [r4, #20]
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	e7f4      	b.n	800a044 <__swsetup_r+0xb0>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e7f7      	b.n	800a04e <__swsetup_r+0xba>
 800a05e:	bf00      	nop
 800a060:	20000010 	.word	0x20000010
 800a064:	0800d0f4 	.word	0x0800d0f4
 800a068:	0800d114 	.word	0x0800d114
 800a06c:	0800d0d4 	.word	0x0800d0d4

0800a070 <quorem>:
 800a070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	6903      	ldr	r3, [r0, #16]
 800a076:	690c      	ldr	r4, [r1, #16]
 800a078:	42a3      	cmp	r3, r4
 800a07a:	4607      	mov	r7, r0
 800a07c:	f2c0 8081 	blt.w	800a182 <quorem+0x112>
 800a080:	3c01      	subs	r4, #1
 800a082:	f101 0814 	add.w	r8, r1, #20
 800a086:	f100 0514 	add.w	r5, r0, #20
 800a08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a098:	3301      	adds	r3, #1
 800a09a:	429a      	cmp	r2, r3
 800a09c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0a8:	d331      	bcc.n	800a10e <quorem+0x9e>
 800a0aa:	f04f 0e00 	mov.w	lr, #0
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	46ac      	mov	ip, r5
 800a0b2:	46f2      	mov	sl, lr
 800a0b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0b8:	b293      	uxth	r3, r2
 800a0ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a0be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0c8:	f8dc a000 	ldr.w	sl, [ip]
 800a0cc:	0c12      	lsrs	r2, r2, #16
 800a0ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a0d2:	fb06 e202 	mla	r2, r6, r2, lr
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	9b00      	ldr	r3, [sp, #0]
 800a0da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0de:	b292      	uxth	r2, r2
 800a0e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0ec:	4581      	cmp	r9, r0
 800a0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0fa:	d2db      	bcs.n	800a0b4 <quorem+0x44>
 800a0fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a100:	b92b      	cbnz	r3, 800a10e <quorem+0x9e>
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	3b04      	subs	r3, #4
 800a106:	429d      	cmp	r5, r3
 800a108:	461a      	mov	r2, r3
 800a10a:	d32e      	bcc.n	800a16a <quorem+0xfa>
 800a10c:	613c      	str	r4, [r7, #16]
 800a10e:	4638      	mov	r0, r7
 800a110:	f001 feae 	bl	800be70 <__mcmp>
 800a114:	2800      	cmp	r0, #0
 800a116:	db24      	blt.n	800a162 <quorem+0xf2>
 800a118:	3601      	adds	r6, #1
 800a11a:	4628      	mov	r0, r5
 800a11c:	f04f 0c00 	mov.w	ip, #0
 800a120:	f858 2b04 	ldr.w	r2, [r8], #4
 800a124:	f8d0 e000 	ldr.w	lr, [r0]
 800a128:	b293      	uxth	r3, r2
 800a12a:	ebac 0303 	sub.w	r3, ip, r3
 800a12e:	0c12      	lsrs	r2, r2, #16
 800a130:	fa13 f38e 	uxtah	r3, r3, lr
 800a134:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a142:	45c1      	cmp	r9, r8
 800a144:	f840 3b04 	str.w	r3, [r0], #4
 800a148:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a14c:	d2e8      	bcs.n	800a120 <quorem+0xb0>
 800a14e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a156:	b922      	cbnz	r2, 800a162 <quorem+0xf2>
 800a158:	3b04      	subs	r3, #4
 800a15a:	429d      	cmp	r5, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	d30a      	bcc.n	800a176 <quorem+0x106>
 800a160:	613c      	str	r4, [r7, #16]
 800a162:	4630      	mov	r0, r6
 800a164:	b003      	add	sp, #12
 800a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16a:	6812      	ldr	r2, [r2, #0]
 800a16c:	3b04      	subs	r3, #4
 800a16e:	2a00      	cmp	r2, #0
 800a170:	d1cc      	bne.n	800a10c <quorem+0x9c>
 800a172:	3c01      	subs	r4, #1
 800a174:	e7c7      	b.n	800a106 <quorem+0x96>
 800a176:	6812      	ldr	r2, [r2, #0]
 800a178:	3b04      	subs	r3, #4
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	d1f0      	bne.n	800a160 <quorem+0xf0>
 800a17e:	3c01      	subs	r4, #1
 800a180:	e7eb      	b.n	800a15a <quorem+0xea>
 800a182:	2000      	movs	r0, #0
 800a184:	e7ee      	b.n	800a164 <quorem+0xf4>
	...

0800a188 <_dtoa_r>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b04 	vpush	{d8-d9}
 800a190:	ec57 6b10 	vmov	r6, r7, d0
 800a194:	b093      	sub	sp, #76	; 0x4c
 800a196:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a198:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a19c:	9106      	str	r1, [sp, #24]
 800a19e:	ee10 aa10 	vmov	sl, s0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1a8:	46bb      	mov	fp, r7
 800a1aa:	b975      	cbnz	r5, 800a1ca <_dtoa_r+0x42>
 800a1ac:	2010      	movs	r0, #16
 800a1ae:	f001 fb6b 	bl	800b888 <malloc>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a1b6:	b920      	cbnz	r0, 800a1c2 <_dtoa_r+0x3a>
 800a1b8:	4ba7      	ldr	r3, [pc, #668]	; (800a458 <_dtoa_r+0x2d0>)
 800a1ba:	21ea      	movs	r1, #234	; 0xea
 800a1bc:	48a7      	ldr	r0, [pc, #668]	; (800a45c <_dtoa_r+0x2d4>)
 800a1be:	f002 fcd1 	bl	800cb64 <__assert_func>
 800a1c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1c6:	6005      	str	r5, [r0, #0]
 800a1c8:	60c5      	str	r5, [r0, #12]
 800a1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1cc:	6819      	ldr	r1, [r3, #0]
 800a1ce:	b151      	cbz	r1, 800a1e6 <_dtoa_r+0x5e>
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	604a      	str	r2, [r1, #4]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4093      	lsls	r3, r2
 800a1d8:	608b      	str	r3, [r1, #8]
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f001 fbbc 	bl	800b958 <_Bfree>
 800a1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	1e3b      	subs	r3, r7, #0
 800a1e8:	bfaa      	itet	ge
 800a1ea:	2300      	movge	r3, #0
 800a1ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1f0:	f8c8 3000 	strge.w	r3, [r8]
 800a1f4:	4b9a      	ldr	r3, [pc, #616]	; (800a460 <_dtoa_r+0x2d8>)
 800a1f6:	bfbc      	itt	lt
 800a1f8:	2201      	movlt	r2, #1
 800a1fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a1fe:	ea33 030b 	bics.w	r3, r3, fp
 800a202:	d11b      	bne.n	800a23c <_dtoa_r+0xb4>
 800a204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a206:	f242 730f 	movw	r3, #9999	; 0x270f
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a210:	4333      	orrs	r3, r6
 800a212:	f000 8592 	beq.w	800ad3a <_dtoa_r+0xbb2>
 800a216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a218:	b963      	cbnz	r3, 800a234 <_dtoa_r+0xac>
 800a21a:	4b92      	ldr	r3, [pc, #584]	; (800a464 <_dtoa_r+0x2dc>)
 800a21c:	e022      	b.n	800a264 <_dtoa_r+0xdc>
 800a21e:	4b92      	ldr	r3, [pc, #584]	; (800a468 <_dtoa_r+0x2e0>)
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	3308      	adds	r3, #8
 800a224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	9801      	ldr	r0, [sp, #4]
 800a22a:	b013      	add	sp, #76	; 0x4c
 800a22c:	ecbd 8b04 	vpop	{d8-d9}
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	4b8b      	ldr	r3, [pc, #556]	; (800a464 <_dtoa_r+0x2dc>)
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	3303      	adds	r3, #3
 800a23a:	e7f3      	b.n	800a224 <_dtoa_r+0x9c>
 800a23c:	2200      	movs	r2, #0
 800a23e:	2300      	movs	r3, #0
 800a240:	4650      	mov	r0, sl
 800a242:	4659      	mov	r1, fp
 800a244:	f7f6 fc50 	bl	8000ae8 <__aeabi_dcmpeq>
 800a248:	ec4b ab19 	vmov	d9, sl, fp
 800a24c:	4680      	mov	r8, r0
 800a24e:	b158      	cbz	r0, 800a268 <_dtoa_r+0xe0>
 800a250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a252:	2301      	movs	r3, #1
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 856b 	beq.w	800ad34 <_dtoa_r+0xbac>
 800a25e:	4883      	ldr	r0, [pc, #524]	; (800a46c <_dtoa_r+0x2e4>)
 800a260:	6018      	str	r0, [r3, #0]
 800a262:	1e43      	subs	r3, r0, #1
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	e7df      	b.n	800a228 <_dtoa_r+0xa0>
 800a268:	ec4b ab10 	vmov	d0, sl, fp
 800a26c:	aa10      	add	r2, sp, #64	; 0x40
 800a26e:	a911      	add	r1, sp, #68	; 0x44
 800a270:	4620      	mov	r0, r4
 800a272:	f001 ff1f 	bl	800c0b4 <__d2b>
 800a276:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a27a:	ee08 0a10 	vmov	s16, r0
 800a27e:	2d00      	cmp	r5, #0
 800a280:	f000 8084 	beq.w	800a38c <_dtoa_r+0x204>
 800a284:	ee19 3a90 	vmov	r3, s19
 800a288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a28c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a290:	4656      	mov	r6, sl
 800a292:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a29a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a29e:	4b74      	ldr	r3, [pc, #464]	; (800a470 <_dtoa_r+0x2e8>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f5 ffff 	bl	80002a8 <__aeabi_dsub>
 800a2aa:	a365      	add	r3, pc, #404	; (adr r3, 800a440 <_dtoa_r+0x2b8>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f6 f9b2 	bl	8000618 <__aeabi_dmul>
 800a2b4:	a364      	add	r3, pc, #400	; (adr r3, 800a448 <_dtoa_r+0x2c0>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f7f5 fff7 	bl	80002ac <__adddf3>
 800a2be:	4606      	mov	r6, r0
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	f7f6 f93e 	bl	8000544 <__aeabi_i2d>
 800a2c8:	a361      	add	r3, pc, #388	; (adr r3, 800a450 <_dtoa_r+0x2c8>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 f9a3 	bl	8000618 <__aeabi_dmul>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4639      	mov	r1, r7
 800a2da:	f7f5 ffe7 	bl	80002ac <__adddf3>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	f7f6 fc49 	bl	8000b78 <__aeabi_d2iz>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	9000      	str	r0, [sp, #0]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 fc04 	bl	8000afc <__aeabi_dcmplt>
 800a2f4:	b150      	cbz	r0, 800a30c <_dtoa_r+0x184>
 800a2f6:	9800      	ldr	r0, [sp, #0]
 800a2f8:	f7f6 f924 	bl	8000544 <__aeabi_i2d>
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	463b      	mov	r3, r7
 800a300:	f7f6 fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a304:	b910      	cbnz	r0, 800a30c <_dtoa_r+0x184>
 800a306:	9b00      	ldr	r3, [sp, #0]
 800a308:	3b01      	subs	r3, #1
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	9b00      	ldr	r3, [sp, #0]
 800a30e:	2b16      	cmp	r3, #22
 800a310:	d85a      	bhi.n	800a3c8 <_dtoa_r+0x240>
 800a312:	9a00      	ldr	r2, [sp, #0]
 800a314:	4b57      	ldr	r3, [pc, #348]	; (800a474 <_dtoa_r+0x2ec>)
 800a316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	ec51 0b19 	vmov	r0, r1, d9
 800a322:	f7f6 fbeb 	bl	8000afc <__aeabi_dcmplt>
 800a326:	2800      	cmp	r0, #0
 800a328:	d050      	beq.n	800a3cc <_dtoa_r+0x244>
 800a32a:	9b00      	ldr	r3, [sp, #0]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	2300      	movs	r3, #0
 800a332:	930b      	str	r3, [sp, #44]	; 0x2c
 800a334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a336:	1b5d      	subs	r5, r3, r5
 800a338:	1e6b      	subs	r3, r5, #1
 800a33a:	9305      	str	r3, [sp, #20]
 800a33c:	bf45      	ittet	mi
 800a33e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a342:	9304      	strmi	r3, [sp, #16]
 800a344:	2300      	movpl	r3, #0
 800a346:	2300      	movmi	r3, #0
 800a348:	bf4c      	ite	mi
 800a34a:	9305      	strmi	r3, [sp, #20]
 800a34c:	9304      	strpl	r3, [sp, #16]
 800a34e:	9b00      	ldr	r3, [sp, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	db3d      	blt.n	800a3d0 <_dtoa_r+0x248>
 800a354:	9b05      	ldr	r3, [sp, #20]
 800a356:	9a00      	ldr	r2, [sp, #0]
 800a358:	920a      	str	r2, [sp, #40]	; 0x28
 800a35a:	4413      	add	r3, r2
 800a35c:	9305      	str	r3, [sp, #20]
 800a35e:	2300      	movs	r3, #0
 800a360:	9307      	str	r3, [sp, #28]
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	2b09      	cmp	r3, #9
 800a366:	f200 8089 	bhi.w	800a47c <_dtoa_r+0x2f4>
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	bfc4      	itt	gt
 800a36e:	3b04      	subgt	r3, #4
 800a370:	9306      	strgt	r3, [sp, #24]
 800a372:	9b06      	ldr	r3, [sp, #24]
 800a374:	f1a3 0302 	sub.w	r3, r3, #2
 800a378:	bfcc      	ite	gt
 800a37a:	2500      	movgt	r5, #0
 800a37c:	2501      	movle	r5, #1
 800a37e:	2b03      	cmp	r3, #3
 800a380:	f200 8087 	bhi.w	800a492 <_dtoa_r+0x30a>
 800a384:	e8df f003 	tbb	[pc, r3]
 800a388:	59383a2d 	.word	0x59383a2d
 800a38c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a390:	441d      	add	r5, r3
 800a392:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a396:	2b20      	cmp	r3, #32
 800a398:	bfc1      	itttt	gt
 800a39a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a39e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a3a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3aa:	bfda      	itte	le
 800a3ac:	f1c3 0320 	rsble	r3, r3, #32
 800a3b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a3b4:	4318      	orrgt	r0, r3
 800a3b6:	f7f6 f8b5 	bl	8000524 <__aeabi_ui2d>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4606      	mov	r6, r0
 800a3be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3c2:	3d01      	subs	r5, #1
 800a3c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c6:	e76a      	b.n	800a29e <_dtoa_r+0x116>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7b2      	b.n	800a332 <_dtoa_r+0x1aa>
 800a3cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3ce:	e7b1      	b.n	800a334 <_dtoa_r+0x1ac>
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	9a00      	ldr	r2, [sp, #0]
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	4253      	negs	r3, r2
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	930a      	str	r3, [sp, #40]	; 0x28
 800a3e0:	e7bf      	b.n	800a362 <_dtoa_r+0x1da>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9308      	str	r3, [sp, #32]
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dc55      	bgt.n	800a498 <_dtoa_r+0x310>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3f6:	e00c      	b.n	800a412 <_dtoa_r+0x28a>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e7f3      	b.n	800a3e4 <_dtoa_r+0x25c>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a400:	9308      	str	r3, [sp, #32]
 800a402:	9b00      	ldr	r3, [sp, #0]
 800a404:	4413      	add	r3, r2
 800a406:	9302      	str	r3, [sp, #8]
 800a408:	3301      	adds	r3, #1
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	bfb8      	it	lt
 800a410:	2301      	movlt	r3, #1
 800a412:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a414:	2200      	movs	r2, #0
 800a416:	6042      	str	r2, [r0, #4]
 800a418:	2204      	movs	r2, #4
 800a41a:	f102 0614 	add.w	r6, r2, #20
 800a41e:	429e      	cmp	r6, r3
 800a420:	6841      	ldr	r1, [r0, #4]
 800a422:	d93d      	bls.n	800a4a0 <_dtoa_r+0x318>
 800a424:	4620      	mov	r0, r4
 800a426:	f001 fa57 	bl	800b8d8 <_Balloc>
 800a42a:	9001      	str	r0, [sp, #4]
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d13b      	bne.n	800a4a8 <_dtoa_r+0x320>
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <_dtoa_r+0x2f0>)
 800a432:	4602      	mov	r2, r0
 800a434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a438:	e6c0      	b.n	800a1bc <_dtoa_r+0x34>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e7df      	b.n	800a3fe <_dtoa_r+0x276>
 800a43e:	bf00      	nop
 800a440:	636f4361 	.word	0x636f4361
 800a444:	3fd287a7 	.word	0x3fd287a7
 800a448:	8b60c8b3 	.word	0x8b60c8b3
 800a44c:	3fc68a28 	.word	0x3fc68a28
 800a450:	509f79fb 	.word	0x509f79fb
 800a454:	3fd34413 	.word	0x3fd34413
 800a458:	0800d04e 	.word	0x0800d04e
 800a45c:	0800d065 	.word	0x0800d065
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	0800d04a 	.word	0x0800d04a
 800a468:	0800d041 	.word	0x0800d041
 800a46c:	0800cec1 	.word	0x0800cec1
 800a470:	3ff80000 	.word	0x3ff80000
 800a474:	0800d238 	.word	0x0800d238
 800a478:	0800d0c0 	.word	0x0800d0c0
 800a47c:	2501      	movs	r5, #1
 800a47e:	2300      	movs	r3, #0
 800a480:	9306      	str	r3, [sp, #24]
 800a482:	9508      	str	r5, [sp, #32]
 800a484:	f04f 33ff 	mov.w	r3, #4294967295
 800a488:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a48c:	2200      	movs	r2, #0
 800a48e:	2312      	movs	r3, #18
 800a490:	e7b0      	b.n	800a3f4 <_dtoa_r+0x26c>
 800a492:	2301      	movs	r3, #1
 800a494:	9308      	str	r3, [sp, #32]
 800a496:	e7f5      	b.n	800a484 <_dtoa_r+0x2fc>
 800a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a49e:	e7b8      	b.n	800a412 <_dtoa_r+0x28a>
 800a4a0:	3101      	adds	r1, #1
 800a4a2:	6041      	str	r1, [r0, #4]
 800a4a4:	0052      	lsls	r2, r2, #1
 800a4a6:	e7b8      	b.n	800a41a <_dtoa_r+0x292>
 800a4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4aa:	9a01      	ldr	r2, [sp, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	2b0e      	cmp	r3, #14
 800a4b2:	f200 809d 	bhi.w	800a5f0 <_dtoa_r+0x468>
 800a4b6:	2d00      	cmp	r5, #0
 800a4b8:	f000 809a 	beq.w	800a5f0 <_dtoa_r+0x468>
 800a4bc:	9b00      	ldr	r3, [sp, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dd32      	ble.n	800a528 <_dtoa_r+0x3a0>
 800a4c2:	4ab7      	ldr	r2, [pc, #732]	; (800a7a0 <_dtoa_r+0x618>)
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	05d8      	lsls	r0, r3, #23
 800a4d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a4d8:	d516      	bpl.n	800a508 <_dtoa_r+0x380>
 800a4da:	4bb2      	ldr	r3, [pc, #712]	; (800a7a4 <_dtoa_r+0x61c>)
 800a4dc:	ec51 0b19 	vmov	r0, r1, d9
 800a4e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4e4:	f7f6 f9c2 	bl	800086c <__aeabi_ddiv>
 800a4e8:	f007 070f 	and.w	r7, r7, #15
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	468b      	mov	fp, r1
 800a4f0:	2503      	movs	r5, #3
 800a4f2:	4eac      	ldr	r6, [pc, #688]	; (800a7a4 <_dtoa_r+0x61c>)
 800a4f4:	b957      	cbnz	r7, 800a50c <_dtoa_r+0x384>
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	f7f6 f9b5 	bl	800086c <__aeabi_ddiv>
 800a502:	4682      	mov	sl, r0
 800a504:	468b      	mov	fp, r1
 800a506:	e028      	b.n	800a55a <_dtoa_r+0x3d2>
 800a508:	2502      	movs	r5, #2
 800a50a:	e7f2      	b.n	800a4f2 <_dtoa_r+0x36a>
 800a50c:	07f9      	lsls	r1, r7, #31
 800a50e:	d508      	bpl.n	800a522 <_dtoa_r+0x39a>
 800a510:	4640      	mov	r0, r8
 800a512:	4649      	mov	r1, r9
 800a514:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a518:	f7f6 f87e 	bl	8000618 <__aeabi_dmul>
 800a51c:	3501      	adds	r5, #1
 800a51e:	4680      	mov	r8, r0
 800a520:	4689      	mov	r9, r1
 800a522:	107f      	asrs	r7, r7, #1
 800a524:	3608      	adds	r6, #8
 800a526:	e7e5      	b.n	800a4f4 <_dtoa_r+0x36c>
 800a528:	f000 809b 	beq.w	800a662 <_dtoa_r+0x4da>
 800a52c:	9b00      	ldr	r3, [sp, #0]
 800a52e:	4f9d      	ldr	r7, [pc, #628]	; (800a7a4 <_dtoa_r+0x61c>)
 800a530:	425e      	negs	r6, r3
 800a532:	4b9b      	ldr	r3, [pc, #620]	; (800a7a0 <_dtoa_r+0x618>)
 800a534:	f006 020f 	and.w	r2, r6, #15
 800a538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	ec51 0b19 	vmov	r0, r1, d9
 800a544:	f7f6 f868 	bl	8000618 <__aeabi_dmul>
 800a548:	1136      	asrs	r6, r6, #4
 800a54a:	4682      	mov	sl, r0
 800a54c:	468b      	mov	fp, r1
 800a54e:	2300      	movs	r3, #0
 800a550:	2502      	movs	r5, #2
 800a552:	2e00      	cmp	r6, #0
 800a554:	d17a      	bne.n	800a64c <_dtoa_r+0x4c4>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1d3      	bne.n	800a502 <_dtoa_r+0x37a>
 800a55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 8082 	beq.w	800a666 <_dtoa_r+0x4de>
 800a562:	4b91      	ldr	r3, [pc, #580]	; (800a7a8 <_dtoa_r+0x620>)
 800a564:	2200      	movs	r2, #0
 800a566:	4650      	mov	r0, sl
 800a568:	4659      	mov	r1, fp
 800a56a:	f7f6 fac7 	bl	8000afc <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d079      	beq.n	800a666 <_dtoa_r+0x4de>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d076      	beq.n	800a666 <_dtoa_r+0x4de>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dd36      	ble.n	800a5ec <_dtoa_r+0x464>
 800a57e:	9b00      	ldr	r3, [sp, #0]
 800a580:	4650      	mov	r0, sl
 800a582:	4659      	mov	r1, fp
 800a584:	1e5f      	subs	r7, r3, #1
 800a586:	2200      	movs	r2, #0
 800a588:	4b88      	ldr	r3, [pc, #544]	; (800a7ac <_dtoa_r+0x624>)
 800a58a:	f7f6 f845 	bl	8000618 <__aeabi_dmul>
 800a58e:	9e02      	ldr	r6, [sp, #8]
 800a590:	4682      	mov	sl, r0
 800a592:	468b      	mov	fp, r1
 800a594:	3501      	adds	r5, #1
 800a596:	4628      	mov	r0, r5
 800a598:	f7f5 ffd4 	bl	8000544 <__aeabi_i2d>
 800a59c:	4652      	mov	r2, sl
 800a59e:	465b      	mov	r3, fp
 800a5a0:	f7f6 f83a 	bl	8000618 <__aeabi_dmul>
 800a5a4:	4b82      	ldr	r3, [pc, #520]	; (800a7b0 <_dtoa_r+0x628>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f7f5 fe80 	bl	80002ac <__adddf3>
 800a5ac:	46d0      	mov	r8, sl
 800a5ae:	46d9      	mov	r9, fp
 800a5b0:	4682      	mov	sl, r0
 800a5b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	d158      	bne.n	800a66c <_dtoa_r+0x4e4>
 800a5ba:	4b7e      	ldr	r3, [pc, #504]	; (800a7b4 <_dtoa_r+0x62c>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f5 fe71 	bl	80002a8 <__aeabi_dsub>
 800a5c6:	4652      	mov	r2, sl
 800a5c8:	465b      	mov	r3, fp
 800a5ca:	4680      	mov	r8, r0
 800a5cc:	4689      	mov	r9, r1
 800a5ce:	f7f6 fab3 	bl	8000b38 <__aeabi_dcmpgt>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f040 8295 	bne.w	800ab02 <_dtoa_r+0x97a>
 800a5d8:	4652      	mov	r2, sl
 800a5da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	f7f6 fa8b 	bl	8000afc <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 8289 	bne.w	800aafe <_dtoa_r+0x976>
 800a5ec:	ec5b ab19 	vmov	sl, fp, d9
 800a5f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f2c0 8148 	blt.w	800a888 <_dtoa_r+0x700>
 800a5f8:	9a00      	ldr	r2, [sp, #0]
 800a5fa:	2a0e      	cmp	r2, #14
 800a5fc:	f300 8144 	bgt.w	800a888 <_dtoa_r+0x700>
 800a600:	4b67      	ldr	r3, [pc, #412]	; (800a7a0 <_dtoa_r+0x618>)
 800a602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a606:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f280 80d5 	bge.w	800a7bc <_dtoa_r+0x634>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f300 80d1 	bgt.w	800a7bc <_dtoa_r+0x634>
 800a61a:	f040 826f 	bne.w	800aafc <_dtoa_r+0x974>
 800a61e:	4b65      	ldr	r3, [pc, #404]	; (800a7b4 <_dtoa_r+0x62c>)
 800a620:	2200      	movs	r2, #0
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f5 fff7 	bl	8000618 <__aeabi_dmul>
 800a62a:	4652      	mov	r2, sl
 800a62c:	465b      	mov	r3, fp
 800a62e:	f7f6 fa79 	bl	8000b24 <__aeabi_dcmpge>
 800a632:	9e03      	ldr	r6, [sp, #12]
 800a634:	4637      	mov	r7, r6
 800a636:	2800      	cmp	r0, #0
 800a638:	f040 8245 	bne.w	800aac6 <_dtoa_r+0x93e>
 800a63c:	9d01      	ldr	r5, [sp, #4]
 800a63e:	2331      	movs	r3, #49	; 0x31
 800a640:	f805 3b01 	strb.w	r3, [r5], #1
 800a644:	9b00      	ldr	r3, [sp, #0]
 800a646:	3301      	adds	r3, #1
 800a648:	9300      	str	r3, [sp, #0]
 800a64a:	e240      	b.n	800aace <_dtoa_r+0x946>
 800a64c:	07f2      	lsls	r2, r6, #31
 800a64e:	d505      	bpl.n	800a65c <_dtoa_r+0x4d4>
 800a650:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a654:	f7f5 ffe0 	bl	8000618 <__aeabi_dmul>
 800a658:	3501      	adds	r5, #1
 800a65a:	2301      	movs	r3, #1
 800a65c:	1076      	asrs	r6, r6, #1
 800a65e:	3708      	adds	r7, #8
 800a660:	e777      	b.n	800a552 <_dtoa_r+0x3ca>
 800a662:	2502      	movs	r5, #2
 800a664:	e779      	b.n	800a55a <_dtoa_r+0x3d2>
 800a666:	9f00      	ldr	r7, [sp, #0]
 800a668:	9e03      	ldr	r6, [sp, #12]
 800a66a:	e794      	b.n	800a596 <_dtoa_r+0x40e>
 800a66c:	9901      	ldr	r1, [sp, #4]
 800a66e:	4b4c      	ldr	r3, [pc, #304]	; (800a7a0 <_dtoa_r+0x618>)
 800a670:	4431      	add	r1, r6
 800a672:	910d      	str	r1, [sp, #52]	; 0x34
 800a674:	9908      	ldr	r1, [sp, #32]
 800a676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a67a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a67e:	2900      	cmp	r1, #0
 800a680:	d043      	beq.n	800a70a <_dtoa_r+0x582>
 800a682:	494d      	ldr	r1, [pc, #308]	; (800a7b8 <_dtoa_r+0x630>)
 800a684:	2000      	movs	r0, #0
 800a686:	f7f6 f8f1 	bl	800086c <__aeabi_ddiv>
 800a68a:	4652      	mov	r2, sl
 800a68c:	465b      	mov	r3, fp
 800a68e:	f7f5 fe0b 	bl	80002a8 <__aeabi_dsub>
 800a692:	9d01      	ldr	r5, [sp, #4]
 800a694:	4682      	mov	sl, r0
 800a696:	468b      	mov	fp, r1
 800a698:	4649      	mov	r1, r9
 800a69a:	4640      	mov	r0, r8
 800a69c:	f7f6 fa6c 	bl	8000b78 <__aeabi_d2iz>
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	f7f5 ff4f 	bl	8000544 <__aeabi_i2d>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	f7f5 fdfb 	bl	80002a8 <__aeabi_dsub>
 800a6b2:	3630      	adds	r6, #48	; 0x30
 800a6b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	465b      	mov	r3, fp
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4689      	mov	r9, r1
 800a6c0:	f7f6 fa1c 	bl	8000afc <__aeabi_dcmplt>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d163      	bne.n	800a790 <_dtoa_r+0x608>
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	4936      	ldr	r1, [pc, #216]	; (800a7a8 <_dtoa_r+0x620>)
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	f7f5 fdea 	bl	80002a8 <__aeabi_dsub>
 800a6d4:	4652      	mov	r2, sl
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	f7f6 fa10 	bl	8000afc <__aeabi_dcmplt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f040 80b5 	bne.w	800a84c <_dtoa_r+0x6c4>
 800a6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e4:	429d      	cmp	r5, r3
 800a6e6:	d081      	beq.n	800a5ec <_dtoa_r+0x464>
 800a6e8:	4b30      	ldr	r3, [pc, #192]	; (800a7ac <_dtoa_r+0x624>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4650      	mov	r0, sl
 800a6ee:	4659      	mov	r1, fp
 800a6f0:	f7f5 ff92 	bl	8000618 <__aeabi_dmul>
 800a6f4:	4b2d      	ldr	r3, [pc, #180]	; (800a7ac <_dtoa_r+0x624>)
 800a6f6:	4682      	mov	sl, r0
 800a6f8:	468b      	mov	fp, r1
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	2200      	movs	r2, #0
 800a700:	f7f5 ff8a 	bl	8000618 <__aeabi_dmul>
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	e7c6      	b.n	800a698 <_dtoa_r+0x510>
 800a70a:	4650      	mov	r0, sl
 800a70c:	4659      	mov	r1, fp
 800a70e:	f7f5 ff83 	bl	8000618 <__aeabi_dmul>
 800a712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a714:	9d01      	ldr	r5, [sp, #4]
 800a716:	930f      	str	r3, [sp, #60]	; 0x3c
 800a718:	4682      	mov	sl, r0
 800a71a:	468b      	mov	fp, r1
 800a71c:	4649      	mov	r1, r9
 800a71e:	4640      	mov	r0, r8
 800a720:	f7f6 fa2a 	bl	8000b78 <__aeabi_d2iz>
 800a724:	4606      	mov	r6, r0
 800a726:	f7f5 ff0d 	bl	8000544 <__aeabi_i2d>
 800a72a:	3630      	adds	r6, #48	; 0x30
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4640      	mov	r0, r8
 800a732:	4649      	mov	r1, r9
 800a734:	f7f5 fdb8 	bl	80002a8 <__aeabi_dsub>
 800a738:	f805 6b01 	strb.w	r6, [r5], #1
 800a73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a73e:	429d      	cmp	r5, r3
 800a740:	4680      	mov	r8, r0
 800a742:	4689      	mov	r9, r1
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	d124      	bne.n	800a794 <_dtoa_r+0x60c>
 800a74a:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <_dtoa_r+0x630>)
 800a74c:	4650      	mov	r0, sl
 800a74e:	4659      	mov	r1, fp
 800a750:	f7f5 fdac 	bl	80002ac <__adddf3>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	f7f6 f9ec 	bl	8000b38 <__aeabi_dcmpgt>
 800a760:	2800      	cmp	r0, #0
 800a762:	d173      	bne.n	800a84c <_dtoa_r+0x6c4>
 800a764:	4652      	mov	r2, sl
 800a766:	465b      	mov	r3, fp
 800a768:	4913      	ldr	r1, [pc, #76]	; (800a7b8 <_dtoa_r+0x630>)
 800a76a:	2000      	movs	r0, #0
 800a76c:	f7f5 fd9c 	bl	80002a8 <__aeabi_dsub>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4640      	mov	r0, r8
 800a776:	4649      	mov	r1, r9
 800a778:	f7f6 f9c0 	bl	8000afc <__aeabi_dcmplt>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f43f af35 	beq.w	800a5ec <_dtoa_r+0x464>
 800a782:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a784:	1e6b      	subs	r3, r5, #1
 800a786:	930f      	str	r3, [sp, #60]	; 0x3c
 800a788:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a78c:	2b30      	cmp	r3, #48	; 0x30
 800a78e:	d0f8      	beq.n	800a782 <_dtoa_r+0x5fa>
 800a790:	9700      	str	r7, [sp, #0]
 800a792:	e049      	b.n	800a828 <_dtoa_r+0x6a0>
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <_dtoa_r+0x624>)
 800a796:	f7f5 ff3f 	bl	8000618 <__aeabi_dmul>
 800a79a:	4680      	mov	r8, r0
 800a79c:	4689      	mov	r9, r1
 800a79e:	e7bd      	b.n	800a71c <_dtoa_r+0x594>
 800a7a0:	0800d238 	.word	0x0800d238
 800a7a4:	0800d210 	.word	0x0800d210
 800a7a8:	3ff00000 	.word	0x3ff00000
 800a7ac:	40240000 	.word	0x40240000
 800a7b0:	401c0000 	.word	0x401c0000
 800a7b4:	40140000 	.word	0x40140000
 800a7b8:	3fe00000 	.word	0x3fe00000
 800a7bc:	9d01      	ldr	r5, [sp, #4]
 800a7be:	4656      	mov	r6, sl
 800a7c0:	465f      	mov	r7, fp
 800a7c2:	4642      	mov	r2, r8
 800a7c4:	464b      	mov	r3, r9
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	f7f6 f84f 	bl	800086c <__aeabi_ddiv>
 800a7ce:	f7f6 f9d3 	bl	8000b78 <__aeabi_d2iz>
 800a7d2:	4682      	mov	sl, r0
 800a7d4:	f7f5 feb6 	bl	8000544 <__aeabi_i2d>
 800a7d8:	4642      	mov	r2, r8
 800a7da:	464b      	mov	r3, r9
 800a7dc:	f7f5 ff1c 	bl	8000618 <__aeabi_dmul>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a7ec:	f7f5 fd5c 	bl	80002a8 <__aeabi_dsub>
 800a7f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7f4:	9e01      	ldr	r6, [sp, #4]
 800a7f6:	9f03      	ldr	r7, [sp, #12]
 800a7f8:	1bae      	subs	r6, r5, r6
 800a7fa:	42b7      	cmp	r7, r6
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	d135      	bne.n	800a86e <_dtoa_r+0x6e6>
 800a802:	f7f5 fd53 	bl	80002ac <__adddf3>
 800a806:	4642      	mov	r2, r8
 800a808:	464b      	mov	r3, r9
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	f7f6 f993 	bl	8000b38 <__aeabi_dcmpgt>
 800a812:	b9d0      	cbnz	r0, 800a84a <_dtoa_r+0x6c2>
 800a814:	4642      	mov	r2, r8
 800a816:	464b      	mov	r3, r9
 800a818:	4630      	mov	r0, r6
 800a81a:	4639      	mov	r1, r7
 800a81c:	f7f6 f964 	bl	8000ae8 <__aeabi_dcmpeq>
 800a820:	b110      	cbz	r0, 800a828 <_dtoa_r+0x6a0>
 800a822:	f01a 0f01 	tst.w	sl, #1
 800a826:	d110      	bne.n	800a84a <_dtoa_r+0x6c2>
 800a828:	4620      	mov	r0, r4
 800a82a:	ee18 1a10 	vmov	r1, s16
 800a82e:	f001 f893 	bl	800b958 <_Bfree>
 800a832:	2300      	movs	r3, #0
 800a834:	9800      	ldr	r0, [sp, #0]
 800a836:	702b      	strb	r3, [r5, #0]
 800a838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a83a:	3001      	adds	r0, #1
 800a83c:	6018      	str	r0, [r3, #0]
 800a83e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a840:	2b00      	cmp	r3, #0
 800a842:	f43f acf1 	beq.w	800a228 <_dtoa_r+0xa0>
 800a846:	601d      	str	r5, [r3, #0]
 800a848:	e4ee      	b.n	800a228 <_dtoa_r+0xa0>
 800a84a:	9f00      	ldr	r7, [sp, #0]
 800a84c:	462b      	mov	r3, r5
 800a84e:	461d      	mov	r5, r3
 800a850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a854:	2a39      	cmp	r2, #57	; 0x39
 800a856:	d106      	bne.n	800a866 <_dtoa_r+0x6de>
 800a858:	9a01      	ldr	r2, [sp, #4]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d1f7      	bne.n	800a84e <_dtoa_r+0x6c6>
 800a85e:	9901      	ldr	r1, [sp, #4]
 800a860:	2230      	movs	r2, #48	; 0x30
 800a862:	3701      	adds	r7, #1
 800a864:	700a      	strb	r2, [r1, #0]
 800a866:	781a      	ldrb	r2, [r3, #0]
 800a868:	3201      	adds	r2, #1
 800a86a:	701a      	strb	r2, [r3, #0]
 800a86c:	e790      	b.n	800a790 <_dtoa_r+0x608>
 800a86e:	4ba6      	ldr	r3, [pc, #664]	; (800ab08 <_dtoa_r+0x980>)
 800a870:	2200      	movs	r2, #0
 800a872:	f7f5 fed1 	bl	8000618 <__aeabi_dmul>
 800a876:	2200      	movs	r2, #0
 800a878:	2300      	movs	r3, #0
 800a87a:	4606      	mov	r6, r0
 800a87c:	460f      	mov	r7, r1
 800a87e:	f7f6 f933 	bl	8000ae8 <__aeabi_dcmpeq>
 800a882:	2800      	cmp	r0, #0
 800a884:	d09d      	beq.n	800a7c2 <_dtoa_r+0x63a>
 800a886:	e7cf      	b.n	800a828 <_dtoa_r+0x6a0>
 800a888:	9a08      	ldr	r2, [sp, #32]
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	f000 80d7 	beq.w	800aa3e <_dtoa_r+0x8b6>
 800a890:	9a06      	ldr	r2, [sp, #24]
 800a892:	2a01      	cmp	r2, #1
 800a894:	f300 80ba 	bgt.w	800aa0c <_dtoa_r+0x884>
 800a898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	f000 80b2 	beq.w	800aa04 <_dtoa_r+0x87c>
 800a8a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8a4:	9e07      	ldr	r6, [sp, #28]
 800a8a6:	9d04      	ldr	r5, [sp, #16]
 800a8a8:	9a04      	ldr	r2, [sp, #16]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	9204      	str	r2, [sp, #16]
 800a8ae:	9a05      	ldr	r2, [sp, #20]
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	441a      	add	r2, r3
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	9205      	str	r2, [sp, #20]
 800a8b8:	f001 f950 	bl	800bb5c <__i2b>
 800a8bc:	4607      	mov	r7, r0
 800a8be:	2d00      	cmp	r5, #0
 800a8c0:	dd0c      	ble.n	800a8dc <_dtoa_r+0x754>
 800a8c2:	9b05      	ldr	r3, [sp, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dd09      	ble.n	800a8dc <_dtoa_r+0x754>
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	9a04      	ldr	r2, [sp, #16]
 800a8cc:	bfa8      	it	ge
 800a8ce:	462b      	movge	r3, r5
 800a8d0:	1ad2      	subs	r2, r2, r3
 800a8d2:	9204      	str	r2, [sp, #16]
 800a8d4:	9a05      	ldr	r2, [sp, #20]
 800a8d6:	1aed      	subs	r5, r5, r3
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	9b07      	ldr	r3, [sp, #28]
 800a8de:	b31b      	cbz	r3, 800a928 <_dtoa_r+0x7a0>
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 80af 	beq.w	800aa46 <_dtoa_r+0x8be>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	dd13      	ble.n	800a914 <_dtoa_r+0x78c>
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f001 f9f3 	bl	800bcdc <__pow5mult>
 800a8f6:	ee18 2a10 	vmov	r2, s16
 800a8fa:	4601      	mov	r1, r0
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	4620      	mov	r0, r4
 800a900:	f001 f942 	bl	800bb88 <__multiply>
 800a904:	ee18 1a10 	vmov	r1, s16
 800a908:	4680      	mov	r8, r0
 800a90a:	4620      	mov	r0, r4
 800a90c:	f001 f824 	bl	800b958 <_Bfree>
 800a910:	ee08 8a10 	vmov	s16, r8
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	1b9a      	subs	r2, r3, r6
 800a918:	d006      	beq.n	800a928 <_dtoa_r+0x7a0>
 800a91a:	ee18 1a10 	vmov	r1, s16
 800a91e:	4620      	mov	r0, r4
 800a920:	f001 f9dc 	bl	800bcdc <__pow5mult>
 800a924:	ee08 0a10 	vmov	s16, r0
 800a928:	2101      	movs	r1, #1
 800a92a:	4620      	mov	r0, r4
 800a92c:	f001 f916 	bl	800bb5c <__i2b>
 800a930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a932:	2b00      	cmp	r3, #0
 800a934:	4606      	mov	r6, r0
 800a936:	f340 8088 	ble.w	800aa4a <_dtoa_r+0x8c2>
 800a93a:	461a      	mov	r2, r3
 800a93c:	4601      	mov	r1, r0
 800a93e:	4620      	mov	r0, r4
 800a940:	f001 f9cc 	bl	800bcdc <__pow5mult>
 800a944:	9b06      	ldr	r3, [sp, #24]
 800a946:	2b01      	cmp	r3, #1
 800a948:	4606      	mov	r6, r0
 800a94a:	f340 8081 	ble.w	800aa50 <_dtoa_r+0x8c8>
 800a94e:	f04f 0800 	mov.w	r8, #0
 800a952:	6933      	ldr	r3, [r6, #16]
 800a954:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a958:	6918      	ldr	r0, [r3, #16]
 800a95a:	f001 f8af 	bl	800babc <__hi0bits>
 800a95e:	f1c0 0020 	rsb	r0, r0, #32
 800a962:	9b05      	ldr	r3, [sp, #20]
 800a964:	4418      	add	r0, r3
 800a966:	f010 001f 	ands.w	r0, r0, #31
 800a96a:	f000 8092 	beq.w	800aa92 <_dtoa_r+0x90a>
 800a96e:	f1c0 0320 	rsb	r3, r0, #32
 800a972:	2b04      	cmp	r3, #4
 800a974:	f340 808a 	ble.w	800aa8c <_dtoa_r+0x904>
 800a978:	f1c0 001c 	rsb	r0, r0, #28
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	4403      	add	r3, r0
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	9b05      	ldr	r3, [sp, #20]
 800a984:	4403      	add	r3, r0
 800a986:	4405      	add	r5, r0
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd07      	ble.n	800a9a0 <_dtoa_r+0x818>
 800a990:	ee18 1a10 	vmov	r1, s16
 800a994:	461a      	mov	r2, r3
 800a996:	4620      	mov	r0, r4
 800a998:	f001 f9fa 	bl	800bd90 <__lshift>
 800a99c:	ee08 0a10 	vmov	s16, r0
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dd05      	ble.n	800a9b2 <_dtoa_r+0x82a>
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f001 f9f0 	bl	800bd90 <__lshift>
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d06e      	beq.n	800aa96 <_dtoa_r+0x90e>
 800a9b8:	ee18 0a10 	vmov	r0, s16
 800a9bc:	4631      	mov	r1, r6
 800a9be:	f001 fa57 	bl	800be70 <__mcmp>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	da67      	bge.n	800aa96 <_dtoa_r+0x90e>
 800a9c6:	9b00      	ldr	r3, [sp, #0]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	ee18 1a10 	vmov	r1, s16
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	220a      	movs	r2, #10
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 ffe1 	bl	800b99c <__multadd>
 800a9da:	9b08      	ldr	r3, [sp, #32]
 800a9dc:	ee08 0a10 	vmov	s16, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 81b1 	beq.w	800ad48 <_dtoa_r+0xbc0>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	220a      	movs	r2, #10
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 ffd5 	bl	800b99c <__multadd>
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	4607      	mov	r7, r0
 800a9f8:	f300 808e 	bgt.w	800ab18 <_dtoa_r+0x990>
 800a9fc:	9b06      	ldr	r3, [sp, #24]
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	dc51      	bgt.n	800aaa6 <_dtoa_r+0x91e>
 800aa02:	e089      	b.n	800ab18 <_dtoa_r+0x990>
 800aa04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa0a:	e74b      	b.n	800a8a4 <_dtoa_r+0x71c>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	1e5e      	subs	r6, r3, #1
 800aa10:	9b07      	ldr	r3, [sp, #28]
 800aa12:	42b3      	cmp	r3, r6
 800aa14:	bfbf      	itttt	lt
 800aa16:	9b07      	ldrlt	r3, [sp, #28]
 800aa18:	9607      	strlt	r6, [sp, #28]
 800aa1a:	1af2      	sublt	r2, r6, r3
 800aa1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa1e:	bfb6      	itet	lt
 800aa20:	189b      	addlt	r3, r3, r2
 800aa22:	1b9e      	subge	r6, r3, r6
 800aa24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	bfb8      	it	lt
 800aa2a:	2600      	movlt	r6, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bfb7      	itett	lt
 800aa30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa38:	1a9d      	sublt	r5, r3, r2
 800aa3a:	2300      	movlt	r3, #0
 800aa3c:	e734      	b.n	800a8a8 <_dtoa_r+0x720>
 800aa3e:	9e07      	ldr	r6, [sp, #28]
 800aa40:	9d04      	ldr	r5, [sp, #16]
 800aa42:	9f08      	ldr	r7, [sp, #32]
 800aa44:	e73b      	b.n	800a8be <_dtoa_r+0x736>
 800aa46:	9a07      	ldr	r2, [sp, #28]
 800aa48:	e767      	b.n	800a91a <_dtoa_r+0x792>
 800aa4a:	9b06      	ldr	r3, [sp, #24]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	dc18      	bgt.n	800aa82 <_dtoa_r+0x8fa>
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	d115      	bne.n	800aa82 <_dtoa_r+0x8fa>
 800aa56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa5a:	b993      	cbnz	r3, 800aa82 <_dtoa_r+0x8fa>
 800aa5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa60:	0d1b      	lsrs	r3, r3, #20
 800aa62:	051b      	lsls	r3, r3, #20
 800aa64:	b183      	cbz	r3, 800aa88 <_dtoa_r+0x900>
 800aa66:	9b04      	ldr	r3, [sp, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	9304      	str	r3, [sp, #16]
 800aa6c:	9b05      	ldr	r3, [sp, #20]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	f04f 0801 	mov.w	r8, #1
 800aa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f47f af6a 	bne.w	800a952 <_dtoa_r+0x7ca>
 800aa7e:	2001      	movs	r0, #1
 800aa80:	e76f      	b.n	800a962 <_dtoa_r+0x7da>
 800aa82:	f04f 0800 	mov.w	r8, #0
 800aa86:	e7f6      	b.n	800aa76 <_dtoa_r+0x8ee>
 800aa88:	4698      	mov	r8, r3
 800aa8a:	e7f4      	b.n	800aa76 <_dtoa_r+0x8ee>
 800aa8c:	f43f af7d 	beq.w	800a98a <_dtoa_r+0x802>
 800aa90:	4618      	mov	r0, r3
 800aa92:	301c      	adds	r0, #28
 800aa94:	e772      	b.n	800a97c <_dtoa_r+0x7f4>
 800aa96:	9b03      	ldr	r3, [sp, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc37      	bgt.n	800ab0c <_dtoa_r+0x984>
 800aa9c:	9b06      	ldr	r3, [sp, #24]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	dd34      	ble.n	800ab0c <_dtoa_r+0x984>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	9302      	str	r3, [sp, #8]
 800aaa6:	9b02      	ldr	r3, [sp, #8]
 800aaa8:	b96b      	cbnz	r3, 800aac6 <_dtoa_r+0x93e>
 800aaaa:	4631      	mov	r1, r6
 800aaac:	2205      	movs	r2, #5
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 ff74 	bl	800b99c <__multadd>
 800aab4:	4601      	mov	r1, r0
 800aab6:	4606      	mov	r6, r0
 800aab8:	ee18 0a10 	vmov	r0, s16
 800aabc:	f001 f9d8 	bl	800be70 <__mcmp>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	f73f adbb 	bgt.w	800a63c <_dtoa_r+0x4b4>
 800aac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac8:	9d01      	ldr	r5, [sp, #4]
 800aaca:	43db      	mvns	r3, r3
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	f04f 0800 	mov.w	r8, #0
 800aad2:	4631      	mov	r1, r6
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 ff3f 	bl	800b958 <_Bfree>
 800aada:	2f00      	cmp	r7, #0
 800aadc:	f43f aea4 	beq.w	800a828 <_dtoa_r+0x6a0>
 800aae0:	f1b8 0f00 	cmp.w	r8, #0
 800aae4:	d005      	beq.n	800aaf2 <_dtoa_r+0x96a>
 800aae6:	45b8      	cmp	r8, r7
 800aae8:	d003      	beq.n	800aaf2 <_dtoa_r+0x96a>
 800aaea:	4641      	mov	r1, r8
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 ff33 	bl	800b958 <_Bfree>
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f000 ff2f 	bl	800b958 <_Bfree>
 800aafa:	e695      	b.n	800a828 <_dtoa_r+0x6a0>
 800aafc:	2600      	movs	r6, #0
 800aafe:	4637      	mov	r7, r6
 800ab00:	e7e1      	b.n	800aac6 <_dtoa_r+0x93e>
 800ab02:	9700      	str	r7, [sp, #0]
 800ab04:	4637      	mov	r7, r6
 800ab06:	e599      	b.n	800a63c <_dtoa_r+0x4b4>
 800ab08:	40240000 	.word	0x40240000
 800ab0c:	9b08      	ldr	r3, [sp, #32]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 80ca 	beq.w	800aca8 <_dtoa_r+0xb20>
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	9302      	str	r3, [sp, #8]
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	dd05      	ble.n	800ab28 <_dtoa_r+0x9a0>
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	462a      	mov	r2, r5
 800ab20:	4620      	mov	r0, r4
 800ab22:	f001 f935 	bl	800bd90 <__lshift>
 800ab26:	4607      	mov	r7, r0
 800ab28:	f1b8 0f00 	cmp.w	r8, #0
 800ab2c:	d05b      	beq.n	800abe6 <_dtoa_r+0xa5e>
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fed1 	bl	800b8d8 <_Balloc>
 800ab36:	4605      	mov	r5, r0
 800ab38:	b928      	cbnz	r0, 800ab46 <_dtoa_r+0x9be>
 800ab3a:	4b87      	ldr	r3, [pc, #540]	; (800ad58 <_dtoa_r+0xbd0>)
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab42:	f7ff bb3b 	b.w	800a1bc <_dtoa_r+0x34>
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	3202      	adds	r2, #2
 800ab4a:	0092      	lsls	r2, r2, #2
 800ab4c:	f107 010c 	add.w	r1, r7, #12
 800ab50:	300c      	adds	r0, #12
 800ab52:	f000 feb3 	bl	800b8bc <memcpy>
 800ab56:	2201      	movs	r2, #1
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f001 f918 	bl	800bd90 <__lshift>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	f103 0901 	add.w	r9, r3, #1
 800ab66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	9305      	str	r3, [sp, #20]
 800ab6e:	f00a 0301 	and.w	r3, sl, #1
 800ab72:	46b8      	mov	r8, r7
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	4607      	mov	r7, r0
 800ab78:	4631      	mov	r1, r6
 800ab7a:	ee18 0a10 	vmov	r0, s16
 800ab7e:	f7ff fa77 	bl	800a070 <quorem>
 800ab82:	4641      	mov	r1, r8
 800ab84:	9002      	str	r0, [sp, #8]
 800ab86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab8a:	ee18 0a10 	vmov	r0, s16
 800ab8e:	f001 f96f 	bl	800be70 <__mcmp>
 800ab92:	463a      	mov	r2, r7
 800ab94:	9003      	str	r0, [sp, #12]
 800ab96:	4631      	mov	r1, r6
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f001 f985 	bl	800bea8 <__mdiff>
 800ab9e:	68c2      	ldr	r2, [r0, #12]
 800aba0:	f109 3bff 	add.w	fp, r9, #4294967295
 800aba4:	4605      	mov	r5, r0
 800aba6:	bb02      	cbnz	r2, 800abea <_dtoa_r+0xa62>
 800aba8:	4601      	mov	r1, r0
 800abaa:	ee18 0a10 	vmov	r0, s16
 800abae:	f001 f95f 	bl	800be70 <__mcmp>
 800abb2:	4602      	mov	r2, r0
 800abb4:	4629      	mov	r1, r5
 800abb6:	4620      	mov	r0, r4
 800abb8:	9207      	str	r2, [sp, #28]
 800abba:	f000 fecd 	bl	800b958 <_Bfree>
 800abbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800abc2:	ea43 0102 	orr.w	r1, r3, r2
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	430b      	orrs	r3, r1
 800abca:	464d      	mov	r5, r9
 800abcc:	d10f      	bne.n	800abee <_dtoa_r+0xa66>
 800abce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abd2:	d02a      	beq.n	800ac2a <_dtoa_r+0xaa2>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dd02      	ble.n	800abe0 <_dtoa_r+0xa58>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800abe0:	f88b a000 	strb.w	sl, [fp]
 800abe4:	e775      	b.n	800aad2 <_dtoa_r+0x94a>
 800abe6:	4638      	mov	r0, r7
 800abe8:	e7ba      	b.n	800ab60 <_dtoa_r+0x9d8>
 800abea:	2201      	movs	r2, #1
 800abec:	e7e2      	b.n	800abb4 <_dtoa_r+0xa2c>
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db04      	blt.n	800abfe <_dtoa_r+0xa76>
 800abf4:	9906      	ldr	r1, [sp, #24]
 800abf6:	430b      	orrs	r3, r1
 800abf8:	9904      	ldr	r1, [sp, #16]
 800abfa:	430b      	orrs	r3, r1
 800abfc:	d122      	bne.n	800ac44 <_dtoa_r+0xabc>
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	ddee      	ble.n	800abe0 <_dtoa_r+0xa58>
 800ac02:	ee18 1a10 	vmov	r1, s16
 800ac06:	2201      	movs	r2, #1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f001 f8c1 	bl	800bd90 <__lshift>
 800ac0e:	4631      	mov	r1, r6
 800ac10:	ee08 0a10 	vmov	s16, r0
 800ac14:	f001 f92c 	bl	800be70 <__mcmp>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dc03      	bgt.n	800ac24 <_dtoa_r+0xa9c>
 800ac1c:	d1e0      	bne.n	800abe0 <_dtoa_r+0xa58>
 800ac1e:	f01a 0f01 	tst.w	sl, #1
 800ac22:	d0dd      	beq.n	800abe0 <_dtoa_r+0xa58>
 800ac24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac28:	d1d7      	bne.n	800abda <_dtoa_r+0xa52>
 800ac2a:	2339      	movs	r3, #57	; 0x39
 800ac2c:	f88b 3000 	strb.w	r3, [fp]
 800ac30:	462b      	mov	r3, r5
 800ac32:	461d      	mov	r5, r3
 800ac34:	3b01      	subs	r3, #1
 800ac36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac3a:	2a39      	cmp	r2, #57	; 0x39
 800ac3c:	d071      	beq.n	800ad22 <_dtoa_r+0xb9a>
 800ac3e:	3201      	adds	r2, #1
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e746      	b.n	800aad2 <_dtoa_r+0x94a>
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	dd07      	ble.n	800ac58 <_dtoa_r+0xad0>
 800ac48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac4c:	d0ed      	beq.n	800ac2a <_dtoa_r+0xaa2>
 800ac4e:	f10a 0301 	add.w	r3, sl, #1
 800ac52:	f88b 3000 	strb.w	r3, [fp]
 800ac56:	e73c      	b.n	800aad2 <_dtoa_r+0x94a>
 800ac58:	9b05      	ldr	r3, [sp, #20]
 800ac5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac5e:	4599      	cmp	r9, r3
 800ac60:	d047      	beq.n	800acf2 <_dtoa_r+0xb6a>
 800ac62:	ee18 1a10 	vmov	r1, s16
 800ac66:	2300      	movs	r3, #0
 800ac68:	220a      	movs	r2, #10
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 fe96 	bl	800b99c <__multadd>
 800ac70:	45b8      	cmp	r8, r7
 800ac72:	ee08 0a10 	vmov	s16, r0
 800ac76:	f04f 0300 	mov.w	r3, #0
 800ac7a:	f04f 020a 	mov.w	r2, #10
 800ac7e:	4641      	mov	r1, r8
 800ac80:	4620      	mov	r0, r4
 800ac82:	d106      	bne.n	800ac92 <_dtoa_r+0xb0a>
 800ac84:	f000 fe8a 	bl	800b99c <__multadd>
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	f109 0901 	add.w	r9, r9, #1
 800ac90:	e772      	b.n	800ab78 <_dtoa_r+0x9f0>
 800ac92:	f000 fe83 	bl	800b99c <__multadd>
 800ac96:	4639      	mov	r1, r7
 800ac98:	4680      	mov	r8, r0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	220a      	movs	r2, #10
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 fe7c 	bl	800b99c <__multadd>
 800aca4:	4607      	mov	r7, r0
 800aca6:	e7f1      	b.n	800ac8c <_dtoa_r+0xb04>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	9302      	str	r3, [sp, #8]
 800acac:	9d01      	ldr	r5, [sp, #4]
 800acae:	ee18 0a10 	vmov	r0, s16
 800acb2:	4631      	mov	r1, r6
 800acb4:	f7ff f9dc 	bl	800a070 <quorem>
 800acb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	f805 ab01 	strb.w	sl, [r5], #1
 800acc2:	1aea      	subs	r2, r5, r3
 800acc4:	9b02      	ldr	r3, [sp, #8]
 800acc6:	4293      	cmp	r3, r2
 800acc8:	dd09      	ble.n	800acde <_dtoa_r+0xb56>
 800acca:	ee18 1a10 	vmov	r1, s16
 800acce:	2300      	movs	r3, #0
 800acd0:	220a      	movs	r2, #10
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 fe62 	bl	800b99c <__multadd>
 800acd8:	ee08 0a10 	vmov	s16, r0
 800acdc:	e7e7      	b.n	800acae <_dtoa_r+0xb26>
 800acde:	9b02      	ldr	r3, [sp, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfc8      	it	gt
 800ace4:	461d      	movgt	r5, r3
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	bfd8      	it	le
 800acea:	2501      	movle	r5, #1
 800acec:	441d      	add	r5, r3
 800acee:	f04f 0800 	mov.w	r8, #0
 800acf2:	ee18 1a10 	vmov	r1, s16
 800acf6:	2201      	movs	r2, #1
 800acf8:	4620      	mov	r0, r4
 800acfa:	f001 f849 	bl	800bd90 <__lshift>
 800acfe:	4631      	mov	r1, r6
 800ad00:	ee08 0a10 	vmov	s16, r0
 800ad04:	f001 f8b4 	bl	800be70 <__mcmp>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	dc91      	bgt.n	800ac30 <_dtoa_r+0xaa8>
 800ad0c:	d102      	bne.n	800ad14 <_dtoa_r+0xb8c>
 800ad0e:	f01a 0f01 	tst.w	sl, #1
 800ad12:	d18d      	bne.n	800ac30 <_dtoa_r+0xaa8>
 800ad14:	462b      	mov	r3, r5
 800ad16:	461d      	mov	r5, r3
 800ad18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad1c:	2a30      	cmp	r2, #48	; 0x30
 800ad1e:	d0fa      	beq.n	800ad16 <_dtoa_r+0xb8e>
 800ad20:	e6d7      	b.n	800aad2 <_dtoa_r+0x94a>
 800ad22:	9a01      	ldr	r2, [sp, #4]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d184      	bne.n	800ac32 <_dtoa_r+0xaaa>
 800ad28:	9b00      	ldr	r3, [sp, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	2331      	movs	r3, #49	; 0x31
 800ad30:	7013      	strb	r3, [r2, #0]
 800ad32:	e6ce      	b.n	800aad2 <_dtoa_r+0x94a>
 800ad34:	4b09      	ldr	r3, [pc, #36]	; (800ad5c <_dtoa_r+0xbd4>)
 800ad36:	f7ff ba95 	b.w	800a264 <_dtoa_r+0xdc>
 800ad3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f47f aa6e 	bne.w	800a21e <_dtoa_r+0x96>
 800ad42:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <_dtoa_r+0xbd8>)
 800ad44:	f7ff ba8e 	b.w	800a264 <_dtoa_r+0xdc>
 800ad48:	9b02      	ldr	r3, [sp, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dcae      	bgt.n	800acac <_dtoa_r+0xb24>
 800ad4e:	9b06      	ldr	r3, [sp, #24]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	f73f aea8 	bgt.w	800aaa6 <_dtoa_r+0x91e>
 800ad56:	e7a9      	b.n	800acac <_dtoa_r+0xb24>
 800ad58:	0800d0c0 	.word	0x0800d0c0
 800ad5c:	0800cec0 	.word	0x0800cec0
 800ad60:	0800d041 	.word	0x0800d041

0800ad64 <__sflush_r>:
 800ad64:	898a      	ldrh	r2, [r1, #12]
 800ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	0710      	lsls	r0, r2, #28
 800ad6e:	460c      	mov	r4, r1
 800ad70:	d458      	bmi.n	800ae24 <__sflush_r+0xc0>
 800ad72:	684b      	ldr	r3, [r1, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dc05      	bgt.n	800ad84 <__sflush_r+0x20>
 800ad78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dc02      	bgt.n	800ad84 <__sflush_r+0x20>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	d0f9      	beq.n	800ad7e <__sflush_r+0x1a>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad90:	682f      	ldr	r7, [r5, #0]
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	d032      	beq.n	800adfc <__sflush_r+0x98>
 800ad96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	075a      	lsls	r2, r3, #29
 800ad9c:	d505      	bpl.n	800adaa <__sflush_r+0x46>
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	1ac0      	subs	r0, r0, r3
 800ada2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ada4:	b10b      	cbz	r3, 800adaa <__sflush_r+0x46>
 800ada6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ada8:	1ac0      	subs	r0, r0, r3
 800adaa:	2300      	movs	r3, #0
 800adac:	4602      	mov	r2, r0
 800adae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb0:	6a21      	ldr	r1, [r4, #32]
 800adb2:	4628      	mov	r0, r5
 800adb4:	47b0      	blx	r6
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	d106      	bne.n	800adca <__sflush_r+0x66>
 800adbc:	6829      	ldr	r1, [r5, #0]
 800adbe:	291d      	cmp	r1, #29
 800adc0:	d82c      	bhi.n	800ae1c <__sflush_r+0xb8>
 800adc2:	4a2a      	ldr	r2, [pc, #168]	; (800ae6c <__sflush_r+0x108>)
 800adc4:	40ca      	lsrs	r2, r1
 800adc6:	07d6      	lsls	r6, r2, #31
 800adc8:	d528      	bpl.n	800ae1c <__sflush_r+0xb8>
 800adca:	2200      	movs	r2, #0
 800adcc:	6062      	str	r2, [r4, #4]
 800adce:	04d9      	lsls	r1, r3, #19
 800add0:	6922      	ldr	r2, [r4, #16]
 800add2:	6022      	str	r2, [r4, #0]
 800add4:	d504      	bpl.n	800ade0 <__sflush_r+0x7c>
 800add6:	1c42      	adds	r2, r0, #1
 800add8:	d101      	bne.n	800adde <__sflush_r+0x7a>
 800adda:	682b      	ldr	r3, [r5, #0]
 800addc:	b903      	cbnz	r3, 800ade0 <__sflush_r+0x7c>
 800adde:	6560      	str	r0, [r4, #84]	; 0x54
 800ade0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ade2:	602f      	str	r7, [r5, #0]
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d0ca      	beq.n	800ad7e <__sflush_r+0x1a>
 800ade8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adec:	4299      	cmp	r1, r3
 800adee:	d002      	beq.n	800adf6 <__sflush_r+0x92>
 800adf0:	4628      	mov	r0, r5
 800adf2:	f001 fa49 	bl	800c288 <_free_r>
 800adf6:	2000      	movs	r0, #0
 800adf8:	6360      	str	r0, [r4, #52]	; 0x34
 800adfa:	e7c1      	b.n	800ad80 <__sflush_r+0x1c>
 800adfc:	6a21      	ldr	r1, [r4, #32]
 800adfe:	2301      	movs	r3, #1
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b0      	blx	r6
 800ae04:	1c41      	adds	r1, r0, #1
 800ae06:	d1c7      	bne.n	800ad98 <__sflush_r+0x34>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0c4      	beq.n	800ad98 <__sflush_r+0x34>
 800ae0e:	2b1d      	cmp	r3, #29
 800ae10:	d001      	beq.n	800ae16 <__sflush_r+0xb2>
 800ae12:	2b16      	cmp	r3, #22
 800ae14:	d101      	bne.n	800ae1a <__sflush_r+0xb6>
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	e7b1      	b.n	800ad7e <__sflush_r+0x1a>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e7ad      	b.n	800ad80 <__sflush_r+0x1c>
 800ae24:	690f      	ldr	r7, [r1, #16]
 800ae26:	2f00      	cmp	r7, #0
 800ae28:	d0a9      	beq.n	800ad7e <__sflush_r+0x1a>
 800ae2a:	0793      	lsls	r3, r2, #30
 800ae2c:	680e      	ldr	r6, [r1, #0]
 800ae2e:	bf08      	it	eq
 800ae30:	694b      	ldreq	r3, [r1, #20]
 800ae32:	600f      	str	r7, [r1, #0]
 800ae34:	bf18      	it	ne
 800ae36:	2300      	movne	r3, #0
 800ae38:	eba6 0807 	sub.w	r8, r6, r7
 800ae3c:	608b      	str	r3, [r1, #8]
 800ae3e:	f1b8 0f00 	cmp.w	r8, #0
 800ae42:	dd9c      	ble.n	800ad7e <__sflush_r+0x1a>
 800ae44:	6a21      	ldr	r1, [r4, #32]
 800ae46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae48:	4643      	mov	r3, r8
 800ae4a:	463a      	mov	r2, r7
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b0      	blx	r6
 800ae50:	2800      	cmp	r0, #0
 800ae52:	dc06      	bgt.n	800ae62 <__sflush_r+0xfe>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5a:	81a3      	strh	r3, [r4, #12]
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	e78e      	b.n	800ad80 <__sflush_r+0x1c>
 800ae62:	4407      	add	r7, r0
 800ae64:	eba8 0800 	sub.w	r8, r8, r0
 800ae68:	e7e9      	b.n	800ae3e <__sflush_r+0xda>
 800ae6a:	bf00      	nop
 800ae6c:	20400001 	.word	0x20400001

0800ae70 <_fflush_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	690b      	ldr	r3, [r1, #16]
 800ae74:	4605      	mov	r5, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	b913      	cbnz	r3, 800ae80 <_fflush_r+0x10>
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	b118      	cbz	r0, 800ae8a <_fflush_r+0x1a>
 800ae82:	6983      	ldr	r3, [r0, #24]
 800ae84:	b90b      	cbnz	r3, 800ae8a <_fflush_r+0x1a>
 800ae86:	f000 f887 	bl	800af98 <__sinit>
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <_fflush_r+0x6c>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	d11b      	bne.n	800aec8 <_fflush_r+0x58>
 800ae90:	686c      	ldr	r4, [r5, #4]
 800ae92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0ef      	beq.n	800ae7a <_fflush_r+0xa>
 800ae9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae9c:	07d0      	lsls	r0, r2, #31
 800ae9e:	d404      	bmi.n	800aeaa <_fflush_r+0x3a>
 800aea0:	0599      	lsls	r1, r3, #22
 800aea2:	d402      	bmi.n	800aeaa <_fflush_r+0x3a>
 800aea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aea6:	f000 fc88 	bl	800b7ba <__retarget_lock_acquire_recursive>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	4621      	mov	r1, r4
 800aeae:	f7ff ff59 	bl	800ad64 <__sflush_r>
 800aeb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb4:	07da      	lsls	r2, r3, #31
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	d4e0      	bmi.n	800ae7c <_fflush_r+0xc>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	059b      	lsls	r3, r3, #22
 800aebe:	d4dd      	bmi.n	800ae7c <_fflush_r+0xc>
 800aec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec2:	f000 fc7b 	bl	800b7bc <__retarget_lock_release_recursive>
 800aec6:	e7d9      	b.n	800ae7c <_fflush_r+0xc>
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <_fflush_r+0x70>)
 800aeca:	429c      	cmp	r4, r3
 800aecc:	d101      	bne.n	800aed2 <_fflush_r+0x62>
 800aece:	68ac      	ldr	r4, [r5, #8]
 800aed0:	e7df      	b.n	800ae92 <_fflush_r+0x22>
 800aed2:	4b04      	ldr	r3, [pc, #16]	; (800aee4 <_fflush_r+0x74>)
 800aed4:	429c      	cmp	r4, r3
 800aed6:	bf08      	it	eq
 800aed8:	68ec      	ldreq	r4, [r5, #12]
 800aeda:	e7da      	b.n	800ae92 <_fflush_r+0x22>
 800aedc:	0800d0f4 	.word	0x0800d0f4
 800aee0:	0800d114 	.word	0x0800d114
 800aee4:	0800d0d4 	.word	0x0800d0d4

0800aee8 <std>:
 800aee8:	2300      	movs	r3, #0
 800aeea:	b510      	push	{r4, lr}
 800aeec:	4604      	mov	r4, r0
 800aeee:	e9c0 3300 	strd	r3, r3, [r0]
 800aef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aef6:	6083      	str	r3, [r0, #8]
 800aef8:	8181      	strh	r1, [r0, #12]
 800aefa:	6643      	str	r3, [r0, #100]	; 0x64
 800aefc:	81c2      	strh	r2, [r0, #14]
 800aefe:	6183      	str	r3, [r0, #24]
 800af00:	4619      	mov	r1, r3
 800af02:	2208      	movs	r2, #8
 800af04:	305c      	adds	r0, #92	; 0x5c
 800af06:	f7fd f9f9 	bl	80082fc <memset>
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <std+0x38>)
 800af0c:	6263      	str	r3, [r4, #36]	; 0x24
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x3c>)
 800af10:	62a3      	str	r3, [r4, #40]	; 0x28
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <std+0x40>)
 800af14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <std+0x44>)
 800af18:	6224      	str	r4, [r4, #32]
 800af1a:	6323      	str	r3, [r4, #48]	; 0x30
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	0800ca79 	.word	0x0800ca79
 800af24:	0800ca9b 	.word	0x0800ca9b
 800af28:	0800cad3 	.word	0x0800cad3
 800af2c:	0800caf7 	.word	0x0800caf7

0800af30 <_cleanup_r>:
 800af30:	4901      	ldr	r1, [pc, #4]	; (800af38 <_cleanup_r+0x8>)
 800af32:	f000 b8af 	b.w	800b094 <_fwalk_reent>
 800af36:	bf00      	nop
 800af38:	0800ae71 	.word	0x0800ae71

0800af3c <__sfmoreglue>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	2268      	movs	r2, #104	; 0x68
 800af40:	1e4d      	subs	r5, r1, #1
 800af42:	4355      	muls	r5, r2
 800af44:	460e      	mov	r6, r1
 800af46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af4a:	f001 fa09 	bl	800c360 <_malloc_r>
 800af4e:	4604      	mov	r4, r0
 800af50:	b140      	cbz	r0, 800af64 <__sfmoreglue+0x28>
 800af52:	2100      	movs	r1, #0
 800af54:	e9c0 1600 	strd	r1, r6, [r0]
 800af58:	300c      	adds	r0, #12
 800af5a:	60a0      	str	r0, [r4, #8]
 800af5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af60:	f7fd f9cc 	bl	80082fc <memset>
 800af64:	4620      	mov	r0, r4
 800af66:	bd70      	pop	{r4, r5, r6, pc}

0800af68 <__sfp_lock_acquire>:
 800af68:	4801      	ldr	r0, [pc, #4]	; (800af70 <__sfp_lock_acquire+0x8>)
 800af6a:	f000 bc26 	b.w	800b7ba <__retarget_lock_acquire_recursive>
 800af6e:	bf00      	nop
 800af70:	20000ae5 	.word	0x20000ae5

0800af74 <__sfp_lock_release>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__sfp_lock_release+0x8>)
 800af76:	f000 bc21 	b.w	800b7bc <__retarget_lock_release_recursive>
 800af7a:	bf00      	nop
 800af7c:	20000ae5 	.word	0x20000ae5

0800af80 <__sinit_lock_acquire>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__sinit_lock_acquire+0x8>)
 800af82:	f000 bc1a 	b.w	800b7ba <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	20000ae6 	.word	0x20000ae6

0800af8c <__sinit_lock_release>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__sinit_lock_release+0x8>)
 800af8e:	f000 bc15 	b.w	800b7bc <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	20000ae6 	.word	0x20000ae6

0800af98 <__sinit>:
 800af98:	b510      	push	{r4, lr}
 800af9a:	4604      	mov	r4, r0
 800af9c:	f7ff fff0 	bl	800af80 <__sinit_lock_acquire>
 800afa0:	69a3      	ldr	r3, [r4, #24]
 800afa2:	b11b      	cbz	r3, 800afac <__sinit+0x14>
 800afa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa8:	f7ff bff0 	b.w	800af8c <__sinit_lock_release>
 800afac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afb0:	6523      	str	r3, [r4, #80]	; 0x50
 800afb2:	4b13      	ldr	r3, [pc, #76]	; (800b000 <__sinit+0x68>)
 800afb4:	4a13      	ldr	r2, [pc, #76]	; (800b004 <__sinit+0x6c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800afba:	42a3      	cmp	r3, r4
 800afbc:	bf04      	itt	eq
 800afbe:	2301      	moveq	r3, #1
 800afc0:	61a3      	streq	r3, [r4, #24]
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f820 	bl	800b008 <__sfp>
 800afc8:	6060      	str	r0, [r4, #4]
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f81c 	bl	800b008 <__sfp>
 800afd0:	60a0      	str	r0, [r4, #8]
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 f818 	bl	800b008 <__sfp>
 800afd8:	2200      	movs	r2, #0
 800afda:	60e0      	str	r0, [r4, #12]
 800afdc:	2104      	movs	r1, #4
 800afde:	6860      	ldr	r0, [r4, #4]
 800afe0:	f7ff ff82 	bl	800aee8 <std>
 800afe4:	68a0      	ldr	r0, [r4, #8]
 800afe6:	2201      	movs	r2, #1
 800afe8:	2109      	movs	r1, #9
 800afea:	f7ff ff7d 	bl	800aee8 <std>
 800afee:	68e0      	ldr	r0, [r4, #12]
 800aff0:	2202      	movs	r2, #2
 800aff2:	2112      	movs	r1, #18
 800aff4:	f7ff ff78 	bl	800aee8 <std>
 800aff8:	2301      	movs	r3, #1
 800affa:	61a3      	str	r3, [r4, #24]
 800affc:	e7d2      	b.n	800afa4 <__sinit+0xc>
 800affe:	bf00      	nop
 800b000:	0800ceac 	.word	0x0800ceac
 800b004:	0800af31 	.word	0x0800af31

0800b008 <__sfp>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	4607      	mov	r7, r0
 800b00c:	f7ff ffac 	bl	800af68 <__sfp_lock_acquire>
 800b010:	4b1e      	ldr	r3, [pc, #120]	; (800b08c <__sfp+0x84>)
 800b012:	681e      	ldr	r6, [r3, #0]
 800b014:	69b3      	ldr	r3, [r6, #24]
 800b016:	b913      	cbnz	r3, 800b01e <__sfp+0x16>
 800b018:	4630      	mov	r0, r6
 800b01a:	f7ff ffbd 	bl	800af98 <__sinit>
 800b01e:	3648      	adds	r6, #72	; 0x48
 800b020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b024:	3b01      	subs	r3, #1
 800b026:	d503      	bpl.n	800b030 <__sfp+0x28>
 800b028:	6833      	ldr	r3, [r6, #0]
 800b02a:	b30b      	cbz	r3, 800b070 <__sfp+0x68>
 800b02c:	6836      	ldr	r6, [r6, #0]
 800b02e:	e7f7      	b.n	800b020 <__sfp+0x18>
 800b030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b034:	b9d5      	cbnz	r5, 800b06c <__sfp+0x64>
 800b036:	4b16      	ldr	r3, [pc, #88]	; (800b090 <__sfp+0x88>)
 800b038:	60e3      	str	r3, [r4, #12]
 800b03a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b03e:	6665      	str	r5, [r4, #100]	; 0x64
 800b040:	f000 fbba 	bl	800b7b8 <__retarget_lock_init_recursive>
 800b044:	f7ff ff96 	bl	800af74 <__sfp_lock_release>
 800b048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b050:	6025      	str	r5, [r4, #0]
 800b052:	61a5      	str	r5, [r4, #24]
 800b054:	2208      	movs	r2, #8
 800b056:	4629      	mov	r1, r5
 800b058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b05c:	f7fd f94e 	bl	80082fc <memset>
 800b060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b068:	4620      	mov	r0, r4
 800b06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b06c:	3468      	adds	r4, #104	; 0x68
 800b06e:	e7d9      	b.n	800b024 <__sfp+0x1c>
 800b070:	2104      	movs	r1, #4
 800b072:	4638      	mov	r0, r7
 800b074:	f7ff ff62 	bl	800af3c <__sfmoreglue>
 800b078:	4604      	mov	r4, r0
 800b07a:	6030      	str	r0, [r6, #0]
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d1d5      	bne.n	800b02c <__sfp+0x24>
 800b080:	f7ff ff78 	bl	800af74 <__sfp_lock_release>
 800b084:	230c      	movs	r3, #12
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	e7ee      	b.n	800b068 <__sfp+0x60>
 800b08a:	bf00      	nop
 800b08c:	0800ceac 	.word	0x0800ceac
 800b090:	ffff0001 	.word	0xffff0001

0800b094 <_fwalk_reent>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	4606      	mov	r6, r0
 800b09a:	4688      	mov	r8, r1
 800b09c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0a0:	2700      	movs	r7, #0
 800b0a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b0aa:	d505      	bpl.n	800b0b8 <_fwalk_reent+0x24>
 800b0ac:	6824      	ldr	r4, [r4, #0]
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	d1f7      	bne.n	800b0a2 <_fwalk_reent+0xe>
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b8:	89ab      	ldrh	r3, [r5, #12]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d907      	bls.n	800b0ce <_fwalk_reent+0x3a>
 800b0be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	d003      	beq.n	800b0ce <_fwalk_reent+0x3a>
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	47c0      	blx	r8
 800b0cc:	4307      	orrs	r7, r0
 800b0ce:	3568      	adds	r5, #104	; 0x68
 800b0d0:	e7e9      	b.n	800b0a6 <_fwalk_reent+0x12>

0800b0d2 <rshift>:
 800b0d2:	6903      	ldr	r3, [r0, #16]
 800b0d4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0e0:	f100 0414 	add.w	r4, r0, #20
 800b0e4:	dd45      	ble.n	800b172 <rshift+0xa0>
 800b0e6:	f011 011f 	ands.w	r1, r1, #31
 800b0ea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0f2:	d10c      	bne.n	800b10e <rshift+0x3c>
 800b0f4:	f100 0710 	add.w	r7, r0, #16
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	42b1      	cmp	r1, r6
 800b0fc:	d334      	bcc.n	800b168 <rshift+0x96>
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	1eea      	subs	r2, r5, #3
 800b104:	4296      	cmp	r6, r2
 800b106:	bf38      	it	cc
 800b108:	2300      	movcc	r3, #0
 800b10a:	4423      	add	r3, r4
 800b10c:	e015      	b.n	800b13a <rshift+0x68>
 800b10e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b112:	f1c1 0820 	rsb	r8, r1, #32
 800b116:	40cf      	lsrs	r7, r1
 800b118:	f105 0e04 	add.w	lr, r5, #4
 800b11c:	46a1      	mov	r9, r4
 800b11e:	4576      	cmp	r6, lr
 800b120:	46f4      	mov	ip, lr
 800b122:	d815      	bhi.n	800b150 <rshift+0x7e>
 800b124:	1a9a      	subs	r2, r3, r2
 800b126:	0092      	lsls	r2, r2, #2
 800b128:	3a04      	subs	r2, #4
 800b12a:	3501      	adds	r5, #1
 800b12c:	42ae      	cmp	r6, r5
 800b12e:	bf38      	it	cc
 800b130:	2200      	movcc	r2, #0
 800b132:	18a3      	adds	r3, r4, r2
 800b134:	50a7      	str	r7, [r4, r2]
 800b136:	b107      	cbz	r7, 800b13a <rshift+0x68>
 800b138:	3304      	adds	r3, #4
 800b13a:	1b1a      	subs	r2, r3, r4
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b142:	bf08      	it	eq
 800b144:	2300      	moveq	r3, #0
 800b146:	6102      	str	r2, [r0, #16]
 800b148:	bf08      	it	eq
 800b14a:	6143      	streq	r3, [r0, #20]
 800b14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b150:	f8dc c000 	ldr.w	ip, [ip]
 800b154:	fa0c fc08 	lsl.w	ip, ip, r8
 800b158:	ea4c 0707 	orr.w	r7, ip, r7
 800b15c:	f849 7b04 	str.w	r7, [r9], #4
 800b160:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b164:	40cf      	lsrs	r7, r1
 800b166:	e7da      	b.n	800b11e <rshift+0x4c>
 800b168:	f851 cb04 	ldr.w	ip, [r1], #4
 800b16c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b170:	e7c3      	b.n	800b0fa <rshift+0x28>
 800b172:	4623      	mov	r3, r4
 800b174:	e7e1      	b.n	800b13a <rshift+0x68>

0800b176 <__hexdig_fun>:
 800b176:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b17a:	2b09      	cmp	r3, #9
 800b17c:	d802      	bhi.n	800b184 <__hexdig_fun+0xe>
 800b17e:	3820      	subs	r0, #32
 800b180:	b2c0      	uxtb	r0, r0
 800b182:	4770      	bx	lr
 800b184:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b188:	2b05      	cmp	r3, #5
 800b18a:	d801      	bhi.n	800b190 <__hexdig_fun+0x1a>
 800b18c:	3847      	subs	r0, #71	; 0x47
 800b18e:	e7f7      	b.n	800b180 <__hexdig_fun+0xa>
 800b190:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b194:	2b05      	cmp	r3, #5
 800b196:	d801      	bhi.n	800b19c <__hexdig_fun+0x26>
 800b198:	3827      	subs	r0, #39	; 0x27
 800b19a:	e7f1      	b.n	800b180 <__hexdig_fun+0xa>
 800b19c:	2000      	movs	r0, #0
 800b19e:	4770      	bx	lr

0800b1a0 <__gethex>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	ed2d 8b02 	vpush	{d8}
 800b1a8:	b089      	sub	sp, #36	; 0x24
 800b1aa:	ee08 0a10 	vmov	s16, r0
 800b1ae:	9304      	str	r3, [sp, #16]
 800b1b0:	4bb4      	ldr	r3, [pc, #720]	; (800b484 <__gethex+0x2e4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	468b      	mov	fp, r1
 800b1ba:	4690      	mov	r8, r2
 800b1bc:	f7f5 f818 	bl	80001f0 <strlen>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	f8db 2000 	ldr.w	r2, [fp]
 800b1c6:	4403      	add	r3, r0
 800b1c8:	4682      	mov	sl, r0
 800b1ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1ce:	9305      	str	r3, [sp, #20]
 800b1d0:	1c93      	adds	r3, r2, #2
 800b1d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1da:	32fe      	adds	r2, #254	; 0xfe
 800b1dc:	18d1      	adds	r1, r2, r3
 800b1de:	461f      	mov	r7, r3
 800b1e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1e4:	9100      	str	r1, [sp, #0]
 800b1e6:	2830      	cmp	r0, #48	; 0x30
 800b1e8:	d0f8      	beq.n	800b1dc <__gethex+0x3c>
 800b1ea:	f7ff ffc4 	bl	800b176 <__hexdig_fun>
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d13a      	bne.n	800b26a <__gethex+0xca>
 800b1f4:	9901      	ldr	r1, [sp, #4]
 800b1f6:	4652      	mov	r2, sl
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f001 fc80 	bl	800cafe <strncmp>
 800b1fe:	4605      	mov	r5, r0
 800b200:	2800      	cmp	r0, #0
 800b202:	d168      	bne.n	800b2d6 <__gethex+0x136>
 800b204:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b208:	eb07 060a 	add.w	r6, r7, sl
 800b20c:	f7ff ffb3 	bl	800b176 <__hexdig_fun>
 800b210:	2800      	cmp	r0, #0
 800b212:	d062      	beq.n	800b2da <__gethex+0x13a>
 800b214:	4633      	mov	r3, r6
 800b216:	7818      	ldrb	r0, [r3, #0]
 800b218:	2830      	cmp	r0, #48	; 0x30
 800b21a:	461f      	mov	r7, r3
 800b21c:	f103 0301 	add.w	r3, r3, #1
 800b220:	d0f9      	beq.n	800b216 <__gethex+0x76>
 800b222:	f7ff ffa8 	bl	800b176 <__hexdig_fun>
 800b226:	2301      	movs	r3, #1
 800b228:	fab0 f480 	clz	r4, r0
 800b22c:	0964      	lsrs	r4, r4, #5
 800b22e:	4635      	mov	r5, r6
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	463a      	mov	r2, r7
 800b234:	4616      	mov	r6, r2
 800b236:	3201      	adds	r2, #1
 800b238:	7830      	ldrb	r0, [r6, #0]
 800b23a:	f7ff ff9c 	bl	800b176 <__hexdig_fun>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d1f8      	bne.n	800b234 <__gethex+0x94>
 800b242:	9901      	ldr	r1, [sp, #4]
 800b244:	4652      	mov	r2, sl
 800b246:	4630      	mov	r0, r6
 800b248:	f001 fc59 	bl	800cafe <strncmp>
 800b24c:	b980      	cbnz	r0, 800b270 <__gethex+0xd0>
 800b24e:	b94d      	cbnz	r5, 800b264 <__gethex+0xc4>
 800b250:	eb06 050a 	add.w	r5, r6, sl
 800b254:	462a      	mov	r2, r5
 800b256:	4616      	mov	r6, r2
 800b258:	3201      	adds	r2, #1
 800b25a:	7830      	ldrb	r0, [r6, #0]
 800b25c:	f7ff ff8b 	bl	800b176 <__hexdig_fun>
 800b260:	2800      	cmp	r0, #0
 800b262:	d1f8      	bne.n	800b256 <__gethex+0xb6>
 800b264:	1bad      	subs	r5, r5, r6
 800b266:	00ad      	lsls	r5, r5, #2
 800b268:	e004      	b.n	800b274 <__gethex+0xd4>
 800b26a:	2400      	movs	r4, #0
 800b26c:	4625      	mov	r5, r4
 800b26e:	e7e0      	b.n	800b232 <__gethex+0x92>
 800b270:	2d00      	cmp	r5, #0
 800b272:	d1f7      	bne.n	800b264 <__gethex+0xc4>
 800b274:	7833      	ldrb	r3, [r6, #0]
 800b276:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b27a:	2b50      	cmp	r3, #80	; 0x50
 800b27c:	d13b      	bne.n	800b2f6 <__gethex+0x156>
 800b27e:	7873      	ldrb	r3, [r6, #1]
 800b280:	2b2b      	cmp	r3, #43	; 0x2b
 800b282:	d02c      	beq.n	800b2de <__gethex+0x13e>
 800b284:	2b2d      	cmp	r3, #45	; 0x2d
 800b286:	d02e      	beq.n	800b2e6 <__gethex+0x146>
 800b288:	1c71      	adds	r1, r6, #1
 800b28a:	f04f 0900 	mov.w	r9, #0
 800b28e:	7808      	ldrb	r0, [r1, #0]
 800b290:	f7ff ff71 	bl	800b176 <__hexdig_fun>
 800b294:	1e43      	subs	r3, r0, #1
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b18      	cmp	r3, #24
 800b29a:	d82c      	bhi.n	800b2f6 <__gethex+0x156>
 800b29c:	f1a0 0210 	sub.w	r2, r0, #16
 800b2a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2a4:	f7ff ff67 	bl	800b176 <__hexdig_fun>
 800b2a8:	1e43      	subs	r3, r0, #1
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b18      	cmp	r3, #24
 800b2ae:	d91d      	bls.n	800b2ec <__gethex+0x14c>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	d000      	beq.n	800b2b8 <__gethex+0x118>
 800b2b6:	4252      	negs	r2, r2
 800b2b8:	4415      	add	r5, r2
 800b2ba:	f8cb 1000 	str.w	r1, [fp]
 800b2be:	b1e4      	cbz	r4, 800b2fa <__gethex+0x15a>
 800b2c0:	9b00      	ldr	r3, [sp, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bf14      	ite	ne
 800b2c6:	2700      	movne	r7, #0
 800b2c8:	2706      	moveq	r7, #6
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	b009      	add	sp, #36	; 0x24
 800b2ce:	ecbd 8b02 	vpop	{d8}
 800b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d6:	463e      	mov	r6, r7
 800b2d8:	4625      	mov	r5, r4
 800b2da:	2401      	movs	r4, #1
 800b2dc:	e7ca      	b.n	800b274 <__gethex+0xd4>
 800b2de:	f04f 0900 	mov.w	r9, #0
 800b2e2:	1cb1      	adds	r1, r6, #2
 800b2e4:	e7d3      	b.n	800b28e <__gethex+0xee>
 800b2e6:	f04f 0901 	mov.w	r9, #1
 800b2ea:	e7fa      	b.n	800b2e2 <__gethex+0x142>
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	fb03 0202 	mla	r2, r3, r2, r0
 800b2f2:	3a10      	subs	r2, #16
 800b2f4:	e7d4      	b.n	800b2a0 <__gethex+0x100>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	e7df      	b.n	800b2ba <__gethex+0x11a>
 800b2fa:	1bf3      	subs	r3, r6, r7
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	4621      	mov	r1, r4
 800b300:	2b07      	cmp	r3, #7
 800b302:	dc0b      	bgt.n	800b31c <__gethex+0x17c>
 800b304:	ee18 0a10 	vmov	r0, s16
 800b308:	f000 fae6 	bl	800b8d8 <_Balloc>
 800b30c:	4604      	mov	r4, r0
 800b30e:	b940      	cbnz	r0, 800b322 <__gethex+0x182>
 800b310:	4b5d      	ldr	r3, [pc, #372]	; (800b488 <__gethex+0x2e8>)
 800b312:	4602      	mov	r2, r0
 800b314:	21de      	movs	r1, #222	; 0xde
 800b316:	485d      	ldr	r0, [pc, #372]	; (800b48c <__gethex+0x2ec>)
 800b318:	f001 fc24 	bl	800cb64 <__assert_func>
 800b31c:	3101      	adds	r1, #1
 800b31e:	105b      	asrs	r3, r3, #1
 800b320:	e7ee      	b.n	800b300 <__gethex+0x160>
 800b322:	f100 0914 	add.w	r9, r0, #20
 800b326:	f04f 0b00 	mov.w	fp, #0
 800b32a:	f1ca 0301 	rsb	r3, sl, #1
 800b32e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b332:	f8cd b000 	str.w	fp, [sp]
 800b336:	9306      	str	r3, [sp, #24]
 800b338:	42b7      	cmp	r7, r6
 800b33a:	d340      	bcc.n	800b3be <__gethex+0x21e>
 800b33c:	9802      	ldr	r0, [sp, #8]
 800b33e:	9b00      	ldr	r3, [sp, #0]
 800b340:	f840 3b04 	str.w	r3, [r0], #4
 800b344:	eba0 0009 	sub.w	r0, r0, r9
 800b348:	1080      	asrs	r0, r0, #2
 800b34a:	0146      	lsls	r6, r0, #5
 800b34c:	6120      	str	r0, [r4, #16]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fbb4 	bl	800babc <__hi0bits>
 800b354:	1a30      	subs	r0, r6, r0
 800b356:	f8d8 6000 	ldr.w	r6, [r8]
 800b35a:	42b0      	cmp	r0, r6
 800b35c:	dd63      	ble.n	800b426 <__gethex+0x286>
 800b35e:	1b87      	subs	r7, r0, r6
 800b360:	4639      	mov	r1, r7
 800b362:	4620      	mov	r0, r4
 800b364:	f000 ff58 	bl	800c218 <__any_on>
 800b368:	4682      	mov	sl, r0
 800b36a:	b1a8      	cbz	r0, 800b398 <__gethex+0x1f8>
 800b36c:	1e7b      	subs	r3, r7, #1
 800b36e:	1159      	asrs	r1, r3, #5
 800b370:	f003 021f 	and.w	r2, r3, #31
 800b374:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b378:	f04f 0a01 	mov.w	sl, #1
 800b37c:	fa0a f202 	lsl.w	r2, sl, r2
 800b380:	420a      	tst	r2, r1
 800b382:	d009      	beq.n	800b398 <__gethex+0x1f8>
 800b384:	4553      	cmp	r3, sl
 800b386:	dd05      	ble.n	800b394 <__gethex+0x1f4>
 800b388:	1eb9      	subs	r1, r7, #2
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 ff44 	bl	800c218 <__any_on>
 800b390:	2800      	cmp	r0, #0
 800b392:	d145      	bne.n	800b420 <__gethex+0x280>
 800b394:	f04f 0a02 	mov.w	sl, #2
 800b398:	4639      	mov	r1, r7
 800b39a:	4620      	mov	r0, r4
 800b39c:	f7ff fe99 	bl	800b0d2 <rshift>
 800b3a0:	443d      	add	r5, r7
 800b3a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a6:	42ab      	cmp	r3, r5
 800b3a8:	da4c      	bge.n	800b444 <__gethex+0x2a4>
 800b3aa:	ee18 0a10 	vmov	r0, s16
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	f000 fad2 	bl	800b958 <_Bfree>
 800b3b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	27a3      	movs	r7, #163	; 0xa3
 800b3bc:	e785      	b.n	800b2ca <__gethex+0x12a>
 800b3be:	1e73      	subs	r3, r6, #1
 800b3c0:	9a05      	ldr	r2, [sp, #20]
 800b3c2:	9303      	str	r3, [sp, #12]
 800b3c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d019      	beq.n	800b400 <__gethex+0x260>
 800b3cc:	f1bb 0f20 	cmp.w	fp, #32
 800b3d0:	d107      	bne.n	800b3e2 <__gethex+0x242>
 800b3d2:	9b02      	ldr	r3, [sp, #8]
 800b3d4:	9a00      	ldr	r2, [sp, #0]
 800b3d6:	f843 2b04 	str.w	r2, [r3], #4
 800b3da:	9302      	str	r3, [sp, #8]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	469b      	mov	fp, r3
 800b3e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b3e6:	f7ff fec6 	bl	800b176 <__hexdig_fun>
 800b3ea:	9b00      	ldr	r3, [sp, #0]
 800b3ec:	f000 000f 	and.w	r0, r0, #15
 800b3f0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b3f4:	4303      	orrs	r3, r0
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	f10b 0b04 	add.w	fp, fp, #4
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	e00d      	b.n	800b41c <__gethex+0x27c>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	9a06      	ldr	r2, [sp, #24]
 800b404:	4413      	add	r3, r2
 800b406:	42bb      	cmp	r3, r7
 800b408:	d3e0      	bcc.n	800b3cc <__gethex+0x22c>
 800b40a:	4618      	mov	r0, r3
 800b40c:	9901      	ldr	r1, [sp, #4]
 800b40e:	9307      	str	r3, [sp, #28]
 800b410:	4652      	mov	r2, sl
 800b412:	f001 fb74 	bl	800cafe <strncmp>
 800b416:	9b07      	ldr	r3, [sp, #28]
 800b418:	2800      	cmp	r0, #0
 800b41a:	d1d7      	bne.n	800b3cc <__gethex+0x22c>
 800b41c:	461e      	mov	r6, r3
 800b41e:	e78b      	b.n	800b338 <__gethex+0x198>
 800b420:	f04f 0a03 	mov.w	sl, #3
 800b424:	e7b8      	b.n	800b398 <__gethex+0x1f8>
 800b426:	da0a      	bge.n	800b43e <__gethex+0x29e>
 800b428:	1a37      	subs	r7, r6, r0
 800b42a:	4621      	mov	r1, r4
 800b42c:	ee18 0a10 	vmov	r0, s16
 800b430:	463a      	mov	r2, r7
 800b432:	f000 fcad 	bl	800bd90 <__lshift>
 800b436:	1bed      	subs	r5, r5, r7
 800b438:	4604      	mov	r4, r0
 800b43a:	f100 0914 	add.w	r9, r0, #20
 800b43e:	f04f 0a00 	mov.w	sl, #0
 800b442:	e7ae      	b.n	800b3a2 <__gethex+0x202>
 800b444:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b448:	42a8      	cmp	r0, r5
 800b44a:	dd72      	ble.n	800b532 <__gethex+0x392>
 800b44c:	1b45      	subs	r5, r0, r5
 800b44e:	42ae      	cmp	r6, r5
 800b450:	dc36      	bgt.n	800b4c0 <__gethex+0x320>
 800b452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d02a      	beq.n	800b4b0 <__gethex+0x310>
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d02c      	beq.n	800b4b8 <__gethex+0x318>
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d11c      	bne.n	800b49c <__gethex+0x2fc>
 800b462:	42ae      	cmp	r6, r5
 800b464:	d11a      	bne.n	800b49c <__gethex+0x2fc>
 800b466:	2e01      	cmp	r6, #1
 800b468:	d112      	bne.n	800b490 <__gethex+0x2f0>
 800b46a:	9a04      	ldr	r2, [sp, #16]
 800b46c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	2301      	movs	r3, #1
 800b474:	6123      	str	r3, [r4, #16]
 800b476:	f8c9 3000 	str.w	r3, [r9]
 800b47a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b47c:	2762      	movs	r7, #98	; 0x62
 800b47e:	601c      	str	r4, [r3, #0]
 800b480:	e723      	b.n	800b2ca <__gethex+0x12a>
 800b482:	bf00      	nop
 800b484:	0800d19c 	.word	0x0800d19c
 800b488:	0800d0c0 	.word	0x0800d0c0
 800b48c:	0800d134 	.word	0x0800d134
 800b490:	1e71      	subs	r1, r6, #1
 800b492:	4620      	mov	r0, r4
 800b494:	f000 fec0 	bl	800c218 <__any_on>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d1e6      	bne.n	800b46a <__gethex+0x2ca>
 800b49c:	ee18 0a10 	vmov	r0, s16
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	f000 fa59 	bl	800b958 <_Bfree>
 800b4a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	2750      	movs	r7, #80	; 0x50
 800b4ae:	e70c      	b.n	800b2ca <__gethex+0x12a>
 800b4b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1f2      	bne.n	800b49c <__gethex+0x2fc>
 800b4b6:	e7d8      	b.n	800b46a <__gethex+0x2ca>
 800b4b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1d5      	bne.n	800b46a <__gethex+0x2ca>
 800b4be:	e7ed      	b.n	800b49c <__gethex+0x2fc>
 800b4c0:	1e6f      	subs	r7, r5, #1
 800b4c2:	f1ba 0f00 	cmp.w	sl, #0
 800b4c6:	d131      	bne.n	800b52c <__gethex+0x38c>
 800b4c8:	b127      	cbz	r7, 800b4d4 <__gethex+0x334>
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 fea3 	bl	800c218 <__any_on>
 800b4d2:	4682      	mov	sl, r0
 800b4d4:	117b      	asrs	r3, r7, #5
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4dc:	f007 071f 	and.w	r7, r7, #31
 800b4e0:	fa01 f707 	lsl.w	r7, r1, r7
 800b4e4:	421f      	tst	r7, r3
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	bf18      	it	ne
 800b4ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800b4f0:	1b76      	subs	r6, r6, r5
 800b4f2:	f7ff fdee 	bl	800b0d2 <rshift>
 800b4f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4fa:	2702      	movs	r7, #2
 800b4fc:	f1ba 0f00 	cmp.w	sl, #0
 800b500:	d048      	beq.n	800b594 <__gethex+0x3f4>
 800b502:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d015      	beq.n	800b536 <__gethex+0x396>
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d017      	beq.n	800b53e <__gethex+0x39e>
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d109      	bne.n	800b526 <__gethex+0x386>
 800b512:	f01a 0f02 	tst.w	sl, #2
 800b516:	d006      	beq.n	800b526 <__gethex+0x386>
 800b518:	f8d9 0000 	ldr.w	r0, [r9]
 800b51c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b520:	f01a 0f01 	tst.w	sl, #1
 800b524:	d10e      	bne.n	800b544 <__gethex+0x3a4>
 800b526:	f047 0710 	orr.w	r7, r7, #16
 800b52a:	e033      	b.n	800b594 <__gethex+0x3f4>
 800b52c:	f04f 0a01 	mov.w	sl, #1
 800b530:	e7d0      	b.n	800b4d4 <__gethex+0x334>
 800b532:	2701      	movs	r7, #1
 800b534:	e7e2      	b.n	800b4fc <__gethex+0x35c>
 800b536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b538:	f1c3 0301 	rsb	r3, r3, #1
 800b53c:	9315      	str	r3, [sp, #84]	; 0x54
 800b53e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0f0      	beq.n	800b526 <__gethex+0x386>
 800b544:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b548:	f104 0314 	add.w	r3, r4, #20
 800b54c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b550:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b554:	f04f 0c00 	mov.w	ip, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b562:	d01c      	beq.n	800b59e <__gethex+0x3fe>
 800b564:	3201      	adds	r2, #1
 800b566:	6002      	str	r2, [r0, #0]
 800b568:	2f02      	cmp	r7, #2
 800b56a:	f104 0314 	add.w	r3, r4, #20
 800b56e:	d13f      	bne.n	800b5f0 <__gethex+0x450>
 800b570:	f8d8 2000 	ldr.w	r2, [r8]
 800b574:	3a01      	subs	r2, #1
 800b576:	42b2      	cmp	r2, r6
 800b578:	d10a      	bne.n	800b590 <__gethex+0x3f0>
 800b57a:	1171      	asrs	r1, r6, #5
 800b57c:	2201      	movs	r2, #1
 800b57e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b582:	f006 061f 	and.w	r6, r6, #31
 800b586:	fa02 f606 	lsl.w	r6, r2, r6
 800b58a:	421e      	tst	r6, r3
 800b58c:	bf18      	it	ne
 800b58e:	4617      	movne	r7, r2
 800b590:	f047 0720 	orr.w	r7, r7, #32
 800b594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b596:	601c      	str	r4, [r3, #0]
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	601d      	str	r5, [r3, #0]
 800b59c:	e695      	b.n	800b2ca <__gethex+0x12a>
 800b59e:	4299      	cmp	r1, r3
 800b5a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5a4:	d8d8      	bhi.n	800b558 <__gethex+0x3b8>
 800b5a6:	68a3      	ldr	r3, [r4, #8]
 800b5a8:	459b      	cmp	fp, r3
 800b5aa:	db19      	blt.n	800b5e0 <__gethex+0x440>
 800b5ac:	6861      	ldr	r1, [r4, #4]
 800b5ae:	ee18 0a10 	vmov	r0, s16
 800b5b2:	3101      	adds	r1, #1
 800b5b4:	f000 f990 	bl	800b8d8 <_Balloc>
 800b5b8:	4681      	mov	r9, r0
 800b5ba:	b918      	cbnz	r0, 800b5c4 <__gethex+0x424>
 800b5bc:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <__gethex+0x488>)
 800b5be:	4602      	mov	r2, r0
 800b5c0:	2184      	movs	r1, #132	; 0x84
 800b5c2:	e6a8      	b.n	800b316 <__gethex+0x176>
 800b5c4:	6922      	ldr	r2, [r4, #16]
 800b5c6:	3202      	adds	r2, #2
 800b5c8:	f104 010c 	add.w	r1, r4, #12
 800b5cc:	0092      	lsls	r2, r2, #2
 800b5ce:	300c      	adds	r0, #12
 800b5d0:	f000 f974 	bl	800b8bc <memcpy>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	ee18 0a10 	vmov	r0, s16
 800b5da:	f000 f9bd 	bl	800b958 <_Bfree>
 800b5de:	464c      	mov	r4, r9
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5e8:	6122      	str	r2, [r4, #16]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	615a      	str	r2, [r3, #20]
 800b5ee:	e7bb      	b.n	800b568 <__gethex+0x3c8>
 800b5f0:	6922      	ldr	r2, [r4, #16]
 800b5f2:	455a      	cmp	r2, fp
 800b5f4:	dd0b      	ble.n	800b60e <__gethex+0x46e>
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f7ff fd6a 	bl	800b0d2 <rshift>
 800b5fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b602:	3501      	adds	r5, #1
 800b604:	42ab      	cmp	r3, r5
 800b606:	f6ff aed0 	blt.w	800b3aa <__gethex+0x20a>
 800b60a:	2701      	movs	r7, #1
 800b60c:	e7c0      	b.n	800b590 <__gethex+0x3f0>
 800b60e:	f016 061f 	ands.w	r6, r6, #31
 800b612:	d0fa      	beq.n	800b60a <__gethex+0x46a>
 800b614:	4453      	add	r3, sl
 800b616:	f1c6 0620 	rsb	r6, r6, #32
 800b61a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b61e:	f000 fa4d 	bl	800babc <__hi0bits>
 800b622:	42b0      	cmp	r0, r6
 800b624:	dbe7      	blt.n	800b5f6 <__gethex+0x456>
 800b626:	e7f0      	b.n	800b60a <__gethex+0x46a>
 800b628:	0800d0c0 	.word	0x0800d0c0

0800b62c <L_shift>:
 800b62c:	f1c2 0208 	rsb	r2, r2, #8
 800b630:	0092      	lsls	r2, r2, #2
 800b632:	b570      	push	{r4, r5, r6, lr}
 800b634:	f1c2 0620 	rsb	r6, r2, #32
 800b638:	6843      	ldr	r3, [r0, #4]
 800b63a:	6804      	ldr	r4, [r0, #0]
 800b63c:	fa03 f506 	lsl.w	r5, r3, r6
 800b640:	432c      	orrs	r4, r5
 800b642:	40d3      	lsrs	r3, r2
 800b644:	6004      	str	r4, [r0, #0]
 800b646:	f840 3f04 	str.w	r3, [r0, #4]!
 800b64a:	4288      	cmp	r0, r1
 800b64c:	d3f4      	bcc.n	800b638 <L_shift+0xc>
 800b64e:	bd70      	pop	{r4, r5, r6, pc}

0800b650 <__match>:
 800b650:	b530      	push	{r4, r5, lr}
 800b652:	6803      	ldr	r3, [r0, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b65a:	b914      	cbnz	r4, 800b662 <__match+0x12>
 800b65c:	6003      	str	r3, [r0, #0]
 800b65e:	2001      	movs	r0, #1
 800b660:	bd30      	pop	{r4, r5, pc}
 800b662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b666:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b66a:	2d19      	cmp	r5, #25
 800b66c:	bf98      	it	ls
 800b66e:	3220      	addls	r2, #32
 800b670:	42a2      	cmp	r2, r4
 800b672:	d0f0      	beq.n	800b656 <__match+0x6>
 800b674:	2000      	movs	r0, #0
 800b676:	e7f3      	b.n	800b660 <__match+0x10>

0800b678 <__hexnan>:
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	680b      	ldr	r3, [r1, #0]
 800b67e:	115e      	asrs	r6, r3, #5
 800b680:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b684:	f013 031f 	ands.w	r3, r3, #31
 800b688:	b087      	sub	sp, #28
 800b68a:	bf18      	it	ne
 800b68c:	3604      	addne	r6, #4
 800b68e:	2500      	movs	r5, #0
 800b690:	1f37      	subs	r7, r6, #4
 800b692:	4690      	mov	r8, r2
 800b694:	6802      	ldr	r2, [r0, #0]
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	4682      	mov	sl, r0
 800b69a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b69e:	46b9      	mov	r9, r7
 800b6a0:	463c      	mov	r4, r7
 800b6a2:	9502      	str	r5, [sp, #8]
 800b6a4:	46ab      	mov	fp, r5
 800b6a6:	7851      	ldrb	r1, [r2, #1]
 800b6a8:	1c53      	adds	r3, r2, #1
 800b6aa:	9303      	str	r3, [sp, #12]
 800b6ac:	b341      	cbz	r1, 800b700 <__hexnan+0x88>
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	9205      	str	r2, [sp, #20]
 800b6b2:	9104      	str	r1, [sp, #16]
 800b6b4:	f7ff fd5f 	bl	800b176 <__hexdig_fun>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d14f      	bne.n	800b75c <__hexnan+0xe4>
 800b6bc:	9904      	ldr	r1, [sp, #16]
 800b6be:	9a05      	ldr	r2, [sp, #20]
 800b6c0:	2920      	cmp	r1, #32
 800b6c2:	d818      	bhi.n	800b6f6 <__hexnan+0x7e>
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	459b      	cmp	fp, r3
 800b6c8:	dd13      	ble.n	800b6f2 <__hexnan+0x7a>
 800b6ca:	454c      	cmp	r4, r9
 800b6cc:	d206      	bcs.n	800b6dc <__hexnan+0x64>
 800b6ce:	2d07      	cmp	r5, #7
 800b6d0:	dc04      	bgt.n	800b6dc <__hexnan+0x64>
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f7ff ffa8 	bl	800b62c <L_shift>
 800b6dc:	4544      	cmp	r4, r8
 800b6de:	d950      	bls.n	800b782 <__hexnan+0x10a>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f1a4 0904 	sub.w	r9, r4, #4
 800b6e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6ea:	f8cd b008 	str.w	fp, [sp, #8]
 800b6ee:	464c      	mov	r4, r9
 800b6f0:	461d      	mov	r5, r3
 800b6f2:	9a03      	ldr	r2, [sp, #12]
 800b6f4:	e7d7      	b.n	800b6a6 <__hexnan+0x2e>
 800b6f6:	2929      	cmp	r1, #41	; 0x29
 800b6f8:	d156      	bne.n	800b7a8 <__hexnan+0x130>
 800b6fa:	3202      	adds	r2, #2
 800b6fc:	f8ca 2000 	str.w	r2, [sl]
 800b700:	f1bb 0f00 	cmp.w	fp, #0
 800b704:	d050      	beq.n	800b7a8 <__hexnan+0x130>
 800b706:	454c      	cmp	r4, r9
 800b708:	d206      	bcs.n	800b718 <__hexnan+0xa0>
 800b70a:	2d07      	cmp	r5, #7
 800b70c:	dc04      	bgt.n	800b718 <__hexnan+0xa0>
 800b70e:	462a      	mov	r2, r5
 800b710:	4649      	mov	r1, r9
 800b712:	4620      	mov	r0, r4
 800b714:	f7ff ff8a 	bl	800b62c <L_shift>
 800b718:	4544      	cmp	r4, r8
 800b71a:	d934      	bls.n	800b786 <__hexnan+0x10e>
 800b71c:	f1a8 0204 	sub.w	r2, r8, #4
 800b720:	4623      	mov	r3, r4
 800b722:	f853 1b04 	ldr.w	r1, [r3], #4
 800b726:	f842 1f04 	str.w	r1, [r2, #4]!
 800b72a:	429f      	cmp	r7, r3
 800b72c:	d2f9      	bcs.n	800b722 <__hexnan+0xaa>
 800b72e:	1b3b      	subs	r3, r7, r4
 800b730:	f023 0303 	bic.w	r3, r3, #3
 800b734:	3304      	adds	r3, #4
 800b736:	3401      	adds	r4, #1
 800b738:	3e03      	subs	r6, #3
 800b73a:	42b4      	cmp	r4, r6
 800b73c:	bf88      	it	hi
 800b73e:	2304      	movhi	r3, #4
 800b740:	4443      	add	r3, r8
 800b742:	2200      	movs	r2, #0
 800b744:	f843 2b04 	str.w	r2, [r3], #4
 800b748:	429f      	cmp	r7, r3
 800b74a:	d2fb      	bcs.n	800b744 <__hexnan+0xcc>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	b91b      	cbnz	r3, 800b758 <__hexnan+0xe0>
 800b750:	4547      	cmp	r7, r8
 800b752:	d127      	bne.n	800b7a4 <__hexnan+0x12c>
 800b754:	2301      	movs	r3, #1
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	2005      	movs	r0, #5
 800b75a:	e026      	b.n	800b7aa <__hexnan+0x132>
 800b75c:	3501      	adds	r5, #1
 800b75e:	2d08      	cmp	r5, #8
 800b760:	f10b 0b01 	add.w	fp, fp, #1
 800b764:	dd06      	ble.n	800b774 <__hexnan+0xfc>
 800b766:	4544      	cmp	r4, r8
 800b768:	d9c3      	bls.n	800b6f2 <__hexnan+0x7a>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b770:	2501      	movs	r5, #1
 800b772:	3c04      	subs	r4, #4
 800b774:	6822      	ldr	r2, [r4, #0]
 800b776:	f000 000f 	and.w	r0, r0, #15
 800b77a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b77e:	6022      	str	r2, [r4, #0]
 800b780:	e7b7      	b.n	800b6f2 <__hexnan+0x7a>
 800b782:	2508      	movs	r5, #8
 800b784:	e7b5      	b.n	800b6f2 <__hexnan+0x7a>
 800b786:	9b01      	ldr	r3, [sp, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d0df      	beq.n	800b74c <__hexnan+0xd4>
 800b78c:	f04f 32ff 	mov.w	r2, #4294967295
 800b790:	f1c3 0320 	rsb	r3, r3, #32
 800b794:	fa22 f303 	lsr.w	r3, r2, r3
 800b798:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b79c:	401a      	ands	r2, r3
 800b79e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7a2:	e7d3      	b.n	800b74c <__hexnan+0xd4>
 800b7a4:	3f04      	subs	r7, #4
 800b7a6:	e7d1      	b.n	800b74c <__hexnan+0xd4>
 800b7a8:	2004      	movs	r0, #4
 800b7aa:	b007      	add	sp, #28
 800b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7b0 <_localeconv_r>:
 800b7b0:	4800      	ldr	r0, [pc, #0]	; (800b7b4 <_localeconv_r+0x4>)
 800b7b2:	4770      	bx	lr
 800b7b4:	20000168 	.word	0x20000168

0800b7b8 <__retarget_lock_init_recursive>:
 800b7b8:	4770      	bx	lr

0800b7ba <__retarget_lock_acquire_recursive>:
 800b7ba:	4770      	bx	lr

0800b7bc <__retarget_lock_release_recursive>:
 800b7bc:	4770      	bx	lr

0800b7be <__swhatbuf_r>:
 800b7be:	b570      	push	{r4, r5, r6, lr}
 800b7c0:	460e      	mov	r6, r1
 800b7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c6:	2900      	cmp	r1, #0
 800b7c8:	b096      	sub	sp, #88	; 0x58
 800b7ca:	4614      	mov	r4, r2
 800b7cc:	461d      	mov	r5, r3
 800b7ce:	da08      	bge.n	800b7e2 <__swhatbuf_r+0x24>
 800b7d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	602a      	str	r2, [r5, #0]
 800b7d8:	061a      	lsls	r2, r3, #24
 800b7da:	d410      	bmi.n	800b7fe <__swhatbuf_r+0x40>
 800b7dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7e0:	e00e      	b.n	800b800 <__swhatbuf_r+0x42>
 800b7e2:	466a      	mov	r2, sp
 800b7e4:	f001 f9fe 	bl	800cbe4 <_fstat_r>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	dbf1      	blt.n	800b7d0 <__swhatbuf_r+0x12>
 800b7ec:	9a01      	ldr	r2, [sp, #4]
 800b7ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7f6:	425a      	negs	r2, r3
 800b7f8:	415a      	adcs	r2, r3
 800b7fa:	602a      	str	r2, [r5, #0]
 800b7fc:	e7ee      	b.n	800b7dc <__swhatbuf_r+0x1e>
 800b7fe:	2340      	movs	r3, #64	; 0x40
 800b800:	2000      	movs	r0, #0
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	b016      	add	sp, #88	; 0x58
 800b806:	bd70      	pop	{r4, r5, r6, pc}

0800b808 <__smakebuf_r>:
 800b808:	898b      	ldrh	r3, [r1, #12]
 800b80a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b80c:	079d      	lsls	r5, r3, #30
 800b80e:	4606      	mov	r6, r0
 800b810:	460c      	mov	r4, r1
 800b812:	d507      	bpl.n	800b824 <__smakebuf_r+0x1c>
 800b814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	6123      	str	r3, [r4, #16]
 800b81c:	2301      	movs	r3, #1
 800b81e:	6163      	str	r3, [r4, #20]
 800b820:	b002      	add	sp, #8
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	ab01      	add	r3, sp, #4
 800b826:	466a      	mov	r2, sp
 800b828:	f7ff ffc9 	bl	800b7be <__swhatbuf_r>
 800b82c:	9900      	ldr	r1, [sp, #0]
 800b82e:	4605      	mov	r5, r0
 800b830:	4630      	mov	r0, r6
 800b832:	f000 fd95 	bl	800c360 <_malloc_r>
 800b836:	b948      	cbnz	r0, 800b84c <__smakebuf_r+0x44>
 800b838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83c:	059a      	lsls	r2, r3, #22
 800b83e:	d4ef      	bmi.n	800b820 <__smakebuf_r+0x18>
 800b840:	f023 0303 	bic.w	r3, r3, #3
 800b844:	f043 0302 	orr.w	r3, r3, #2
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	e7e3      	b.n	800b814 <__smakebuf_r+0xc>
 800b84c:	4b0d      	ldr	r3, [pc, #52]	; (800b884 <__smakebuf_r+0x7c>)
 800b84e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	6020      	str	r0, [r4, #0]
 800b854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b858:	81a3      	strh	r3, [r4, #12]
 800b85a:	9b00      	ldr	r3, [sp, #0]
 800b85c:	6163      	str	r3, [r4, #20]
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	6120      	str	r0, [r4, #16]
 800b862:	b15b      	cbz	r3, 800b87c <__smakebuf_r+0x74>
 800b864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b868:	4630      	mov	r0, r6
 800b86a:	f001 f9cd 	bl	800cc08 <_isatty_r>
 800b86e:	b128      	cbz	r0, 800b87c <__smakebuf_r+0x74>
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	f023 0303 	bic.w	r3, r3, #3
 800b876:	f043 0301 	orr.w	r3, r3, #1
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	89a0      	ldrh	r0, [r4, #12]
 800b87e:	4305      	orrs	r5, r0
 800b880:	81a5      	strh	r5, [r4, #12]
 800b882:	e7cd      	b.n	800b820 <__smakebuf_r+0x18>
 800b884:	0800af31 	.word	0x0800af31

0800b888 <malloc>:
 800b888:	4b02      	ldr	r3, [pc, #8]	; (800b894 <malloc+0xc>)
 800b88a:	4601      	mov	r1, r0
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	f000 bd67 	b.w	800c360 <_malloc_r>
 800b892:	bf00      	nop
 800b894:	20000010 	.word	0x20000010

0800b898 <__ascii_mbtowc>:
 800b898:	b082      	sub	sp, #8
 800b89a:	b901      	cbnz	r1, 800b89e <__ascii_mbtowc+0x6>
 800b89c:	a901      	add	r1, sp, #4
 800b89e:	b142      	cbz	r2, 800b8b2 <__ascii_mbtowc+0x1a>
 800b8a0:	b14b      	cbz	r3, 800b8b6 <__ascii_mbtowc+0x1e>
 800b8a2:	7813      	ldrb	r3, [r2, #0]
 800b8a4:	600b      	str	r3, [r1, #0]
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	1e10      	subs	r0, r2, #0
 800b8aa:	bf18      	it	ne
 800b8ac:	2001      	movne	r0, #1
 800b8ae:	b002      	add	sp, #8
 800b8b0:	4770      	bx	lr
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	e7fb      	b.n	800b8ae <__ascii_mbtowc+0x16>
 800b8b6:	f06f 0001 	mvn.w	r0, #1
 800b8ba:	e7f8      	b.n	800b8ae <__ascii_mbtowc+0x16>

0800b8bc <memcpy>:
 800b8bc:	440a      	add	r2, r1
 800b8be:	4291      	cmp	r1, r2
 800b8c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8c4:	d100      	bne.n	800b8c8 <memcpy+0xc>
 800b8c6:	4770      	bx	lr
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8d2:	4291      	cmp	r1, r2
 800b8d4:	d1f9      	bne.n	800b8ca <memcpy+0xe>
 800b8d6:	bd10      	pop	{r4, pc}

0800b8d8 <_Balloc>:
 800b8d8:	b570      	push	{r4, r5, r6, lr}
 800b8da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8dc:	4604      	mov	r4, r0
 800b8de:	460d      	mov	r5, r1
 800b8e0:	b976      	cbnz	r6, 800b900 <_Balloc+0x28>
 800b8e2:	2010      	movs	r0, #16
 800b8e4:	f7ff ffd0 	bl	800b888 <malloc>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6260      	str	r0, [r4, #36]	; 0x24
 800b8ec:	b920      	cbnz	r0, 800b8f8 <_Balloc+0x20>
 800b8ee:	4b18      	ldr	r3, [pc, #96]	; (800b950 <_Balloc+0x78>)
 800b8f0:	4818      	ldr	r0, [pc, #96]	; (800b954 <_Balloc+0x7c>)
 800b8f2:	2166      	movs	r1, #102	; 0x66
 800b8f4:	f001 f936 	bl	800cb64 <__assert_func>
 800b8f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8fc:	6006      	str	r6, [r0, #0]
 800b8fe:	60c6      	str	r6, [r0, #12]
 800b900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b902:	68f3      	ldr	r3, [r6, #12]
 800b904:	b183      	cbz	r3, 800b928 <_Balloc+0x50>
 800b906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b90e:	b9b8      	cbnz	r0, 800b940 <_Balloc+0x68>
 800b910:	2101      	movs	r1, #1
 800b912:	fa01 f605 	lsl.w	r6, r1, r5
 800b916:	1d72      	adds	r2, r6, #5
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 fc9d 	bl	800c25a <_calloc_r>
 800b920:	b160      	cbz	r0, 800b93c <_Balloc+0x64>
 800b922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b926:	e00e      	b.n	800b946 <_Balloc+0x6e>
 800b928:	2221      	movs	r2, #33	; 0x21
 800b92a:	2104      	movs	r1, #4
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 fc94 	bl	800c25a <_calloc_r>
 800b932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b934:	60f0      	str	r0, [r6, #12]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e4      	bne.n	800b906 <_Balloc+0x2e>
 800b93c:	2000      	movs	r0, #0
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	6802      	ldr	r2, [r0, #0]
 800b942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b946:	2300      	movs	r3, #0
 800b948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b94c:	e7f7      	b.n	800b93e <_Balloc+0x66>
 800b94e:	bf00      	nop
 800b950:	0800d04e 	.word	0x0800d04e
 800b954:	0800d1b0 	.word	0x0800d1b0

0800b958 <_Bfree>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b95c:	4605      	mov	r5, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	b976      	cbnz	r6, 800b980 <_Bfree+0x28>
 800b962:	2010      	movs	r0, #16
 800b964:	f7ff ff90 	bl	800b888 <malloc>
 800b968:	4602      	mov	r2, r0
 800b96a:	6268      	str	r0, [r5, #36]	; 0x24
 800b96c:	b920      	cbnz	r0, 800b978 <_Bfree+0x20>
 800b96e:	4b09      	ldr	r3, [pc, #36]	; (800b994 <_Bfree+0x3c>)
 800b970:	4809      	ldr	r0, [pc, #36]	; (800b998 <_Bfree+0x40>)
 800b972:	218a      	movs	r1, #138	; 0x8a
 800b974:	f001 f8f6 	bl	800cb64 <__assert_func>
 800b978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b97c:	6006      	str	r6, [r0, #0]
 800b97e:	60c6      	str	r6, [r0, #12]
 800b980:	b13c      	cbz	r4, 800b992 <_Bfree+0x3a>
 800b982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b984:	6862      	ldr	r2, [r4, #4]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b98c:	6021      	str	r1, [r4, #0]
 800b98e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b992:	bd70      	pop	{r4, r5, r6, pc}
 800b994:	0800d04e 	.word	0x0800d04e
 800b998:	0800d1b0 	.word	0x0800d1b0

0800b99c <__multadd>:
 800b99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a0:	690d      	ldr	r5, [r1, #16]
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	461e      	mov	r6, r3
 800b9a8:	f101 0c14 	add.w	ip, r1, #20
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b9b2:	b299      	uxth	r1, r3
 800b9b4:	fb02 6101 	mla	r1, r2, r1, r6
 800b9b8:	0c1e      	lsrs	r6, r3, #16
 800b9ba:	0c0b      	lsrs	r3, r1, #16
 800b9bc:	fb02 3306 	mla	r3, r2, r6, r3
 800b9c0:	b289      	uxth	r1, r1
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9c8:	4285      	cmp	r5, r0
 800b9ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b9ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9d2:	dcec      	bgt.n	800b9ae <__multadd+0x12>
 800b9d4:	b30e      	cbz	r6, 800ba1a <__multadd+0x7e>
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	42ab      	cmp	r3, r5
 800b9da:	dc19      	bgt.n	800ba10 <__multadd+0x74>
 800b9dc:	6861      	ldr	r1, [r4, #4]
 800b9de:	4638      	mov	r0, r7
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	f7ff ff79 	bl	800b8d8 <_Balloc>
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	b928      	cbnz	r0, 800b9f6 <__multadd+0x5a>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <__multadd+0x84>)
 800b9ee:	480d      	ldr	r0, [pc, #52]	; (800ba24 <__multadd+0x88>)
 800b9f0:	21b5      	movs	r1, #181	; 0xb5
 800b9f2:	f001 f8b7 	bl	800cb64 <__assert_func>
 800b9f6:	6922      	ldr	r2, [r4, #16]
 800b9f8:	3202      	adds	r2, #2
 800b9fa:	f104 010c 	add.w	r1, r4, #12
 800b9fe:	0092      	lsls	r2, r2, #2
 800ba00:	300c      	adds	r0, #12
 800ba02:	f7ff ff5b 	bl	800b8bc <memcpy>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f7ff ffa5 	bl	800b958 <_Bfree>
 800ba0e:	4644      	mov	r4, r8
 800ba10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba14:	3501      	adds	r5, #1
 800ba16:	615e      	str	r6, [r3, #20]
 800ba18:	6125      	str	r5, [r4, #16]
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba20:	0800d0c0 	.word	0x0800d0c0
 800ba24:	0800d1b0 	.word	0x0800d1b0

0800ba28 <__s2b>:
 800ba28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	4615      	mov	r5, r2
 800ba30:	461f      	mov	r7, r3
 800ba32:	2209      	movs	r2, #9
 800ba34:	3308      	adds	r3, #8
 800ba36:	4606      	mov	r6, r0
 800ba38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	2201      	movs	r2, #1
 800ba40:	429a      	cmp	r2, r3
 800ba42:	db09      	blt.n	800ba58 <__s2b+0x30>
 800ba44:	4630      	mov	r0, r6
 800ba46:	f7ff ff47 	bl	800b8d8 <_Balloc>
 800ba4a:	b940      	cbnz	r0, 800ba5e <__s2b+0x36>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	4b19      	ldr	r3, [pc, #100]	; (800bab4 <__s2b+0x8c>)
 800ba50:	4819      	ldr	r0, [pc, #100]	; (800bab8 <__s2b+0x90>)
 800ba52:	21ce      	movs	r1, #206	; 0xce
 800ba54:	f001 f886 	bl	800cb64 <__assert_func>
 800ba58:	0052      	lsls	r2, r2, #1
 800ba5a:	3101      	adds	r1, #1
 800ba5c:	e7f0      	b.n	800ba40 <__s2b+0x18>
 800ba5e:	9b08      	ldr	r3, [sp, #32]
 800ba60:	6143      	str	r3, [r0, #20]
 800ba62:	2d09      	cmp	r5, #9
 800ba64:	f04f 0301 	mov.w	r3, #1
 800ba68:	6103      	str	r3, [r0, #16]
 800ba6a:	dd16      	ble.n	800ba9a <__s2b+0x72>
 800ba6c:	f104 0909 	add.w	r9, r4, #9
 800ba70:	46c8      	mov	r8, r9
 800ba72:	442c      	add	r4, r5
 800ba74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba78:	4601      	mov	r1, r0
 800ba7a:	3b30      	subs	r3, #48	; 0x30
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7ff ff8c 	bl	800b99c <__multadd>
 800ba84:	45a0      	cmp	r8, r4
 800ba86:	d1f5      	bne.n	800ba74 <__s2b+0x4c>
 800ba88:	f1a5 0408 	sub.w	r4, r5, #8
 800ba8c:	444c      	add	r4, r9
 800ba8e:	1b2d      	subs	r5, r5, r4
 800ba90:	1963      	adds	r3, r4, r5
 800ba92:	42bb      	cmp	r3, r7
 800ba94:	db04      	blt.n	800baa0 <__s2b+0x78>
 800ba96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9a:	340a      	adds	r4, #10
 800ba9c:	2509      	movs	r5, #9
 800ba9e:	e7f6      	b.n	800ba8e <__s2b+0x66>
 800baa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800baa4:	4601      	mov	r1, r0
 800baa6:	3b30      	subs	r3, #48	; 0x30
 800baa8:	220a      	movs	r2, #10
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff ff76 	bl	800b99c <__multadd>
 800bab0:	e7ee      	b.n	800ba90 <__s2b+0x68>
 800bab2:	bf00      	nop
 800bab4:	0800d0c0 	.word	0x0800d0c0
 800bab8:	0800d1b0 	.word	0x0800d1b0

0800babc <__hi0bits>:
 800babc:	0c03      	lsrs	r3, r0, #16
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	b9d3      	cbnz	r3, 800baf8 <__hi0bits+0x3c>
 800bac2:	0400      	lsls	r0, r0, #16
 800bac4:	2310      	movs	r3, #16
 800bac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baca:	bf04      	itt	eq
 800bacc:	0200      	lsleq	r0, r0, #8
 800bace:	3308      	addeq	r3, #8
 800bad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bad4:	bf04      	itt	eq
 800bad6:	0100      	lsleq	r0, r0, #4
 800bad8:	3304      	addeq	r3, #4
 800bada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bade:	bf04      	itt	eq
 800bae0:	0080      	lsleq	r0, r0, #2
 800bae2:	3302      	addeq	r3, #2
 800bae4:	2800      	cmp	r0, #0
 800bae6:	db05      	blt.n	800baf4 <__hi0bits+0x38>
 800bae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800baec:	f103 0301 	add.w	r3, r3, #1
 800baf0:	bf08      	it	eq
 800baf2:	2320      	moveq	r3, #32
 800baf4:	4618      	mov	r0, r3
 800baf6:	4770      	bx	lr
 800baf8:	2300      	movs	r3, #0
 800bafa:	e7e4      	b.n	800bac6 <__hi0bits+0xa>

0800bafc <__lo0bits>:
 800bafc:	6803      	ldr	r3, [r0, #0]
 800bafe:	f013 0207 	ands.w	r2, r3, #7
 800bb02:	4601      	mov	r1, r0
 800bb04:	d00b      	beq.n	800bb1e <__lo0bits+0x22>
 800bb06:	07da      	lsls	r2, r3, #31
 800bb08:	d423      	bmi.n	800bb52 <__lo0bits+0x56>
 800bb0a:	0798      	lsls	r0, r3, #30
 800bb0c:	bf49      	itett	mi
 800bb0e:	085b      	lsrmi	r3, r3, #1
 800bb10:	089b      	lsrpl	r3, r3, #2
 800bb12:	2001      	movmi	r0, #1
 800bb14:	600b      	strmi	r3, [r1, #0]
 800bb16:	bf5c      	itt	pl
 800bb18:	600b      	strpl	r3, [r1, #0]
 800bb1a:	2002      	movpl	r0, #2
 800bb1c:	4770      	bx	lr
 800bb1e:	b298      	uxth	r0, r3
 800bb20:	b9a8      	cbnz	r0, 800bb4e <__lo0bits+0x52>
 800bb22:	0c1b      	lsrs	r3, r3, #16
 800bb24:	2010      	movs	r0, #16
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	b90a      	cbnz	r2, 800bb2e <__lo0bits+0x32>
 800bb2a:	3008      	adds	r0, #8
 800bb2c:	0a1b      	lsrs	r3, r3, #8
 800bb2e:	071a      	lsls	r2, r3, #28
 800bb30:	bf04      	itt	eq
 800bb32:	091b      	lsreq	r3, r3, #4
 800bb34:	3004      	addeq	r0, #4
 800bb36:	079a      	lsls	r2, r3, #30
 800bb38:	bf04      	itt	eq
 800bb3a:	089b      	lsreq	r3, r3, #2
 800bb3c:	3002      	addeq	r0, #2
 800bb3e:	07da      	lsls	r2, r3, #31
 800bb40:	d403      	bmi.n	800bb4a <__lo0bits+0x4e>
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	f100 0001 	add.w	r0, r0, #1
 800bb48:	d005      	beq.n	800bb56 <__lo0bits+0x5a>
 800bb4a:	600b      	str	r3, [r1, #0]
 800bb4c:	4770      	bx	lr
 800bb4e:	4610      	mov	r0, r2
 800bb50:	e7e9      	b.n	800bb26 <__lo0bits+0x2a>
 800bb52:	2000      	movs	r0, #0
 800bb54:	4770      	bx	lr
 800bb56:	2020      	movs	r0, #32
 800bb58:	4770      	bx	lr
	...

0800bb5c <__i2b>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	460c      	mov	r4, r1
 800bb60:	2101      	movs	r1, #1
 800bb62:	f7ff feb9 	bl	800b8d8 <_Balloc>
 800bb66:	4602      	mov	r2, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__i2b+0x1a>
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <__i2b+0x24>)
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <__i2b+0x28>)
 800bb6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb72:	f000 fff7 	bl	800cb64 <__assert_func>
 800bb76:	2301      	movs	r3, #1
 800bb78:	6144      	str	r4, [r0, #20]
 800bb7a:	6103      	str	r3, [r0, #16]
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800d0c0 	.word	0x0800d0c0
 800bb84:	0800d1b0 	.word	0x0800d1b0

0800bb88 <__multiply>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	4691      	mov	r9, r2
 800bb8e:	690a      	ldr	r2, [r1, #16]
 800bb90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	bfb8      	it	lt
 800bb98:	460b      	movlt	r3, r1
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	bfbc      	itt	lt
 800bb9e:	464c      	movlt	r4, r9
 800bba0:	4699      	movlt	r9, r3
 800bba2:	6927      	ldr	r7, [r4, #16]
 800bba4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bba8:	68a3      	ldr	r3, [r4, #8]
 800bbaa:	6861      	ldr	r1, [r4, #4]
 800bbac:	eb07 060a 	add.w	r6, r7, sl
 800bbb0:	42b3      	cmp	r3, r6
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	bfb8      	it	lt
 800bbb6:	3101      	addlt	r1, #1
 800bbb8:	f7ff fe8e 	bl	800b8d8 <_Balloc>
 800bbbc:	b930      	cbnz	r0, 800bbcc <__multiply+0x44>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	4b44      	ldr	r3, [pc, #272]	; (800bcd4 <__multiply+0x14c>)
 800bbc2:	4845      	ldr	r0, [pc, #276]	; (800bcd8 <__multiply+0x150>)
 800bbc4:	f240 115d 	movw	r1, #349	; 0x15d
 800bbc8:	f000 ffcc 	bl	800cb64 <__assert_func>
 800bbcc:	f100 0514 	add.w	r5, r0, #20
 800bbd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	4543      	cmp	r3, r8
 800bbda:	d321      	bcc.n	800bc20 <__multiply+0x98>
 800bbdc:	f104 0314 	add.w	r3, r4, #20
 800bbe0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbe4:	f109 0314 	add.w	r3, r9, #20
 800bbe8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbec:	9202      	str	r2, [sp, #8]
 800bbee:	1b3a      	subs	r2, r7, r4
 800bbf0:	3a15      	subs	r2, #21
 800bbf2:	f022 0203 	bic.w	r2, r2, #3
 800bbf6:	3204      	adds	r2, #4
 800bbf8:	f104 0115 	add.w	r1, r4, #21
 800bbfc:	428f      	cmp	r7, r1
 800bbfe:	bf38      	it	cc
 800bc00:	2204      	movcc	r2, #4
 800bc02:	9201      	str	r2, [sp, #4]
 800bc04:	9a02      	ldr	r2, [sp, #8]
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d80c      	bhi.n	800bc26 <__multiply+0x9e>
 800bc0c:	2e00      	cmp	r6, #0
 800bc0e:	dd03      	ble.n	800bc18 <__multiply+0x90>
 800bc10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d05a      	beq.n	800bcce <__multiply+0x146>
 800bc18:	6106      	str	r6, [r0, #16]
 800bc1a:	b005      	add	sp, #20
 800bc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc20:	f843 2b04 	str.w	r2, [r3], #4
 800bc24:	e7d8      	b.n	800bbd8 <__multiply+0x50>
 800bc26:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc2a:	f1ba 0f00 	cmp.w	sl, #0
 800bc2e:	d024      	beq.n	800bc7a <__multiply+0xf2>
 800bc30:	f104 0e14 	add.w	lr, r4, #20
 800bc34:	46a9      	mov	r9, r5
 800bc36:	f04f 0c00 	mov.w	ip, #0
 800bc3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc3e:	f8d9 1000 	ldr.w	r1, [r9]
 800bc42:	fa1f fb82 	uxth.w	fp, r2
 800bc46:	b289      	uxth	r1, r1
 800bc48:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc50:	f8d9 2000 	ldr.w	r2, [r9]
 800bc54:	4461      	add	r1, ip
 800bc56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc62:	b289      	uxth	r1, r1
 800bc64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc68:	4577      	cmp	r7, lr
 800bc6a:	f849 1b04 	str.w	r1, [r9], #4
 800bc6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc72:	d8e2      	bhi.n	800bc3a <__multiply+0xb2>
 800bc74:	9a01      	ldr	r2, [sp, #4]
 800bc76:	f845 c002 	str.w	ip, [r5, r2]
 800bc7a:	9a03      	ldr	r2, [sp, #12]
 800bc7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc80:	3304      	adds	r3, #4
 800bc82:	f1b9 0f00 	cmp.w	r9, #0
 800bc86:	d020      	beq.n	800bcca <__multiply+0x142>
 800bc88:	6829      	ldr	r1, [r5, #0]
 800bc8a:	f104 0c14 	add.w	ip, r4, #20
 800bc8e:	46ae      	mov	lr, r5
 800bc90:	f04f 0a00 	mov.w	sl, #0
 800bc94:	f8bc b000 	ldrh.w	fp, [ip]
 800bc98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc9c:	fb09 220b 	mla	r2, r9, fp, r2
 800bca0:	4492      	add	sl, r2
 800bca2:	b289      	uxth	r1, r1
 800bca4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bca8:	f84e 1b04 	str.w	r1, [lr], #4
 800bcac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcb0:	f8be 1000 	ldrh.w	r1, [lr]
 800bcb4:	0c12      	lsrs	r2, r2, #16
 800bcb6:	fb09 1102 	mla	r1, r9, r2, r1
 800bcba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcbe:	4567      	cmp	r7, ip
 800bcc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcc4:	d8e6      	bhi.n	800bc94 <__multiply+0x10c>
 800bcc6:	9a01      	ldr	r2, [sp, #4]
 800bcc8:	50a9      	str	r1, [r5, r2]
 800bcca:	3504      	adds	r5, #4
 800bccc:	e79a      	b.n	800bc04 <__multiply+0x7c>
 800bcce:	3e01      	subs	r6, #1
 800bcd0:	e79c      	b.n	800bc0c <__multiply+0x84>
 800bcd2:	bf00      	nop
 800bcd4:	0800d0c0 	.word	0x0800d0c0
 800bcd8:	0800d1b0 	.word	0x0800d1b0

0800bcdc <__pow5mult>:
 800bcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce0:	4615      	mov	r5, r2
 800bce2:	f012 0203 	ands.w	r2, r2, #3
 800bce6:	4606      	mov	r6, r0
 800bce8:	460f      	mov	r7, r1
 800bcea:	d007      	beq.n	800bcfc <__pow5mult+0x20>
 800bcec:	4c25      	ldr	r4, [pc, #148]	; (800bd84 <__pow5mult+0xa8>)
 800bcee:	3a01      	subs	r2, #1
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcf6:	f7ff fe51 	bl	800b99c <__multadd>
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	10ad      	asrs	r5, r5, #2
 800bcfe:	d03d      	beq.n	800bd7c <__pow5mult+0xa0>
 800bd00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd02:	b97c      	cbnz	r4, 800bd24 <__pow5mult+0x48>
 800bd04:	2010      	movs	r0, #16
 800bd06:	f7ff fdbf 	bl	800b888 <malloc>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	6270      	str	r0, [r6, #36]	; 0x24
 800bd0e:	b928      	cbnz	r0, 800bd1c <__pow5mult+0x40>
 800bd10:	4b1d      	ldr	r3, [pc, #116]	; (800bd88 <__pow5mult+0xac>)
 800bd12:	481e      	ldr	r0, [pc, #120]	; (800bd8c <__pow5mult+0xb0>)
 800bd14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd18:	f000 ff24 	bl	800cb64 <__assert_func>
 800bd1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd20:	6004      	str	r4, [r0, #0]
 800bd22:	60c4      	str	r4, [r0, #12]
 800bd24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd2c:	b94c      	cbnz	r4, 800bd42 <__pow5mult+0x66>
 800bd2e:	f240 2171 	movw	r1, #625	; 0x271
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7ff ff12 	bl	800bb5c <__i2b>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd3e:	4604      	mov	r4, r0
 800bd40:	6003      	str	r3, [r0, #0]
 800bd42:	f04f 0900 	mov.w	r9, #0
 800bd46:	07eb      	lsls	r3, r5, #31
 800bd48:	d50a      	bpl.n	800bd60 <__pow5mult+0x84>
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f7ff ff1a 	bl	800bb88 <__multiply>
 800bd54:	4639      	mov	r1, r7
 800bd56:	4680      	mov	r8, r0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7ff fdfd 	bl	800b958 <_Bfree>
 800bd5e:	4647      	mov	r7, r8
 800bd60:	106d      	asrs	r5, r5, #1
 800bd62:	d00b      	beq.n	800bd7c <__pow5mult+0xa0>
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	b938      	cbnz	r0, 800bd78 <__pow5mult+0x9c>
 800bd68:	4622      	mov	r2, r4
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7ff ff0b 	bl	800bb88 <__multiply>
 800bd72:	6020      	str	r0, [r4, #0]
 800bd74:	f8c0 9000 	str.w	r9, [r0]
 800bd78:	4604      	mov	r4, r0
 800bd7a:	e7e4      	b.n	800bd46 <__pow5mult+0x6a>
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd82:	bf00      	nop
 800bd84:	0800d300 	.word	0x0800d300
 800bd88:	0800d04e 	.word	0x0800d04e
 800bd8c:	0800d1b0 	.word	0x0800d1b0

0800bd90 <__lshift>:
 800bd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd94:	460c      	mov	r4, r1
 800bd96:	6849      	ldr	r1, [r1, #4]
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd9e:	68a3      	ldr	r3, [r4, #8]
 800bda0:	4607      	mov	r7, r0
 800bda2:	4691      	mov	r9, r2
 800bda4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bda8:	f108 0601 	add.w	r6, r8, #1
 800bdac:	42b3      	cmp	r3, r6
 800bdae:	db0b      	blt.n	800bdc8 <__lshift+0x38>
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f7ff fd91 	bl	800b8d8 <_Balloc>
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	b948      	cbnz	r0, 800bdce <__lshift+0x3e>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	4b2a      	ldr	r3, [pc, #168]	; (800be68 <__lshift+0xd8>)
 800bdbe:	482b      	ldr	r0, [pc, #172]	; (800be6c <__lshift+0xdc>)
 800bdc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdc4:	f000 fece 	bl	800cb64 <__assert_func>
 800bdc8:	3101      	adds	r1, #1
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	e7ee      	b.n	800bdac <__lshift+0x1c>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f100 0114 	add.w	r1, r0, #20
 800bdd4:	f100 0210 	add.w	r2, r0, #16
 800bdd8:	4618      	mov	r0, r3
 800bdda:	4553      	cmp	r3, sl
 800bddc:	db37      	blt.n	800be4e <__lshift+0xbe>
 800bdde:	6920      	ldr	r0, [r4, #16]
 800bde0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bde4:	f104 0314 	add.w	r3, r4, #20
 800bde8:	f019 091f 	ands.w	r9, r9, #31
 800bdec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bdf4:	d02f      	beq.n	800be56 <__lshift+0xc6>
 800bdf6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdfa:	468a      	mov	sl, r1
 800bdfc:	f04f 0c00 	mov.w	ip, #0
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	fa02 f209 	lsl.w	r2, r2, r9
 800be06:	ea42 020c 	orr.w	r2, r2, ip
 800be0a:	f84a 2b04 	str.w	r2, [sl], #4
 800be0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be12:	4298      	cmp	r0, r3
 800be14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be18:	d8f2      	bhi.n	800be00 <__lshift+0x70>
 800be1a:	1b03      	subs	r3, r0, r4
 800be1c:	3b15      	subs	r3, #21
 800be1e:	f023 0303 	bic.w	r3, r3, #3
 800be22:	3304      	adds	r3, #4
 800be24:	f104 0215 	add.w	r2, r4, #21
 800be28:	4290      	cmp	r0, r2
 800be2a:	bf38      	it	cc
 800be2c:	2304      	movcc	r3, #4
 800be2e:	f841 c003 	str.w	ip, [r1, r3]
 800be32:	f1bc 0f00 	cmp.w	ip, #0
 800be36:	d001      	beq.n	800be3c <__lshift+0xac>
 800be38:	f108 0602 	add.w	r6, r8, #2
 800be3c:	3e01      	subs	r6, #1
 800be3e:	4638      	mov	r0, r7
 800be40:	612e      	str	r6, [r5, #16]
 800be42:	4621      	mov	r1, r4
 800be44:	f7ff fd88 	bl	800b958 <_Bfree>
 800be48:	4628      	mov	r0, r5
 800be4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be52:	3301      	adds	r3, #1
 800be54:	e7c1      	b.n	800bdda <__lshift+0x4a>
 800be56:	3904      	subs	r1, #4
 800be58:	f853 2b04 	ldr.w	r2, [r3], #4
 800be5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be60:	4298      	cmp	r0, r3
 800be62:	d8f9      	bhi.n	800be58 <__lshift+0xc8>
 800be64:	e7ea      	b.n	800be3c <__lshift+0xac>
 800be66:	bf00      	nop
 800be68:	0800d0c0 	.word	0x0800d0c0
 800be6c:	0800d1b0 	.word	0x0800d1b0

0800be70 <__mcmp>:
 800be70:	b530      	push	{r4, r5, lr}
 800be72:	6902      	ldr	r2, [r0, #16]
 800be74:	690c      	ldr	r4, [r1, #16]
 800be76:	1b12      	subs	r2, r2, r4
 800be78:	d10e      	bne.n	800be98 <__mcmp+0x28>
 800be7a:	f100 0314 	add.w	r3, r0, #20
 800be7e:	3114      	adds	r1, #20
 800be80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be90:	42a5      	cmp	r5, r4
 800be92:	d003      	beq.n	800be9c <__mcmp+0x2c>
 800be94:	d305      	bcc.n	800bea2 <__mcmp+0x32>
 800be96:	2201      	movs	r2, #1
 800be98:	4610      	mov	r0, r2
 800be9a:	bd30      	pop	{r4, r5, pc}
 800be9c:	4283      	cmp	r3, r0
 800be9e:	d3f3      	bcc.n	800be88 <__mcmp+0x18>
 800bea0:	e7fa      	b.n	800be98 <__mcmp+0x28>
 800bea2:	f04f 32ff 	mov.w	r2, #4294967295
 800bea6:	e7f7      	b.n	800be98 <__mcmp+0x28>

0800bea8 <__mdiff>:
 800bea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	460c      	mov	r4, r1
 800beae:	4606      	mov	r6, r0
 800beb0:	4611      	mov	r1, r2
 800beb2:	4620      	mov	r0, r4
 800beb4:	4690      	mov	r8, r2
 800beb6:	f7ff ffdb 	bl	800be70 <__mcmp>
 800beba:	1e05      	subs	r5, r0, #0
 800bebc:	d110      	bne.n	800bee0 <__mdiff+0x38>
 800bebe:	4629      	mov	r1, r5
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff fd09 	bl	800b8d8 <_Balloc>
 800bec6:	b930      	cbnz	r0, 800bed6 <__mdiff+0x2e>
 800bec8:	4b3a      	ldr	r3, [pc, #232]	; (800bfb4 <__mdiff+0x10c>)
 800beca:	4602      	mov	r2, r0
 800becc:	f240 2132 	movw	r1, #562	; 0x232
 800bed0:	4839      	ldr	r0, [pc, #228]	; (800bfb8 <__mdiff+0x110>)
 800bed2:	f000 fe47 	bl	800cb64 <__assert_func>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee0:	bfa4      	itt	ge
 800bee2:	4643      	movge	r3, r8
 800bee4:	46a0      	movge	r8, r4
 800bee6:	4630      	mov	r0, r6
 800bee8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800beec:	bfa6      	itte	ge
 800beee:	461c      	movge	r4, r3
 800bef0:	2500      	movge	r5, #0
 800bef2:	2501      	movlt	r5, #1
 800bef4:	f7ff fcf0 	bl	800b8d8 <_Balloc>
 800bef8:	b920      	cbnz	r0, 800bf04 <__mdiff+0x5c>
 800befa:	4b2e      	ldr	r3, [pc, #184]	; (800bfb4 <__mdiff+0x10c>)
 800befc:	4602      	mov	r2, r0
 800befe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf02:	e7e5      	b.n	800bed0 <__mdiff+0x28>
 800bf04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf08:	6926      	ldr	r6, [r4, #16]
 800bf0a:	60c5      	str	r5, [r0, #12]
 800bf0c:	f104 0914 	add.w	r9, r4, #20
 800bf10:	f108 0514 	add.w	r5, r8, #20
 800bf14:	f100 0e14 	add.w	lr, r0, #20
 800bf18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf20:	f108 0210 	add.w	r2, r8, #16
 800bf24:	46f2      	mov	sl, lr
 800bf26:	2100      	movs	r1, #0
 800bf28:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf30:	fa1f f883 	uxth.w	r8, r3
 800bf34:	fa11 f18b 	uxtah	r1, r1, fp
 800bf38:	0c1b      	lsrs	r3, r3, #16
 800bf3a:	eba1 0808 	sub.w	r8, r1, r8
 800bf3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf46:	fa1f f888 	uxth.w	r8, r8
 800bf4a:	1419      	asrs	r1, r3, #16
 800bf4c:	454e      	cmp	r6, r9
 800bf4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf52:	f84a 3b04 	str.w	r3, [sl], #4
 800bf56:	d8e7      	bhi.n	800bf28 <__mdiff+0x80>
 800bf58:	1b33      	subs	r3, r6, r4
 800bf5a:	3b15      	subs	r3, #21
 800bf5c:	f023 0303 	bic.w	r3, r3, #3
 800bf60:	3304      	adds	r3, #4
 800bf62:	3415      	adds	r4, #21
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	bf38      	it	cc
 800bf68:	2304      	movcc	r3, #4
 800bf6a:	441d      	add	r5, r3
 800bf6c:	4473      	add	r3, lr
 800bf6e:	469e      	mov	lr, r3
 800bf70:	462e      	mov	r6, r5
 800bf72:	4566      	cmp	r6, ip
 800bf74:	d30e      	bcc.n	800bf94 <__mdiff+0xec>
 800bf76:	f10c 0203 	add.w	r2, ip, #3
 800bf7a:	1b52      	subs	r2, r2, r5
 800bf7c:	f022 0203 	bic.w	r2, r2, #3
 800bf80:	3d03      	subs	r5, #3
 800bf82:	45ac      	cmp	ip, r5
 800bf84:	bf38      	it	cc
 800bf86:	2200      	movcc	r2, #0
 800bf88:	441a      	add	r2, r3
 800bf8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf8e:	b17b      	cbz	r3, 800bfb0 <__mdiff+0x108>
 800bf90:	6107      	str	r7, [r0, #16]
 800bf92:	e7a3      	b.n	800bedc <__mdiff+0x34>
 800bf94:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf98:	fa11 f288 	uxtah	r2, r1, r8
 800bf9c:	1414      	asrs	r4, r2, #16
 800bf9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfa2:	b292      	uxth	r2, r2
 800bfa4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfa8:	f84e 2b04 	str.w	r2, [lr], #4
 800bfac:	1421      	asrs	r1, r4, #16
 800bfae:	e7e0      	b.n	800bf72 <__mdiff+0xca>
 800bfb0:	3f01      	subs	r7, #1
 800bfb2:	e7ea      	b.n	800bf8a <__mdiff+0xe2>
 800bfb4:	0800d0c0 	.word	0x0800d0c0
 800bfb8:	0800d1b0 	.word	0x0800d1b0

0800bfbc <__ulp>:
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	ed8d 0b00 	vstr	d0, [sp]
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	4912      	ldr	r1, [pc, #72]	; (800c010 <__ulp+0x54>)
 800bfc6:	4019      	ands	r1, r3
 800bfc8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bfcc:	2900      	cmp	r1, #0
 800bfce:	dd05      	ble.n	800bfdc <__ulp+0x20>
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	ec43 2b10 	vmov	d0, r2, r3
 800bfd8:	b002      	add	sp, #8
 800bfda:	4770      	bx	lr
 800bfdc:	4249      	negs	r1, r1
 800bfde:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bfe2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bfe6:	f04f 0200 	mov.w	r2, #0
 800bfea:	f04f 0300 	mov.w	r3, #0
 800bfee:	da04      	bge.n	800bffa <__ulp+0x3e>
 800bff0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bff4:	fa41 f300 	asr.w	r3, r1, r0
 800bff8:	e7ec      	b.n	800bfd4 <__ulp+0x18>
 800bffa:	f1a0 0114 	sub.w	r1, r0, #20
 800bffe:	291e      	cmp	r1, #30
 800c000:	bfda      	itte	le
 800c002:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c006:	fa20 f101 	lsrle.w	r1, r0, r1
 800c00a:	2101      	movgt	r1, #1
 800c00c:	460a      	mov	r2, r1
 800c00e:	e7e1      	b.n	800bfd4 <__ulp+0x18>
 800c010:	7ff00000 	.word	0x7ff00000

0800c014 <__b2d>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	6905      	ldr	r5, [r0, #16]
 800c018:	f100 0714 	add.w	r7, r0, #20
 800c01c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c020:	1f2e      	subs	r6, r5, #4
 800c022:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c026:	4620      	mov	r0, r4
 800c028:	f7ff fd48 	bl	800babc <__hi0bits>
 800c02c:	f1c0 0320 	rsb	r3, r0, #32
 800c030:	280a      	cmp	r0, #10
 800c032:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0b0 <__b2d+0x9c>
 800c036:	600b      	str	r3, [r1, #0]
 800c038:	dc14      	bgt.n	800c064 <__b2d+0x50>
 800c03a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c03e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c042:	42b7      	cmp	r7, r6
 800c044:	ea41 030c 	orr.w	r3, r1, ip
 800c048:	bf34      	ite	cc
 800c04a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c04e:	2100      	movcs	r1, #0
 800c050:	3015      	adds	r0, #21
 800c052:	fa04 f000 	lsl.w	r0, r4, r0
 800c056:	fa21 f10e 	lsr.w	r1, r1, lr
 800c05a:	ea40 0201 	orr.w	r2, r0, r1
 800c05e:	ec43 2b10 	vmov	d0, r2, r3
 800c062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c064:	42b7      	cmp	r7, r6
 800c066:	bf3a      	itte	cc
 800c068:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c06c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c070:	2100      	movcs	r1, #0
 800c072:	380b      	subs	r0, #11
 800c074:	d017      	beq.n	800c0a6 <__b2d+0x92>
 800c076:	f1c0 0c20 	rsb	ip, r0, #32
 800c07a:	fa04 f500 	lsl.w	r5, r4, r0
 800c07e:	42be      	cmp	r6, r7
 800c080:	fa21 f40c 	lsr.w	r4, r1, ip
 800c084:	ea45 0504 	orr.w	r5, r5, r4
 800c088:	bf8c      	ite	hi
 800c08a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c08e:	2400      	movls	r4, #0
 800c090:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c094:	fa01 f000 	lsl.w	r0, r1, r0
 800c098:	fa24 f40c 	lsr.w	r4, r4, ip
 800c09c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0a0:	ea40 0204 	orr.w	r2, r0, r4
 800c0a4:	e7db      	b.n	800c05e <__b2d+0x4a>
 800c0a6:	ea44 030c 	orr.w	r3, r4, ip
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	e7d7      	b.n	800c05e <__b2d+0x4a>
 800c0ae:	bf00      	nop
 800c0b0:	3ff00000 	.word	0x3ff00000

0800c0b4 <__d2b>:
 800c0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0b8:	4689      	mov	r9, r1
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	ec57 6b10 	vmov	r6, r7, d0
 800c0c0:	4690      	mov	r8, r2
 800c0c2:	f7ff fc09 	bl	800b8d8 <_Balloc>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	b930      	cbnz	r0, 800c0d8 <__d2b+0x24>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	4b25      	ldr	r3, [pc, #148]	; (800c164 <__d2b+0xb0>)
 800c0ce:	4826      	ldr	r0, [pc, #152]	; (800c168 <__d2b+0xb4>)
 800c0d0:	f240 310a 	movw	r1, #778	; 0x30a
 800c0d4:	f000 fd46 	bl	800cb64 <__assert_func>
 800c0d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0e0:	bb35      	cbnz	r5, 800c130 <__d2b+0x7c>
 800c0e2:	2e00      	cmp	r6, #0
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	d028      	beq.n	800c13a <__d2b+0x86>
 800c0e8:	4668      	mov	r0, sp
 800c0ea:	9600      	str	r6, [sp, #0]
 800c0ec:	f7ff fd06 	bl	800bafc <__lo0bits>
 800c0f0:	9900      	ldr	r1, [sp, #0]
 800c0f2:	b300      	cbz	r0, 800c136 <__d2b+0x82>
 800c0f4:	9a01      	ldr	r2, [sp, #4]
 800c0f6:	f1c0 0320 	rsb	r3, r0, #32
 800c0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fe:	430b      	orrs	r3, r1
 800c100:	40c2      	lsrs	r2, r0
 800c102:	6163      	str	r3, [r4, #20]
 800c104:	9201      	str	r2, [sp, #4]
 800c106:	9b01      	ldr	r3, [sp, #4]
 800c108:	61a3      	str	r3, [r4, #24]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	bf14      	ite	ne
 800c10e:	2202      	movne	r2, #2
 800c110:	2201      	moveq	r2, #1
 800c112:	6122      	str	r2, [r4, #16]
 800c114:	b1d5      	cbz	r5, 800c14c <__d2b+0x98>
 800c116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c11a:	4405      	add	r5, r0
 800c11c:	f8c9 5000 	str.w	r5, [r9]
 800c120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c124:	f8c8 0000 	str.w	r0, [r8]
 800c128:	4620      	mov	r0, r4
 800c12a:	b003      	add	sp, #12
 800c12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c134:	e7d5      	b.n	800c0e2 <__d2b+0x2e>
 800c136:	6161      	str	r1, [r4, #20]
 800c138:	e7e5      	b.n	800c106 <__d2b+0x52>
 800c13a:	a801      	add	r0, sp, #4
 800c13c:	f7ff fcde 	bl	800bafc <__lo0bits>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	6163      	str	r3, [r4, #20]
 800c144:	2201      	movs	r2, #1
 800c146:	6122      	str	r2, [r4, #16]
 800c148:	3020      	adds	r0, #32
 800c14a:	e7e3      	b.n	800c114 <__d2b+0x60>
 800c14c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c154:	f8c9 0000 	str.w	r0, [r9]
 800c158:	6918      	ldr	r0, [r3, #16]
 800c15a:	f7ff fcaf 	bl	800babc <__hi0bits>
 800c15e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c162:	e7df      	b.n	800c124 <__d2b+0x70>
 800c164:	0800d0c0 	.word	0x0800d0c0
 800c168:	0800d1b0 	.word	0x0800d1b0

0800c16c <__ratio>:
 800c16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	4688      	mov	r8, r1
 800c172:	4669      	mov	r1, sp
 800c174:	4681      	mov	r9, r0
 800c176:	f7ff ff4d 	bl	800c014 <__b2d>
 800c17a:	a901      	add	r1, sp, #4
 800c17c:	4640      	mov	r0, r8
 800c17e:	ec55 4b10 	vmov	r4, r5, d0
 800c182:	f7ff ff47 	bl	800c014 <__b2d>
 800c186:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c18a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c18e:	eba3 0c02 	sub.w	ip, r3, r2
 800c192:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c196:	1a9b      	subs	r3, r3, r2
 800c198:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c19c:	ec51 0b10 	vmov	r0, r1, d0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	bfd6      	itet	le
 800c1a4:	460a      	movle	r2, r1
 800c1a6:	462a      	movgt	r2, r5
 800c1a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1ac:	468b      	mov	fp, r1
 800c1ae:	462f      	mov	r7, r5
 800c1b0:	bfd4      	ite	le
 800c1b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	ee10 2a10 	vmov	r2, s0
 800c1c0:	465b      	mov	r3, fp
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	f7f4 fb52 	bl	800086c <__aeabi_ddiv>
 800c1c8:	ec41 0b10 	vmov	d0, r0, r1
 800c1cc:	b003      	add	sp, #12
 800c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1d2 <__copybits>:
 800c1d2:	3901      	subs	r1, #1
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	1149      	asrs	r1, r1, #5
 800c1d8:	6914      	ldr	r4, [r2, #16]
 800c1da:	3101      	adds	r1, #1
 800c1dc:	f102 0314 	add.w	r3, r2, #20
 800c1e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1e8:	1f05      	subs	r5, r0, #4
 800c1ea:	42a3      	cmp	r3, r4
 800c1ec:	d30c      	bcc.n	800c208 <__copybits+0x36>
 800c1ee:	1aa3      	subs	r3, r4, r2
 800c1f0:	3b11      	subs	r3, #17
 800c1f2:	f023 0303 	bic.w	r3, r3, #3
 800c1f6:	3211      	adds	r2, #17
 800c1f8:	42a2      	cmp	r2, r4
 800c1fa:	bf88      	it	hi
 800c1fc:	2300      	movhi	r3, #0
 800c1fe:	4418      	add	r0, r3
 800c200:	2300      	movs	r3, #0
 800c202:	4288      	cmp	r0, r1
 800c204:	d305      	bcc.n	800c212 <__copybits+0x40>
 800c206:	bd70      	pop	{r4, r5, r6, pc}
 800c208:	f853 6b04 	ldr.w	r6, [r3], #4
 800c20c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c210:	e7eb      	b.n	800c1ea <__copybits+0x18>
 800c212:	f840 3b04 	str.w	r3, [r0], #4
 800c216:	e7f4      	b.n	800c202 <__copybits+0x30>

0800c218 <__any_on>:
 800c218:	f100 0214 	add.w	r2, r0, #20
 800c21c:	6900      	ldr	r0, [r0, #16]
 800c21e:	114b      	asrs	r3, r1, #5
 800c220:	4298      	cmp	r0, r3
 800c222:	b510      	push	{r4, lr}
 800c224:	db11      	blt.n	800c24a <__any_on+0x32>
 800c226:	dd0a      	ble.n	800c23e <__any_on+0x26>
 800c228:	f011 011f 	ands.w	r1, r1, #31
 800c22c:	d007      	beq.n	800c23e <__any_on+0x26>
 800c22e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c232:	fa24 f001 	lsr.w	r0, r4, r1
 800c236:	fa00 f101 	lsl.w	r1, r0, r1
 800c23a:	428c      	cmp	r4, r1
 800c23c:	d10b      	bne.n	800c256 <__any_on+0x3e>
 800c23e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c242:	4293      	cmp	r3, r2
 800c244:	d803      	bhi.n	800c24e <__any_on+0x36>
 800c246:	2000      	movs	r0, #0
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	4603      	mov	r3, r0
 800c24c:	e7f7      	b.n	800c23e <__any_on+0x26>
 800c24e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c252:	2900      	cmp	r1, #0
 800c254:	d0f5      	beq.n	800c242 <__any_on+0x2a>
 800c256:	2001      	movs	r0, #1
 800c258:	e7f6      	b.n	800c248 <__any_on+0x30>

0800c25a <_calloc_r>:
 800c25a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c25c:	fba1 2402 	umull	r2, r4, r1, r2
 800c260:	b94c      	cbnz	r4, 800c276 <_calloc_r+0x1c>
 800c262:	4611      	mov	r1, r2
 800c264:	9201      	str	r2, [sp, #4]
 800c266:	f000 f87b 	bl	800c360 <_malloc_r>
 800c26a:	9a01      	ldr	r2, [sp, #4]
 800c26c:	4605      	mov	r5, r0
 800c26e:	b930      	cbnz	r0, 800c27e <_calloc_r+0x24>
 800c270:	4628      	mov	r0, r5
 800c272:	b003      	add	sp, #12
 800c274:	bd30      	pop	{r4, r5, pc}
 800c276:	220c      	movs	r2, #12
 800c278:	6002      	str	r2, [r0, #0]
 800c27a:	2500      	movs	r5, #0
 800c27c:	e7f8      	b.n	800c270 <_calloc_r+0x16>
 800c27e:	4621      	mov	r1, r4
 800c280:	f7fc f83c 	bl	80082fc <memset>
 800c284:	e7f4      	b.n	800c270 <_calloc_r+0x16>
	...

0800c288 <_free_r>:
 800c288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c28a:	2900      	cmp	r1, #0
 800c28c:	d044      	beq.n	800c318 <_free_r+0x90>
 800c28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c292:	9001      	str	r0, [sp, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f1a1 0404 	sub.w	r4, r1, #4
 800c29a:	bfb8      	it	lt
 800c29c:	18e4      	addlt	r4, r4, r3
 800c29e:	f000 fcef 	bl	800cc80 <__malloc_lock>
 800c2a2:	4a1e      	ldr	r2, [pc, #120]	; (800c31c <_free_r+0x94>)
 800c2a4:	9801      	ldr	r0, [sp, #4]
 800c2a6:	6813      	ldr	r3, [r2, #0]
 800c2a8:	b933      	cbnz	r3, 800c2b8 <_free_r+0x30>
 800c2aa:	6063      	str	r3, [r4, #4]
 800c2ac:	6014      	str	r4, [r2, #0]
 800c2ae:	b003      	add	sp, #12
 800c2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2b4:	f000 bcea 	b.w	800cc8c <__malloc_unlock>
 800c2b8:	42a3      	cmp	r3, r4
 800c2ba:	d908      	bls.n	800c2ce <_free_r+0x46>
 800c2bc:	6825      	ldr	r5, [r4, #0]
 800c2be:	1961      	adds	r1, r4, r5
 800c2c0:	428b      	cmp	r3, r1
 800c2c2:	bf01      	itttt	eq
 800c2c4:	6819      	ldreq	r1, [r3, #0]
 800c2c6:	685b      	ldreq	r3, [r3, #4]
 800c2c8:	1949      	addeq	r1, r1, r5
 800c2ca:	6021      	streq	r1, [r4, #0]
 800c2cc:	e7ed      	b.n	800c2aa <_free_r+0x22>
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	b10b      	cbz	r3, 800c2d8 <_free_r+0x50>
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	d9fa      	bls.n	800c2ce <_free_r+0x46>
 800c2d8:	6811      	ldr	r1, [r2, #0]
 800c2da:	1855      	adds	r5, r2, r1
 800c2dc:	42a5      	cmp	r5, r4
 800c2de:	d10b      	bne.n	800c2f8 <_free_r+0x70>
 800c2e0:	6824      	ldr	r4, [r4, #0]
 800c2e2:	4421      	add	r1, r4
 800c2e4:	1854      	adds	r4, r2, r1
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	6011      	str	r1, [r2, #0]
 800c2ea:	d1e0      	bne.n	800c2ae <_free_r+0x26>
 800c2ec:	681c      	ldr	r4, [r3, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	6053      	str	r3, [r2, #4]
 800c2f2:	4421      	add	r1, r4
 800c2f4:	6011      	str	r1, [r2, #0]
 800c2f6:	e7da      	b.n	800c2ae <_free_r+0x26>
 800c2f8:	d902      	bls.n	800c300 <_free_r+0x78>
 800c2fa:	230c      	movs	r3, #12
 800c2fc:	6003      	str	r3, [r0, #0]
 800c2fe:	e7d6      	b.n	800c2ae <_free_r+0x26>
 800c300:	6825      	ldr	r5, [r4, #0]
 800c302:	1961      	adds	r1, r4, r5
 800c304:	428b      	cmp	r3, r1
 800c306:	bf04      	itt	eq
 800c308:	6819      	ldreq	r1, [r3, #0]
 800c30a:	685b      	ldreq	r3, [r3, #4]
 800c30c:	6063      	str	r3, [r4, #4]
 800c30e:	bf04      	itt	eq
 800c310:	1949      	addeq	r1, r1, r5
 800c312:	6021      	streq	r1, [r4, #0]
 800c314:	6054      	str	r4, [r2, #4]
 800c316:	e7ca      	b.n	800c2ae <_free_r+0x26>
 800c318:	b003      	add	sp, #12
 800c31a:	bd30      	pop	{r4, r5, pc}
 800c31c:	20000ae8 	.word	0x20000ae8

0800c320 <sbrk_aligned>:
 800c320:	b570      	push	{r4, r5, r6, lr}
 800c322:	4e0e      	ldr	r6, [pc, #56]	; (800c35c <sbrk_aligned+0x3c>)
 800c324:	460c      	mov	r4, r1
 800c326:	6831      	ldr	r1, [r6, #0]
 800c328:	4605      	mov	r5, r0
 800c32a:	b911      	cbnz	r1, 800c332 <sbrk_aligned+0x12>
 800c32c:	f000 fb94 	bl	800ca58 <_sbrk_r>
 800c330:	6030      	str	r0, [r6, #0]
 800c332:	4621      	mov	r1, r4
 800c334:	4628      	mov	r0, r5
 800c336:	f000 fb8f 	bl	800ca58 <_sbrk_r>
 800c33a:	1c43      	adds	r3, r0, #1
 800c33c:	d00a      	beq.n	800c354 <sbrk_aligned+0x34>
 800c33e:	1cc4      	adds	r4, r0, #3
 800c340:	f024 0403 	bic.w	r4, r4, #3
 800c344:	42a0      	cmp	r0, r4
 800c346:	d007      	beq.n	800c358 <sbrk_aligned+0x38>
 800c348:	1a21      	subs	r1, r4, r0
 800c34a:	4628      	mov	r0, r5
 800c34c:	f000 fb84 	bl	800ca58 <_sbrk_r>
 800c350:	3001      	adds	r0, #1
 800c352:	d101      	bne.n	800c358 <sbrk_aligned+0x38>
 800c354:	f04f 34ff 	mov.w	r4, #4294967295
 800c358:	4620      	mov	r0, r4
 800c35a:	bd70      	pop	{r4, r5, r6, pc}
 800c35c:	20000aec 	.word	0x20000aec

0800c360 <_malloc_r>:
 800c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c364:	1ccd      	adds	r5, r1, #3
 800c366:	f025 0503 	bic.w	r5, r5, #3
 800c36a:	3508      	adds	r5, #8
 800c36c:	2d0c      	cmp	r5, #12
 800c36e:	bf38      	it	cc
 800c370:	250c      	movcc	r5, #12
 800c372:	2d00      	cmp	r5, #0
 800c374:	4607      	mov	r7, r0
 800c376:	db01      	blt.n	800c37c <_malloc_r+0x1c>
 800c378:	42a9      	cmp	r1, r5
 800c37a:	d905      	bls.n	800c388 <_malloc_r+0x28>
 800c37c:	230c      	movs	r3, #12
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	2600      	movs	r6, #0
 800c382:	4630      	mov	r0, r6
 800c384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c388:	4e2e      	ldr	r6, [pc, #184]	; (800c444 <_malloc_r+0xe4>)
 800c38a:	f000 fc79 	bl	800cc80 <__malloc_lock>
 800c38e:	6833      	ldr	r3, [r6, #0]
 800c390:	461c      	mov	r4, r3
 800c392:	bb34      	cbnz	r4, 800c3e2 <_malloc_r+0x82>
 800c394:	4629      	mov	r1, r5
 800c396:	4638      	mov	r0, r7
 800c398:	f7ff ffc2 	bl	800c320 <sbrk_aligned>
 800c39c:	1c43      	adds	r3, r0, #1
 800c39e:	4604      	mov	r4, r0
 800c3a0:	d14d      	bne.n	800c43e <_malloc_r+0xde>
 800c3a2:	6834      	ldr	r4, [r6, #0]
 800c3a4:	4626      	mov	r6, r4
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	d140      	bne.n	800c42c <_malloc_r+0xcc>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	eb04 0803 	add.w	r8, r4, r3
 800c3b4:	f000 fb50 	bl	800ca58 <_sbrk_r>
 800c3b8:	4580      	cmp	r8, r0
 800c3ba:	d13a      	bne.n	800c432 <_malloc_r+0xd2>
 800c3bc:	6821      	ldr	r1, [r4, #0]
 800c3be:	3503      	adds	r5, #3
 800c3c0:	1a6d      	subs	r5, r5, r1
 800c3c2:	f025 0503 	bic.w	r5, r5, #3
 800c3c6:	3508      	adds	r5, #8
 800c3c8:	2d0c      	cmp	r5, #12
 800c3ca:	bf38      	it	cc
 800c3cc:	250c      	movcc	r5, #12
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff ffa5 	bl	800c320 <sbrk_aligned>
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	d02b      	beq.n	800c432 <_malloc_r+0xd2>
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	442b      	add	r3, r5
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	e00e      	b.n	800c400 <_malloc_r+0xa0>
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	1b52      	subs	r2, r2, r5
 800c3e6:	d41e      	bmi.n	800c426 <_malloc_r+0xc6>
 800c3e8:	2a0b      	cmp	r2, #11
 800c3ea:	d916      	bls.n	800c41a <_malloc_r+0xba>
 800c3ec:	1961      	adds	r1, r4, r5
 800c3ee:	42a3      	cmp	r3, r4
 800c3f0:	6025      	str	r5, [r4, #0]
 800c3f2:	bf18      	it	ne
 800c3f4:	6059      	strne	r1, [r3, #4]
 800c3f6:	6863      	ldr	r3, [r4, #4]
 800c3f8:	bf08      	it	eq
 800c3fa:	6031      	streq	r1, [r6, #0]
 800c3fc:	5162      	str	r2, [r4, r5]
 800c3fe:	604b      	str	r3, [r1, #4]
 800c400:	4638      	mov	r0, r7
 800c402:	f104 060b 	add.w	r6, r4, #11
 800c406:	f000 fc41 	bl	800cc8c <__malloc_unlock>
 800c40a:	f026 0607 	bic.w	r6, r6, #7
 800c40e:	1d23      	adds	r3, r4, #4
 800c410:	1af2      	subs	r2, r6, r3
 800c412:	d0b6      	beq.n	800c382 <_malloc_r+0x22>
 800c414:	1b9b      	subs	r3, r3, r6
 800c416:	50a3      	str	r3, [r4, r2]
 800c418:	e7b3      	b.n	800c382 <_malloc_r+0x22>
 800c41a:	6862      	ldr	r2, [r4, #4]
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	bf0c      	ite	eq
 800c420:	6032      	streq	r2, [r6, #0]
 800c422:	605a      	strne	r2, [r3, #4]
 800c424:	e7ec      	b.n	800c400 <_malloc_r+0xa0>
 800c426:	4623      	mov	r3, r4
 800c428:	6864      	ldr	r4, [r4, #4]
 800c42a:	e7b2      	b.n	800c392 <_malloc_r+0x32>
 800c42c:	4634      	mov	r4, r6
 800c42e:	6876      	ldr	r6, [r6, #4]
 800c430:	e7b9      	b.n	800c3a6 <_malloc_r+0x46>
 800c432:	230c      	movs	r3, #12
 800c434:	603b      	str	r3, [r7, #0]
 800c436:	4638      	mov	r0, r7
 800c438:	f000 fc28 	bl	800cc8c <__malloc_unlock>
 800c43c:	e7a1      	b.n	800c382 <_malloc_r+0x22>
 800c43e:	6025      	str	r5, [r4, #0]
 800c440:	e7de      	b.n	800c400 <_malloc_r+0xa0>
 800c442:	bf00      	nop
 800c444:	20000ae8 	.word	0x20000ae8

0800c448 <__ssputs_r>:
 800c448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c44c:	688e      	ldr	r6, [r1, #8]
 800c44e:	429e      	cmp	r6, r3
 800c450:	4682      	mov	sl, r0
 800c452:	460c      	mov	r4, r1
 800c454:	4690      	mov	r8, r2
 800c456:	461f      	mov	r7, r3
 800c458:	d838      	bhi.n	800c4cc <__ssputs_r+0x84>
 800c45a:	898a      	ldrh	r2, [r1, #12]
 800c45c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c460:	d032      	beq.n	800c4c8 <__ssputs_r+0x80>
 800c462:	6825      	ldr	r5, [r4, #0]
 800c464:	6909      	ldr	r1, [r1, #16]
 800c466:	eba5 0901 	sub.w	r9, r5, r1
 800c46a:	6965      	ldr	r5, [r4, #20]
 800c46c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c474:	3301      	adds	r3, #1
 800c476:	444b      	add	r3, r9
 800c478:	106d      	asrs	r5, r5, #1
 800c47a:	429d      	cmp	r5, r3
 800c47c:	bf38      	it	cc
 800c47e:	461d      	movcc	r5, r3
 800c480:	0553      	lsls	r3, r2, #21
 800c482:	d531      	bpl.n	800c4e8 <__ssputs_r+0xa0>
 800c484:	4629      	mov	r1, r5
 800c486:	f7ff ff6b 	bl	800c360 <_malloc_r>
 800c48a:	4606      	mov	r6, r0
 800c48c:	b950      	cbnz	r0, 800c4a4 <__ssputs_r+0x5c>
 800c48e:	230c      	movs	r3, #12
 800c490:	f8ca 3000 	str.w	r3, [sl]
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a4:	6921      	ldr	r1, [r4, #16]
 800c4a6:	464a      	mov	r2, r9
 800c4a8:	f7ff fa08 	bl	800b8bc <memcpy>
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	6126      	str	r6, [r4, #16]
 800c4ba:	6165      	str	r5, [r4, #20]
 800c4bc:	444e      	add	r6, r9
 800c4be:	eba5 0509 	sub.w	r5, r5, r9
 800c4c2:	6026      	str	r6, [r4, #0]
 800c4c4:	60a5      	str	r5, [r4, #8]
 800c4c6:	463e      	mov	r6, r7
 800c4c8:	42be      	cmp	r6, r7
 800c4ca:	d900      	bls.n	800c4ce <__ssputs_r+0x86>
 800c4cc:	463e      	mov	r6, r7
 800c4ce:	6820      	ldr	r0, [r4, #0]
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	4641      	mov	r1, r8
 800c4d4:	f000 fbba 	bl	800cc4c <memmove>
 800c4d8:	68a3      	ldr	r3, [r4, #8]
 800c4da:	1b9b      	subs	r3, r3, r6
 800c4dc:	60a3      	str	r3, [r4, #8]
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	4433      	add	r3, r6
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e7db      	b.n	800c4a0 <__ssputs_r+0x58>
 800c4e8:	462a      	mov	r2, r5
 800c4ea:	f000 fbd5 	bl	800cc98 <_realloc_r>
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d1e1      	bne.n	800c4b8 <__ssputs_r+0x70>
 800c4f4:	6921      	ldr	r1, [r4, #16]
 800c4f6:	4650      	mov	r0, sl
 800c4f8:	f7ff fec6 	bl	800c288 <_free_r>
 800c4fc:	e7c7      	b.n	800c48e <__ssputs_r+0x46>
	...

0800c500 <_svfiprintf_r>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	4698      	mov	r8, r3
 800c506:	898b      	ldrh	r3, [r1, #12]
 800c508:	061b      	lsls	r3, r3, #24
 800c50a:	b09d      	sub	sp, #116	; 0x74
 800c50c:	4607      	mov	r7, r0
 800c50e:	460d      	mov	r5, r1
 800c510:	4614      	mov	r4, r2
 800c512:	d50e      	bpl.n	800c532 <_svfiprintf_r+0x32>
 800c514:	690b      	ldr	r3, [r1, #16]
 800c516:	b963      	cbnz	r3, 800c532 <_svfiprintf_r+0x32>
 800c518:	2140      	movs	r1, #64	; 0x40
 800c51a:	f7ff ff21 	bl	800c360 <_malloc_r>
 800c51e:	6028      	str	r0, [r5, #0]
 800c520:	6128      	str	r0, [r5, #16]
 800c522:	b920      	cbnz	r0, 800c52e <_svfiprintf_r+0x2e>
 800c524:	230c      	movs	r3, #12
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	f04f 30ff 	mov.w	r0, #4294967295
 800c52c:	e0d1      	b.n	800c6d2 <_svfiprintf_r+0x1d2>
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	616b      	str	r3, [r5, #20]
 800c532:	2300      	movs	r3, #0
 800c534:	9309      	str	r3, [sp, #36]	; 0x24
 800c536:	2320      	movs	r3, #32
 800c538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c540:	2330      	movs	r3, #48	; 0x30
 800c542:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6ec <_svfiprintf_r+0x1ec>
 800c546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c54a:	f04f 0901 	mov.w	r9, #1
 800c54e:	4623      	mov	r3, r4
 800c550:	469a      	mov	sl, r3
 800c552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c556:	b10a      	cbz	r2, 800c55c <_svfiprintf_r+0x5c>
 800c558:	2a25      	cmp	r2, #37	; 0x25
 800c55a:	d1f9      	bne.n	800c550 <_svfiprintf_r+0x50>
 800c55c:	ebba 0b04 	subs.w	fp, sl, r4
 800c560:	d00b      	beq.n	800c57a <_svfiprintf_r+0x7a>
 800c562:	465b      	mov	r3, fp
 800c564:	4622      	mov	r2, r4
 800c566:	4629      	mov	r1, r5
 800c568:	4638      	mov	r0, r7
 800c56a:	f7ff ff6d 	bl	800c448 <__ssputs_r>
 800c56e:	3001      	adds	r0, #1
 800c570:	f000 80aa 	beq.w	800c6c8 <_svfiprintf_r+0x1c8>
 800c574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c576:	445a      	add	r2, fp
 800c578:	9209      	str	r2, [sp, #36]	; 0x24
 800c57a:	f89a 3000 	ldrb.w	r3, [sl]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80a2 	beq.w	800c6c8 <_svfiprintf_r+0x1c8>
 800c584:	2300      	movs	r3, #0
 800c586:	f04f 32ff 	mov.w	r2, #4294967295
 800c58a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c58e:	f10a 0a01 	add.w	sl, sl, #1
 800c592:	9304      	str	r3, [sp, #16]
 800c594:	9307      	str	r3, [sp, #28]
 800c596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c59a:	931a      	str	r3, [sp, #104]	; 0x68
 800c59c:	4654      	mov	r4, sl
 800c59e:	2205      	movs	r2, #5
 800c5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a4:	4851      	ldr	r0, [pc, #324]	; (800c6ec <_svfiprintf_r+0x1ec>)
 800c5a6:	f7f3 fe2b 	bl	8000200 <memchr>
 800c5aa:	9a04      	ldr	r2, [sp, #16]
 800c5ac:	b9d8      	cbnz	r0, 800c5e6 <_svfiprintf_r+0xe6>
 800c5ae:	06d0      	lsls	r0, r2, #27
 800c5b0:	bf44      	itt	mi
 800c5b2:	2320      	movmi	r3, #32
 800c5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b8:	0711      	lsls	r1, r2, #28
 800c5ba:	bf44      	itt	mi
 800c5bc:	232b      	movmi	r3, #43	; 0x2b
 800c5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5c8:	d015      	beq.n	800c5f6 <_svfiprintf_r+0xf6>
 800c5ca:	9a07      	ldr	r2, [sp, #28]
 800c5cc:	4654      	mov	r4, sl
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	f04f 0c0a 	mov.w	ip, #10
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5da:	3b30      	subs	r3, #48	; 0x30
 800c5dc:	2b09      	cmp	r3, #9
 800c5de:	d94e      	bls.n	800c67e <_svfiprintf_r+0x17e>
 800c5e0:	b1b0      	cbz	r0, 800c610 <_svfiprintf_r+0x110>
 800c5e2:	9207      	str	r2, [sp, #28]
 800c5e4:	e014      	b.n	800c610 <_svfiprintf_r+0x110>
 800c5e6:	eba0 0308 	sub.w	r3, r0, r8
 800c5ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	46a2      	mov	sl, r4
 800c5f4:	e7d2      	b.n	800c59c <_svfiprintf_r+0x9c>
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	1d19      	adds	r1, r3, #4
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	9103      	str	r1, [sp, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bfbb      	ittet	lt
 800c602:	425b      	neglt	r3, r3
 800c604:	f042 0202 	orrlt.w	r2, r2, #2
 800c608:	9307      	strge	r3, [sp, #28]
 800c60a:	9307      	strlt	r3, [sp, #28]
 800c60c:	bfb8      	it	lt
 800c60e:	9204      	strlt	r2, [sp, #16]
 800c610:	7823      	ldrb	r3, [r4, #0]
 800c612:	2b2e      	cmp	r3, #46	; 0x2e
 800c614:	d10c      	bne.n	800c630 <_svfiprintf_r+0x130>
 800c616:	7863      	ldrb	r3, [r4, #1]
 800c618:	2b2a      	cmp	r3, #42	; 0x2a
 800c61a:	d135      	bne.n	800c688 <_svfiprintf_r+0x188>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	1d1a      	adds	r2, r3, #4
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	9203      	str	r2, [sp, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	bfb8      	it	lt
 800c628:	f04f 33ff 	movlt.w	r3, #4294967295
 800c62c:	3402      	adds	r4, #2
 800c62e:	9305      	str	r3, [sp, #20]
 800c630:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6fc <_svfiprintf_r+0x1fc>
 800c634:	7821      	ldrb	r1, [r4, #0]
 800c636:	2203      	movs	r2, #3
 800c638:	4650      	mov	r0, sl
 800c63a:	f7f3 fde1 	bl	8000200 <memchr>
 800c63e:	b140      	cbz	r0, 800c652 <_svfiprintf_r+0x152>
 800c640:	2340      	movs	r3, #64	; 0x40
 800c642:	eba0 000a 	sub.w	r0, r0, sl
 800c646:	fa03 f000 	lsl.w	r0, r3, r0
 800c64a:	9b04      	ldr	r3, [sp, #16]
 800c64c:	4303      	orrs	r3, r0
 800c64e:	3401      	adds	r4, #1
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c656:	4826      	ldr	r0, [pc, #152]	; (800c6f0 <_svfiprintf_r+0x1f0>)
 800c658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c65c:	2206      	movs	r2, #6
 800c65e:	f7f3 fdcf 	bl	8000200 <memchr>
 800c662:	2800      	cmp	r0, #0
 800c664:	d038      	beq.n	800c6d8 <_svfiprintf_r+0x1d8>
 800c666:	4b23      	ldr	r3, [pc, #140]	; (800c6f4 <_svfiprintf_r+0x1f4>)
 800c668:	bb1b      	cbnz	r3, 800c6b2 <_svfiprintf_r+0x1b2>
 800c66a:	9b03      	ldr	r3, [sp, #12]
 800c66c:	3307      	adds	r3, #7
 800c66e:	f023 0307 	bic.w	r3, r3, #7
 800c672:	3308      	adds	r3, #8
 800c674:	9303      	str	r3, [sp, #12]
 800c676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c678:	4433      	add	r3, r6
 800c67a:	9309      	str	r3, [sp, #36]	; 0x24
 800c67c:	e767      	b.n	800c54e <_svfiprintf_r+0x4e>
 800c67e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c682:	460c      	mov	r4, r1
 800c684:	2001      	movs	r0, #1
 800c686:	e7a5      	b.n	800c5d4 <_svfiprintf_r+0xd4>
 800c688:	2300      	movs	r3, #0
 800c68a:	3401      	adds	r4, #1
 800c68c:	9305      	str	r3, [sp, #20]
 800c68e:	4619      	mov	r1, r3
 800c690:	f04f 0c0a 	mov.w	ip, #10
 800c694:	4620      	mov	r0, r4
 800c696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c69a:	3a30      	subs	r2, #48	; 0x30
 800c69c:	2a09      	cmp	r2, #9
 800c69e:	d903      	bls.n	800c6a8 <_svfiprintf_r+0x1a8>
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0c5      	beq.n	800c630 <_svfiprintf_r+0x130>
 800c6a4:	9105      	str	r1, [sp, #20]
 800c6a6:	e7c3      	b.n	800c630 <_svfiprintf_r+0x130>
 800c6a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e7f0      	b.n	800c694 <_svfiprintf_r+0x194>
 800c6b2:	ab03      	add	r3, sp, #12
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	462a      	mov	r2, r5
 800c6b8:	4b0f      	ldr	r3, [pc, #60]	; (800c6f8 <_svfiprintf_r+0x1f8>)
 800c6ba:	a904      	add	r1, sp, #16
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f7fb fec5 	bl	800844c <_printf_float>
 800c6c2:	1c42      	adds	r2, r0, #1
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	d1d6      	bne.n	800c676 <_svfiprintf_r+0x176>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	065b      	lsls	r3, r3, #25
 800c6cc:	f53f af2c 	bmi.w	800c528 <_svfiprintf_r+0x28>
 800c6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d2:	b01d      	add	sp, #116	; 0x74
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	ab03      	add	r3, sp, #12
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	462a      	mov	r2, r5
 800c6de:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <_svfiprintf_r+0x1f8>)
 800c6e0:	a904      	add	r1, sp, #16
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	f7fc f956 	bl	8008994 <_printf_i>
 800c6e8:	e7eb      	b.n	800c6c2 <_svfiprintf_r+0x1c2>
 800c6ea:	bf00      	nop
 800c6ec:	0800d30c 	.word	0x0800d30c
 800c6f0:	0800d316 	.word	0x0800d316
 800c6f4:	0800844d 	.word	0x0800844d
 800c6f8:	0800c449 	.word	0x0800c449
 800c6fc:	0800d312 	.word	0x0800d312

0800c700 <__sfputc_r>:
 800c700:	6893      	ldr	r3, [r2, #8]
 800c702:	3b01      	subs	r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	b410      	push	{r4}
 800c708:	6093      	str	r3, [r2, #8]
 800c70a:	da08      	bge.n	800c71e <__sfputc_r+0x1e>
 800c70c:	6994      	ldr	r4, [r2, #24]
 800c70e:	42a3      	cmp	r3, r4
 800c710:	db01      	blt.n	800c716 <__sfputc_r+0x16>
 800c712:	290a      	cmp	r1, #10
 800c714:	d103      	bne.n	800c71e <__sfputc_r+0x1e>
 800c716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71a:	f7fd bbe9 	b.w	8009ef0 <__swbuf_r>
 800c71e:	6813      	ldr	r3, [r2, #0]
 800c720:	1c58      	adds	r0, r3, #1
 800c722:	6010      	str	r0, [r2, #0]
 800c724:	7019      	strb	r1, [r3, #0]
 800c726:	4608      	mov	r0, r1
 800c728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <__sfputs_r>:
 800c72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c730:	4606      	mov	r6, r0
 800c732:	460f      	mov	r7, r1
 800c734:	4614      	mov	r4, r2
 800c736:	18d5      	adds	r5, r2, r3
 800c738:	42ac      	cmp	r4, r5
 800c73a:	d101      	bne.n	800c740 <__sfputs_r+0x12>
 800c73c:	2000      	movs	r0, #0
 800c73e:	e007      	b.n	800c750 <__sfputs_r+0x22>
 800c740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c744:	463a      	mov	r2, r7
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff ffda 	bl	800c700 <__sfputc_r>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d1f3      	bne.n	800c738 <__sfputs_r+0xa>
 800c750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c754 <_vfiprintf_r>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	460d      	mov	r5, r1
 800c75a:	b09d      	sub	sp, #116	; 0x74
 800c75c:	4614      	mov	r4, r2
 800c75e:	4698      	mov	r8, r3
 800c760:	4606      	mov	r6, r0
 800c762:	b118      	cbz	r0, 800c76c <_vfiprintf_r+0x18>
 800c764:	6983      	ldr	r3, [r0, #24]
 800c766:	b90b      	cbnz	r3, 800c76c <_vfiprintf_r+0x18>
 800c768:	f7fe fc16 	bl	800af98 <__sinit>
 800c76c:	4b89      	ldr	r3, [pc, #548]	; (800c994 <_vfiprintf_r+0x240>)
 800c76e:	429d      	cmp	r5, r3
 800c770:	d11b      	bne.n	800c7aa <_vfiprintf_r+0x56>
 800c772:	6875      	ldr	r5, [r6, #4]
 800c774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c776:	07d9      	lsls	r1, r3, #31
 800c778:	d405      	bmi.n	800c786 <_vfiprintf_r+0x32>
 800c77a:	89ab      	ldrh	r3, [r5, #12]
 800c77c:	059a      	lsls	r2, r3, #22
 800c77e:	d402      	bmi.n	800c786 <_vfiprintf_r+0x32>
 800c780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c782:	f7ff f81a 	bl	800b7ba <__retarget_lock_acquire_recursive>
 800c786:	89ab      	ldrh	r3, [r5, #12]
 800c788:	071b      	lsls	r3, r3, #28
 800c78a:	d501      	bpl.n	800c790 <_vfiprintf_r+0x3c>
 800c78c:	692b      	ldr	r3, [r5, #16]
 800c78e:	b9eb      	cbnz	r3, 800c7cc <_vfiprintf_r+0x78>
 800c790:	4629      	mov	r1, r5
 800c792:	4630      	mov	r0, r6
 800c794:	f7fd fbfe 	bl	8009f94 <__swsetup_r>
 800c798:	b1c0      	cbz	r0, 800c7cc <_vfiprintf_r+0x78>
 800c79a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c79c:	07dc      	lsls	r4, r3, #31
 800c79e:	d50e      	bpl.n	800c7be <_vfiprintf_r+0x6a>
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a4:	b01d      	add	sp, #116	; 0x74
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7aa:	4b7b      	ldr	r3, [pc, #492]	; (800c998 <_vfiprintf_r+0x244>)
 800c7ac:	429d      	cmp	r5, r3
 800c7ae:	d101      	bne.n	800c7b4 <_vfiprintf_r+0x60>
 800c7b0:	68b5      	ldr	r5, [r6, #8]
 800c7b2:	e7df      	b.n	800c774 <_vfiprintf_r+0x20>
 800c7b4:	4b79      	ldr	r3, [pc, #484]	; (800c99c <_vfiprintf_r+0x248>)
 800c7b6:	429d      	cmp	r5, r3
 800c7b8:	bf08      	it	eq
 800c7ba:	68f5      	ldreq	r5, [r6, #12]
 800c7bc:	e7da      	b.n	800c774 <_vfiprintf_r+0x20>
 800c7be:	89ab      	ldrh	r3, [r5, #12]
 800c7c0:	0598      	lsls	r0, r3, #22
 800c7c2:	d4ed      	bmi.n	800c7a0 <_vfiprintf_r+0x4c>
 800c7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7c6:	f7fe fff9 	bl	800b7bc <__retarget_lock_release_recursive>
 800c7ca:	e7e9      	b.n	800c7a0 <_vfiprintf_r+0x4c>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d0:	2320      	movs	r3, #32
 800c7d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7da:	2330      	movs	r3, #48	; 0x30
 800c7dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9a0 <_vfiprintf_r+0x24c>
 800c7e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e4:	f04f 0901 	mov.w	r9, #1
 800c7e8:	4623      	mov	r3, r4
 800c7ea:	469a      	mov	sl, r3
 800c7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f0:	b10a      	cbz	r2, 800c7f6 <_vfiprintf_r+0xa2>
 800c7f2:	2a25      	cmp	r2, #37	; 0x25
 800c7f4:	d1f9      	bne.n	800c7ea <_vfiprintf_r+0x96>
 800c7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c7fa:	d00b      	beq.n	800c814 <_vfiprintf_r+0xc0>
 800c7fc:	465b      	mov	r3, fp
 800c7fe:	4622      	mov	r2, r4
 800c800:	4629      	mov	r1, r5
 800c802:	4630      	mov	r0, r6
 800c804:	f7ff ff93 	bl	800c72e <__sfputs_r>
 800c808:	3001      	adds	r0, #1
 800c80a:	f000 80aa 	beq.w	800c962 <_vfiprintf_r+0x20e>
 800c80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c810:	445a      	add	r2, fp
 800c812:	9209      	str	r2, [sp, #36]	; 0x24
 800c814:	f89a 3000 	ldrb.w	r3, [sl]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 80a2 	beq.w	800c962 <_vfiprintf_r+0x20e>
 800c81e:	2300      	movs	r3, #0
 800c820:	f04f 32ff 	mov.w	r2, #4294967295
 800c824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c828:	f10a 0a01 	add.w	sl, sl, #1
 800c82c:	9304      	str	r3, [sp, #16]
 800c82e:	9307      	str	r3, [sp, #28]
 800c830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c834:	931a      	str	r3, [sp, #104]	; 0x68
 800c836:	4654      	mov	r4, sl
 800c838:	2205      	movs	r2, #5
 800c83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83e:	4858      	ldr	r0, [pc, #352]	; (800c9a0 <_vfiprintf_r+0x24c>)
 800c840:	f7f3 fcde 	bl	8000200 <memchr>
 800c844:	9a04      	ldr	r2, [sp, #16]
 800c846:	b9d8      	cbnz	r0, 800c880 <_vfiprintf_r+0x12c>
 800c848:	06d1      	lsls	r1, r2, #27
 800c84a:	bf44      	itt	mi
 800c84c:	2320      	movmi	r3, #32
 800c84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c852:	0713      	lsls	r3, r2, #28
 800c854:	bf44      	itt	mi
 800c856:	232b      	movmi	r3, #43	; 0x2b
 800c858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c85c:	f89a 3000 	ldrb.w	r3, [sl]
 800c860:	2b2a      	cmp	r3, #42	; 0x2a
 800c862:	d015      	beq.n	800c890 <_vfiprintf_r+0x13c>
 800c864:	9a07      	ldr	r2, [sp, #28]
 800c866:	4654      	mov	r4, sl
 800c868:	2000      	movs	r0, #0
 800c86a:	f04f 0c0a 	mov.w	ip, #10
 800c86e:	4621      	mov	r1, r4
 800c870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c874:	3b30      	subs	r3, #48	; 0x30
 800c876:	2b09      	cmp	r3, #9
 800c878:	d94e      	bls.n	800c918 <_vfiprintf_r+0x1c4>
 800c87a:	b1b0      	cbz	r0, 800c8aa <_vfiprintf_r+0x156>
 800c87c:	9207      	str	r2, [sp, #28]
 800c87e:	e014      	b.n	800c8aa <_vfiprintf_r+0x156>
 800c880:	eba0 0308 	sub.w	r3, r0, r8
 800c884:	fa09 f303 	lsl.w	r3, r9, r3
 800c888:	4313      	orrs	r3, r2
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	46a2      	mov	sl, r4
 800c88e:	e7d2      	b.n	800c836 <_vfiprintf_r+0xe2>
 800c890:	9b03      	ldr	r3, [sp, #12]
 800c892:	1d19      	adds	r1, r3, #4
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	9103      	str	r1, [sp, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bfbb      	ittet	lt
 800c89c:	425b      	neglt	r3, r3
 800c89e:	f042 0202 	orrlt.w	r2, r2, #2
 800c8a2:	9307      	strge	r3, [sp, #28]
 800c8a4:	9307      	strlt	r3, [sp, #28]
 800c8a6:	bfb8      	it	lt
 800c8a8:	9204      	strlt	r2, [sp, #16]
 800c8aa:	7823      	ldrb	r3, [r4, #0]
 800c8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ae:	d10c      	bne.n	800c8ca <_vfiprintf_r+0x176>
 800c8b0:	7863      	ldrb	r3, [r4, #1]
 800c8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b4:	d135      	bne.n	800c922 <_vfiprintf_r+0x1ce>
 800c8b6:	9b03      	ldr	r3, [sp, #12]
 800c8b8:	1d1a      	adds	r2, r3, #4
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	9203      	str	r2, [sp, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfb8      	it	lt
 800c8c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8c6:	3402      	adds	r4, #2
 800c8c8:	9305      	str	r3, [sp, #20]
 800c8ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9b0 <_vfiprintf_r+0x25c>
 800c8ce:	7821      	ldrb	r1, [r4, #0]
 800c8d0:	2203      	movs	r2, #3
 800c8d2:	4650      	mov	r0, sl
 800c8d4:	f7f3 fc94 	bl	8000200 <memchr>
 800c8d8:	b140      	cbz	r0, 800c8ec <_vfiprintf_r+0x198>
 800c8da:	2340      	movs	r3, #64	; 0x40
 800c8dc:	eba0 000a 	sub.w	r0, r0, sl
 800c8e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c8e4:	9b04      	ldr	r3, [sp, #16]
 800c8e6:	4303      	orrs	r3, r0
 800c8e8:	3401      	adds	r4, #1
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f0:	482c      	ldr	r0, [pc, #176]	; (800c9a4 <_vfiprintf_r+0x250>)
 800c8f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8f6:	2206      	movs	r2, #6
 800c8f8:	f7f3 fc82 	bl	8000200 <memchr>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d03f      	beq.n	800c980 <_vfiprintf_r+0x22c>
 800c900:	4b29      	ldr	r3, [pc, #164]	; (800c9a8 <_vfiprintf_r+0x254>)
 800c902:	bb1b      	cbnz	r3, 800c94c <_vfiprintf_r+0x1f8>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	3307      	adds	r3, #7
 800c908:	f023 0307 	bic.w	r3, r3, #7
 800c90c:	3308      	adds	r3, #8
 800c90e:	9303      	str	r3, [sp, #12]
 800c910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c912:	443b      	add	r3, r7
 800c914:	9309      	str	r3, [sp, #36]	; 0x24
 800c916:	e767      	b.n	800c7e8 <_vfiprintf_r+0x94>
 800c918:	fb0c 3202 	mla	r2, ip, r2, r3
 800c91c:	460c      	mov	r4, r1
 800c91e:	2001      	movs	r0, #1
 800c920:	e7a5      	b.n	800c86e <_vfiprintf_r+0x11a>
 800c922:	2300      	movs	r3, #0
 800c924:	3401      	adds	r4, #1
 800c926:	9305      	str	r3, [sp, #20]
 800c928:	4619      	mov	r1, r3
 800c92a:	f04f 0c0a 	mov.w	ip, #10
 800c92e:	4620      	mov	r0, r4
 800c930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c934:	3a30      	subs	r2, #48	; 0x30
 800c936:	2a09      	cmp	r2, #9
 800c938:	d903      	bls.n	800c942 <_vfiprintf_r+0x1ee>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0c5      	beq.n	800c8ca <_vfiprintf_r+0x176>
 800c93e:	9105      	str	r1, [sp, #20]
 800c940:	e7c3      	b.n	800c8ca <_vfiprintf_r+0x176>
 800c942:	fb0c 2101 	mla	r1, ip, r1, r2
 800c946:	4604      	mov	r4, r0
 800c948:	2301      	movs	r3, #1
 800c94a:	e7f0      	b.n	800c92e <_vfiprintf_r+0x1da>
 800c94c:	ab03      	add	r3, sp, #12
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	462a      	mov	r2, r5
 800c952:	4b16      	ldr	r3, [pc, #88]	; (800c9ac <_vfiprintf_r+0x258>)
 800c954:	a904      	add	r1, sp, #16
 800c956:	4630      	mov	r0, r6
 800c958:	f7fb fd78 	bl	800844c <_printf_float>
 800c95c:	4607      	mov	r7, r0
 800c95e:	1c78      	adds	r0, r7, #1
 800c960:	d1d6      	bne.n	800c910 <_vfiprintf_r+0x1bc>
 800c962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c964:	07d9      	lsls	r1, r3, #31
 800c966:	d405      	bmi.n	800c974 <_vfiprintf_r+0x220>
 800c968:	89ab      	ldrh	r3, [r5, #12]
 800c96a:	059a      	lsls	r2, r3, #22
 800c96c:	d402      	bmi.n	800c974 <_vfiprintf_r+0x220>
 800c96e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c970:	f7fe ff24 	bl	800b7bc <__retarget_lock_release_recursive>
 800c974:	89ab      	ldrh	r3, [r5, #12]
 800c976:	065b      	lsls	r3, r3, #25
 800c978:	f53f af12 	bmi.w	800c7a0 <_vfiprintf_r+0x4c>
 800c97c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c97e:	e711      	b.n	800c7a4 <_vfiprintf_r+0x50>
 800c980:	ab03      	add	r3, sp, #12
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	462a      	mov	r2, r5
 800c986:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <_vfiprintf_r+0x258>)
 800c988:	a904      	add	r1, sp, #16
 800c98a:	4630      	mov	r0, r6
 800c98c:	f7fc f802 	bl	8008994 <_printf_i>
 800c990:	e7e4      	b.n	800c95c <_vfiprintf_r+0x208>
 800c992:	bf00      	nop
 800c994:	0800d0f4 	.word	0x0800d0f4
 800c998:	0800d114 	.word	0x0800d114
 800c99c:	0800d0d4 	.word	0x0800d0d4
 800c9a0:	0800d30c 	.word	0x0800d30c
 800c9a4:	0800d316 	.word	0x0800d316
 800c9a8:	0800844d 	.word	0x0800844d
 800c9ac:	0800c72f 	.word	0x0800c72f
 800c9b0:	0800d312 	.word	0x0800d312

0800c9b4 <_putc_r>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	4614      	mov	r4, r2
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	b118      	cbz	r0, 800c9c6 <_putc_r+0x12>
 800c9be:	6983      	ldr	r3, [r0, #24]
 800c9c0:	b90b      	cbnz	r3, 800c9c6 <_putc_r+0x12>
 800c9c2:	f7fe fae9 	bl	800af98 <__sinit>
 800c9c6:	4b1c      	ldr	r3, [pc, #112]	; (800ca38 <_putc_r+0x84>)
 800c9c8:	429c      	cmp	r4, r3
 800c9ca:	d124      	bne.n	800ca16 <_putc_r+0x62>
 800c9cc:	6874      	ldr	r4, [r6, #4]
 800c9ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9d0:	07d8      	lsls	r0, r3, #31
 800c9d2:	d405      	bmi.n	800c9e0 <_putc_r+0x2c>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	0599      	lsls	r1, r3, #22
 800c9d8:	d402      	bmi.n	800c9e0 <_putc_r+0x2c>
 800c9da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9dc:	f7fe feed 	bl	800b7ba <__retarget_lock_acquire_recursive>
 800c9e0:	68a3      	ldr	r3, [r4, #8]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	60a3      	str	r3, [r4, #8]
 800c9e8:	da05      	bge.n	800c9f6 <_putc_r+0x42>
 800c9ea:	69a2      	ldr	r2, [r4, #24]
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	db1c      	blt.n	800ca2a <_putc_r+0x76>
 800c9f0:	b2eb      	uxtb	r3, r5
 800c9f2:	2b0a      	cmp	r3, #10
 800c9f4:	d019      	beq.n	800ca2a <_putc_r+0x76>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	6022      	str	r2, [r4, #0]
 800c9fc:	701d      	strb	r5, [r3, #0]
 800c9fe:	b2ed      	uxtb	r5, r5
 800ca00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca02:	07da      	lsls	r2, r3, #31
 800ca04:	d405      	bmi.n	800ca12 <_putc_r+0x5e>
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	059b      	lsls	r3, r3, #22
 800ca0a:	d402      	bmi.n	800ca12 <_putc_r+0x5e>
 800ca0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca0e:	f7fe fed5 	bl	800b7bc <__retarget_lock_release_recursive>
 800ca12:	4628      	mov	r0, r5
 800ca14:	bd70      	pop	{r4, r5, r6, pc}
 800ca16:	4b09      	ldr	r3, [pc, #36]	; (800ca3c <_putc_r+0x88>)
 800ca18:	429c      	cmp	r4, r3
 800ca1a:	d101      	bne.n	800ca20 <_putc_r+0x6c>
 800ca1c:	68b4      	ldr	r4, [r6, #8]
 800ca1e:	e7d6      	b.n	800c9ce <_putc_r+0x1a>
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <_putc_r+0x8c>)
 800ca22:	429c      	cmp	r4, r3
 800ca24:	bf08      	it	eq
 800ca26:	68f4      	ldreq	r4, [r6, #12]
 800ca28:	e7d1      	b.n	800c9ce <_putc_r+0x1a>
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	4622      	mov	r2, r4
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f7fd fa5e 	bl	8009ef0 <__swbuf_r>
 800ca34:	4605      	mov	r5, r0
 800ca36:	e7e3      	b.n	800ca00 <_putc_r+0x4c>
 800ca38:	0800d0f4 	.word	0x0800d0f4
 800ca3c:	0800d114 	.word	0x0800d114
 800ca40:	0800d0d4 	.word	0x0800d0d4
 800ca44:	00000000 	.word	0x00000000

0800ca48 <nan>:
 800ca48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca50 <nan+0x8>
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	00000000 	.word	0x00000000
 800ca54:	7ff80000 	.word	0x7ff80000

0800ca58 <_sbrk_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4d06      	ldr	r5, [pc, #24]	; (800ca74 <_sbrk_r+0x1c>)
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	602b      	str	r3, [r5, #0]
 800ca64:	f7f6 fe3e 	bl	80036e4 <_sbrk>
 800ca68:	1c43      	adds	r3, r0, #1
 800ca6a:	d102      	bne.n	800ca72 <_sbrk_r+0x1a>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	b103      	cbz	r3, 800ca72 <_sbrk_r+0x1a>
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	20000af0 	.word	0x20000af0

0800ca78 <__sread>:
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca80:	f000 f93a 	bl	800ccf8 <_read_r>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	bfab      	itete	ge
 800ca88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ca8c:	181b      	addge	r3, r3, r0
 800ca8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca92:	bfac      	ite	ge
 800ca94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca96:	81a3      	strhlt	r3, [r4, #12]
 800ca98:	bd10      	pop	{r4, pc}

0800ca9a <__swrite>:
 800ca9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9e:	461f      	mov	r7, r3
 800caa0:	898b      	ldrh	r3, [r1, #12]
 800caa2:	05db      	lsls	r3, r3, #23
 800caa4:	4605      	mov	r5, r0
 800caa6:	460c      	mov	r4, r1
 800caa8:	4616      	mov	r6, r2
 800caaa:	d505      	bpl.n	800cab8 <__swrite+0x1e>
 800caac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab0:	2302      	movs	r3, #2
 800cab2:	2200      	movs	r2, #0
 800cab4:	f000 f8b8 	bl	800cc28 <_lseek_r>
 800cab8:	89a3      	ldrh	r3, [r4, #12]
 800caba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cabe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cac2:	81a3      	strh	r3, [r4, #12]
 800cac4:	4632      	mov	r2, r6
 800cac6:	463b      	mov	r3, r7
 800cac8:	4628      	mov	r0, r5
 800caca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cace:	f000 b837 	b.w	800cb40 <_write_r>

0800cad2 <__sseek>:
 800cad2:	b510      	push	{r4, lr}
 800cad4:	460c      	mov	r4, r1
 800cad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cada:	f000 f8a5 	bl	800cc28 <_lseek_r>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	bf15      	itete	ne
 800cae4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800caea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800caee:	81a3      	strheq	r3, [r4, #12]
 800caf0:	bf18      	it	ne
 800caf2:	81a3      	strhne	r3, [r4, #12]
 800caf4:	bd10      	pop	{r4, pc}

0800caf6 <__sclose>:
 800caf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafa:	f000 b851 	b.w	800cba0 <_close_r>

0800cafe <strncmp>:
 800cafe:	b510      	push	{r4, lr}
 800cb00:	b17a      	cbz	r2, 800cb22 <strncmp+0x24>
 800cb02:	4603      	mov	r3, r0
 800cb04:	3901      	subs	r1, #1
 800cb06:	1884      	adds	r4, r0, r2
 800cb08:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb10:	4290      	cmp	r0, r2
 800cb12:	d101      	bne.n	800cb18 <strncmp+0x1a>
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	d101      	bne.n	800cb1c <strncmp+0x1e>
 800cb18:	1a80      	subs	r0, r0, r2
 800cb1a:	bd10      	pop	{r4, pc}
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d1f3      	bne.n	800cb08 <strncmp+0xa>
 800cb20:	e7fa      	b.n	800cb18 <strncmp+0x1a>
 800cb22:	4610      	mov	r0, r2
 800cb24:	e7f9      	b.n	800cb1a <strncmp+0x1c>

0800cb26 <__ascii_wctomb>:
 800cb26:	b149      	cbz	r1, 800cb3c <__ascii_wctomb+0x16>
 800cb28:	2aff      	cmp	r2, #255	; 0xff
 800cb2a:	bf85      	ittet	hi
 800cb2c:	238a      	movhi	r3, #138	; 0x8a
 800cb2e:	6003      	strhi	r3, [r0, #0]
 800cb30:	700a      	strbls	r2, [r1, #0]
 800cb32:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb36:	bf98      	it	ls
 800cb38:	2001      	movls	r0, #1
 800cb3a:	4770      	bx	lr
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	4770      	bx	lr

0800cb40 <_write_r>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	4d07      	ldr	r5, [pc, #28]	; (800cb60 <_write_r+0x20>)
 800cb44:	4604      	mov	r4, r0
 800cb46:	4608      	mov	r0, r1
 800cb48:	4611      	mov	r1, r2
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	602a      	str	r2, [r5, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f7f6 fd77 	bl	8003642 <_write>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d102      	bne.n	800cb5e <_write_r+0x1e>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	b103      	cbz	r3, 800cb5e <_write_r+0x1e>
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	20000af0 	.word	0x20000af0

0800cb64 <__assert_func>:
 800cb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb66:	4614      	mov	r4, r2
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b09      	ldr	r3, [pc, #36]	; (800cb90 <__assert_func+0x2c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4605      	mov	r5, r0
 800cb70:	68d8      	ldr	r0, [r3, #12]
 800cb72:	b14c      	cbz	r4, 800cb88 <__assert_func+0x24>
 800cb74:	4b07      	ldr	r3, [pc, #28]	; (800cb94 <__assert_func+0x30>)
 800cb76:	9100      	str	r1, [sp, #0]
 800cb78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb7c:	4906      	ldr	r1, [pc, #24]	; (800cb98 <__assert_func+0x34>)
 800cb7e:	462b      	mov	r3, r5
 800cb80:	f000 f81e 	bl	800cbc0 <fiprintf>
 800cb84:	f000 f8ca 	bl	800cd1c <abort>
 800cb88:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <__assert_func+0x38>)
 800cb8a:	461c      	mov	r4, r3
 800cb8c:	e7f3      	b.n	800cb76 <__assert_func+0x12>
 800cb8e:	bf00      	nop
 800cb90:	20000010 	.word	0x20000010
 800cb94:	0800d31d 	.word	0x0800d31d
 800cb98:	0800d32a 	.word	0x0800d32a
 800cb9c:	0800d358 	.word	0x0800d358

0800cba0 <_close_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d06      	ldr	r5, [pc, #24]	; (800cbbc <_close_r+0x1c>)
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	602b      	str	r3, [r5, #0]
 800cbac:	f7f6 fd65 	bl	800367a <_close>
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	d102      	bne.n	800cbba <_close_r+0x1a>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b103      	cbz	r3, 800cbba <_close_r+0x1a>
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	20000af0 	.word	0x20000af0

0800cbc0 <fiprintf>:
 800cbc0:	b40e      	push	{r1, r2, r3}
 800cbc2:	b503      	push	{r0, r1, lr}
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	ab03      	add	r3, sp, #12
 800cbc8:	4805      	ldr	r0, [pc, #20]	; (800cbe0 <fiprintf+0x20>)
 800cbca:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbce:	6800      	ldr	r0, [r0, #0]
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	f7ff fdbf 	bl	800c754 <_vfiprintf_r>
 800cbd6:	b002      	add	sp, #8
 800cbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbdc:	b003      	add	sp, #12
 800cbde:	4770      	bx	lr
 800cbe0:	20000010 	.word	0x20000010

0800cbe4 <_fstat_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d07      	ldr	r5, [pc, #28]	; (800cc04 <_fstat_r+0x20>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	4611      	mov	r1, r2
 800cbf0:	602b      	str	r3, [r5, #0]
 800cbf2:	f7f6 fd4e 	bl	8003692 <_fstat>
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	d102      	bne.n	800cc00 <_fstat_r+0x1c>
 800cbfa:	682b      	ldr	r3, [r5, #0]
 800cbfc:	b103      	cbz	r3, 800cc00 <_fstat_r+0x1c>
 800cbfe:	6023      	str	r3, [r4, #0]
 800cc00:	bd38      	pop	{r3, r4, r5, pc}
 800cc02:	bf00      	nop
 800cc04:	20000af0 	.word	0x20000af0

0800cc08 <_isatty_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	4d06      	ldr	r5, [pc, #24]	; (800cc24 <_isatty_r+0x1c>)
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4604      	mov	r4, r0
 800cc10:	4608      	mov	r0, r1
 800cc12:	602b      	str	r3, [r5, #0]
 800cc14:	f7f6 fd4d 	bl	80036b2 <_isatty>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d102      	bne.n	800cc22 <_isatty_r+0x1a>
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	b103      	cbz	r3, 800cc22 <_isatty_r+0x1a>
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	bd38      	pop	{r3, r4, r5, pc}
 800cc24:	20000af0 	.word	0x20000af0

0800cc28 <_lseek_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d07      	ldr	r5, [pc, #28]	; (800cc48 <_lseek_r+0x20>)
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4608      	mov	r0, r1
 800cc30:	4611      	mov	r1, r2
 800cc32:	2200      	movs	r2, #0
 800cc34:	602a      	str	r2, [r5, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	f7f6 fd46 	bl	80036c8 <_lseek>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	d102      	bne.n	800cc46 <_lseek_r+0x1e>
 800cc40:	682b      	ldr	r3, [r5, #0]
 800cc42:	b103      	cbz	r3, 800cc46 <_lseek_r+0x1e>
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	bd38      	pop	{r3, r4, r5, pc}
 800cc48:	20000af0 	.word	0x20000af0

0800cc4c <memmove>:
 800cc4c:	4288      	cmp	r0, r1
 800cc4e:	b510      	push	{r4, lr}
 800cc50:	eb01 0402 	add.w	r4, r1, r2
 800cc54:	d902      	bls.n	800cc5c <memmove+0x10>
 800cc56:	4284      	cmp	r4, r0
 800cc58:	4623      	mov	r3, r4
 800cc5a:	d807      	bhi.n	800cc6c <memmove+0x20>
 800cc5c:	1e43      	subs	r3, r0, #1
 800cc5e:	42a1      	cmp	r1, r4
 800cc60:	d008      	beq.n	800cc74 <memmove+0x28>
 800cc62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc6a:	e7f8      	b.n	800cc5e <memmove+0x12>
 800cc6c:	4402      	add	r2, r0
 800cc6e:	4601      	mov	r1, r0
 800cc70:	428a      	cmp	r2, r1
 800cc72:	d100      	bne.n	800cc76 <memmove+0x2a>
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc7e:	e7f7      	b.n	800cc70 <memmove+0x24>

0800cc80 <__malloc_lock>:
 800cc80:	4801      	ldr	r0, [pc, #4]	; (800cc88 <__malloc_lock+0x8>)
 800cc82:	f7fe bd9a 	b.w	800b7ba <__retarget_lock_acquire_recursive>
 800cc86:	bf00      	nop
 800cc88:	20000ae4 	.word	0x20000ae4

0800cc8c <__malloc_unlock>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	; (800cc94 <__malloc_unlock+0x8>)
 800cc8e:	f7fe bd95 	b.w	800b7bc <__retarget_lock_release_recursive>
 800cc92:	bf00      	nop
 800cc94:	20000ae4 	.word	0x20000ae4

0800cc98 <_realloc_r>:
 800cc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	4614      	mov	r4, r2
 800cca0:	460e      	mov	r6, r1
 800cca2:	b921      	cbnz	r1, 800ccae <_realloc_r+0x16>
 800cca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca8:	4611      	mov	r1, r2
 800ccaa:	f7ff bb59 	b.w	800c360 <_malloc_r>
 800ccae:	b92a      	cbnz	r2, 800ccbc <_realloc_r+0x24>
 800ccb0:	f7ff faea 	bl	800c288 <_free_r>
 800ccb4:	4625      	mov	r5, r4
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	f000 f835 	bl	800cd2a <_malloc_usable_size_r>
 800ccc0:	4284      	cmp	r4, r0
 800ccc2:	4607      	mov	r7, r0
 800ccc4:	d802      	bhi.n	800cccc <_realloc_r+0x34>
 800ccc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccca:	d812      	bhi.n	800ccf2 <_realloc_r+0x5a>
 800cccc:	4621      	mov	r1, r4
 800ccce:	4640      	mov	r0, r8
 800ccd0:	f7ff fb46 	bl	800c360 <_malloc_r>
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d0ed      	beq.n	800ccb6 <_realloc_r+0x1e>
 800ccda:	42bc      	cmp	r4, r7
 800ccdc:	4622      	mov	r2, r4
 800ccde:	4631      	mov	r1, r6
 800cce0:	bf28      	it	cs
 800cce2:	463a      	movcs	r2, r7
 800cce4:	f7fe fdea 	bl	800b8bc <memcpy>
 800cce8:	4631      	mov	r1, r6
 800ccea:	4640      	mov	r0, r8
 800ccec:	f7ff facc 	bl	800c288 <_free_r>
 800ccf0:	e7e1      	b.n	800ccb6 <_realloc_r+0x1e>
 800ccf2:	4635      	mov	r5, r6
 800ccf4:	e7df      	b.n	800ccb6 <_realloc_r+0x1e>
	...

0800ccf8 <_read_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	; (800cd18 <_read_r+0x20>)
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	602a      	str	r2, [r5, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f7f6 fc7e 	bl	8003608 <_read>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_read_r+0x1e>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_read_r+0x1e>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	20000af0 	.word	0x20000af0

0800cd1c <abort>:
 800cd1c:	b508      	push	{r3, lr}
 800cd1e:	2006      	movs	r0, #6
 800cd20:	f000 f834 	bl	800cd8c <raise>
 800cd24:	2001      	movs	r0, #1
 800cd26:	f7f6 fc65 	bl	80035f4 <_exit>

0800cd2a <_malloc_usable_size_r>:
 800cd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2e:	1f18      	subs	r0, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bfbc      	itt	lt
 800cd34:	580b      	ldrlt	r3, [r1, r0]
 800cd36:	18c0      	addlt	r0, r0, r3
 800cd38:	4770      	bx	lr

0800cd3a <_raise_r>:
 800cd3a:	291f      	cmp	r1, #31
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	d904      	bls.n	800cd4e <_raise_r+0x14>
 800cd44:	2316      	movs	r3, #22
 800cd46:	6003      	str	r3, [r0, #0]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd50:	b112      	cbz	r2, 800cd58 <_raise_r+0x1e>
 800cd52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd56:	b94b      	cbnz	r3, 800cd6c <_raise_r+0x32>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 f831 	bl	800cdc0 <_getpid_r>
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4601      	mov	r1, r0
 800cd62:	4620      	mov	r0, r4
 800cd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd68:	f000 b818 	b.w	800cd9c <_kill_r>
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d00a      	beq.n	800cd86 <_raise_r+0x4c>
 800cd70:	1c59      	adds	r1, r3, #1
 800cd72:	d103      	bne.n	800cd7c <_raise_r+0x42>
 800cd74:	2316      	movs	r3, #22
 800cd76:	6003      	str	r3, [r0, #0]
 800cd78:	2001      	movs	r0, #1
 800cd7a:	e7e7      	b.n	800cd4c <_raise_r+0x12>
 800cd7c:	2400      	movs	r4, #0
 800cd7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd82:	4628      	mov	r0, r5
 800cd84:	4798      	blx	r3
 800cd86:	2000      	movs	r0, #0
 800cd88:	e7e0      	b.n	800cd4c <_raise_r+0x12>
	...

0800cd8c <raise>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <raise+0xc>)
 800cd8e:	4601      	mov	r1, r0
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f7ff bfd2 	b.w	800cd3a <_raise_r>
 800cd96:	bf00      	nop
 800cd98:	20000010 	.word	0x20000010

0800cd9c <_kill_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	; (800cdbc <_kill_r+0x20>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	4604      	mov	r4, r0
 800cda4:	4608      	mov	r0, r1
 800cda6:	4611      	mov	r1, r2
 800cda8:	602b      	str	r3, [r5, #0]
 800cdaa:	f7f6 fc13 	bl	80035d4 <_kill>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d102      	bne.n	800cdb8 <_kill_r+0x1c>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	b103      	cbz	r3, 800cdb8 <_kill_r+0x1c>
 800cdb6:	6023      	str	r3, [r4, #0]
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000af0 	.word	0x20000af0

0800cdc0 <_getpid_r>:
 800cdc0:	f7f6 bc00 	b.w	80035c4 <_getpid>

0800cdc4 <_init>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	bf00      	nop
 800cdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdca:	bc08      	pop	{r3}
 800cdcc:	469e      	mov	lr, r3
 800cdce:	4770      	bx	lr

0800cdd0 <_fini>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr
