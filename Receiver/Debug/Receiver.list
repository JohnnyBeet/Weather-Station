
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e84  08005e84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e8c  08005e8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000008b8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000092c  2000092c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c7b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002736  00000000  00000000  00035d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00038458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  00039600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ff9  00000000  00000000  0003a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014324  00000000  00000000  000606c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0e92  00000000  00000000  000749e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155877  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000535c  00000000  00000000  001558c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005d50 	.word	0x08005d50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005d50 	.word	0x08005d50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b0a      	cmp	r3, #10
 80005a0:	d102      	bne.n	80005a8 <__io_putchar+0x14>
    __io_putchar('\r');
 80005a2:	200d      	movs	r0, #13
 80005a4:	f7ff fff6 	bl	8000594 <__io_putchar>
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <__io_putchar+0x2c>)
 80005b2:	f003 fd96 	bl	80040e2 <HAL_UART_Transmit>

  return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200003b8 	.word	0x200003b8

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 fc25 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f8bb 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fa7f 	bl	8000ad4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d6:	f000 f921 	bl	800081c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005da:	f000 fa23 	bl	8000a24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005de:	f000 fa4b 	bl	8000a78 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80005e2:	f000 f9e9 	bl	80009b8 <MX_SPI2_Init>
  MX_I2C1_Init();
 80005e6:	f000 f967 	bl	80008b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005ea:	f000 f9a5 	bl	8000938 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t status = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	76fb      	strb	r3, [r7, #27]
  	 NRF_ReadRegs(NRF_REG_CONFIG, &status, 1);
 80005f2:	f107 031b 	add.w	r3, r7, #27
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fb96 	bl	8000d2c <NRF_ReadRegs>
  	 printf("STATUS as decimal: %d\n", status);
 8000600:	7efb      	ldrb	r3, [r7, #27]
 8000602:	4619      	mov	r1, r3
 8000604:	4849      	ldr	r0, [pc, #292]	; (800072c <main+0x168>)
 8000606:	f004 fc15 	bl	8004e34 <iprintf>

  NRF_HandleTypedef nrf;
  if(!NRF_Init(&nrf)){
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fc08 	bl	8000e24 <NRF_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <main+0x60>
	  Error_Handler();
 8000620:	f000 fb62 	bl	8000ce8 <Error_Handler>

  // pipe configuration
  // address will be clocked from last to first
  // need to clock the same address as for transmitter
  static uint8_t nrf_addr[] = {'N', 'R', 'F'};
  if(!NRF_SET_PipeAddress(RX_PIPE_0, nrf_addr)){
 8000624:	4942      	ldr	r1, [pc, #264]	; (8000730 <main+0x16c>)
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fdea 	bl	8001200 <NRF_SET_PipeAddress>
 800062c:	4603      	mov	r3, r0
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0x78>
	  return NRF_ERROR;
 8000638:	2300      	movs	r3, #0
 800063a:	e073      	b.n	8000724 <main+0x160>
  }
  // prepare pipe
  if(!NRF_SET_PipeRX(RX_PIPE_0, AA_ON, (uint8_t)7)){
 800063c:	2207      	movs	r2, #7
 800063e:	2101      	movs	r1, #1
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fe2a 	bl	800129a <NRF_SET_PipeRX>
 8000646:	4603      	mov	r3, r0
 8000648:	f083 0301 	eor.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <main+0x92>
	  return NRF_ERROR;
 8000652:	2300      	movs	r3, #0
 8000654:	e066      	b.n	8000724 <main+0x160>
  }

  // set mode to receiver
  if(!NRF_SET_Mode(RX)){
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fcb7 	bl	8000fca <NRF_SET_Mode>
 800065c:	4603      	mov	r3, r0
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <main+0xa8>
	  return NRF_ERROR;
 8000668:	2300      	movs	r3, #0
 800066a:	e05b      	b.n	8000724 <main+0x160>
  }

  // turn transmitter on and wait for at least 1.5 ms
  if(!NRF_SET_PowerMode(PWR_UP)){
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fcde 	bl	800102e <NRF_SET_PowerMode>
 8000672:	4603      	mov	r3, r0
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <main+0xbe>
	  return NRF_ERROR;
 800067e:	2300      	movs	r3, #0
 8000680:	e050      	b.n	8000724 <main+0x160>
  }
  HAL_Delay(2);
 8000682:	2002      	movs	r0, #2
 8000684:	f001 fc3a 	bl	8001efc <HAL_Delay>

  // put receiver in rx mode by enabling CE pin
  NRF_CE_SET_HIGH;
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068e:	4829      	ldr	r0, [pc, #164]	; (8000734 <main+0x170>)
 8000690:	f002 fa3e 	bl	8002b10 <HAL_GPIO_WritePin>

  // data buffer
  uint8_t data_buffer[7];
  uint8_t res = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	77fb      	strb	r3, [r7, #31]
//		printf("\n");
//	}
//	else{
//		printf("Receiver not working!\n");
//	}
	  NRF_ReadRegs(NRF_REG_EN_AA, &status, 1);
 8000698:	f107 031b 	add.w	r3, r7, #27
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fb43 	bl	8000d2c <NRF_ReadRegs>
	    	 printf("Status as decimal: %d\n", status);
 80006a6:	7efb      	ldrb	r3, [r7, #27]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4823      	ldr	r0, [pc, #140]	; (8000738 <main+0x174>)
 80006ac:	f004 fbc2 	bl	8004e34 <iprintf>
	    	 NRF_ReadRegs(NRF_REG_EN_RXADDR, &status, 1);
 80006b0:	f107 031b 	add.w	r3, r7, #27
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	2002      	movs	r0, #2
 80006ba:	f000 fb37 	bl	8000d2c <NRF_ReadRegs>
	    	   	 printf("config as decimal: %d\n", status);
 80006be:	7efb      	ldrb	r3, [r7, #27]
 80006c0:	4619      	mov	r1, r3
 80006c2:	481e      	ldr	r0, [pc, #120]	; (800073c <main+0x178>)
 80006c4:	f004 fbb6 	bl	8004e34 <iprintf>
	  if(nrfInterrupt){
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <main+0x17c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d024      	beq.n	800071a <main+0x156>
	  		  uint8_t interrupt_src = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	71fb      	strb	r3, [r7, #7]
	  		  NRF_ReadRegs(NRF_REG_STATUS, &interrupt_src, 1);
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	2007      	movs	r0, #7
 80006dc:	f000 fb26 	bl	8000d2c <NRF_ReadRegs>
	  		  uint8_t rx = (interrupt_src & 0x40) >> 6;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	119b      	asrs	r3, r3, #6
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	77bb      	strb	r3, [r7, #30]
	  		  uint8_t tx = (interrupt_src & 0x20) >> 5;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	115b      	asrs	r3, r3, #5
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	777b      	strb	r3, [r7, #29]
	  		  uint8_t max = (interrupt_src & 0x10) >> 4;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	111b      	asrs	r3, r3, #4
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	773b      	strb	r3, [r7, #28]
	  		  printf("Interrupts:\nRx: %d\nTx: %d\nMax: %d\n", rx, tx, max);
 8000704:	7fb9      	ldrb	r1, [r7, #30]
 8000706:	7f7a      	ldrb	r2, [r7, #29]
 8000708:	7f3b      	ldrb	r3, [r7, #28]
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <main+0x180>)
 800070c:	f004 fb92 	bl	8004e34 <iprintf>
	  		  NRF_IRQ_Callback(&nrfInterrupt, &interrupt_src);
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	4619      	mov	r1, r3
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <main+0x17c>)
 8000716:	f000 ff38 	bl	800158a <NRF_IRQ_Callback>
	  	  }
	HAL_Delay(5000);
 800071a:	f241 3088 	movw	r0, #5000	; 0x1388
 800071e:	f001 fbed 	bl	8001efc <HAL_Delay>
	  NRF_ReadRegs(NRF_REG_EN_AA, &status, 1);
 8000722:	e7b9      	b.n	8000698 <main+0xd4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000724:	4618      	mov	r0, r3
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08005d68 	.word	0x08005d68
 8000730:	20000000 	.word	0x20000000
 8000734:	40021000 	.word	0x40021000
 8000738:	08005d80 	.word	0x08005d80
 800073c:	08005d98 	.word	0x08005d98
 8000740:	20000908 	.word	0x20000908
 8000744:	08005db0 	.word	0x08005db0

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fb64 	bl	8004e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007bc:	23a8      	movs	r3, #168	; 0xa8
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fcad 	bl	800312c <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d8:	f000 fa86 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2105      	movs	r1, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 ff0e 	bl	800361c <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000806:	f000 fa6f 	bl	8000ce8 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ETH_Init+0x84>)
 8000822:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <MX_ETH_Init+0x88>)
 8000824:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ETH_Init+0x8c>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000834:	22e1      	movs	r2, #225	; 0xe1
 8000836:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ETH_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000846:	2200      	movs	r2, #0
 8000848:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_ETH_Init+0x84>)
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_ETH_Init+0x8c>)
 800084e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_ETH_Init+0x84>)
 8000852:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000856:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_ETH_Init+0x84>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_ETH_Init+0x90>)
 800085c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_ETH_Init+0x84>)
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_ETH_Init+0x94>)
 8000862:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_ETH_Init+0x84>)
 8000866:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800086a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_ETH_Init+0x84>)
 800086e:	f001 fc7b 	bl	8002168 <HAL_ETH_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 fa36 	bl	8000ce8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800087c:	2238      	movs	r2, #56	; 0x38
 800087e:	2100      	movs	r1, #0
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_ETH_Init+0x98>)
 8000882:	f004 facf 	bl	8004e24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_ETH_Init+0x98>)
 8000888:	2221      	movs	r2, #33	; 0x21
 800088a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_ETH_Init+0x98>)
 800088e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000892:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_ETH_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000208 	.word	0x20000208
 80008a4:	40028000 	.word	0x40028000
 80008a8:	2000090c 	.word	0x2000090c
 80008ac:	20000168 	.word	0x20000168
 80008b0:	200000c8 	.word	0x200000c8
 80008b4:	20000090 	.word	0x20000090

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_I2C1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_I2C1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_I2C1_Init+0x74>)
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <MX_I2C1_Init+0x7c>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_I2C1_Init+0x74>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_I2C1_Init+0x74>)
 80008f6:	f002 f93d 	bl	8002b74 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 f9f2 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_I2C1_Init+0x74>)
 8000908:	f002 fa78 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 f9e9 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_I2C1_Init+0x74>)
 800091a:	f002 faab 	bl	8002e74 <HAL_I2CEx_ConfigDigitalFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f9e0 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002b8 	.word	0x200002b8
 8000930:	40005400 	.word	0x40005400
 8000934:	000186a0 	.word	0x000186a0

08000938 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_I2C2_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_I2C2_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_I2C2_Init+0x74>)
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MX_I2C2_Init+0x7c>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_I2C2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_I2C2_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_I2C2_Init+0x74>)
 8000956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_I2C2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_I2C2_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C2_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_I2C2_Init+0x74>)
 8000976:	f002 f8fd 	bl	8002b74 <HAL_I2C_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000980:	f000 f9b2 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <MX_I2C2_Init+0x74>)
 8000988:	f002 fa38 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000992:	f000 f9a9 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C2_Init+0x74>)
 800099a:	f002 fa6b 	bl	8002e74 <HAL_I2CEx_ConfigDigitalFilter>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80009a4:	f000 f9a0 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000030c 	.word	0x2000030c
 80009b0:	40005800 	.word	0x40005800
 80009b4:	000186a0 	.word	0x000186a0

080009b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <MX_SPI2_Init+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009ec:	2220      	movs	r2, #32
 80009ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_SPI2_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI2_Init+0x64>)
 8000a04:	220a      	movs	r2, #10
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_SPI2_Init+0x64>)
 8000a0a:	f003 f827 	bl	8003a5c <HAL_SPI_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a14:	f000 f968 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000360 	.word	0x20000360
 8000a20:	40003800 	.word	0x40003800

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART3_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a5c:	f003 faf4 	bl	8004048 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f93f 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200003b8 	.word	0x200003b8
 8000a74:	40004800 	.word	0x40004800

08000a78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	f002 fa19 	bl	8002ef2 <HAL_PCD_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f000 f90f 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200003fc 	.word	0x200003fc

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	4b6f      	ldr	r3, [pc, #444]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a6e      	ldr	r2, [pc, #440]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b6c      	ldr	r3, [pc, #432]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	623b      	str	r3, [r7, #32]
 8000b04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	4b68      	ldr	r3, [pc, #416]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a67      	ldr	r2, [pc, #412]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b65      	ldr	r3, [pc, #404]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	4b61      	ldr	r3, [pc, #388]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a60      	ldr	r2, [pc, #384]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a59      	ldr	r2, [pc, #356]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b57      	ldr	r3, [pc, #348]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a52      	ldr	r2, [pc, #328]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b50      	ldr	r3, [pc, #320]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b4c      	ldr	r3, [pc, #304]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a4b      	ldr	r2, [pc, #300]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b49      	ldr	r3, [pc, #292]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b45      	ldr	r3, [pc, #276]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a44      	ldr	r2, [pc, #272]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b42      	ldr	r3, [pc, #264]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a3d      	ldr	r2, [pc, #244]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_GPIO_Init+0x1d8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI2_CSN_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f644 0181 	movw	r1, #18561	; 0x4881
 8000bd0:	4837      	ldr	r0, [pc, #220]	; (8000cb0 <MX_GPIO_Init+0x1dc>)
 8000bd2:	f001 ff9d 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bdc:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <MX_GPIO_Init+0x1e0>)
 8000bde:	f001 ff97 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	4834      	ldr	r0, [pc, #208]	; (8000cb8 <MX_GPIO_Init+0x1e4>)
 8000be8:	f001 ff92 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	482e      	ldr	r0, [pc, #184]	; (8000cbc <MX_GPIO_Init+0x1e8>)
 8000c04:	f001 fdd8 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPI2_CSN_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI2_CSN_Pin|LD3_Pin|LD2_Pin;
 8000c08:	f644 0381 	movw	r3, #18561	; 0x4881
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <MX_GPIO_Init+0x1dc>)
 8000c22:	f001 fdc9 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481d      	ldr	r0, [pc, #116]	; (8000cb4 <MX_GPIO_Init+0x1e0>)
 8000c3e:	f001 fdbb 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0x1e0>)
 8000c5c:	f001 fdac 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x1e4>)
 8000c78:	f001 fd9e 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <MX_GPIO_Init+0x1e4>)
 8000c90:	f001 fd92 	bl	80027b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f001 fa2e 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9e:	2028      	movs	r0, #40	; 0x28
 8000ca0:	f001 fa47 	bl	8002132 <HAL_NVIC_EnableIRQ>

}
 8000ca4:	bf00      	nop
 8000ca6:	3738      	adds	r7, #56	; 0x38
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40021800 	.word	0x40021800
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin){
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_EXTI_Callback+0x18>
		// if interrupt comes from IRQ pin, then set flag
		nrfInterrupt = 1;
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
	}
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	20000908 	.word	0x20000908

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <NRF_SPI_RW>:
 */


#include "nrf/nrf.h"

uint8_t NRF_SPI_RW(uint8_t transmit_buff, uint8_t* receive_buff){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_TransmitReceive(&hspi2, &transmit_buff, receive_buff, 1, 1000) != HAL_OK){
 8000d00:	1df9      	adds	r1, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <NRF_SPI_RW+0x34>)
 8000d0e:	f002 ff2e 	bl	8003b6e <HAL_SPI_TransmitReceive>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <NRF_SPI_RW+0x28>
		return NRF_ERROR;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e000      	b.n	8000d1e <NRF_SPI_RW+0x2a>
	}
	return NRF_OK;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000360 	.word	0x20000360

08000d2c <NRF_ReadRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return data from given register
 * @retval 1 in case of successful read , 0 in case of failure
 */
bool NRF_ReadRegs(uint8_t address, uint8_t* data, uint8_t length){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d46:	4815      	ldr	r0, [pc, #84]	; (8000d9c <NRF_ReadRegs+0x70>)
 8000d48:	f001 fee2 	bl	8002b10 <HAL_GPIO_WritePin>
	// send read command
	if(!NRF_SPI_RW(NRF_CMD_R_REGISTER | address, &address_rx)){
 8000d4c:	f107 020f 	add.w	r2, r7, #15
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffcd 	bl	8000cf4 <NRF_SPI_RW>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10d      	bne.n	8000d7c <NRF_ReadRegs+0x50>
		return NRF_ERROR;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e017      	b.n	8000d94 <NRF_ReadRegs+0x68>
	}
	// command is locked by csn, so it will read bytes until length is 0
	while(length--){
		// passing NOP to not write anything
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	20ff      	movs	r0, #255	; 0xff
 8000d68:	f7ff ffc4 	bl	8000cf4 <NRF_SPI_RW>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <NRF_ReadRegs+0x4a>
			return NRF_ERROR;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e00e      	b.n	8000d94 <NRF_ReadRegs+0x68>
		}
		++data;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	603b      	str	r3, [r7, #0]
	while(length--){
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	1e5a      	subs	r2, r3, #1
 8000d80:	71ba      	strb	r2, [r7, #6]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1ee      	bne.n	8000d64 <NRF_ReadRegs+0x38>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <NRF_ReadRegs+0x70>)
 8000d8e:	f001 febf 	bl	8002b10 <HAL_GPIO_WritePin>
	return NRF_OK;
 8000d92:	2301      	movs	r3, #1

}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020400 	.word	0x40020400

08000da0 <NRF_WriteRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return None
 * @retval 1 in case of successful write, 0 in case of failure
 */
bool NRF_WriteRegs(uint8_t address, uint8_t* data, uint8_t length){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <NRF_WriteRegs+0x80>)
 8000dbc:	f001 fea8 	bl	8002b10 <HAL_GPIO_WritePin>
	// send write command
	if(!NRF_SPI_RW(NRF_CMD_W_REGISTER | address, &address_rx)){
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f107 020f 	add.w	r2, r7, #15
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff90 	bl	8000cf4 <NRF_SPI_RW>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d111      	bne.n	8000dfe <NRF_WriteRegs+0x5e>
		return NRF_ERROR;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e01b      	b.n	8000e16 <NRF_WriteRegs+0x76>
	}
	// command is locked by csn, so it will write bytes until length is 0
	while(length--){
		if(!NRF_SPI_RW(*data, &address_rx)){
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	f107 020f 	add.w	r2, r7, #15
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff83 	bl	8000cf4 <NRF_SPI_RW>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <NRF_WriteRegs+0x58>
			return NRF_ERROR;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e00e      	b.n	8000e16 <NRF_WriteRegs+0x76>
		}
		++data;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	603b      	str	r3, [r7, #0]
	while(length--){
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	71ba      	strb	r2, [r7, #6]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1ea      	bne.n	8000dde <NRF_WriteRegs+0x3e>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <NRF_WriteRegs+0x80>)
 8000e10:	f001 fe7e 	bl	8002b10 <HAL_GPIO_WritePin>
	return NRF_OK;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40020400 	.word	0x40020400

08000e24 <NRF_Init>:
 * @brief Init function. Defines basic configuration:
 * - only one pipe, enabled enhanced shockburst, up to 5 retransmits
 * - rest of parameters defined in function body
 * @param[in] nrf : pointer to transciever handler
 */
bool NRF_Init(NRF_HandleTypedef* nrf){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	// below parameters are configurable, wanted to keep them in one place
	nrf->rate_ = RATE_1Mbps;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
	nrf->frequency_ = (uint8_t)10;	// channel frequency 2410MHz
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	220a      	movs	r2, #10
 8000e36:	705a      	strb	r2, [r3, #1]
	nrf->power_amp_ = dBm_0; 	// max power, TX only
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	709a      	strb	r2, [r3, #2]
	nrf->lna_ = LNA_HIGH;	// rx only
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	70da      	strb	r2, [r3, #3]
	nrf->dpl_ = DPL_OFF;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	715a      	strb	r2, [r3, #5]
	nrf->crc_ = CRC_ENABLE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	719a      	strb	r2, [r3, #6]
	nrf->crc_bytes_ = CRCB_ONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	71da      	strb	r2, [r3, #7]
	nrf->address_width_ = ADR_THREE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	721a      	strb	r2, [r3, #8]
	nrf->retransmissions_ = ARC_TEN;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	220a      	movs	r2, #10
 8000e60:	725a      	strb	r2, [r3, #9]
	nrf->ret_delay_ = DELAY_2000uS;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2207      	movs	r2, #7
 8000e66:	729a      	strb	r2, [r3, #10]

	if(!NRF_SET_RadioParams(nrf->rate_, nrf->power_amp_, nrf->lna_)){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7818      	ldrb	r0, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7899      	ldrb	r1, [r3, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	78db      	ldrb	r3, [r3, #3]
 8000e74:	461a      	mov	r2, r3
 8000e76:	f000 f865 	bl	8000f44 <NRF_SET_RadioParams>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <NRF_Init+0x66>
		return NRF_ERROR;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e058      	b.n	8000f3c <NRF_Init+0x118>
	}
	if(!NRF_SET_DynamicPayload(nrf->dpl_)){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	795b      	ldrb	r3, [r3, #5]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f903 	bl	800109a <NRF_SET_DynamicPayload>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <NRF_Init+0x80>
		return NRF_ERROR;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e04b      	b.n	8000f3c <NRF_Init+0x118>
	}
	if(!NRF_SET_CRC(nrf->crc_, nrf->crc_bytes_)){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	799a      	ldrb	r2, [r3, #6]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	79db      	ldrb	r3, [r3, #7]
 8000eac:	4619      	mov	r1, r3
 8000eae:	4610      	mov	r0, r2
 8000eb0:	f000 f925 	bl	80010fe <NRF_SET_CRC>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f083 0301 	eor.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <NRF_Init+0xa0>
		return NRF_ERROR;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e03b      	b.n	8000f3c <NRF_Init+0x118>
	}
	if(!NRF_SET_PipeAddressWidth(nrf->address_width_)){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7a1b      	ldrb	r3, [r3, #8]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f956 	bl	800117a <NRF_SET_PipeAddressWidth>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <NRF_Init+0xba>
		return NRF_ERROR;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e02e      	b.n	8000f3c <NRF_Init+0x118>
	}
	if(!NRF_SET_Retransmission(nrf->ret_delay_,  nrf->retransmissions_)){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a9a      	ldrb	r2, [r3, #10]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7a5b      	ldrb	r3, [r3, #9]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4610      	mov	r0, r2
 8000eea:	f000 f964 	bl	80011b6 <NRF_SET_Retransmission>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <NRF_Init+0xda>
		return NRF_ERROR;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e01e      	b.n	8000f3c <NRF_Init+0x118>
	}
	// flush fifos
	if(!NRF_FlushTXFifo()){
 8000efe:	f000 fac1 	bl	8001484 <NRF_FlushTXFifo>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <NRF_Init+0xee>
		return NRF_ERROR;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e014      	b.n	8000f3c <NRF_Init+0x118>
	}
	if(!NRF_FlushRXFifo()){
 8000f12:	f000 fa95 	bl	8001440 <NRF_FlushRXFifo>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f083 0301 	eor.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <NRF_Init+0x102>
		return NRF_ERROR;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e00a      	b.n	8000f3c <NRF_Init+0x118>
	}

	// clear irq flags
	if(!NRF_ClearIRQFlags()){
 8000f26:	f000 fb07 	bl	8001538 <NRF_ClearIRQFlags>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f083 0301 	eor.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <NRF_Init+0x116>
		return NRF_ERROR;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <NRF_Init+0x118>
	}
	return NRF_OK;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <NRF_SET_RadioParams>:
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */

bool NRF_SET_RadioParams(NRF_AirDataRate rate, NRF_PowerAmplifier amp, NRF_LNAsetup lna){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	4613      	mov	r3, r2
 8000f54:	717b      	strb	r3, [r7, #5]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2006      	movs	r0, #6
 8000f60:	f7ff fee4 	bl	8000d2c <NRF_ReadRegs>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <NRF_SET_RadioParams+0x30>
		return NRF_ERROR;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e026      	b.n	8000fc2 <NRF_SET_RadioParams+0x7e>
	}
	reg &= ~(NRF_MASK_RF_DR  | NRF_MASK_RF_PWR | NRF_MASK_LNA);		// sets bits to 0
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f023 030f 	bic.w	r3, r3, #15
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	73fb      	strb	r3, [r7, #15]
	reg |= ((rate << 3) | (amp << 1) | lna);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b25a      	sxtb	r2, r3
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2006      	movs	r0, #6
 8000fac:	f7ff fef8 	bl	8000da0 <NRF_WriteRegs>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <NRF_SET_RadioParams+0x7c>
		return NRF_ERROR;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <NRF_SET_RadioParams+0x7e>
	}
	return NRF_OK;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <NRF_SET_Mode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Mode(NRF_Mode mode){
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8000fd4:	f107 030f 	add.w	r3, r7, #15
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fea5 	bl	8000d2c <NRF_ReadRegs>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <NRF_SET_Mode+0x28>
		return NRF_ERROR;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e019      	b.n	8001026 <NRF_SET_Mode+0x5c>
	}
	reg &= ~NRF_MASK_MODE;		// sets bit to 0
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	73fb      	strb	r3, [r7, #15]
	reg |= mode;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4313      	orrs	r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fec6 	bl	8000da0 <NRF_WriteRegs>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <NRF_SET_Mode+0x5a>
		return NRF_ERROR;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <NRF_SET_Mode+0x5c>
	}
	return NRF_OK;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF_SET_PowerMode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PowerMode(NRF_PowerMode pwr){
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fe73 	bl	8000d2c <NRF_ReadRegs>
 8001046:	4603      	mov	r3, r0
 8001048:	f083 0301 	eor.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <NRF_SET_PowerMode+0x28>
		return NRF_ERROR;
 8001052:	2300      	movs	r3, #0
 8001054:	e01d      	b.n	8001092 <NRF_SET_PowerMode+0x64>
	}
	reg &= ~NRF_MASK_PWR_MODE;		// sets bit to 0
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]
	reg |= pwr << 1;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b25a      	sxtb	r2, r3
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	b25b      	sxtb	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8001072:	f107 030f 	add.w	r3, r7, #15
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fe90 	bl	8000da0 <NRF_WriteRegs>
 8001080:	4603      	mov	r3, r0
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <NRF_SET_PowerMode+0x62>
		return NRF_ERROR;
 800108c:	2300      	movs	r3, #0
 800108e:	e000      	b.n	8001092 <NRF_SET_PowerMode+0x64>
	}
	return NRF_OK;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <NRF_SET_DynamicPayload>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_DynamicPayload(NRF_DynamicPayload dpl){
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_FEATURE, &reg, 1)){
 80010a4:	f107 030f 	add.w	r3, r7, #15
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	201d      	movs	r0, #29
 80010ae:	f7ff fe3d 	bl	8000d2c <NRF_ReadRegs>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f083 0301 	eor.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <NRF_SET_DynamicPayload+0x28>
		return NRF_ERROR;
 80010be:	2300      	movs	r3, #0
 80010c0:	e019      	b.n	80010f6 <NRF_SET_DynamicPayload+0x5c>
	}
	reg &= ~NRF_MASK_EN_DPL;		// sets bit to 0
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
	reg |= dpl;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_FEATURE, &reg, 1)){
 80010d6:	f107 030f 	add.w	r3, r7, #15
 80010da:	2201      	movs	r2, #1
 80010dc:	4619      	mov	r1, r3
 80010de:	201d      	movs	r0, #29
 80010e0:	f7ff fe5e 	bl	8000da0 <NRF_WriteRegs>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <NRF_SET_DynamicPayload+0x5a>
		return NRF_ERROR;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e000      	b.n	80010f6 <NRF_SET_DynamicPayload+0x5c>
	}
	return NRF_OK;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <NRF_SET_CRC>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_CRC(NRF_CRC crc, NRF_CRCbytes bytes){
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	460a      	mov	r2, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 800110e:	f107 030f 	add.w	r3, r7, #15
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fe08 	bl	8000d2c <NRF_ReadRegs>
 800111c:	4603      	mov	r3, r0
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <NRF_SET_CRC+0x2e>
		return NRF_ERROR;
 8001128:	2300      	movs	r3, #0
 800112a:	e022      	b.n	8001172 <NRF_SET_CRC+0x74>
	}
	reg &= ~NRF_MASK_CRC;		// sets bits to 0
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	f023 030c 	bic.w	r3, r3, #12
 8001132:	b2db      	uxtb	r3, r3
 8001134:	73fb      	strb	r3, [r7, #15]
	reg |= ((crc << 3) | (bytes << 2));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	b25a      	sxtb	r2, r3
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b25a      	sxtb	r2, r3
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b25b      	sxtb	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8001152:	f107 030f 	add.w	r3, r7, #15
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	2006      	movs	r0, #6
 800115c:	f7ff fe20 	bl	8000da0 <NRF_WriteRegs>
 8001160:	4603      	mov	r3, r0
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <NRF_SET_CRC+0x72>
		return NRF_ERROR;
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <NRF_SET_CRC+0x74>
	}
	return NRF_OK;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <NRF_SET_PipeAddressWidth>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddressWidth(NRF_AddressWidth width){
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_width = width & NRF_MASK_AW;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_AW, &safe_width, 1)){
 800118e:	f107 030f 	add.w	r3, r7, #15
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	2003      	movs	r0, #3
 8001198:	f7ff fe02 	bl	8000da0 <NRF_WriteRegs>
 800119c:	4603      	mov	r3, r0
 800119e:	f083 0301 	eor.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <NRF_SET_PipeAddressWidth+0x32>
		return NRF_ERROR;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e000      	b.n	80011ae <NRF_SET_PipeAddressWidth+0x34>
	}
	return NRF_OK;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <NRF_SET_Retransmission>:
 * @param[in] arc : how many retransmissions allowed
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Retransmission(NRF_RetransmitDelay ard, NRF_RetransmitCount arc){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	460a      	mov	r2, r1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71bb      	strb	r3, [r7, #6]
	uint8_t retransmit_data = (ard << 4) | arc;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_RETR, &retransmit_data, 1)){
 80011d8:	f107 030f 	add.w	r3, r7, #15
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fddd 	bl	8000da0 <NRF_WriteRegs>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <NRF_SET_Retransmission+0x40>
		return NRF_ERROR;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <NRF_SET_Retransmission+0x42>
	}
	return NRF_OK;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <NRF_SET_PipeAddress>:
 * @param[in] address : pointer to array with address (LSB first, its pretty crucial)
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddress(NRF_Pipe pipe, uint8_t* address){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
	uint8_t address_width;
	if(!NRF_ReadRegs(NRF_REG_SETUP_AW, &address_width, 1)){
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	2003      	movs	r0, #3
 8001216:	f7ff fd89 	bl	8000d2c <NRF_ReadRegs>
 800121a:	4603      	mov	r3, r0
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <NRF_SET_PipeAddress+0x2a>
		return NRF_ERROR;
 8001226:	2300      	movs	r3, #0
 8001228:	e033      	b.n	8001292 <NRF_SET_PipeAddress+0x92>
	}

	switch(pipe){
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b06      	cmp	r3, #6
 800122e:	d00a      	beq.n	8001246 <NRF_SET_PipeAddress+0x46>
 8001230:	2b06      	cmp	r3, #6
 8001232:	dc28      	bgt.n	8001286 <NRF_SET_PipeAddress+0x86>
 8001234:	2b01      	cmp	r3, #1
 8001236:	dc02      	bgt.n	800123e <NRF_SET_PipeAddress+0x3e>
 8001238:	2b00      	cmp	r3, #0
 800123a:	da04      	bge.n	8001246 <NRF_SET_PipeAddress+0x46>
 800123c:	e023      	b.n	8001286 <NRF_SET_PipeAddress+0x86>
 800123e:	3b02      	subs	r3, #2
 8001240:	2b03      	cmp	r3, #3
 8001242:	d820      	bhi.n	8001286 <NRF_SET_PipeAddress+0x86>
 8001244:	e00f      	b.n	8001266 <NRF_SET_PipeAddress+0x66>
		case RX_PIPE_0:
		case RX_PIPE_1:
		case TX_PIPE:
			// for pipe 0-1 send all three bytes
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, address_width)){
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	330a      	adds	r3, #10
 800124a:	b2db      	uxtb	r3, r3
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fda5 	bl	8000da0 <NRF_WriteRegs>
 8001256:	4603      	mov	r3, r0
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d013      	beq.n	800128a <NRF_SET_PipeAddress+0x8a>
				return NRF_ERROR;
 8001262:	2300      	movs	r3, #0
 8001264:	e015      	b.n	8001292 <NRF_SET_PipeAddress+0x92>
		case RX_PIPE_2:
		case RX_PIPE_3:
		case RX_PIPE_4:
		case RX_PIPE_5:
			// for pipe 2-5 and tx send only LSB
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, 1)){
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	330a      	adds	r3, #10
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2201      	movs	r2, #1
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd95 	bl	8000da0 <NRF_WriteRegs>
 8001276:	4603      	mov	r3, r0
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <NRF_SET_PipeAddress+0x8e>
				return NRF_ERROR;
 8001282:	2300      	movs	r3, #0
 8001284:	e005      	b.n	8001292 <NRF_SET_PipeAddress+0x92>
			}
			break;
		default:
			// some different value, return error
			return NRF_ERROR;
 8001286:	2300      	movs	r3, #0
 8001288:	e003      	b.n	8001292 <NRF_SET_PipeAddress+0x92>
			break;
 800128a:	bf00      	nop
 800128c:	e000      	b.n	8001290 <NRF_SET_PipeAddress+0x90>
			break;
 800128e:	bf00      	nop
	}
	return NRF_OK;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <NRF_SET_PipeRX>:
 * @param[in]] payload_length : length (in bytes) of data packets send through pipe
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeRX(NRF_Pipe pipe, NRF_AutoAcknowledge auto_ack, uint8_t payload_length){
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	460b      	mov	r3, r1
 80012a6:	71bb      	strb	r3, [r7, #6]
 80012a8:	4613      	mov	r3, r2
 80012aa:	717b      	strb	r3, [r7, #5]
	// enable pipe
	uint8_t pipe_en;
	if(!NRF_ReadRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 80012ac:	f107 030f 	add.w	r3, r7, #15
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff fd39 	bl	8000d2c <NRF_ReadRegs>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f083 0301 	eor.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <NRF_SET_PipeRX+0x30>
		return NRF_ERROR;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e071      	b.n	80013ae <NRF_SET_PipeRX+0x114>
	}
	pipe_en &= ~(NRF_MASK_EN_BASE << pipe);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2201      	movs	r2, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
	pipe_en |= 1 << pipe;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2201      	movs	r2, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 80012fa:	f107 030f 	add.w	r3, r7, #15
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	2002      	movs	r0, #2
 8001304:	f7ff fd4c 	bl	8000da0 <NRF_WriteRegs>
 8001308:	4603      	mov	r3, r0
 800130a:	f083 0301 	eor.w	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <NRF_SET_PipeRX+0x7e>
		return NRF_ERROR;
 8001314:	2300      	movs	r3, #0
 8001316:	e04a      	b.n	80013ae <NRF_SET_PipeRX+0x114>
	}

	// set auto acknowledge
	uint8_t aa_en;
	if(!NRF_ReadRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff fd03 	bl	8000d2c <NRF_ReadRegs>
 8001326:	4603      	mov	r3, r0
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <NRF_SET_PipeRX+0x9c>
		return NRF_ERROR;
 8001332:	2300      	movs	r3, #0
 8001334:	e03b      	b.n	80013ae <NRF_SET_PipeRX+0x114>
	}
	aa_en &= ~(NRF_MASK_EN_BASE << pipe);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2201      	movs	r2, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	b25b      	sxtb	r3, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	b25a      	sxtb	r2, r3
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4013      	ands	r3, r2
 800134a:	b25b      	sxtb	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	73bb      	strb	r3, [r7, #14]
	aa_en |= 1 << pipe;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2201      	movs	r2, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	b25a      	sxtb	r2, r3
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b25b      	sxtb	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	73bb      	strb	r3, [r7, #14]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8001366:	f107 030e 	add.w	r3, r7, #14
 800136a:	2201      	movs	r2, #1
 800136c:	4619      	mov	r1, r3
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff fd16 	bl	8000da0 <NRF_WriteRegs>
 8001374:	4603      	mov	r3, r0
 8001376:	f083 0301 	eor.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <NRF_SET_PipeRX+0xea>
		return NRF_ERROR;
 8001380:	2300      	movs	r3, #0
 8001382:	e014      	b.n	80013ae <NRF_SET_PipeRX+0x114>
	}

	// set payload length (used when dpl is disabled)
	uint8_t safe_pl_len = NRF_MASK_RX_PW_P & payload_length;
 8001384:	797b      	ldrb	r3, [r7, #5]
 8001386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800138a:	b2db      	uxtb	r3, r3
 800138c:	737b      	strb	r3, [r7, #13]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &safe_pl_len, 1)){
 800138e:	f107 030d 	add.w	r3, r7, #13
 8001392:	2201      	movs	r2, #1
 8001394:	4619      	mov	r1, r3
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fd02 	bl	8000da0 <NRF_WriteRegs>
 800139c:	4603      	mov	r3, r0
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <NRF_SET_PipeRX+0x112>
		return NRF_ERROR;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <NRF_SET_PipeRX+0x114>
	}

	// if everything passed return ok
	return NRF_OK;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <NRF_GET_PipeNumber>:
 * @param[in] pipe : pointer to pipe variable
 *
 * @return nothing
 * @retval 1 if successfully get, 0 if something went wrong
 */
bool NRF_GET_PipeNumber(uint8_t* pipe){
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	uint8_t status_reg = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 80013c2:	f107 030f 	add.w	r3, r7, #15
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	2007      	movs	r0, #7
 80013cc:	f7ff fcae 	bl	8000d2c <NRF_ReadRegs>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f083 0301 	eor.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <NRF_GET_PipeNumber+0x2a>
		return NRF_ERROR;
 80013dc:	2300      	movs	r3, #0
 80013de:	e008      	b.n	80013f2 <NRF_GET_PipeNumber+0x3c>
	}
	*pipe = (status_reg & NRF_MASK_RX_P_NO) >> 1;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	105b      	asrs	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <NRF_GET_PayloadLength>:
 * @param[in] pipe : pipe number
 *
 * @return nothing
 * @retval 1 if successfully get, 0 if something went wrong
 */
bool NRF_GET_PayloadLength(uint8_t pipe, uint8_t* length){
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	6039      	str	r1, [r7, #0]
 8001404:	71fb      	strb	r3, [r7, #7]
	if(!NRF_ReadRegs(NRF_REG_RX_PW_BASE+pipe, length, 1)){
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	3311      	adds	r3, #17
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2201      	movs	r2, #1
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fc8b 	bl	8000d2c <NRF_ReadRegs>
 8001416:	4603      	mov	r3, r0
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <NRF_GET_PayloadLength+0x2c>
		return NRF_ERROR;
 8001422:	2300      	movs	r3, #0
 8001424:	e007      	b.n	8001436 <NRF_GET_PayloadLength+0x3c>
	}
	*length &= NRF_MASK_RX_PW_P;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800142e:	b2da      	uxtb	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <NRF_FlushRXFifo>:
 * @brief flush rx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushRXFifo(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <NRF_FlushRXFifo+0x40>)
 8001452:	f001 fb5d 	bl	8002b10 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_RX, &rx_buff)){
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	4619      	mov	r1, r3
 800145a:	20e2      	movs	r0, #226	; 0xe2
 800145c:	f7ff fc4a 	bl	8000cf4 <NRF_SPI_RW>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <NRF_FlushRXFifo+0x2a>
		return NRF_ERROR;
 8001466:	2300      	movs	r3, #0
 8001468:	e006      	b.n	8001478 <NRF_FlushRXFifo+0x38>
	}
	NRF_CSN_SET_HIGH;
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <NRF_FlushRXFifo+0x40>)
 8001472:	f001 fb4d 	bl	8002b10 <HAL_GPIO_WritePin>
	return NRF_OK;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020400 	.word	0x40020400

08001484 <NRF_FlushTXFifo>:
 * @brief flush tx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushTXFifo(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <NRF_FlushTXFifo+0x40>)
 8001496:	f001 fb3b 	bl	8002b10 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_TX, &rx_buff)){
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	4619      	mov	r1, r3
 800149e:	20e1      	movs	r0, #225	; 0xe1
 80014a0:	f7ff fc28 	bl	8000cf4 <NRF_SPI_RW>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <NRF_FlushTXFifo+0x2a>
		return NRF_ERROR;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e006      	b.n	80014bc <NRF_FlushTXFifo+0x38>
	}
	NRF_CSN_SET_HIGH;
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <NRF_FlushTXFifo+0x40>)
 80014b6:	f001 fb2b 	bl	8002b10 <HAL_GPIO_WritePin>
	return NRF_OK;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40020400 	.word	0x40020400

080014c8 <NRF_ReadRxPayload>:
 * @param[in] length : data length
 *
 * @return nothing
 * @retval 1 if successfully read, 0 if something went wrong
 */
bool NRF_ReadRxPayload(uint8_t* data, uint8_t length){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buff = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_SET_LOW;
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014de:	4815      	ldr	r0, [pc, #84]	; (8001534 <NRF_ReadRxPayload+0x6c>)
 80014e0:	f001 fb16 	bl	8002b10 <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_R_RX_PAYLOAD, &rx_buff)){
 80014e4:	f107 030f 	add.w	r3, r7, #15
 80014e8:	4619      	mov	r1, r3
 80014ea:	2061      	movs	r0, #97	; 0x61
 80014ec:	f7ff fc02 	bl	8000cf4 <NRF_SPI_RW>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10d      	bne.n	8001512 <NRF_ReadRxPayload+0x4a>
		return NRF_ERROR;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e017      	b.n	800152a <NRF_ReadRxPayload+0x62>
	}
	while(length--){
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	20ff      	movs	r0, #255	; 0xff
 80014fe:	f7ff fbf9 	bl	8000cf4 <NRF_SPI_RW>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <NRF_ReadRxPayload+0x44>
			return NRF_ERROR;
 8001508:	2300      	movs	r3, #0
 800150a:	e00e      	b.n	800152a <NRF_ReadRxPayload+0x62>
		}
		data++;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3301      	adds	r3, #1
 8001510:	607b      	str	r3, [r7, #4]
	while(length--){
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	70fa      	strb	r2, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ee      	bne.n	80014fa <NRF_ReadRxPayload+0x32>
	}
	NRF_CSN_SET_HIGH;
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <NRF_ReadRxPayload+0x6c>)
 8001524:	f001 faf4 	bl	8002b10 <HAL_GPIO_WritePin>
	return NRF_OK;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020400 	.word	0x40020400

08001538 <NRF_ClearIRQFlags>:
 * @brief clear irq bits in status register
 *
 * @return nothing
 * @retval 1 if successfully cleared, 0 if something went wrong
 */
bool NRF_ClearIRQFlags(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	uint8_t status_reg;
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	2201      	movs	r2, #1
 8001542:	4619      	mov	r1, r3
 8001544:	2007      	movs	r0, #7
 8001546:	f7ff fbf1 	bl	8000d2c <NRF_ReadRegs>
 800154a:	4603      	mov	r3, r0
 800154c:	f083 0301 	eor.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <NRF_ClearIRQFlags+0x22>
		return NRF_ERROR;
 8001556:	2300      	movs	r3, #0
 8001558:	e013      	b.n	8001582 <NRF_ClearIRQFlags+0x4a>
	}

	// write 1 to clear bits
	status_reg |= (NRF_MASK_RX_DR | NRF_MASK_TX_DS | NRF_MASK_MAX_RT);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001560:	b2db      	uxtb	r3, r3
 8001562:	71fb      	strb	r3, [r7, #7]
	if(!NRF_WriteRegs(NRF_REG_STATUS, &status_reg, 1)){
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	2201      	movs	r2, #1
 8001568:	4619      	mov	r1, r3
 800156a:	2007      	movs	r0, #7
 800156c:	f7ff fc18 	bl	8000da0 <NRF_WriteRegs>
 8001570:	4603      	mov	r3, r0
 8001572:	f083 0301 	eor.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <NRF_ClearIRQFlags+0x48>
		return NRF_ERROR;
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <NRF_ClearIRQFlags+0x4a>
	}
	return NRF_OK;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <NRF_IRQ_Callback>:
 * @param[in] nrfInterruptFlag : pointer to global flag indicating interrupt state
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_Callback(uint8_t* nrfInterrupt, uint8_t* data_buffer){
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]

	if(*nrfInterrupt){
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d043      	beq.n	8001624 <NRF_IRQ_Callback+0x9a>

		uint8_t status_reg = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

		if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 80015a0:	f107 030f 	add.w	r3, r7, #15
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	2007      	movs	r0, #7
 80015aa:	f7ff fbbf 	bl	8000d2c <NRF_ReadRegs>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <NRF_IRQ_Callback+0x34>
			return NRF_ERROR;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e033      	b.n	8001626 <NRF_IRQ_Callback+0x9c>
		}
		// if flag is high, run one of handlers
		if(NRF_MASK_RX_DR & status_reg){
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00a      	beq.n	80015e0 <NRF_IRQ_Callback+0x56>
			// interrupt: data ready rx fifo
			if(!NRF_IRQ_RxHandler(data_buffer)){
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f000 f82f 	bl	800162e <NRF_IRQ_RxHandler>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 80015dc:	2300      	movs	r3, #0
 80015de:	e022      	b.n	8001626 <NRF_IRQ_Callback+0x9c>
			}
		}
		else if(NRF_MASK_TX_DS & status_reg){
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <NRF_IRQ_Callback+0x76>
			// interrupt: data sent tx fifo
			if(!NRF_IRQ_TxHandler()){
 80015ec:	f000 f85f 	bl	80016ae <NRF_IRQ_TxHandler>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d011      	beq.n	8001620 <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e012      	b.n	8001626 <NRF_IRQ_Callback+0x9c>
			}
		}
		else if(NRF_MASK_MAX_RT & status_reg){
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <NRF_IRQ_Callback+0x96>
			// interrupt : max no of retransmissions
			if(!NRF_IRQ_MaxHandler()){
 800160c:	f000 f85e 	bl	80016cc <NRF_IRQ_MaxHandler>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 800161c:	2300      	movs	r3, #0
 800161e:	e002      	b.n	8001626 <NRF_IRQ_Callback+0x9c>
			}
		}
		return NRF_OK;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <NRF_IRQ_Callback+0x9c>
	}
	else{
		// somehow this was called without flag raised, so call error
		return NRF_ERROR;
 8001624:	2300      	movs	r3, #0
	}

}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <NRF_IRQ_RxHandler>:
 * @param[in] data_buffer : pointer to buffer to read data into
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_RxHandler(uint8_t* data_buffer){
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	//get pipe number
	uint8_t pipe = 0x07; //sets as empty rx
 8001636:	2307      	movs	r3, #7
 8001638:	73fb      	strb	r3, [r7, #15]
	if(!NRF_GET_PipeNumber(&pipe)){
 800163a:	f107 030f 	add.w	r3, r7, #15
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff feb9 	bl	80013b6 <NRF_GET_PipeNumber>
 8001644:	4603      	mov	r3, r0
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <NRF_IRQ_RxHandler+0x26>
		return NRF_ERROR;
 8001650:	2300      	movs	r3, #0
 8001652:	e028      	b.n	80016a6 <NRF_IRQ_RxHandler+0x78>
	}

	//get length
	uint8_t length = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	73bb      	strb	r3, [r7, #14]
	if(!NRF_GET_PayloadLength(pipe, &length)){
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	f107 020e 	add.w	r2, r7, #14
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff feca 	bl	80013fa <NRF_GET_PayloadLength>
 8001666:	4603      	mov	r3, r0
 8001668:	f083 0301 	eor.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <NRF_IRQ_RxHandler+0x48>
		return NRF_ERROR;
 8001672:	2300      	movs	r3, #0
 8001674:	e017      	b.n	80016a6 <NRF_IRQ_RxHandler+0x78>
	}

	//read data
	if(!NRF_ReadRxPayload(data_buffer, length)){
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff24 	bl	80014c8 <NRF_ReadRxPayload>
 8001680:	4603      	mov	r3, r0
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <NRF_IRQ_RxHandler+0x62>
		return NRF_ERROR;
 800168c:	2300      	movs	r3, #0
 800168e:	e00a      	b.n	80016a6 <NRF_IRQ_RxHandler+0x78>
	}

	// deassert IRQ pin; my code supports
	// only one interrupt at a time, so I can clear all flags
	if(!NRF_ClearIRQFlags()){
 8001690:	f7ff ff52 	bl	8001538 <NRF_ClearIRQFlags>
 8001694:	4603      	mov	r3, r0
 8001696:	f083 0301 	eor.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <NRF_IRQ_RxHandler+0x76>
		return NRF_ERROR;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e000      	b.n	80016a6 <NRF_IRQ_RxHandler+0x78>
	}
	return NRF_OK;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <NRF_IRQ_TxHandler>:
 * @brief handle tx interrupt
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_TxHandler(void){
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
	// this only deasserts irq flags
	if(!NRF_ClearIRQFlags()){
 80016b2:	f7ff ff41 	bl	8001538 <NRF_ClearIRQFlags>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <NRF_IRQ_TxHandler+0x18>
		return NRF_ERROR;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <NRF_IRQ_TxHandler+0x1a>
	}
	return NRF_OK;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}

080016cc <NRF_IRQ_MaxHandler>:
 * @brief handle max interrupt
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_MaxHandler(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	// clear fifo and deassert pin
	// this config simply discards packet
	if(!NRF_FlushTXFifo()){
 80016d0:	f7ff fed8 	bl	8001484 <NRF_FlushTXFifo>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <NRF_IRQ_MaxHandler+0x18>
		return NRF_ERROR;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e00a      	b.n	80016fa <NRF_IRQ_MaxHandler+0x2e>
	}

	if(!NRF_ClearIRQFlags()){
 80016e4:	f7ff ff28 	bl	8001538 <NRF_ClearIRQFlags>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <NRF_IRQ_MaxHandler+0x2c>
		return NRF_ERROR;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <NRF_IRQ_MaxHandler+0x2e>
	}
	return NRF_OK;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_MspInit+0x4c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x4c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	; 0x38
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_ETH_MspInit+0x174>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f040 80a4 	bne.w	80018bc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 800177e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	623b      	str	r3, [r7, #32]
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 800179a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800179e:	6313      	str	r3, [r2, #48]	; 0x30
 80017a0:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4a44      	ldr	r2, [pc, #272]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017ba:	6313      	str	r3, [r2, #48]	; 0x30
 80017bc:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a36      	ldr	r2, [pc, #216]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 8001826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <HAL_ETH_MspInit+0x178>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001838:	2332      	movs	r3, #50	; 0x32
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001848:	230b      	movs	r3, #11
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <HAL_ETH_MspInit+0x17c>)
 8001854:	f000 ffb0 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001858:	2386      	movs	r3, #134	; 0x86
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001868:	230b      	movs	r3, #11
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4817      	ldr	r0, [pc, #92]	; (80018d0 <HAL_ETH_MspInit+0x180>)
 8001874:	f000 ffa0 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800188a:	230b      	movs	r3, #11
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <HAL_ETH_MspInit+0x184>)
 8001896:	f000 ff8f 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800189a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ac:	230b      	movs	r3, #11
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4808      	ldr	r0, [pc, #32]	; (80018d8 <HAL_ETH_MspInit+0x188>)
 80018b8:	f000 ff7e 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3738      	adds	r7, #56	; 0x38
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40028000 	.word	0x40028000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40021800 	.word	0x40021800

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_I2C_MspInit+0xe8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12d      	bne.n	800195a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800191a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192c:	2304      	movs	r3, #4
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4825      	ldr	r0, [pc, #148]	; (80019cc <HAL_I2C_MspInit+0xf0>)
 8001938:	f000 ff3e 	bl	80027b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 8001946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001958:	e030      	b.n	80019bc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_I2C_MspInit+0xf4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d12b      	bne.n	80019bc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 800196e:	f043 0320 	orr.w	r3, r3, #32
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001980:	2303      	movs	r3, #3
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001984:	2312      	movs	r3, #18
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001990:	2304      	movs	r3, #4
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	480e      	ldr	r0, [pc, #56]	; (80019d4 <HAL_I2C_MspInit+0xf8>)
 800199c:	f000 ff0c 	bl	80027b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 80019aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_I2C_MspInit+0xec>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	bf00      	nop
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40005400 	.word	0x40005400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40005800 	.word	0x40005800
 80019d4:	40021400 	.word	0x40021400

080019d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <HAL_SPI_MspInit+0xc0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d14a      	bne.n	8001a90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <HAL_SPI_MspInit+0xc8>)
 8001a6a:	f000 fea5 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a80:	2305      	movs	r3, #5
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <HAL_SPI_MspInit+0xcc>)
 8001a8c:	f000 fe94 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40003800 	.word	0x40003800
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_UART_MspInit+0x84>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12c      	bne.n	8001b24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_UART_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0x88>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_MspInit+0x88>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_UART_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_UART_MspInit+0x88>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_UART_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b14:	2307      	movs	r3, #7
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_UART_MspInit+0x8c>)
 8001b20:	f000 fe4a 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40004800 	.word	0x40004800
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020c00 	.word	0x40020c00

08001b38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b58:	d13f      	bne.n	8001bda <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b88:	230a      	movs	r3, #10
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4815      	ldr	r0, [pc, #84]	; (8001be8 <HAL_PCD_MspInit+0xb0>)
 8001b94:	f000 fe10 	bl	80027b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480e      	ldr	r0, [pc, #56]	; (8001be8 <HAL_PCD_MspInit+0xb0>)
 8001bae:	f000 fe03 	bl	80027b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	6353      	str	r3, [r2, #52]	; 0x34
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_PCD_MspInit+0xac>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f940 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c48:	f000 ff7c 	bl	8002b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8001c4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c50:	f000 ff78 	bl	8002b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e00a      	b.n	8001c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6a:	f3af 8000 	nop.w
 8001c6e:	4601      	mov	r1, r0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf0      	blt.n	8001c6a <_read+0x12>
	}

return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e009      	b.n	8001cb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc71 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf1      	blt.n	8001ca4 <_write+0x12>
	}
	return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_close>:

int _close(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
	return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f003 f834 	bl	8004dd0 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20030000 	.word	0x20030000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	20000914 	.word	0x20000914
 8001d9c:	20000930 	.word	0x20000930

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dfc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dca:	490e      	ldr	r1, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001de0:	4c0b      	ldr	r4, [pc, #44]	; (8001e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dee:	f7ff ffd7 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f002 fff3 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7fe fbe5 	bl	80005c4 <main>
  bx  lr    
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e08:	08005e94 	.word	0x08005e94
  ldr r2, =_sbss
 8001e0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e10:	2000092c 	.word	0x2000092c

08001e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_Init+0x40>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_Init+0x40>)
 8001e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x40>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 f94f 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fc58 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f967 	bl	800214e <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f000 f92f 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	2000000c 	.word	0x2000000c
 8001ee0:	20000918 	.word	0x20000918

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000918 	.word	0x20000918

08001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff ffee 	bl	8001ee4 <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d005      	beq.n	8001f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_Delay+0x44>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f22:	bf00      	nop
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d8f7      	bhi.n	8001f24 <HAL_Delay+0x28>
  {
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff3e 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8e 	bl	8002038 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5d 	bl	8001fe4 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff31 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffa2 	bl	80020a0 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e06c      	b.n	8002254 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2223      	movs	r2, #35	; 0x23
 8002188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fadf 	bl	8001750 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_ETH_Init+0xf4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a30      	ldr	r2, [pc, #192]	; (800225c <HAL_ETH_Init+0xf4>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_ETH_Init+0xf4>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_ETH_Init+0xf8>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_ETH_Init+0xf8>)
 80021b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_ETH_Init+0xf8>)
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4927      	ldr	r1, [pc, #156]	; (8002260 <HAL_ETH_Init+0xf8>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_ETH_Init+0xf8>)
 80021ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e4:	f7ff fe7e 	bl	8001ee4 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021ea:	e011      	b.n	8002210 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021ec:	f7ff fe7a 	bl	8001ee4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021fa:	d909      	bls.n	8002210 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2204      	movs	r2, #4
 8002200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	22e0      	movs	r2, #224	; 0xe0
 8002208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e021      	b.n	8002254 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e4      	bne.n	80021ec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f958 	bl	80024d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f9ff 	bl	800262c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa55 	bl	80026de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	461a      	mov	r2, r3
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f9bd 	bl	80025bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2210      	movs	r2, #16
 800224e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	40013800 	.word	0x40013800

08002264 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <ETH_SetMACConfig+0x15c>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7c1b      	ldrb	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <ETH_SetMACConfig+0x28>
 8002286:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800228a:	e000      	b.n	800228e <ETH_SetMACConfig+0x2a>
 800228c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	7c5b      	ldrb	r3, [r3, #17]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <ETH_SetMACConfig+0x38>
 8002296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800229a:	e000      	b.n	800229e <ETH_SetMACConfig+0x3a>
 800229c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800229e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7fdb      	ldrb	r3, [r3, #31]
 80022aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	7f92      	ldrb	r2, [r2, #30]
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	d102      	bne.n	80022c2 <ETH_SetMACConfig+0x5e>
 80022bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c0:	e000      	b.n	80022c4 <ETH_SetMACConfig+0x60>
 80022c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80022c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7f1b      	ldrb	r3, [r3, #28]
 80022ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	791b      	ldrb	r3, [r3, #4]
 80022d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d102      	bne.n	80022ec <ETH_SetMACConfig+0x88>
 80022e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ea:	e000      	b.n	80022ee <ETH_SetMACConfig+0x8a>
 80022ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7bdb      	ldrb	r3, [r3, #15]
 80022f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002304:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002306:	4313      	orrs	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231e:	2001      	movs	r0, #1
 8002320:	f7ff fdec 	bl	8001efc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	f64f 7341 	movw	r3, #65345	; 0xff41
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800234a:	2a00      	cmp	r2, #0
 800234c:	d101      	bne.n	8002352 <ETH_SetMACConfig+0xee>
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	e000      	b.n	8002354 <ETH_SetMACConfig+0xf0>
 8002352:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002354:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800235a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002362:	2a01      	cmp	r2, #1
 8002364:	d101      	bne.n	800236a <ETH_SetMACConfig+0x106>
 8002366:	2208      	movs	r2, #8
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0x108>
 800236a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800236c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002374:	2a01      	cmp	r2, #1
 8002376:	d101      	bne.n	800237c <ETH_SetMACConfig+0x118>
 8002378:	2204      	movs	r2, #4
 800237a:	e000      	b.n	800237e <ETH_SetMACConfig+0x11a>
 800237c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800237e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002386:	2a01      	cmp	r2, #1
 8002388:	d101      	bne.n	800238e <ETH_SetMACConfig+0x12a>
 800238a:	2202      	movs	r2, #2
 800238c:	e000      	b.n	8002390 <ETH_SetMACConfig+0x12c>
 800238e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002390:	4313      	orrs	r3, r2
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7ff fda7 	bl	8001efc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	ff20810f 	.word	0xff20810f

080023c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <ETH_SetDMAConfig+0x110>)
 80023de:	4013      	ands	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7b1b      	ldrb	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <ETH_SetDMAConfig+0x2c>
 80023ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ee:	e000      	b.n	80023f2 <ETH_SetDMAConfig+0x2e>
 80023f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	7b5b      	ldrb	r3, [r3, #13]
 80023f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	7f52      	ldrb	r2, [r2, #29]
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d102      	bne.n	8002408 <ETH_SetDMAConfig+0x44>
 8002402:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002406:	e000      	b.n	800240a <ETH_SetDMAConfig+0x46>
 8002408:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800240a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7b9b      	ldrb	r3, [r3, #14]
 8002410:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002412:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002418:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	7f1b      	ldrb	r3, [r3, #28]
 800241e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002420:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	7f9b      	ldrb	r3, [r3, #30]
 8002426:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002428:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800242e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002436:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002438:	4313      	orrs	r3, r2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002448:	461a      	mov	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff fd4e 	bl	8001efc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	461a      	mov	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002478:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800247e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002484:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800248c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800248e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002496:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800249c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7ff fd1f 	bl	8001efc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f8de3f23 	.word	0xf8de3f23

080024d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0a6      	sub	sp, #152	; 0x98
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002514:	2300      	movs	r3, #0
 8002516:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800251e:	2300      	movs	r3, #0
 8002520:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800253a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002544:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800254c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fe86 	bl	8002264 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002558:	2301      	movs	r3, #1
 800255a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800255c:	2301      	movs	r3, #1
 800255e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002560:	2301      	movs	r3, #1
 8002562:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002566:	2301      	movs	r3, #1
 8002568:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800257a:	2300      	movs	r3, #0
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002584:	2301      	movs	r3, #1
 8002586:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800258e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002592:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002598:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff08 	bl	80023c4 <ETH_SetDMAConfig>
}
 80025b4:	bf00      	nop
 80025b6:	3798      	adds	r7, #152	; 0x98
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3305      	adds	r3, #5
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	3204      	adds	r2, #4
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <ETH_MACAddressConfig+0x68>)
 80025de:	4413      	add	r3, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3303      	adds	r3, #3
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061a      	lsls	r2, r3, #24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3302      	adds	r3, #2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3301      	adds	r3, #1
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	4313      	orrs	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <ETH_MACAddressConfig+0x6c>)
 800260e:	4413      	add	r3, r2
 8002610:	461a      	mov	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	6013      	str	r3, [r2, #0]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40028040 	.word	0x40028040
 8002628:	40028044 	.word	0x40028044

0800262c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e03e      	b.n	80026b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	3206      	adds	r2, #6
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d80c      	bhi.n	800269c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68d9      	ldr	r1, [r3, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	e004      	b.n	80026a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d9bd      	bls.n	800263a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d0:	611a      	str	r2, [r3, #16]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e046      	b.n	800277a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6919      	ldr	r1, [r3, #16]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002728:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002730:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	3212      	adds	r2, #18
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d80c      	bhi.n	800276a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6919      	ldr	r1, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	e004      	b.n	8002774 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3301      	adds	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d9b5      	bls.n	80026ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027aa:	60da      	str	r2, [r3, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e177      	b.n	8002ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 8166 	bne.w	8002abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d005      	beq.n	800280a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	2b02      	cmp	r3, #2
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80c0 	beq.w	8002abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_GPIO_Init+0x324>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a65      	ldr	r2, [pc, #404]	; (8002adc <HAL_GPIO_Init+0x324>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_GPIO_Init+0x324>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295a:	4a61      	ldr	r2, [pc, #388]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_GPIO_Init+0x32c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d037      	beq.n	80029f6 <HAL_GPIO_Init+0x23e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_GPIO_Init+0x23a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <HAL_GPIO_Init+0x236>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a55      	ldr	r2, [pc, #340]	; (8002af0 <HAL_GPIO_Init+0x338>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d025      	beq.n	80029ea <HAL_GPIO_Init+0x232>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_GPIO_Init+0x33c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01f      	beq.n	80029e6 <HAL_GPIO_Init+0x22e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a53      	ldr	r2, [pc, #332]	; (8002af8 <HAL_GPIO_Init+0x340>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d019      	beq.n	80029e2 <HAL_GPIO_Init+0x22a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x344>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x226>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_GPIO_Init+0x348>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_Init+0x222>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_GPIO_Init+0x34c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x21e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_GPIO_Init+0x350>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_Init+0x21a>
 80029ce:	2309      	movs	r3, #9
 80029d0:	e012      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029d2:	230a      	movs	r3, #10
 80029d4:	e010      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029d6:	2308      	movs	r3, #8
 80029d8:	e00e      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029da:	2307      	movs	r3, #7
 80029dc:	e00c      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029de:	2306      	movs	r3, #6
 80029e0:	e00a      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029e2:	2305      	movs	r3, #5
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f ae84 	bls.w	80027d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021400 	.word	0x40021400
 8002afc:	40021800 	.word	0x40021800
 8002b00:	40021c00 	.word	0x40021c00
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40022400 	.word	0x40022400
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f8ac 	bl	8000cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e12b      	b.n	8002dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fe9e 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd8:	f000 ff18 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a81      	ldr	r2, [pc, #516]	; (8002de8 <HAL_I2C_Init+0x274>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d807      	bhi.n	8002bf8 <HAL_I2C_Init+0x84>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a80      	ldr	r2, [pc, #512]	; (8002dec <HAL_I2C_Init+0x278>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e006      	b.n	8002c06 <HAL_I2C_Init+0x92>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <HAL_I2C_Init+0x27c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf94      	ite	ls
 8002c00:	2301      	movls	r3, #1
 8002c02:	2300      	movhi	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0e7      	b.n	8002dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a78      	ldr	r2, [pc, #480]	; (8002df4 <HAL_I2C_Init+0x280>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0c9b      	lsrs	r3, r3, #18
 8002c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a6a      	ldr	r2, [pc, #424]	; (8002de8 <HAL_I2C_Init+0x274>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d802      	bhi.n	8002c48 <HAL_I2C_Init+0xd4>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3301      	adds	r3, #1
 8002c46:	e009      	b.n	8002c5c <HAL_I2C_Init+0xe8>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	4a69      	ldr	r2, [pc, #420]	; (8002df8 <HAL_I2C_Init+0x284>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	495c      	ldr	r1, [pc, #368]	; (8002de8 <HAL_I2C_Init+0x274>)
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	d819      	bhi.n	8002cb0 <HAL_I2C_Init+0x13c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e59      	subs	r1, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8a:	1c59      	adds	r1, r3, #1
 8002c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c90:	400b      	ands	r3, r1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_I2C_Init+0x138>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e59      	subs	r1, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002caa:	e051      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002cac:	2304      	movs	r3, #4
 8002cae:	e04f      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <HAL_I2C_Init+0x168>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1e58      	subs	r0, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e012      	b.n	8002d02 <HAL_I2C_Init+0x18e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Init+0x196>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e022      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10e      	bne.n	8002d30 <HAL_I2C_Init+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e58      	subs	r0, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	e00f      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	0099      	lsls	r1, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	6809      	ldr	r1, [r1, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6911      	ldr	r1, [r2, #16]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68d2      	ldr	r2, [r2, #12]
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	000186a0 	.word	0x000186a0
 8002dec:	001e847f 	.word	0x001e847f
 8002df0:	003d08ff 	.word	0x003d08ff
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	10624dd3 	.word	0x10624dd3

08002dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d129      	bne.n	8002e66 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2224      	movs	r2, #36	; 0x24
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d12a      	bne.n	8002ee4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2224      	movs	r2, #36	; 0x24
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	f023 030f 	bic.w	r3, r3, #15
 8002eb4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	89fb      	ldrh	r3, [r7, #14]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	89fa      	ldrh	r2, [r7, #14]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef4:	b08f      	sub	sp, #60	; 0x3c
 8002ef6:	af0a      	add	r7, sp, #40	; 0x28
 8002ef8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e10f      	b.n	8003124 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fe0a 	bl	8001b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2203      	movs	r2, #3
 8002f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fca3 	bl	800488e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	687e      	ldr	r6, [r7, #4]
 8002f50:	466d      	mov	r5, sp
 8002f52:	f106 0410 	add.w	r4, r6, #16
 8002f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f66:	1d33      	adds	r3, r6, #4
 8002f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f6a:	6838      	ldr	r0, [r7, #0]
 8002f6c:	f001 fc2e 	bl	80047cc <USB_CoreInit>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0d0      	b.n	8003124 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fc91 	bl	80048b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	e04a      	b.n	800302a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	333d      	adds	r3, #61	; 0x3d
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	333c      	adds	r3, #60	; 0x3c
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	b298      	uxth	r0, r3
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	3344      	adds	r3, #68	; 0x44
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3340      	adds	r3, #64	; 0x40
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3348      	adds	r3, #72	; 0x48
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	334c      	adds	r3, #76	; 0x4c
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3354      	adds	r3, #84	; 0x54
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	3301      	adds	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	d3af      	bcc.n	8002f94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e044      	b.n	80030c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	3301      	adds	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d3b5      	bcc.n	800303a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	687e      	ldr	r6, [r7, #4]
 80030d6:	466d      	mov	r5, sp
 80030d8:	f106 0410 	add.w	r4, r6, #16
 80030dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ec:	1d33      	adds	r3, r6, #4
 80030ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f0:	6838      	ldr	r0, [r7, #0]
 80030f2:	f001 fc29 	bl	8004948 <USB_DevInit>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e00d      	b.n	8003124 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fdf4 	bl	8004d0a <USB_DevDisconnect>

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800312c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e267      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d075      	beq.n	8003236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314a:	4b88      	ldr	r3, [pc, #544]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b85      	ldr	r3, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315e:	2b08      	cmp	r3, #8
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b82      	ldr	r3, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b7e      	ldr	r3, [pc, #504]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x108>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e242      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x74>
 8003192:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a75      	ldr	r2, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b70      	ldr	r3, [pc, #448]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6f      	ldr	r2, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6d      	ldr	r3, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6c      	ldr	r2, [pc, #432]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a68      	ldr	r2, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe fe7e 	bl	8001ee4 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fe7a 	bl	8001ee4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e207      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xc0>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fe6a 	bl	8001ee4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fe66 	bl	8001ee4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1f3      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0xe8>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1c7      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4937      	ldr	r1, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x244>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fe1f 	bl	8001ee4 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fe1b 	bl	8001ee4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1a8      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4925      	ldr	r1, [pc, #148]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_OscConfig+0x244>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fdfe 	bl	8001ee4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fdfa 	bl	8001ee4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e187      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d036      	beq.n	8003384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCC_OscConfig+0x248>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fdde 	bl	8001ee4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fdda 	bl	8001ee4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e167      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x200>
 800334a:	e01b      	b.n	8003384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_OscConfig+0x248>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe fdc7 	bl	8001ee4 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	e00e      	b.n	8003378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335a:	f7fe fdc3 	bl	8001ee4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d907      	bls.n	8003378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e150      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
 800336c:	40023800 	.word	0x40023800
 8003370:	42470000 	.word	0x42470000
 8003374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ea      	bne.n	800335a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8097 	beq.w	80034c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003396:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b7d      	ldr	r3, [pc, #500]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b74      	ldr	r3, [pc, #464]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fe fd83 	bl	8001ee4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fd7f 	bl	8001ee4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e10c      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x2ea>
 8003408:	4b64      	ldr	r3, [pc, #400]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a63      	ldr	r2, [pc, #396]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x324>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x30c>
 800341e:	4b5f      	ldr	r3, [pc, #380]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a5e      	ldr	r2, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	4b5c      	ldr	r3, [pc, #368]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5b      	ldr	r2, [pc, #364]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0x324>
 8003438:	4b58      	ldr	r3, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a57      	ldr	r2, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	4b55      	ldr	r3, [pc, #340]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe fd44 	bl	8001ee4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7fe fd40 	bl	8001ee4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e0cb      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ee      	beq.n	8003460 <HAL_RCC_OscConfig+0x334>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe fd2e 	bl	8001ee4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe fd2a 	bl	8001ee4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0b5      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	4b3e      	ldr	r3, [pc, #248]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ee      	bne.n	800348c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4a38      	ldr	r2, [pc, #224]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a1 	beq.w	800360c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d05c      	beq.n	8003590 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d141      	bne.n	8003562 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fcfe 	bl	8001ee4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fcfa 	bl	8001ee4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e087      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b27      	ldr	r3, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fcd3 	bl	8001ee4 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe fccf 	bl	8001ee4 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e05c      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x416>
 8003560:	e054      	b.n	800360c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fcbc 	bl	8001ee4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fcb8 	bl	8001ee4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e045      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x444>
 800358e:	e03d      	b.n	800360c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e038      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
 800359c:	40023800 	.word	0x40023800
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x4ec>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d028      	beq.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d121      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11a      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d111      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0cc      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b68      	ldr	r3, [pc, #416]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d90c      	bls.n	8003658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0b8      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800367a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d044      	beq.n	800373c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d119      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d003      	beq.n	80036da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e067      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4934      	ldr	r1, [pc, #208]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370c:	f7fe fbea 	bl	8001ee4 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fe fbe6 	bl	8001ee4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e04f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 020c 	and.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	429a      	cmp	r2, r3
 800373a:	d1eb      	bne.n	8003714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d20c      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e032      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4916      	ldr	r1, [pc, #88]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037a2:	f000 f821 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	490a      	ldr	r1, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	5ccb      	ldrb	r3, [r1, r3]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fb4a 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023c00 	.word	0x40023c00
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08005dd4 	.word	0x08005dd4
 80037e0:	20000004 	.word	0x20000004
 80037e4:	20000008 	.word	0x20000008

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	b094      	sub	sp, #80	; 0x50
 80037ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44
 80037f4:	2300      	movs	r3, #0
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f8:	2300      	movs	r3, #0
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003800:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b08      	cmp	r3, #8
 800380a:	d00d      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x40>
 800380c:	2b08      	cmp	r3, #8
 800380e:	f200 80e1 	bhi.w	80039d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x34>
 8003816:	2b04      	cmp	r3, #4
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x3a>
 800381a:	e0db      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCC_GetSysClockFreq+0x204>)
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003820:	e0db      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003822:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003826:	e0d8      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003830:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	2200      	movs	r2, #0
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 8003848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
 8003852:	2300      	movs	r3, #0
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
 8003856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800385a:	4622      	mov	r2, r4
 800385c:	462b      	mov	r3, r5
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4621      	mov	r1, r4
 8003874:	1a51      	subs	r1, r2, r1
 8003876:	6139      	str	r1, [r7, #16]
 8003878:	4629      	mov	r1, r5
 800387a:	eb63 0301 	sbc.w	r3, r3, r1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800388c:	4659      	mov	r1, fp
 800388e:	018b      	lsls	r3, r1, #6
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003896:	4651      	mov	r1, sl
 8003898:	018a      	lsls	r2, r1, #6
 800389a:	4651      	mov	r1, sl
 800389c:	ebb2 0801 	subs.w	r8, r2, r1
 80038a0:	4659      	mov	r1, fp
 80038a2:	eb63 0901 	sbc.w	r9, r3, r1
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ba:	4690      	mov	r8, r2
 80038bc:	4699      	mov	r9, r3
 80038be:	4623      	mov	r3, r4
 80038c0:	eb18 0303 	adds.w	r3, r8, r3
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	462b      	mov	r3, r5
 80038c8:	eb49 0303 	adc.w	r3, r9, r3
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038da:	4629      	mov	r1, r5
 80038dc:	024b      	lsls	r3, r1, #9
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038e4:	4621      	mov	r1, r4
 80038e6:	024a      	lsls	r2, r1, #9
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f8:	f7fc fcca 	bl	8000290 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	e058      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	2200      	movs	r2, #0
 800390e:	4618      	mov	r0, r3
 8003910:	4611      	mov	r1, r2
 8003912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	f04f 0000 	mov.w	r0, #0
 8003928:	f04f 0100 	mov.w	r1, #0
 800392c:	0159      	lsls	r1, r3, #5
 800392e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003932:	0150      	lsls	r0, r2, #5
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4641      	mov	r1, r8
 800393a:	ebb2 0a01 	subs.w	sl, r2, r1
 800393e:	4649      	mov	r1, r9
 8003940:	eb63 0b01 	sbc.w	fp, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003958:	ebb2 040a 	subs.w	r4, r2, sl
 800395c:	eb63 050b 	sbc.w	r5, r3, fp
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	00eb      	lsls	r3, r5, #3
 800396a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396e:	00e2      	lsls	r2, r4, #3
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4643      	mov	r3, r8
 8003976:	18e3      	adds	r3, r4, r3
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	464b      	mov	r3, r9
 800397c:	eb45 0303 	adc.w	r3, r5, r3
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398e:	4629      	mov	r1, r5
 8003990:	028b      	lsls	r3, r1, #10
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003998:	4621      	mov	r1, r4
 800399a:	028a      	lsls	r2, r1, #10
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	61fa      	str	r2, [r7, #28]
 80039a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ac:	f7fc fc70 	bl	8000290 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3750      	adds	r7, #80	; 0x50
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0a9b      	lsrs	r3, r3, #10
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08005de4 	.word	0x08005de4

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a38:	f7ff ffdc 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0b5b      	lsrs	r3, r3, #13
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	08005de4 	.word	0x08005de4

08003a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07b      	b.n	8003b66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7e:	d009      	beq.n	8003a94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	61da      	str	r2, [r3, #28]
 8003a86:	e005      	b.n	8003a94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd ff92 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	ea42 0103 	orr.w	r1, r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	f003 0104 	and.w	r1, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0210 	and.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08c      	sub	sp, #48	; 0x30
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x26>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e18a      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x33c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b9c:	f7fe f9a2 	bl	8001ee4 <HAL_GetTick>
 8003ba0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d00f      	beq.n	8003bde <HAL_SPI_TransmitReceive+0x70>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc4:	d107      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x68>
 8003bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d003      	beq.n	8003bde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bdc:	e15b      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x82>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x82>
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bf6:	e14e      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2205      	movs	r2, #5
 8003c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	887a      	ldrh	r2, [r7, #2]
 8003c22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	887a      	ldrh	r2, [r7, #2]
 8003c2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d007      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	d178      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x10a>
 8003c72:	8b7b      	ldrh	r3, [r7, #26]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d166      	bne.n	8003d46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9c:	e053      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d11b      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x176>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_SPI_TransmitReceive+0x176>
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d113      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d119      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x1b8>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d014      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	b292      	uxth	r2, r2
 8003d08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d22:	2301      	movs	r3, #1
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d26:	f7fe f8dd 	bl	8001ee4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d807      	bhi.n	8003d46 <HAL_SPI_TransmitReceive+0x1d8>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d003      	beq.n	8003d46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d44:	e0a7      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1a6      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x130>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1a1      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x130>
 8003d5a:	e07c      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x1fc>
 8003d64:	8b7b      	ldrh	r3, [r7, #26]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d16b      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d90:	e057      	b.n	8003e42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d11c      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x26c>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_SPI_TransmitReceive+0x26c>
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d114      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d119      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x2ae>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d014      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e1c:	f7fe f862 	bl	8001ee4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d803      	bhi.n	8003e34 <HAL_SPI_TransmitReceive+0x2c6>
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d102      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x2cc>
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e40:	e029      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1a2      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x224>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d19d      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f8b2 	bl	8003fc4 <SPI_EndRxTxTransaction>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e72:	e010      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	e000      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3730      	adds	r7, #48	; 0x30
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ec4:	f7fe f80e 	bl	8001ee4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ed4:	f7fe f806 	bl	8001ee4 <HAL_GetTick>
 8003ed8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	015b      	lsls	r3, r3, #5
 8003ee0:	0d1b      	lsrs	r3, r3, #20
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eea:	e054      	b.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d050      	beq.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef4:	f7fd fff6 	bl	8001ee4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d902      	bls.n	8003f0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d13d      	bne.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f22:	d111      	bne.n	8003f48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2c:	d004      	beq.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d107      	bne.n	8003f48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d10f      	bne.n	8003f72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e017      	b.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d19b      	bne.n	8003eec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <SPI_EndRxTxTransaction+0x7c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <SPI_EndRxTxTransaction+0x80>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0d5b      	lsrs	r3, r3, #21
 8003fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fee:	d112      	bne.n	8004016 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7ff ff5a 	bl	8003eb4 <SPI_WaitFlagStateUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e00f      	b.n	8004036 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3b01      	subs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d0f2      	beq.n	8004016 <SPI_EndRxTxTransaction+0x52>
 8004030:	e000      	b.n	8004034 <SPI_EndRxTxTransaction+0x70>
        break;
 8004032:	bf00      	nop
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000004 	.word	0x20000004
 8004044:	165e9f81 	.word	0x165e9f81

08004048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e03f      	b.n	80040da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fd1a 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	; 0x24
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f929 	bl	80042e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08a      	sub	sp, #40	; 0x28
 80040e6:	af02      	add	r7, sp, #8
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d17c      	bne.n	80041fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_UART_Transmit+0x2c>
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e075      	b.n	80041fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UART_Transmit+0x3e>
 800411c:	2302      	movs	r3, #2
 800411e:	e06e      	b.n	80041fe <HAL_UART_Transmit+0x11c>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2221      	movs	r2, #33	; 0x21
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004136:	f7fd fed5 	bl	8001ee4 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d108      	bne.n	8004164 <HAL_UART_Transmit+0x82>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e003      	b.n	800416c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004174:	e02a      	b.n	80041cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f840 	bl	8004206 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e036      	b.n	80041fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3302      	adds	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e007      	b.n	80041be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1cf      	bne.n	8004176 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2200      	movs	r2, #0
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f810 	bl	8004206 <UART_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e006      	b.n	80041fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b090      	sub	sp, #64	; 0x40
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	e050      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d04c      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x30>
 8004226:	f7fd fe5d 	bl	8001ee4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004232:	429a      	cmp	r2, r3
 8004234:	d241      	bcs.n	80042ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004256:	637a      	str	r2, [r7, #52]	; 0x34
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800425c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	613b      	str	r3, [r7, #16]
   return(result);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800428a:	623a      	str	r2, [r7, #32]
 800428c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	69f9      	ldr	r1, [r7, #28]
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	61bb      	str	r3, [r7, #24]
   return(result);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e00f      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d09f      	beq.n	8004218 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3740      	adds	r7, #64	; 0x40
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b0c0      	sub	sp, #256	; 0x100
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	ea40 0301 	orr.w	r3, r0, r1
 800430c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	431a      	orrs	r2, r3
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800433c:	f021 010c 	bic.w	r1, r1, #12
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800434a:	430b      	orrs	r3, r1
 800434c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	6999      	ldr	r1, [r3, #24]
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	ea40 0301 	orr.w	r3, r0, r1
 800436a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b8f      	ldr	r3, [pc, #572]	; (80045b0 <UART_SetConfig+0x2cc>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d005      	beq.n	8004384 <UART_SetConfig+0xa0>
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b8d      	ldr	r3, [pc, #564]	; (80045b4 <UART_SetConfig+0x2d0>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d104      	bne.n	800438e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7ff fb56 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8004388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800438c:	e003      	b.n	8004396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800438e:	f7ff fb3d 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a0:	f040 810c 	bne.w	80045bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043be:	415b      	adcs	r3, r3
 80043c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043c6:	4621      	mov	r1, r4
 80043c8:	eb12 0801 	adds.w	r8, r2, r1
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb43 0901 	adc.w	r9, r3, r1
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043e6:	4690      	mov	r8, r2
 80043e8:	4699      	mov	r9, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	eb18 0303 	adds.w	r3, r8, r3
 80043f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043f4:	462b      	mov	r3, r5
 80043f6:	eb49 0303 	adc.w	r3, r9, r3
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800440a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800440e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004412:	460b      	mov	r3, r1
 8004414:	18db      	adds	r3, r3, r3
 8004416:	653b      	str	r3, [r7, #80]	; 0x50
 8004418:	4613      	mov	r3, r2
 800441a:	eb42 0303 	adc.w	r3, r2, r3
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004428:	f7fb ff32 	bl	8000290 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004432:	fba3 2302 	umull	r2, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	011c      	lsls	r4, r3, #4
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	1891      	adds	r1, r2, r2
 8004452:	64b9      	str	r1, [r7, #72]	; 0x48
 8004454:	415b      	adcs	r3, r3
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800445c:	4641      	mov	r1, r8
 800445e:	eb12 0a01 	adds.w	sl, r2, r1
 8004462:	4649      	mov	r1, r9
 8004464:	eb43 0b01 	adc.w	fp, r3, r1
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447c:	4692      	mov	sl, r2
 800447e:	469b      	mov	fp, r3
 8004480:	4643      	mov	r3, r8
 8004482:	eb1a 0303 	adds.w	r3, sl, r3
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800448a:	464b      	mov	r3, r9
 800448c:	eb4b 0303 	adc.w	r3, fp, r3
 8004490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044a8:	460b      	mov	r3, r1
 80044aa:	18db      	adds	r3, r3, r3
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
 80044ae:	4613      	mov	r3, r2
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
 80044b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044be:	f7fb fee7 	bl	8000290 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <UART_SetConfig+0x2d4>)
 80044ca:	fba3 2301 	umull	r2, r3, r3, r1
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2264      	movs	r2, #100	; 0x64
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	1acb      	subs	r3, r1, r3
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044de:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 2302 	umull	r2, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ec:	441c      	add	r4, r3
 80044ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	1891      	adds	r1, r2, r2
 8004506:	63b9      	str	r1, [r7, #56]	; 0x38
 8004508:	415b      	adcs	r3, r3
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004510:	4641      	mov	r1, r8
 8004512:	1851      	adds	r1, r2, r1
 8004514:	6339      	str	r1, [r7, #48]	; 0x30
 8004516:	4649      	mov	r1, r9
 8004518:	414b      	adcs	r3, r1
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004528:	4659      	mov	r1, fp
 800452a:	00cb      	lsls	r3, r1, #3
 800452c:	4651      	mov	r1, sl
 800452e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004532:	4651      	mov	r1, sl
 8004534:	00ca      	lsls	r2, r1, #3
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	4603      	mov	r3, r0
 800453c:	4642      	mov	r2, r8
 800453e:	189b      	adds	r3, r3, r2
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004544:	464b      	mov	r3, r9
 8004546:	460a      	mov	r2, r1
 8004548:	eb42 0303 	adc.w	r3, r2, r3
 800454c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800455c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800457a:	f7fb fe89 	bl	8000290 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004584:	fba3 1302 	umull	r1, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	2164      	movs	r1, #100	; 0x64
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	3332      	adds	r3, #50	; 0x32
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	f003 0207 	and.w	r2, r3, #7
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4422      	add	r2, r4
 80045aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045ac:	e105      	b.n	80047ba <UART_SetConfig+0x4d6>
 80045ae:	bf00      	nop
 80045b0:	40011000 	.word	0x40011000
 80045b4:	40011400 	.word	0x40011400
 80045b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	6239      	str	r1, [r7, #32]
 80045d6:	415b      	adcs	r3, r3
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045de:	4641      	mov	r1, r8
 80045e0:	1854      	adds	r4, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb43 0501 	adc.w	r5, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	00eb      	lsls	r3, r5, #3
 80045f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	4614      	mov	r4, r2
 80045fa:	461d      	mov	r5, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	18e3      	adds	r3, r4, r3
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004604:	464b      	mov	r3, r9
 8004606:	eb45 0303 	adc.w	r3, r5, r3
 800460a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800461a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800462a:	4629      	mov	r1, r5
 800462c:	008b      	lsls	r3, r1, #2
 800462e:	4621      	mov	r1, r4
 8004630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004634:	4621      	mov	r1, r4
 8004636:	008a      	lsls	r2, r1, #2
 8004638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800463c:	f7fb fe28 	bl	8000290 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b60      	ldr	r3, [pc, #384]	; (80047c8 <UART_SetConfig+0x4e4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011c      	lsls	r4, r3, #4
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800465c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	1891      	adds	r1, r2, r2
 8004666:	61b9      	str	r1, [r7, #24]
 8004668:	415b      	adcs	r3, r3
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004670:	4641      	mov	r1, r8
 8004672:	1851      	adds	r1, r2, r1
 8004674:	6139      	str	r1, [r7, #16]
 8004676:	4649      	mov	r1, r9
 8004678:	414b      	adcs	r3, r1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004688:	4659      	mov	r1, fp
 800468a:	00cb      	lsls	r3, r1, #3
 800468c:	4651      	mov	r1, sl
 800468e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004692:	4651      	mov	r1, sl
 8004694:	00ca      	lsls	r2, r1, #3
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	4603      	mov	r3, r0
 800469c:	4642      	mov	r2, r8
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046a4:	464b      	mov	r3, r9
 80046a6:	460a      	mov	r2, r1
 80046a8:	eb42 0303 	adc.w	r3, r2, r3
 80046ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046da:	f7fb fdd9 	bl	8000290 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <UART_SetConfig+0x4e4>)
 80046e4:	fba3 1302 	umull	r1, r3, r3, r2
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	3332      	adds	r3, #50	; 0x32
 80046f6:	4a34      	ldr	r2, [pc, #208]	; (80047c8 <UART_SetConfig+0x4e4>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004702:	441c      	add	r4, r3
 8004704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004708:	2200      	movs	r2, #0
 800470a:	673b      	str	r3, [r7, #112]	; 0x70
 800470c:	677a      	str	r2, [r7, #116]	; 0x74
 800470e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	1891      	adds	r1, r2, r2
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	415b      	adcs	r3, r3
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004722:	4641      	mov	r1, r8
 8004724:	1851      	adds	r1, r2, r1
 8004726:	6039      	str	r1, [r7, #0]
 8004728:	4649      	mov	r1, r9
 800472a:	414b      	adcs	r3, r1
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800473a:	4659      	mov	r1, fp
 800473c:	00cb      	lsls	r3, r1, #3
 800473e:	4651      	mov	r1, sl
 8004740:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004744:	4651      	mov	r1, sl
 8004746:	00ca      	lsls	r2, r1, #3
 8004748:	4610      	mov	r0, r2
 800474a:	4619      	mov	r1, r3
 800474c:	4603      	mov	r3, r0
 800474e:	4642      	mov	r2, r8
 8004750:	189b      	adds	r3, r3, r2
 8004752:	66bb      	str	r3, [r7, #104]	; 0x68
 8004754:	464b      	mov	r3, r9
 8004756:	460a      	mov	r2, r1
 8004758:	eb42 0303 	adc.w	r3, r2, r3
 800475c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	663b      	str	r3, [r7, #96]	; 0x60
 8004768:	667a      	str	r2, [r7, #100]	; 0x64
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004776:	4649      	mov	r1, r9
 8004778:	008b      	lsls	r3, r1, #2
 800477a:	4641      	mov	r1, r8
 800477c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004780:	4641      	mov	r1, r8
 8004782:	008a      	lsls	r2, r1, #2
 8004784:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004788:	f7fb fd82 	bl	8000290 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <UART_SetConfig+0x4e4>)
 8004792:	fba3 1302 	umull	r1, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2164      	movs	r1, #100	; 0x64
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <UART_SetConfig+0x4e4>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4422      	add	r2, r4
 80047b8:	609a      	str	r2, [r3, #8]
}
 80047ba:	bf00      	nop
 80047bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	51eb851f 	.word	0x51eb851f

080047cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047cc:	b084      	sub	sp, #16
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	f107 001c 	add.w	r0, r7, #28
 80047da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d122      	bne.n	800482a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 faa2 	bl	8004d68 <USB_CoreReset>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e01a      	b.n	8004860 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa96 	bl	8004d68 <USB_CoreReset>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
 8004852:	e005      	b.n	8004860 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10b      	bne.n	800487e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f043 0206 	orr.w	r2, r3, #6
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800488a:	b004      	add	sp, #16
 800488c:	4770      	bx	lr

0800488e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d115      	bne.n	80048fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048de:	2001      	movs	r0, #1
 80048e0:	f7fd fb0c 	bl	8001efc <HAL_Delay>
      ms++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa2e 	bl	8004d4c <USB_GetMode>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d01e      	beq.n	8004934 <USB_SetCurrentMode+0x84>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b31      	cmp	r3, #49	; 0x31
 80048fa:	d9f0      	bls.n	80048de <USB_SetCurrentMode+0x2e>
 80048fc:	e01a      	b.n	8004934 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d115      	bne.n	8004930 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004910:	2001      	movs	r0, #1
 8004912:	f7fd faf3 	bl	8001efc <HAL_Delay>
      ms++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa15 	bl	8004d4c <USB_GetMode>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <USB_SetCurrentMode+0x84>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b31      	cmp	r3, #49	; 0x31
 800492c:	d9f0      	bls.n	8004910 <USB_SetCurrentMode+0x60>
 800492e:	e001      	b.n	8004934 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e005      	b.n	8004940 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b32      	cmp	r3, #50	; 0x32
 8004938:	d101      	bne.n	800493e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004948:	b084      	sub	sp, #16
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	e009      	b.n	800497c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3340      	adds	r3, #64	; 0x40
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	3301      	adds	r3, #1
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0e      	cmp	r3, #14
 8004980:	d9f2      	bls.n	8004968 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11c      	bne.n	80049c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
 80049c0:	e00b      	b.n	80049da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e0:	461a      	mov	r2, r3
 80049e2:	2300      	movs	r3, #0
 80049e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ec:	4619      	mov	r1, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	461a      	mov	r2, r3
 80049f6:	680b      	ldr	r3, [r1, #0]
 80049f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10c      	bne.n	8004a1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a06:	2100      	movs	r1, #0
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f965 	bl	8004cd8 <USB_SetDevSpeed>
 8004a0e:	e008      	b.n	8004a22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a10:	2101      	movs	r1, #1
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f960 	bl	8004cd8 <USB_SetDevSpeed>
 8004a18:	e003      	b.n	8004a22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f95b 	bl	8004cd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a22:	2110      	movs	r1, #16
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f8f3 	bl	8004c10 <USB_FlushTxFifo>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f91f 	bl	8004c78 <USB_FlushRxFifo>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	461a      	mov	r2, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	461a      	mov	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e043      	b.n	8004af6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a84:	d118      	bne.n	8004ab8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e013      	b.n	8004aca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e008      	b.n	8004aca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	3301      	adds	r3, #1
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d3b7      	bcc.n	8004a6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	e043      	b.n	8004b8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1a:	d118      	bne.n	8004b4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e013      	b.n	8004b60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e008      	b.n	8004b60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3b7      	bcc.n	8004b04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f043 0210 	orr.w	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <USB_DevInit+0x2c4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f043 0208 	orr.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c08:	b004      	add	sp, #16
 8004c0a:	4770      	bx	lr
 8004c0c:	803c3800 	.word	0x803c3800

08004c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <USB_FlushTxFifo+0x64>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e01b      	b.n	8004c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	daf2      	bge.n	8004c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	019b      	lsls	r3, r3, #6
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <USB_FlushTxFifo+0x64>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e006      	b.n	8004c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d0f0      	beq.n	8004c48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	00030d40 	.word	0x00030d40

08004c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <USB_FlushRxFifo+0x5c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e018      	b.n	8004cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	daf2      	bge.n	8004c84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <USB_FlushRxFifo+0x5c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e006      	b.n	8004cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d0f0      	beq.n	8004ca8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	00030d40 	.word	0x00030d40

08004cd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d24:	f023 0303 	bic.w	r3, r3, #3
 8004d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0301 	and.w	r3, r3, #1
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <USB_CoreReset+0x64>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e01b      	b.n	8004dbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	daf2      	bge.n	8004d74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <USB_CoreReset+0x64>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e006      	b.n	8004dbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d0f0      	beq.n	8004d9e <USB_CoreReset+0x36>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	00030d40 	.word	0x00030d40

08004dd0 <__errno>:
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <__errno+0x8>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000010 	.word	0x20000010

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f000 ffae 	bl	8005d50 <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08005e8c 	.word	0x08005e8c
 8004e18:	08005e8c 	.word	0x08005e8c
 8004e1c:	08005e8c 	.word	0x08005e8c
 8004e20:	08005e90 	.word	0x08005e90

08004e24 <memset>:
 8004e24:	4402      	add	r2, r0
 8004e26:	4603      	mov	r3, r0
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <memset+0xa>
 8004e2c:	4770      	bx	lr
 8004e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e32:	e7f9      	b.n	8004e28 <memset+0x4>

08004e34 <iprintf>:
 8004e34:	b40f      	push	{r0, r1, r2, r3}
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <iprintf+0x2c>)
 8004e38:	b513      	push	{r0, r1, r4, lr}
 8004e3a:	681c      	ldr	r4, [r3, #0]
 8004e3c:	b124      	cbz	r4, 8004e48 <iprintf+0x14>
 8004e3e:	69a3      	ldr	r3, [r4, #24]
 8004e40:	b913      	cbnz	r3, 8004e48 <iprintf+0x14>
 8004e42:	4620      	mov	r0, r4
 8004e44:	f000 f866 	bl	8004f14 <__sinit>
 8004e48:	ab05      	add	r3, sp, #20
 8004e4a:	9a04      	ldr	r2, [sp, #16]
 8004e4c:	68a1      	ldr	r1, [r4, #8]
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	4620      	mov	r0, r4
 8004e52:	f000 f9bd 	bl	80051d0 <_vfiprintf_r>
 8004e56:	b002      	add	sp, #8
 8004e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e5c:	b004      	add	sp, #16
 8004e5e:	4770      	bx	lr
 8004e60:	20000010 	.word	0x20000010

08004e64 <std>:
 8004e64:	2300      	movs	r3, #0
 8004e66:	b510      	push	{r4, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e72:	6083      	str	r3, [r0, #8]
 8004e74:	8181      	strh	r1, [r0, #12]
 8004e76:	6643      	str	r3, [r0, #100]	; 0x64
 8004e78:	81c2      	strh	r2, [r0, #14]
 8004e7a:	6183      	str	r3, [r0, #24]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	2208      	movs	r2, #8
 8004e80:	305c      	adds	r0, #92	; 0x5c
 8004e82:	f7ff ffcf 	bl	8004e24 <memset>
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x38>)
 8004e88:	6263      	str	r3, [r4, #36]	; 0x24
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <std+0x3c>)
 8004e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x40>)
 8004e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <std+0x44>)
 8004e94:	6224      	str	r4, [r4, #32]
 8004e96:	6323      	str	r3, [r4, #48]	; 0x30
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08005779 	.word	0x08005779
 8004ea0:	0800579b 	.word	0x0800579b
 8004ea4:	080057d3 	.word	0x080057d3
 8004ea8:	080057f7 	.word	0x080057f7

08004eac <_cleanup_r>:
 8004eac:	4901      	ldr	r1, [pc, #4]	; (8004eb4 <_cleanup_r+0x8>)
 8004eae:	f000 b8af 	b.w	8005010 <_fwalk_reent>
 8004eb2:	bf00      	nop
 8004eb4:	08005ad1 	.word	0x08005ad1

08004eb8 <__sfmoreglue>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	2268      	movs	r2, #104	; 0x68
 8004ebc:	1e4d      	subs	r5, r1, #1
 8004ebe:	4355      	muls	r5, r2
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ec6:	f000 f8e5 	bl	8005094 <_malloc_r>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	b140      	cbz	r0, 8004ee0 <__sfmoreglue+0x28>
 8004ece:	2100      	movs	r1, #0
 8004ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ed4:	300c      	adds	r0, #12
 8004ed6:	60a0      	str	r0, [r4, #8]
 8004ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004edc:	f7ff ffa2 	bl	8004e24 <memset>
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <__sfp_lock_acquire>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__sfp_lock_acquire+0x8>)
 8004ee6:	f000 b8b3 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	2000091d 	.word	0x2000091d

08004ef0 <__sfp_lock_release>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__sfp_lock_release+0x8>)
 8004ef2:	f000 b8ae 	b.w	8005052 <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	2000091d 	.word	0x2000091d

08004efc <__sinit_lock_acquire>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__sinit_lock_acquire+0x8>)
 8004efe:	f000 b8a7 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004f02:	bf00      	nop
 8004f04:	2000091e 	.word	0x2000091e

08004f08 <__sinit_lock_release>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__sinit_lock_release+0x8>)
 8004f0a:	f000 b8a2 	b.w	8005052 <__retarget_lock_release_recursive>
 8004f0e:	bf00      	nop
 8004f10:	2000091e 	.word	0x2000091e

08004f14 <__sinit>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	f7ff fff0 	bl	8004efc <__sinit_lock_acquire>
 8004f1c:	69a3      	ldr	r3, [r4, #24]
 8004f1e:	b11b      	cbz	r3, 8004f28 <__sinit+0x14>
 8004f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f24:	f7ff bff0 	b.w	8004f08 <__sinit_lock_release>
 8004f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <__sinit+0x68>)
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <__sinit+0x6c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	bf04      	itt	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	61a3      	streq	r3, [r4, #24]
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 f820 	bl	8004f84 <__sfp>
 8004f44:	6060      	str	r0, [r4, #4]
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 f81c 	bl	8004f84 <__sfp>
 8004f4c:	60a0      	str	r0, [r4, #8]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 f818 	bl	8004f84 <__sfp>
 8004f54:	2200      	movs	r2, #0
 8004f56:	60e0      	str	r0, [r4, #12]
 8004f58:	2104      	movs	r1, #4
 8004f5a:	6860      	ldr	r0, [r4, #4]
 8004f5c:	f7ff ff82 	bl	8004e64 <std>
 8004f60:	68a0      	ldr	r0, [r4, #8]
 8004f62:	2201      	movs	r2, #1
 8004f64:	2109      	movs	r1, #9
 8004f66:	f7ff ff7d 	bl	8004e64 <std>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	2112      	movs	r1, #18
 8004f70:	f7ff ff78 	bl	8004e64 <std>
 8004f74:	2301      	movs	r3, #1
 8004f76:	61a3      	str	r3, [r4, #24]
 8004f78:	e7d2      	b.n	8004f20 <__sinit+0xc>
 8004f7a:	bf00      	nop
 8004f7c:	08005dec 	.word	0x08005dec
 8004f80:	08004ead 	.word	0x08004ead

08004f84 <__sfp>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	4607      	mov	r7, r0
 8004f88:	f7ff ffac 	bl	8004ee4 <__sfp_lock_acquire>
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <__sfp+0x84>)
 8004f8e:	681e      	ldr	r6, [r3, #0]
 8004f90:	69b3      	ldr	r3, [r6, #24]
 8004f92:	b913      	cbnz	r3, 8004f9a <__sfp+0x16>
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff ffbd 	bl	8004f14 <__sinit>
 8004f9a:	3648      	adds	r6, #72	; 0x48
 8004f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	d503      	bpl.n	8004fac <__sfp+0x28>
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	b30b      	cbz	r3, 8004fec <__sfp+0x68>
 8004fa8:	6836      	ldr	r6, [r6, #0]
 8004faa:	e7f7      	b.n	8004f9c <__sfp+0x18>
 8004fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fb0:	b9d5      	cbnz	r5, 8004fe8 <__sfp+0x64>
 8004fb2:	4b16      	ldr	r3, [pc, #88]	; (800500c <__sfp+0x88>)
 8004fb4:	60e3      	str	r3, [r4, #12]
 8004fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fba:	6665      	str	r5, [r4, #100]	; 0x64
 8004fbc:	f000 f847 	bl	800504e <__retarget_lock_init_recursive>
 8004fc0:	f7ff ff96 	bl	8004ef0 <__sfp_lock_release>
 8004fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fcc:	6025      	str	r5, [r4, #0]
 8004fce:	61a5      	str	r5, [r4, #24]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fd8:	f7ff ff24 	bl	8004e24 <memset>
 8004fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe8:	3468      	adds	r4, #104	; 0x68
 8004fea:	e7d9      	b.n	8004fa0 <__sfp+0x1c>
 8004fec:	2104      	movs	r1, #4
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f7ff ff62 	bl	8004eb8 <__sfmoreglue>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	6030      	str	r0, [r6, #0]
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1d5      	bne.n	8004fa8 <__sfp+0x24>
 8004ffc:	f7ff ff78 	bl	8004ef0 <__sfp_lock_release>
 8005000:	230c      	movs	r3, #12
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	e7ee      	b.n	8004fe4 <__sfp+0x60>
 8005006:	bf00      	nop
 8005008:	08005dec 	.word	0x08005dec
 800500c:	ffff0001 	.word	0xffff0001

08005010 <_fwalk_reent>:
 8005010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005014:	4606      	mov	r6, r0
 8005016:	4688      	mov	r8, r1
 8005018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800501c:	2700      	movs	r7, #0
 800501e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005022:	f1b9 0901 	subs.w	r9, r9, #1
 8005026:	d505      	bpl.n	8005034 <_fwalk_reent+0x24>
 8005028:	6824      	ldr	r4, [r4, #0]
 800502a:	2c00      	cmp	r4, #0
 800502c:	d1f7      	bne.n	800501e <_fwalk_reent+0xe>
 800502e:	4638      	mov	r0, r7
 8005030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005034:	89ab      	ldrh	r3, [r5, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d907      	bls.n	800504a <_fwalk_reent+0x3a>
 800503a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800503e:	3301      	adds	r3, #1
 8005040:	d003      	beq.n	800504a <_fwalk_reent+0x3a>
 8005042:	4629      	mov	r1, r5
 8005044:	4630      	mov	r0, r6
 8005046:	47c0      	blx	r8
 8005048:	4307      	orrs	r7, r0
 800504a:	3568      	adds	r5, #104	; 0x68
 800504c:	e7e9      	b.n	8005022 <_fwalk_reent+0x12>

0800504e <__retarget_lock_init_recursive>:
 800504e:	4770      	bx	lr

08005050 <__retarget_lock_acquire_recursive>:
 8005050:	4770      	bx	lr

08005052 <__retarget_lock_release_recursive>:
 8005052:	4770      	bx	lr

08005054 <sbrk_aligned>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	4e0e      	ldr	r6, [pc, #56]	; (8005090 <sbrk_aligned+0x3c>)
 8005058:	460c      	mov	r4, r1
 800505a:	6831      	ldr	r1, [r6, #0]
 800505c:	4605      	mov	r5, r0
 800505e:	b911      	cbnz	r1, 8005066 <sbrk_aligned+0x12>
 8005060:	f000 fb7a 	bl	8005758 <_sbrk_r>
 8005064:	6030      	str	r0, [r6, #0]
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f000 fb75 	bl	8005758 <_sbrk_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	d00a      	beq.n	8005088 <sbrk_aligned+0x34>
 8005072:	1cc4      	adds	r4, r0, #3
 8005074:	f024 0403 	bic.w	r4, r4, #3
 8005078:	42a0      	cmp	r0, r4
 800507a:	d007      	beq.n	800508c <sbrk_aligned+0x38>
 800507c:	1a21      	subs	r1, r4, r0
 800507e:	4628      	mov	r0, r5
 8005080:	f000 fb6a 	bl	8005758 <_sbrk_r>
 8005084:	3001      	adds	r0, #1
 8005086:	d101      	bne.n	800508c <sbrk_aligned+0x38>
 8005088:	f04f 34ff 	mov.w	r4, #4294967295
 800508c:	4620      	mov	r0, r4
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	20000924 	.word	0x20000924

08005094 <_malloc_r>:
 8005094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005098:	1ccd      	adds	r5, r1, #3
 800509a:	f025 0503 	bic.w	r5, r5, #3
 800509e:	3508      	adds	r5, #8
 80050a0:	2d0c      	cmp	r5, #12
 80050a2:	bf38      	it	cc
 80050a4:	250c      	movcc	r5, #12
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	4607      	mov	r7, r0
 80050aa:	db01      	blt.n	80050b0 <_malloc_r+0x1c>
 80050ac:	42a9      	cmp	r1, r5
 80050ae:	d905      	bls.n	80050bc <_malloc_r+0x28>
 80050b0:	230c      	movs	r3, #12
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	2600      	movs	r6, #0
 80050b6:	4630      	mov	r0, r6
 80050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050bc:	4e2e      	ldr	r6, [pc, #184]	; (8005178 <_malloc_r+0xe4>)
 80050be:	f000 fdbb 	bl	8005c38 <__malloc_lock>
 80050c2:	6833      	ldr	r3, [r6, #0]
 80050c4:	461c      	mov	r4, r3
 80050c6:	bb34      	cbnz	r4, 8005116 <_malloc_r+0x82>
 80050c8:	4629      	mov	r1, r5
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff ffc2 	bl	8005054 <sbrk_aligned>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	4604      	mov	r4, r0
 80050d4:	d14d      	bne.n	8005172 <_malloc_r+0xde>
 80050d6:	6834      	ldr	r4, [r6, #0]
 80050d8:	4626      	mov	r6, r4
 80050da:	2e00      	cmp	r6, #0
 80050dc:	d140      	bne.n	8005160 <_malloc_r+0xcc>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4631      	mov	r1, r6
 80050e2:	4638      	mov	r0, r7
 80050e4:	eb04 0803 	add.w	r8, r4, r3
 80050e8:	f000 fb36 	bl	8005758 <_sbrk_r>
 80050ec:	4580      	cmp	r8, r0
 80050ee:	d13a      	bne.n	8005166 <_malloc_r+0xd2>
 80050f0:	6821      	ldr	r1, [r4, #0]
 80050f2:	3503      	adds	r5, #3
 80050f4:	1a6d      	subs	r5, r5, r1
 80050f6:	f025 0503 	bic.w	r5, r5, #3
 80050fa:	3508      	adds	r5, #8
 80050fc:	2d0c      	cmp	r5, #12
 80050fe:	bf38      	it	cc
 8005100:	250c      	movcc	r5, #12
 8005102:	4629      	mov	r1, r5
 8005104:	4638      	mov	r0, r7
 8005106:	f7ff ffa5 	bl	8005054 <sbrk_aligned>
 800510a:	3001      	adds	r0, #1
 800510c:	d02b      	beq.n	8005166 <_malloc_r+0xd2>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	442b      	add	r3, r5
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	e00e      	b.n	8005134 <_malloc_r+0xa0>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	1b52      	subs	r2, r2, r5
 800511a:	d41e      	bmi.n	800515a <_malloc_r+0xc6>
 800511c:	2a0b      	cmp	r2, #11
 800511e:	d916      	bls.n	800514e <_malloc_r+0xba>
 8005120:	1961      	adds	r1, r4, r5
 8005122:	42a3      	cmp	r3, r4
 8005124:	6025      	str	r5, [r4, #0]
 8005126:	bf18      	it	ne
 8005128:	6059      	strne	r1, [r3, #4]
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	bf08      	it	eq
 800512e:	6031      	streq	r1, [r6, #0]
 8005130:	5162      	str	r2, [r4, r5]
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	4638      	mov	r0, r7
 8005136:	f104 060b 	add.w	r6, r4, #11
 800513a:	f000 fd83 	bl	8005c44 <__malloc_unlock>
 800513e:	f026 0607 	bic.w	r6, r6, #7
 8005142:	1d23      	adds	r3, r4, #4
 8005144:	1af2      	subs	r2, r6, r3
 8005146:	d0b6      	beq.n	80050b6 <_malloc_r+0x22>
 8005148:	1b9b      	subs	r3, r3, r6
 800514a:	50a3      	str	r3, [r4, r2]
 800514c:	e7b3      	b.n	80050b6 <_malloc_r+0x22>
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	42a3      	cmp	r3, r4
 8005152:	bf0c      	ite	eq
 8005154:	6032      	streq	r2, [r6, #0]
 8005156:	605a      	strne	r2, [r3, #4]
 8005158:	e7ec      	b.n	8005134 <_malloc_r+0xa0>
 800515a:	4623      	mov	r3, r4
 800515c:	6864      	ldr	r4, [r4, #4]
 800515e:	e7b2      	b.n	80050c6 <_malloc_r+0x32>
 8005160:	4634      	mov	r4, r6
 8005162:	6876      	ldr	r6, [r6, #4]
 8005164:	e7b9      	b.n	80050da <_malloc_r+0x46>
 8005166:	230c      	movs	r3, #12
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4638      	mov	r0, r7
 800516c:	f000 fd6a 	bl	8005c44 <__malloc_unlock>
 8005170:	e7a1      	b.n	80050b6 <_malloc_r+0x22>
 8005172:	6025      	str	r5, [r4, #0]
 8005174:	e7de      	b.n	8005134 <_malloc_r+0xa0>
 8005176:	bf00      	nop
 8005178:	20000920 	.word	0x20000920

0800517c <__sfputc_r>:
 800517c:	6893      	ldr	r3, [r2, #8]
 800517e:	3b01      	subs	r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	b410      	push	{r4}
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	da08      	bge.n	800519a <__sfputc_r+0x1e>
 8005188:	6994      	ldr	r4, [r2, #24]
 800518a:	42a3      	cmp	r3, r4
 800518c:	db01      	blt.n	8005192 <__sfputc_r+0x16>
 800518e:	290a      	cmp	r1, #10
 8005190:	d103      	bne.n	800519a <__sfputc_r+0x1e>
 8005192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005196:	f000 bb33 	b.w	8005800 <__swbuf_r>
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	1c58      	adds	r0, r3, #1
 800519e:	6010      	str	r0, [r2, #0]
 80051a0:	7019      	strb	r1, [r3, #0]
 80051a2:	4608      	mov	r0, r1
 80051a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <__sfputs_r>:
 80051aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ac:	4606      	mov	r6, r0
 80051ae:	460f      	mov	r7, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	18d5      	adds	r5, r2, r3
 80051b4:	42ac      	cmp	r4, r5
 80051b6:	d101      	bne.n	80051bc <__sfputs_r+0x12>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e007      	b.n	80051cc <__sfputs_r+0x22>
 80051bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c0:	463a      	mov	r2, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff ffda 	bl	800517c <__sfputc_r>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d1f3      	bne.n	80051b4 <__sfputs_r+0xa>
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051d0 <_vfiprintf_r>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	460d      	mov	r5, r1
 80051d6:	b09d      	sub	sp, #116	; 0x74
 80051d8:	4614      	mov	r4, r2
 80051da:	4698      	mov	r8, r3
 80051dc:	4606      	mov	r6, r0
 80051de:	b118      	cbz	r0, 80051e8 <_vfiprintf_r+0x18>
 80051e0:	6983      	ldr	r3, [r0, #24]
 80051e2:	b90b      	cbnz	r3, 80051e8 <_vfiprintf_r+0x18>
 80051e4:	f7ff fe96 	bl	8004f14 <__sinit>
 80051e8:	4b89      	ldr	r3, [pc, #548]	; (8005410 <_vfiprintf_r+0x240>)
 80051ea:	429d      	cmp	r5, r3
 80051ec:	d11b      	bne.n	8005226 <_vfiprintf_r+0x56>
 80051ee:	6875      	ldr	r5, [r6, #4]
 80051f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d405      	bmi.n	8005202 <_vfiprintf_r+0x32>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	059a      	lsls	r2, r3, #22
 80051fa:	d402      	bmi.n	8005202 <_vfiprintf_r+0x32>
 80051fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051fe:	f7ff ff27 	bl	8005050 <__retarget_lock_acquire_recursive>
 8005202:	89ab      	ldrh	r3, [r5, #12]
 8005204:	071b      	lsls	r3, r3, #28
 8005206:	d501      	bpl.n	800520c <_vfiprintf_r+0x3c>
 8005208:	692b      	ldr	r3, [r5, #16]
 800520a:	b9eb      	cbnz	r3, 8005248 <_vfiprintf_r+0x78>
 800520c:	4629      	mov	r1, r5
 800520e:	4630      	mov	r0, r6
 8005210:	f000 fb5a 	bl	80058c8 <__swsetup_r>
 8005214:	b1c0      	cbz	r0, 8005248 <_vfiprintf_r+0x78>
 8005216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005218:	07dc      	lsls	r4, r3, #31
 800521a:	d50e      	bpl.n	800523a <_vfiprintf_r+0x6a>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	b01d      	add	sp, #116	; 0x74
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	4b7b      	ldr	r3, [pc, #492]	; (8005414 <_vfiprintf_r+0x244>)
 8005228:	429d      	cmp	r5, r3
 800522a:	d101      	bne.n	8005230 <_vfiprintf_r+0x60>
 800522c:	68b5      	ldr	r5, [r6, #8]
 800522e:	e7df      	b.n	80051f0 <_vfiprintf_r+0x20>
 8005230:	4b79      	ldr	r3, [pc, #484]	; (8005418 <_vfiprintf_r+0x248>)
 8005232:	429d      	cmp	r5, r3
 8005234:	bf08      	it	eq
 8005236:	68f5      	ldreq	r5, [r6, #12]
 8005238:	e7da      	b.n	80051f0 <_vfiprintf_r+0x20>
 800523a:	89ab      	ldrh	r3, [r5, #12]
 800523c:	0598      	lsls	r0, r3, #22
 800523e:	d4ed      	bmi.n	800521c <_vfiprintf_r+0x4c>
 8005240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005242:	f7ff ff06 	bl	8005052 <__retarget_lock_release_recursive>
 8005246:	e7e9      	b.n	800521c <_vfiprintf_r+0x4c>
 8005248:	2300      	movs	r3, #0
 800524a:	9309      	str	r3, [sp, #36]	; 0x24
 800524c:	2320      	movs	r3, #32
 800524e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005252:	f8cd 800c 	str.w	r8, [sp, #12]
 8005256:	2330      	movs	r3, #48	; 0x30
 8005258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800541c <_vfiprintf_r+0x24c>
 800525c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005260:	f04f 0901 	mov.w	r9, #1
 8005264:	4623      	mov	r3, r4
 8005266:	469a      	mov	sl, r3
 8005268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526c:	b10a      	cbz	r2, 8005272 <_vfiprintf_r+0xa2>
 800526e:	2a25      	cmp	r2, #37	; 0x25
 8005270:	d1f9      	bne.n	8005266 <_vfiprintf_r+0x96>
 8005272:	ebba 0b04 	subs.w	fp, sl, r4
 8005276:	d00b      	beq.n	8005290 <_vfiprintf_r+0xc0>
 8005278:	465b      	mov	r3, fp
 800527a:	4622      	mov	r2, r4
 800527c:	4629      	mov	r1, r5
 800527e:	4630      	mov	r0, r6
 8005280:	f7ff ff93 	bl	80051aa <__sfputs_r>
 8005284:	3001      	adds	r0, #1
 8005286:	f000 80aa 	beq.w	80053de <_vfiprintf_r+0x20e>
 800528a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800528c:	445a      	add	r2, fp
 800528e:	9209      	str	r2, [sp, #36]	; 0x24
 8005290:	f89a 3000 	ldrb.w	r3, [sl]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a2 	beq.w	80053de <_vfiprintf_r+0x20e>
 800529a:	2300      	movs	r3, #0
 800529c:	f04f 32ff 	mov.w	r2, #4294967295
 80052a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a4:	f10a 0a01 	add.w	sl, sl, #1
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	9307      	str	r3, [sp, #28]
 80052ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b0:	931a      	str	r3, [sp, #104]	; 0x68
 80052b2:	4654      	mov	r4, sl
 80052b4:	2205      	movs	r2, #5
 80052b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ba:	4858      	ldr	r0, [pc, #352]	; (800541c <_vfiprintf_r+0x24c>)
 80052bc:	f7fa ff98 	bl	80001f0 <memchr>
 80052c0:	9a04      	ldr	r2, [sp, #16]
 80052c2:	b9d8      	cbnz	r0, 80052fc <_vfiprintf_r+0x12c>
 80052c4:	06d1      	lsls	r1, r2, #27
 80052c6:	bf44      	itt	mi
 80052c8:	2320      	movmi	r3, #32
 80052ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ce:	0713      	lsls	r3, r2, #28
 80052d0:	bf44      	itt	mi
 80052d2:	232b      	movmi	r3, #43	; 0x2b
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d8:	f89a 3000 	ldrb.w	r3, [sl]
 80052dc:	2b2a      	cmp	r3, #42	; 0x2a
 80052de:	d015      	beq.n	800530c <_vfiprintf_r+0x13c>
 80052e0:	9a07      	ldr	r2, [sp, #28]
 80052e2:	4654      	mov	r4, sl
 80052e4:	2000      	movs	r0, #0
 80052e6:	f04f 0c0a 	mov.w	ip, #10
 80052ea:	4621      	mov	r1, r4
 80052ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f0:	3b30      	subs	r3, #48	; 0x30
 80052f2:	2b09      	cmp	r3, #9
 80052f4:	d94e      	bls.n	8005394 <_vfiprintf_r+0x1c4>
 80052f6:	b1b0      	cbz	r0, 8005326 <_vfiprintf_r+0x156>
 80052f8:	9207      	str	r2, [sp, #28]
 80052fa:	e014      	b.n	8005326 <_vfiprintf_r+0x156>
 80052fc:	eba0 0308 	sub.w	r3, r0, r8
 8005300:	fa09 f303 	lsl.w	r3, r9, r3
 8005304:	4313      	orrs	r3, r2
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	46a2      	mov	sl, r4
 800530a:	e7d2      	b.n	80052b2 <_vfiprintf_r+0xe2>
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	1d19      	adds	r1, r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	9103      	str	r1, [sp, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	bfbb      	ittet	lt
 8005318:	425b      	neglt	r3, r3
 800531a:	f042 0202 	orrlt.w	r2, r2, #2
 800531e:	9307      	strge	r3, [sp, #28]
 8005320:	9307      	strlt	r3, [sp, #28]
 8005322:	bfb8      	it	lt
 8005324:	9204      	strlt	r2, [sp, #16]
 8005326:	7823      	ldrb	r3, [r4, #0]
 8005328:	2b2e      	cmp	r3, #46	; 0x2e
 800532a:	d10c      	bne.n	8005346 <_vfiprintf_r+0x176>
 800532c:	7863      	ldrb	r3, [r4, #1]
 800532e:	2b2a      	cmp	r3, #42	; 0x2a
 8005330:	d135      	bne.n	800539e <_vfiprintf_r+0x1ce>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	1d1a      	adds	r2, r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	9203      	str	r2, [sp, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfb8      	it	lt
 800533e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005342:	3402      	adds	r4, #2
 8005344:	9305      	str	r3, [sp, #20]
 8005346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800542c <_vfiprintf_r+0x25c>
 800534a:	7821      	ldrb	r1, [r4, #0]
 800534c:	2203      	movs	r2, #3
 800534e:	4650      	mov	r0, sl
 8005350:	f7fa ff4e 	bl	80001f0 <memchr>
 8005354:	b140      	cbz	r0, 8005368 <_vfiprintf_r+0x198>
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	eba0 000a 	sub.w	r0, r0, sl
 800535c:	fa03 f000 	lsl.w	r0, r3, r0
 8005360:	9b04      	ldr	r3, [sp, #16]
 8005362:	4303      	orrs	r3, r0
 8005364:	3401      	adds	r4, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536c:	482c      	ldr	r0, [pc, #176]	; (8005420 <_vfiprintf_r+0x250>)
 800536e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005372:	2206      	movs	r2, #6
 8005374:	f7fa ff3c 	bl	80001f0 <memchr>
 8005378:	2800      	cmp	r0, #0
 800537a:	d03f      	beq.n	80053fc <_vfiprintf_r+0x22c>
 800537c:	4b29      	ldr	r3, [pc, #164]	; (8005424 <_vfiprintf_r+0x254>)
 800537e:	bb1b      	cbnz	r3, 80053c8 <_vfiprintf_r+0x1f8>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	3307      	adds	r3, #7
 8005384:	f023 0307 	bic.w	r3, r3, #7
 8005388:	3308      	adds	r3, #8
 800538a:	9303      	str	r3, [sp, #12]
 800538c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538e:	443b      	add	r3, r7
 8005390:	9309      	str	r3, [sp, #36]	; 0x24
 8005392:	e767      	b.n	8005264 <_vfiprintf_r+0x94>
 8005394:	fb0c 3202 	mla	r2, ip, r2, r3
 8005398:	460c      	mov	r4, r1
 800539a:	2001      	movs	r0, #1
 800539c:	e7a5      	b.n	80052ea <_vfiprintf_r+0x11a>
 800539e:	2300      	movs	r3, #0
 80053a0:	3401      	adds	r4, #1
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	4619      	mov	r1, r3
 80053a6:	f04f 0c0a 	mov.w	ip, #10
 80053aa:	4620      	mov	r0, r4
 80053ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b0:	3a30      	subs	r2, #48	; 0x30
 80053b2:	2a09      	cmp	r2, #9
 80053b4:	d903      	bls.n	80053be <_vfiprintf_r+0x1ee>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0c5      	beq.n	8005346 <_vfiprintf_r+0x176>
 80053ba:	9105      	str	r1, [sp, #20]
 80053bc:	e7c3      	b.n	8005346 <_vfiprintf_r+0x176>
 80053be:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c2:	4604      	mov	r4, r0
 80053c4:	2301      	movs	r3, #1
 80053c6:	e7f0      	b.n	80053aa <_vfiprintf_r+0x1da>
 80053c8:	ab03      	add	r3, sp, #12
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	462a      	mov	r2, r5
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <_vfiprintf_r+0x258>)
 80053d0:	a904      	add	r1, sp, #16
 80053d2:	4630      	mov	r0, r6
 80053d4:	f3af 8000 	nop.w
 80053d8:	4607      	mov	r7, r0
 80053da:	1c78      	adds	r0, r7, #1
 80053dc:	d1d6      	bne.n	800538c <_vfiprintf_r+0x1bc>
 80053de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e0:	07d9      	lsls	r1, r3, #31
 80053e2:	d405      	bmi.n	80053f0 <_vfiprintf_r+0x220>
 80053e4:	89ab      	ldrh	r3, [r5, #12]
 80053e6:	059a      	lsls	r2, r3, #22
 80053e8:	d402      	bmi.n	80053f0 <_vfiprintf_r+0x220>
 80053ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ec:	f7ff fe31 	bl	8005052 <__retarget_lock_release_recursive>
 80053f0:	89ab      	ldrh	r3, [r5, #12]
 80053f2:	065b      	lsls	r3, r3, #25
 80053f4:	f53f af12 	bmi.w	800521c <_vfiprintf_r+0x4c>
 80053f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053fa:	e711      	b.n	8005220 <_vfiprintf_r+0x50>
 80053fc:	ab03      	add	r3, sp, #12
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	462a      	mov	r2, r5
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <_vfiprintf_r+0x258>)
 8005404:	a904      	add	r1, sp, #16
 8005406:	4630      	mov	r0, r6
 8005408:	f000 f880 	bl	800550c <_printf_i>
 800540c:	e7e4      	b.n	80053d8 <_vfiprintf_r+0x208>
 800540e:	bf00      	nop
 8005410:	08005e10 	.word	0x08005e10
 8005414:	08005e30 	.word	0x08005e30
 8005418:	08005df0 	.word	0x08005df0
 800541c:	08005e50 	.word	0x08005e50
 8005420:	08005e5a 	.word	0x08005e5a
 8005424:	00000000 	.word	0x00000000
 8005428:	080051ab 	.word	0x080051ab
 800542c:	08005e56 	.word	0x08005e56

08005430 <_printf_common>:
 8005430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	4616      	mov	r6, r2
 8005436:	4699      	mov	r9, r3
 8005438:	688a      	ldr	r2, [r1, #8]
 800543a:	690b      	ldr	r3, [r1, #16]
 800543c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005440:	4293      	cmp	r3, r2
 8005442:	bfb8      	it	lt
 8005444:	4613      	movlt	r3, r2
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800544c:	4607      	mov	r7, r0
 800544e:	460c      	mov	r4, r1
 8005450:	b10a      	cbz	r2, 8005456 <_printf_common+0x26>
 8005452:	3301      	adds	r3, #1
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0699      	lsls	r1, r3, #26
 800545a:	bf42      	ittt	mi
 800545c:	6833      	ldrmi	r3, [r6, #0]
 800545e:	3302      	addmi	r3, #2
 8005460:	6033      	strmi	r3, [r6, #0]
 8005462:	6825      	ldr	r5, [r4, #0]
 8005464:	f015 0506 	ands.w	r5, r5, #6
 8005468:	d106      	bne.n	8005478 <_printf_common+0x48>
 800546a:	f104 0a19 	add.w	sl, r4, #25
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	6832      	ldr	r2, [r6, #0]
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	42ab      	cmp	r3, r5
 8005476:	dc26      	bgt.n	80054c6 <_printf_common+0x96>
 8005478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800547c:	1e13      	subs	r3, r2, #0
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	bf18      	it	ne
 8005482:	2301      	movne	r3, #1
 8005484:	0692      	lsls	r2, r2, #26
 8005486:	d42b      	bmi.n	80054e0 <_printf_common+0xb0>
 8005488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800548c:	4649      	mov	r1, r9
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	3001      	adds	r0, #1
 8005494:	d01e      	beq.n	80054d4 <_printf_common+0xa4>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	68e5      	ldr	r5, [r4, #12]
 800549a:	6832      	ldr	r2, [r6, #0]
 800549c:	f003 0306 	and.w	r3, r3, #6
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	bf08      	it	eq
 80054a4:	1aad      	subeq	r5, r5, r2
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	6922      	ldr	r2, [r4, #16]
 80054aa:	bf0c      	ite	eq
 80054ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b0:	2500      	movne	r5, #0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bfc4      	itt	gt
 80054b6:	1a9b      	subgt	r3, r3, r2
 80054b8:	18ed      	addgt	r5, r5, r3
 80054ba:	2600      	movs	r6, #0
 80054bc:	341a      	adds	r4, #26
 80054be:	42b5      	cmp	r5, r6
 80054c0:	d11a      	bne.n	80054f8 <_printf_common+0xc8>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e008      	b.n	80054d8 <_printf_common+0xa8>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	4649      	mov	r1, r9
 80054cc:	4638      	mov	r0, r7
 80054ce:	47c0      	blx	r8
 80054d0:	3001      	adds	r0, #1
 80054d2:	d103      	bne.n	80054dc <_printf_common+0xac>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	3501      	adds	r5, #1
 80054de:	e7c6      	b.n	800546e <_printf_common+0x3e>
 80054e0:	18e1      	adds	r1, r4, r3
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	2030      	movs	r0, #48	; 0x30
 80054e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ea:	4422      	add	r2, r4
 80054ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f4:	3302      	adds	r3, #2
 80054f6:	e7c7      	b.n	8005488 <_printf_common+0x58>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4622      	mov	r2, r4
 80054fc:	4649      	mov	r1, r9
 80054fe:	4638      	mov	r0, r7
 8005500:	47c0      	blx	r8
 8005502:	3001      	adds	r0, #1
 8005504:	d0e6      	beq.n	80054d4 <_printf_common+0xa4>
 8005506:	3601      	adds	r6, #1
 8005508:	e7d9      	b.n	80054be <_printf_common+0x8e>
	...

0800550c <_printf_i>:
 800550c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	7e0f      	ldrb	r7, [r1, #24]
 8005512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005514:	2f78      	cmp	r7, #120	; 0x78
 8005516:	4691      	mov	r9, r2
 8005518:	4680      	mov	r8, r0
 800551a:	460c      	mov	r4, r1
 800551c:	469a      	mov	sl, r3
 800551e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005522:	d807      	bhi.n	8005534 <_printf_i+0x28>
 8005524:	2f62      	cmp	r7, #98	; 0x62
 8005526:	d80a      	bhi.n	800553e <_printf_i+0x32>
 8005528:	2f00      	cmp	r7, #0
 800552a:	f000 80d8 	beq.w	80056de <_printf_i+0x1d2>
 800552e:	2f58      	cmp	r7, #88	; 0x58
 8005530:	f000 80a3 	beq.w	800567a <_printf_i+0x16e>
 8005534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800553c:	e03a      	b.n	80055b4 <_printf_i+0xa8>
 800553e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005542:	2b15      	cmp	r3, #21
 8005544:	d8f6      	bhi.n	8005534 <_printf_i+0x28>
 8005546:	a101      	add	r1, pc, #4	; (adr r1, 800554c <_printf_i+0x40>)
 8005548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055b9 	.word	0x080055b9
 8005554:	08005535 	.word	0x08005535
 8005558:	08005535 	.word	0x08005535
 800555c:	08005535 	.word	0x08005535
 8005560:	08005535 	.word	0x08005535
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005535 	.word	0x08005535
 800556c:	08005535 	.word	0x08005535
 8005570:	08005535 	.word	0x08005535
 8005574:	08005535 	.word	0x08005535
 8005578:	080056c5 	.word	0x080056c5
 800557c:	080055e9 	.word	0x080055e9
 8005580:	080056a7 	.word	0x080056a7
 8005584:	08005535 	.word	0x08005535
 8005588:	08005535 	.word	0x08005535
 800558c:	080056e7 	.word	0x080056e7
 8005590:	08005535 	.word	0x08005535
 8005594:	080055e9 	.word	0x080055e9
 8005598:	08005535 	.word	0x08005535
 800559c:	08005535 	.word	0x08005535
 80055a0:	080056af 	.word	0x080056af
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	602a      	str	r2, [r5, #0]
 80055ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0a3      	b.n	8005700 <_printf_i+0x1f4>
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	6829      	ldr	r1, [r5, #0]
 80055bc:	0606      	lsls	r6, r0, #24
 80055be:	f101 0304 	add.w	r3, r1, #4
 80055c2:	d50a      	bpl.n	80055da <_printf_i+0xce>
 80055c4:	680e      	ldr	r6, [r1, #0]
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	2e00      	cmp	r6, #0
 80055ca:	da03      	bge.n	80055d4 <_printf_i+0xc8>
 80055cc:	232d      	movs	r3, #45	; 0x2d
 80055ce:	4276      	negs	r6, r6
 80055d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d4:	485e      	ldr	r0, [pc, #376]	; (8005750 <_printf_i+0x244>)
 80055d6:	230a      	movs	r3, #10
 80055d8:	e019      	b.n	800560e <_printf_i+0x102>
 80055da:	680e      	ldr	r6, [r1, #0]
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055e2:	bf18      	it	ne
 80055e4:	b236      	sxthne	r6, r6
 80055e6:	e7ef      	b.n	80055c8 <_printf_i+0xbc>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	1d19      	adds	r1, r3, #4
 80055ee:	6029      	str	r1, [r5, #0]
 80055f0:	0601      	lsls	r1, r0, #24
 80055f2:	d501      	bpl.n	80055f8 <_printf_i+0xec>
 80055f4:	681e      	ldr	r6, [r3, #0]
 80055f6:	e002      	b.n	80055fe <_printf_i+0xf2>
 80055f8:	0646      	lsls	r6, r0, #25
 80055fa:	d5fb      	bpl.n	80055f4 <_printf_i+0xe8>
 80055fc:	881e      	ldrh	r6, [r3, #0]
 80055fe:	4854      	ldr	r0, [pc, #336]	; (8005750 <_printf_i+0x244>)
 8005600:	2f6f      	cmp	r7, #111	; 0x6f
 8005602:	bf0c      	ite	eq
 8005604:	2308      	moveq	r3, #8
 8005606:	230a      	movne	r3, #10
 8005608:	2100      	movs	r1, #0
 800560a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800560e:	6865      	ldr	r5, [r4, #4]
 8005610:	60a5      	str	r5, [r4, #8]
 8005612:	2d00      	cmp	r5, #0
 8005614:	bfa2      	ittt	ge
 8005616:	6821      	ldrge	r1, [r4, #0]
 8005618:	f021 0104 	bicge.w	r1, r1, #4
 800561c:	6021      	strge	r1, [r4, #0]
 800561e:	b90e      	cbnz	r6, 8005624 <_printf_i+0x118>
 8005620:	2d00      	cmp	r5, #0
 8005622:	d04d      	beq.n	80056c0 <_printf_i+0x1b4>
 8005624:	4615      	mov	r5, r2
 8005626:	fbb6 f1f3 	udiv	r1, r6, r3
 800562a:	fb03 6711 	mls	r7, r3, r1, r6
 800562e:	5dc7      	ldrb	r7, [r0, r7]
 8005630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005634:	4637      	mov	r7, r6
 8005636:	42bb      	cmp	r3, r7
 8005638:	460e      	mov	r6, r1
 800563a:	d9f4      	bls.n	8005626 <_printf_i+0x11a>
 800563c:	2b08      	cmp	r3, #8
 800563e:	d10b      	bne.n	8005658 <_printf_i+0x14c>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	07de      	lsls	r6, r3, #31
 8005644:	d508      	bpl.n	8005658 <_printf_i+0x14c>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	6861      	ldr	r1, [r4, #4]
 800564a:	4299      	cmp	r1, r3
 800564c:	bfde      	ittt	le
 800564e:	2330      	movle	r3, #48	; 0x30
 8005650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005658:	1b52      	subs	r2, r2, r5
 800565a:	6122      	str	r2, [r4, #16]
 800565c:	f8cd a000 	str.w	sl, [sp]
 8005660:	464b      	mov	r3, r9
 8005662:	aa03      	add	r2, sp, #12
 8005664:	4621      	mov	r1, r4
 8005666:	4640      	mov	r0, r8
 8005668:	f7ff fee2 	bl	8005430 <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	d14c      	bne.n	800570a <_printf_i+0x1fe>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b004      	add	sp, #16
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	4835      	ldr	r0, [pc, #212]	; (8005750 <_printf_i+0x244>)
 800567c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005680:	6829      	ldr	r1, [r5, #0]
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f851 6b04 	ldr.w	r6, [r1], #4
 8005688:	6029      	str	r1, [r5, #0]
 800568a:	061d      	lsls	r5, r3, #24
 800568c:	d514      	bpl.n	80056b8 <_printf_i+0x1ac>
 800568e:	07df      	lsls	r7, r3, #31
 8005690:	bf44      	itt	mi
 8005692:	f043 0320 	orrmi.w	r3, r3, #32
 8005696:	6023      	strmi	r3, [r4, #0]
 8005698:	b91e      	cbnz	r6, 80056a2 <_printf_i+0x196>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f023 0320 	bic.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	2310      	movs	r3, #16
 80056a4:	e7b0      	b.n	8005608 <_printf_i+0xfc>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	f043 0320 	orr.w	r3, r3, #32
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	2378      	movs	r3, #120	; 0x78
 80056b0:	4828      	ldr	r0, [pc, #160]	; (8005754 <_printf_i+0x248>)
 80056b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056b6:	e7e3      	b.n	8005680 <_printf_i+0x174>
 80056b8:	0659      	lsls	r1, r3, #25
 80056ba:	bf48      	it	mi
 80056bc:	b2b6      	uxthmi	r6, r6
 80056be:	e7e6      	b.n	800568e <_printf_i+0x182>
 80056c0:	4615      	mov	r5, r2
 80056c2:	e7bb      	b.n	800563c <_printf_i+0x130>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	6826      	ldr	r6, [r4, #0]
 80056c8:	6961      	ldr	r1, [r4, #20]
 80056ca:	1d18      	adds	r0, r3, #4
 80056cc:	6028      	str	r0, [r5, #0]
 80056ce:	0635      	lsls	r5, r6, #24
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	d501      	bpl.n	80056d8 <_printf_i+0x1cc>
 80056d4:	6019      	str	r1, [r3, #0]
 80056d6:	e002      	b.n	80056de <_printf_i+0x1d2>
 80056d8:	0670      	lsls	r0, r6, #25
 80056da:	d5fb      	bpl.n	80056d4 <_printf_i+0x1c8>
 80056dc:	8019      	strh	r1, [r3, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	4615      	mov	r5, r2
 80056e4:	e7ba      	b.n	800565c <_printf_i+0x150>
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	1d1a      	adds	r2, r3, #4
 80056ea:	602a      	str	r2, [r5, #0]
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	2100      	movs	r1, #0
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7fa fd7c 	bl	80001f0 <memchr>
 80056f8:	b108      	cbz	r0, 80056fe <_printf_i+0x1f2>
 80056fa:	1b40      	subs	r0, r0, r5
 80056fc:	6060      	str	r0, [r4, #4]
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	2300      	movs	r3, #0
 8005704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005708:	e7a8      	b.n	800565c <_printf_i+0x150>
 800570a:	6923      	ldr	r3, [r4, #16]
 800570c:	462a      	mov	r2, r5
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	47d0      	blx	sl
 8005714:	3001      	adds	r0, #1
 8005716:	d0ab      	beq.n	8005670 <_printf_i+0x164>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	079b      	lsls	r3, r3, #30
 800571c:	d413      	bmi.n	8005746 <_printf_i+0x23a>
 800571e:	68e0      	ldr	r0, [r4, #12]
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	4298      	cmp	r0, r3
 8005724:	bfb8      	it	lt
 8005726:	4618      	movlt	r0, r3
 8005728:	e7a4      	b.n	8005674 <_printf_i+0x168>
 800572a:	2301      	movs	r3, #1
 800572c:	4632      	mov	r2, r6
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d09b      	beq.n	8005670 <_printf_i+0x164>
 8005738:	3501      	adds	r5, #1
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	9903      	ldr	r1, [sp, #12]
 800573e:	1a5b      	subs	r3, r3, r1
 8005740:	42ab      	cmp	r3, r5
 8005742:	dcf2      	bgt.n	800572a <_printf_i+0x21e>
 8005744:	e7eb      	b.n	800571e <_printf_i+0x212>
 8005746:	2500      	movs	r5, #0
 8005748:	f104 0619 	add.w	r6, r4, #25
 800574c:	e7f5      	b.n	800573a <_printf_i+0x22e>
 800574e:	bf00      	nop
 8005750:	08005e61 	.word	0x08005e61
 8005754:	08005e72 	.word	0x08005e72

08005758 <_sbrk_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d06      	ldr	r5, [pc, #24]	; (8005774 <_sbrk_r+0x1c>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fc fae6 	bl	8001d34 <_sbrk>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_sbrk_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_sbrk_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000928 	.word	0x20000928

08005778 <__sread>:
 8005778:	b510      	push	{r4, lr}
 800577a:	460c      	mov	r4, r1
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	f000 fab2 	bl	8005ce8 <_read_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	bfab      	itete	ge
 8005788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800578a:	89a3      	ldrhlt	r3, [r4, #12]
 800578c:	181b      	addge	r3, r3, r0
 800578e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005792:	bfac      	ite	ge
 8005794:	6563      	strge	r3, [r4, #84]	; 0x54
 8005796:	81a3      	strhlt	r3, [r4, #12]
 8005798:	bd10      	pop	{r4, pc}

0800579a <__swrite>:
 800579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	461f      	mov	r7, r3
 80057a0:	898b      	ldrh	r3, [r1, #12]
 80057a2:	05db      	lsls	r3, r3, #23
 80057a4:	4605      	mov	r5, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	4616      	mov	r6, r2
 80057aa:	d505      	bpl.n	80057b8 <__swrite+0x1e>
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	2302      	movs	r3, #2
 80057b2:	2200      	movs	r2, #0
 80057b4:	f000 f9c8 	bl	8005b48 <_lseek_r>
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	4628      	mov	r0, r5
 80057ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	f000 b869 	b.w	80058a4 <_write_r>

080057d2 <__sseek>:
 80057d2:	b510      	push	{r4, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057da:	f000 f9b5 	bl	8005b48 <_lseek_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	bf15      	itete	ne
 80057e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ee:	81a3      	strheq	r3, [r4, #12]
 80057f0:	bf18      	it	ne
 80057f2:	81a3      	strhne	r3, [r4, #12]
 80057f4:	bd10      	pop	{r4, pc}

080057f6 <__sclose>:
 80057f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fa:	f000 b8d3 	b.w	80059a4 <_close_r>
	...

08005800 <__swbuf_r>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	460e      	mov	r6, r1
 8005804:	4614      	mov	r4, r2
 8005806:	4605      	mov	r5, r0
 8005808:	b118      	cbz	r0, 8005812 <__swbuf_r+0x12>
 800580a:	6983      	ldr	r3, [r0, #24]
 800580c:	b90b      	cbnz	r3, 8005812 <__swbuf_r+0x12>
 800580e:	f7ff fb81 	bl	8004f14 <__sinit>
 8005812:	4b21      	ldr	r3, [pc, #132]	; (8005898 <__swbuf_r+0x98>)
 8005814:	429c      	cmp	r4, r3
 8005816:	d12b      	bne.n	8005870 <__swbuf_r+0x70>
 8005818:	686c      	ldr	r4, [r5, #4]
 800581a:	69a3      	ldr	r3, [r4, #24]
 800581c:	60a3      	str	r3, [r4, #8]
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	071a      	lsls	r2, r3, #28
 8005822:	d52f      	bpl.n	8005884 <__swbuf_r+0x84>
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	b36b      	cbz	r3, 8005884 <__swbuf_r+0x84>
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	6820      	ldr	r0, [r4, #0]
 800582c:	1ac0      	subs	r0, r0, r3
 800582e:	6963      	ldr	r3, [r4, #20]
 8005830:	b2f6      	uxtb	r6, r6
 8005832:	4283      	cmp	r3, r0
 8005834:	4637      	mov	r7, r6
 8005836:	dc04      	bgt.n	8005842 <__swbuf_r+0x42>
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f948 	bl	8005ad0 <_fflush_r>
 8005840:	bb30      	cbnz	r0, 8005890 <__swbuf_r+0x90>
 8005842:	68a3      	ldr	r3, [r4, #8]
 8005844:	3b01      	subs	r3, #1
 8005846:	60a3      	str	r3, [r4, #8]
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	6022      	str	r2, [r4, #0]
 800584e:	701e      	strb	r6, [r3, #0]
 8005850:	6963      	ldr	r3, [r4, #20]
 8005852:	3001      	adds	r0, #1
 8005854:	4283      	cmp	r3, r0
 8005856:	d004      	beq.n	8005862 <__swbuf_r+0x62>
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	07db      	lsls	r3, r3, #31
 800585c:	d506      	bpl.n	800586c <__swbuf_r+0x6c>
 800585e:	2e0a      	cmp	r6, #10
 8005860:	d104      	bne.n	800586c <__swbuf_r+0x6c>
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 f933 	bl	8005ad0 <_fflush_r>
 800586a:	b988      	cbnz	r0, 8005890 <__swbuf_r+0x90>
 800586c:	4638      	mov	r0, r7
 800586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <__swbuf_r+0x9c>)
 8005872:	429c      	cmp	r4, r3
 8005874:	d101      	bne.n	800587a <__swbuf_r+0x7a>
 8005876:	68ac      	ldr	r4, [r5, #8]
 8005878:	e7cf      	b.n	800581a <__swbuf_r+0x1a>
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <__swbuf_r+0xa0>)
 800587c:	429c      	cmp	r4, r3
 800587e:	bf08      	it	eq
 8005880:	68ec      	ldreq	r4, [r5, #12]
 8005882:	e7ca      	b.n	800581a <__swbuf_r+0x1a>
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f81e 	bl	80058c8 <__swsetup_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	d0cb      	beq.n	8005828 <__swbuf_r+0x28>
 8005890:	f04f 37ff 	mov.w	r7, #4294967295
 8005894:	e7ea      	b.n	800586c <__swbuf_r+0x6c>
 8005896:	bf00      	nop
 8005898:	08005e10 	.word	0x08005e10
 800589c:	08005e30 	.word	0x08005e30
 80058a0:	08005df0 	.word	0x08005df0

080058a4 <_write_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	; (80058c4 <_write_r+0x20>)
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fc f9ed 	bl	8001c92 <_write>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_write_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_write_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000928 	.word	0x20000928

080058c8 <__swsetup_r>:
 80058c8:	4b32      	ldr	r3, [pc, #200]	; (8005994 <__swsetup_r+0xcc>)
 80058ca:	b570      	push	{r4, r5, r6, lr}
 80058cc:	681d      	ldr	r5, [r3, #0]
 80058ce:	4606      	mov	r6, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	b125      	cbz	r5, 80058de <__swsetup_r+0x16>
 80058d4:	69ab      	ldr	r3, [r5, #24]
 80058d6:	b913      	cbnz	r3, 80058de <__swsetup_r+0x16>
 80058d8:	4628      	mov	r0, r5
 80058da:	f7ff fb1b 	bl	8004f14 <__sinit>
 80058de:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <__swsetup_r+0xd0>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d10f      	bne.n	8005904 <__swsetup_r+0x3c>
 80058e4:	686c      	ldr	r4, [r5, #4]
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058ec:	0719      	lsls	r1, r3, #28
 80058ee:	d42c      	bmi.n	800594a <__swsetup_r+0x82>
 80058f0:	06dd      	lsls	r5, r3, #27
 80058f2:	d411      	bmi.n	8005918 <__swsetup_r+0x50>
 80058f4:	2309      	movs	r3, #9
 80058f6:	6033      	str	r3, [r6, #0]
 80058f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005902:	e03e      	b.n	8005982 <__swsetup_r+0xba>
 8005904:	4b25      	ldr	r3, [pc, #148]	; (800599c <__swsetup_r+0xd4>)
 8005906:	429c      	cmp	r4, r3
 8005908:	d101      	bne.n	800590e <__swsetup_r+0x46>
 800590a:	68ac      	ldr	r4, [r5, #8]
 800590c:	e7eb      	b.n	80058e6 <__swsetup_r+0x1e>
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <__swsetup_r+0xd8>)
 8005910:	429c      	cmp	r4, r3
 8005912:	bf08      	it	eq
 8005914:	68ec      	ldreq	r4, [r5, #12]
 8005916:	e7e6      	b.n	80058e6 <__swsetup_r+0x1e>
 8005918:	0758      	lsls	r0, r3, #29
 800591a:	d512      	bpl.n	8005942 <__swsetup_r+0x7a>
 800591c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591e:	b141      	cbz	r1, 8005932 <__swsetup_r+0x6a>
 8005920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005924:	4299      	cmp	r1, r3
 8005926:	d002      	beq.n	800592e <__swsetup_r+0x66>
 8005928:	4630      	mov	r0, r6
 800592a:	f000 f991 	bl	8005c50 <_free_r>
 800592e:	2300      	movs	r3, #0
 8005930:	6363      	str	r3, [r4, #52]	; 0x34
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005938:	81a3      	strh	r3, [r4, #12]
 800593a:	2300      	movs	r3, #0
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f043 0308 	orr.w	r3, r3, #8
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	b94b      	cbnz	r3, 8005962 <__swsetup_r+0x9a>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005958:	d003      	beq.n	8005962 <__swsetup_r+0x9a>
 800595a:	4621      	mov	r1, r4
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f92b 	bl	8005bb8 <__smakebuf_r>
 8005962:	89a0      	ldrh	r0, [r4, #12]
 8005964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005968:	f010 0301 	ands.w	r3, r0, #1
 800596c:	d00a      	beq.n	8005984 <__swsetup_r+0xbc>
 800596e:	2300      	movs	r3, #0
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	6963      	ldr	r3, [r4, #20]
 8005974:	425b      	negs	r3, r3
 8005976:	61a3      	str	r3, [r4, #24]
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	b943      	cbnz	r3, 800598e <__swsetup_r+0xc6>
 800597c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005980:	d1ba      	bne.n	80058f8 <__swsetup_r+0x30>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	0781      	lsls	r1, r0, #30
 8005986:	bf58      	it	pl
 8005988:	6963      	ldrpl	r3, [r4, #20]
 800598a:	60a3      	str	r3, [r4, #8]
 800598c:	e7f4      	b.n	8005978 <__swsetup_r+0xb0>
 800598e:	2000      	movs	r0, #0
 8005990:	e7f7      	b.n	8005982 <__swsetup_r+0xba>
 8005992:	bf00      	nop
 8005994:	20000010 	.word	0x20000010
 8005998:	08005e10 	.word	0x08005e10
 800599c:	08005e30 	.word	0x08005e30
 80059a0:	08005df0 	.word	0x08005df0

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	; (80059c0 <_close_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fc f98b 	bl	8001cca <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000928 	.word	0x20000928

080059c4 <__sflush_r>:
 80059c4:	898a      	ldrh	r2, [r1, #12]
 80059c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ca:	4605      	mov	r5, r0
 80059cc:	0710      	lsls	r0, r2, #28
 80059ce:	460c      	mov	r4, r1
 80059d0:	d458      	bmi.n	8005a84 <__sflush_r+0xc0>
 80059d2:	684b      	ldr	r3, [r1, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dc05      	bgt.n	80059e4 <__sflush_r+0x20>
 80059d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	dc02      	bgt.n	80059e4 <__sflush_r+0x20>
 80059de:	2000      	movs	r0, #0
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059e6:	2e00      	cmp	r6, #0
 80059e8:	d0f9      	beq.n	80059de <__sflush_r+0x1a>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059f0:	682f      	ldr	r7, [r5, #0]
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	d032      	beq.n	8005a5c <__sflush_r+0x98>
 80059f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	075a      	lsls	r2, r3, #29
 80059fc:	d505      	bpl.n	8005a0a <__sflush_r+0x46>
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	1ac0      	subs	r0, r0, r3
 8005a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a04:	b10b      	cbz	r3, 8005a0a <__sflush_r+0x46>
 8005a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a08:	1ac0      	subs	r0, r0, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a10:	6a21      	ldr	r1, [r4, #32]
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b0      	blx	r6
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	d106      	bne.n	8005a2a <__sflush_r+0x66>
 8005a1c:	6829      	ldr	r1, [r5, #0]
 8005a1e:	291d      	cmp	r1, #29
 8005a20:	d82c      	bhi.n	8005a7c <__sflush_r+0xb8>
 8005a22:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <__sflush_r+0x108>)
 8005a24:	40ca      	lsrs	r2, r1
 8005a26:	07d6      	lsls	r6, r2, #31
 8005a28:	d528      	bpl.n	8005a7c <__sflush_r+0xb8>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	6062      	str	r2, [r4, #4]
 8005a2e:	04d9      	lsls	r1, r3, #19
 8005a30:	6922      	ldr	r2, [r4, #16]
 8005a32:	6022      	str	r2, [r4, #0]
 8005a34:	d504      	bpl.n	8005a40 <__sflush_r+0x7c>
 8005a36:	1c42      	adds	r2, r0, #1
 8005a38:	d101      	bne.n	8005a3e <__sflush_r+0x7a>
 8005a3a:	682b      	ldr	r3, [r5, #0]
 8005a3c:	b903      	cbnz	r3, 8005a40 <__sflush_r+0x7c>
 8005a3e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a42:	602f      	str	r7, [r5, #0]
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d0ca      	beq.n	80059de <__sflush_r+0x1a>
 8005a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d002      	beq.n	8005a56 <__sflush_r+0x92>
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 f8fd 	bl	8005c50 <_free_r>
 8005a56:	2000      	movs	r0, #0
 8005a58:	6360      	str	r0, [r4, #52]	; 0x34
 8005a5a:	e7c1      	b.n	80059e0 <__sflush_r+0x1c>
 8005a5c:	6a21      	ldr	r1, [r4, #32]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b0      	blx	r6
 8005a64:	1c41      	adds	r1, r0, #1
 8005a66:	d1c7      	bne.n	80059f8 <__sflush_r+0x34>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0c4      	beq.n	80059f8 <__sflush_r+0x34>
 8005a6e:	2b1d      	cmp	r3, #29
 8005a70:	d001      	beq.n	8005a76 <__sflush_r+0xb2>
 8005a72:	2b16      	cmp	r3, #22
 8005a74:	d101      	bne.n	8005a7a <__sflush_r+0xb6>
 8005a76:	602f      	str	r7, [r5, #0]
 8005a78:	e7b1      	b.n	80059de <__sflush_r+0x1a>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	e7ad      	b.n	80059e0 <__sflush_r+0x1c>
 8005a84:	690f      	ldr	r7, [r1, #16]
 8005a86:	2f00      	cmp	r7, #0
 8005a88:	d0a9      	beq.n	80059de <__sflush_r+0x1a>
 8005a8a:	0793      	lsls	r3, r2, #30
 8005a8c:	680e      	ldr	r6, [r1, #0]
 8005a8e:	bf08      	it	eq
 8005a90:	694b      	ldreq	r3, [r1, #20]
 8005a92:	600f      	str	r7, [r1, #0]
 8005a94:	bf18      	it	ne
 8005a96:	2300      	movne	r3, #0
 8005a98:	eba6 0807 	sub.w	r8, r6, r7
 8005a9c:	608b      	str	r3, [r1, #8]
 8005a9e:	f1b8 0f00 	cmp.w	r8, #0
 8005aa2:	dd9c      	ble.n	80059de <__sflush_r+0x1a>
 8005aa4:	6a21      	ldr	r1, [r4, #32]
 8005aa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aa8:	4643      	mov	r3, r8
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b0      	blx	r6
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	dc06      	bgt.n	8005ac2 <__sflush_r+0xfe>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	e78e      	b.n	80059e0 <__sflush_r+0x1c>
 8005ac2:	4407      	add	r7, r0
 8005ac4:	eba8 0800 	sub.w	r8, r8, r0
 8005ac8:	e7e9      	b.n	8005a9e <__sflush_r+0xda>
 8005aca:	bf00      	nop
 8005acc:	20400001 	.word	0x20400001

08005ad0 <_fflush_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	690b      	ldr	r3, [r1, #16]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	b913      	cbnz	r3, 8005ae0 <_fflush_r+0x10>
 8005ada:	2500      	movs	r5, #0
 8005adc:	4628      	mov	r0, r5
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	b118      	cbz	r0, 8005aea <_fflush_r+0x1a>
 8005ae2:	6983      	ldr	r3, [r0, #24]
 8005ae4:	b90b      	cbnz	r3, 8005aea <_fflush_r+0x1a>
 8005ae6:	f7ff fa15 	bl	8004f14 <__sinit>
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <_fflush_r+0x6c>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d11b      	bne.n	8005b28 <_fflush_r+0x58>
 8005af0:	686c      	ldr	r4, [r5, #4]
 8005af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0ef      	beq.n	8005ada <_fflush_r+0xa>
 8005afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005afc:	07d0      	lsls	r0, r2, #31
 8005afe:	d404      	bmi.n	8005b0a <_fflush_r+0x3a>
 8005b00:	0599      	lsls	r1, r3, #22
 8005b02:	d402      	bmi.n	8005b0a <_fflush_r+0x3a>
 8005b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b06:	f7ff faa3 	bl	8005050 <__retarget_lock_acquire_recursive>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	f7ff ff59 	bl	80059c4 <__sflush_r>
 8005b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b14:	07da      	lsls	r2, r3, #31
 8005b16:	4605      	mov	r5, r0
 8005b18:	d4e0      	bmi.n	8005adc <_fflush_r+0xc>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	059b      	lsls	r3, r3, #22
 8005b1e:	d4dd      	bmi.n	8005adc <_fflush_r+0xc>
 8005b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b22:	f7ff fa96 	bl	8005052 <__retarget_lock_release_recursive>
 8005b26:	e7d9      	b.n	8005adc <_fflush_r+0xc>
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <_fflush_r+0x70>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	d101      	bne.n	8005b32 <_fflush_r+0x62>
 8005b2e:	68ac      	ldr	r4, [r5, #8]
 8005b30:	e7df      	b.n	8005af2 <_fflush_r+0x22>
 8005b32:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <_fflush_r+0x74>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	bf08      	it	eq
 8005b38:	68ec      	ldreq	r4, [r5, #12]
 8005b3a:	e7da      	b.n	8005af2 <_fflush_r+0x22>
 8005b3c:	08005e10 	.word	0x08005e10
 8005b40:	08005e30 	.word	0x08005e30
 8005b44:	08005df0 	.word	0x08005df0

08005b48 <_lseek_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d07      	ldr	r5, [pc, #28]	; (8005b68 <_lseek_r+0x20>)
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	4608      	mov	r0, r1
 8005b50:	4611      	mov	r1, r2
 8005b52:	2200      	movs	r2, #0
 8005b54:	602a      	str	r2, [r5, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7fc f8de 	bl	8001d18 <_lseek>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_lseek_r+0x1e>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_lseek_r+0x1e>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20000928 	.word	0x20000928

08005b6c <__swhatbuf_r>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	460e      	mov	r6, r1
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	2900      	cmp	r1, #0
 8005b76:	b096      	sub	sp, #88	; 0x58
 8005b78:	4614      	mov	r4, r2
 8005b7a:	461d      	mov	r5, r3
 8005b7c:	da08      	bge.n	8005b90 <__swhatbuf_r+0x24>
 8005b7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	061a      	lsls	r2, r3, #24
 8005b88:	d410      	bmi.n	8005bac <__swhatbuf_r+0x40>
 8005b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b8e:	e00e      	b.n	8005bae <__swhatbuf_r+0x42>
 8005b90:	466a      	mov	r2, sp
 8005b92:	f000 f8bb 	bl	8005d0c <_fstat_r>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	dbf1      	blt.n	8005b7e <__swhatbuf_r+0x12>
 8005b9a:	9a01      	ldr	r2, [sp, #4]
 8005b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ba4:	425a      	negs	r2, r3
 8005ba6:	415a      	adcs	r2, r3
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	e7ee      	b.n	8005b8a <__swhatbuf_r+0x1e>
 8005bac:	2340      	movs	r3, #64	; 0x40
 8005bae:	2000      	movs	r0, #0
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	b016      	add	sp, #88	; 0x58
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bb8 <__smakebuf_r>:
 8005bb8:	898b      	ldrh	r3, [r1, #12]
 8005bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bbc:	079d      	lsls	r5, r3, #30
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	d507      	bpl.n	8005bd4 <__smakebuf_r+0x1c>
 8005bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	6163      	str	r3, [r4, #20]
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	ab01      	add	r3, sp, #4
 8005bd6:	466a      	mov	r2, sp
 8005bd8:	f7ff ffc8 	bl	8005b6c <__swhatbuf_r>
 8005bdc:	9900      	ldr	r1, [sp, #0]
 8005bde:	4605      	mov	r5, r0
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7ff fa57 	bl	8005094 <_malloc_r>
 8005be6:	b948      	cbnz	r0, 8005bfc <__smakebuf_r+0x44>
 8005be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bec:	059a      	lsls	r2, r3, #22
 8005bee:	d4ef      	bmi.n	8005bd0 <__smakebuf_r+0x18>
 8005bf0:	f023 0303 	bic.w	r3, r3, #3
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	e7e3      	b.n	8005bc4 <__smakebuf_r+0xc>
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <__smakebuf_r+0x7c>)
 8005bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	6020      	str	r0, [r4, #0]
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	9b00      	ldr	r3, [sp, #0]
 8005c0c:	6163      	str	r3, [r4, #20]
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	6120      	str	r0, [r4, #16]
 8005c12:	b15b      	cbz	r3, 8005c2c <__smakebuf_r+0x74>
 8005c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 f889 	bl	8005d30 <_isatty_r>
 8005c1e:	b128      	cbz	r0, 8005c2c <__smakebuf_r+0x74>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	89a0      	ldrh	r0, [r4, #12]
 8005c2e:	4305      	orrs	r5, r0
 8005c30:	81a5      	strh	r5, [r4, #12]
 8005c32:	e7cd      	b.n	8005bd0 <__smakebuf_r+0x18>
 8005c34:	08004ead 	.word	0x08004ead

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f7ff ba09 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	2000091c 	.word	0x2000091c

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f7ff ba04 	b.w	8005052 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	2000091c 	.word	0x2000091c

08005c50 <_free_r>:
 8005c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c52:	2900      	cmp	r1, #0
 8005c54:	d044      	beq.n	8005ce0 <_free_r+0x90>
 8005c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5a:	9001      	str	r0, [sp, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c62:	bfb8      	it	lt
 8005c64:	18e4      	addlt	r4, r4, r3
 8005c66:	f7ff ffe7 	bl	8005c38 <__malloc_lock>
 8005c6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <_free_r+0x94>)
 8005c6c:	9801      	ldr	r0, [sp, #4]
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	b933      	cbnz	r3, 8005c80 <_free_r+0x30>
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	6014      	str	r4, [r2, #0]
 8005c76:	b003      	add	sp, #12
 8005c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c7c:	f7ff bfe2 	b.w	8005c44 <__malloc_unlock>
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d908      	bls.n	8005c96 <_free_r+0x46>
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	1961      	adds	r1, r4, r5
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf01      	itttt	eq
 8005c8c:	6819      	ldreq	r1, [r3, #0]
 8005c8e:	685b      	ldreq	r3, [r3, #4]
 8005c90:	1949      	addeq	r1, r1, r5
 8005c92:	6021      	streq	r1, [r4, #0]
 8005c94:	e7ed      	b.n	8005c72 <_free_r+0x22>
 8005c96:	461a      	mov	r2, r3
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b10b      	cbz	r3, 8005ca0 <_free_r+0x50>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d9fa      	bls.n	8005c96 <_free_r+0x46>
 8005ca0:	6811      	ldr	r1, [r2, #0]
 8005ca2:	1855      	adds	r5, r2, r1
 8005ca4:	42a5      	cmp	r5, r4
 8005ca6:	d10b      	bne.n	8005cc0 <_free_r+0x70>
 8005ca8:	6824      	ldr	r4, [r4, #0]
 8005caa:	4421      	add	r1, r4
 8005cac:	1854      	adds	r4, r2, r1
 8005cae:	42a3      	cmp	r3, r4
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	d1e0      	bne.n	8005c76 <_free_r+0x26>
 8005cb4:	681c      	ldr	r4, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	6053      	str	r3, [r2, #4]
 8005cba:	4421      	add	r1, r4
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	e7da      	b.n	8005c76 <_free_r+0x26>
 8005cc0:	d902      	bls.n	8005cc8 <_free_r+0x78>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	6003      	str	r3, [r0, #0]
 8005cc6:	e7d6      	b.n	8005c76 <_free_r+0x26>
 8005cc8:	6825      	ldr	r5, [r4, #0]
 8005cca:	1961      	adds	r1, r4, r5
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf04      	itt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	6063      	str	r3, [r4, #4]
 8005cd6:	bf04      	itt	eq
 8005cd8:	1949      	addeq	r1, r1, r5
 8005cda:	6021      	streq	r1, [r4, #0]
 8005cdc:	6054      	str	r4, [r2, #4]
 8005cde:	e7ca      	b.n	8005c76 <_free_r+0x26>
 8005ce0:	b003      	add	sp, #12
 8005ce2:	bd30      	pop	{r4, r5, pc}
 8005ce4:	20000920 	.word	0x20000920

08005ce8 <_read_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_read_r+0x20>)
 8005cec:	4604      	mov	r4, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb ffae 	bl	8001c58 <_read>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_read_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_read_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20000928 	.word	0x20000928

08005d0c <_fstat_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d07      	ldr	r5, [pc, #28]	; (8005d2c <_fstat_r+0x20>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	f7fb ffe2 	bl	8001ce2 <_fstat>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	d102      	bne.n	8005d28 <_fstat_r+0x1c>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	b103      	cbz	r3, 8005d28 <_fstat_r+0x1c>
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	bd38      	pop	{r3, r4, r5, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000928 	.word	0x20000928

08005d30 <_isatty_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d06      	ldr	r5, [pc, #24]	; (8005d4c <_isatty_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	f7fb ffe1 	bl	8001d02 <_isatty>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_isatty_r+0x1a>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_isatty_r+0x1a>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20000928 	.word	0x20000928

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
