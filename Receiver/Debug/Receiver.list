
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800678c  0800678c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006794  08006794  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800679c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000008b8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000092c  2000092c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d63  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bc  00000000  00000000  00035e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000385c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d8  00000000  00000000  00039780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ff9  00000000  00000000  0003a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014485  00000000  00000000  00060851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0eba  00000000  00000000  00074cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155b90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005438  00000000  00000000  00155be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080064d8 	.word	0x080064d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080064d8 	.word	0x080064d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b0a      	cmp	r3, #10
 80005a0:	d102      	bne.n	80005a8 <__io_putchar+0x14>
    __io_putchar('\r');
 80005a2:	200d      	movs	r0, #13
 80005a4:	f7ff fff6 	bl	8000594 <__io_putchar>
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <__io_putchar+0x2c>)
 80005b2:	f004 f8fc 	bl	80047ae <HAL_UART_Transmit>

  return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200003b8 	.word	0x200003b8

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 ff8b 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f8a9 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fa6d 	bl	8000ab0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d6:	f000 f90f 	bl	80007f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005da:	f000 fa11 	bl	8000a00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005de:	f000 fa39 	bl	8000a54 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80005e2:	f000 f9d7 	bl	8000994 <MX_SPI2_Init>
  MX_I2C1_Init();
 80005e6:	f000 f955 	bl	8000894 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005ea:	f000 f993 	bl	8000914 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  NRF_HandleTypedef nrf;
  if(!NRF_Init(&nrf)){
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fc04 	bl	8000e00 <NRF_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f083 0301 	eor.w	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x44>
	  Error_Handler();
 8000604:	f000 fb5e 	bl	8000cc4 <Error_Handler>

  // pipe configuration
  // address will be clocked from last to first
  // need to clock the same address as for transmitter
  static uint8_t nrf_addr[] = {0x69, 0x21, 0x37};
  if(!NRF_SET_PipeAddress(RX_PIPE_0, nrf_addr)){
 8000608:	4941      	ldr	r1, [pc, #260]	; (8000710 <main+0x14c>)
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fe11 	bl	8001232 <NRF_SET_PipeAddress>
 8000610:	4603      	mov	r3, r0
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0x5c>
	  return NRF_ERROR;
 800061c:	2300      	movs	r3, #0
 800061e:	e073      	b.n	8000708 <main+0x144>
  }
  // prepare pipe
  if(!NRF_SET_PipeRX(RX_PIPE_0, AA_ON, (uint8_t)7)){
 8000620:	2207      	movs	r2, #7
 8000622:	2101      	movs	r1, #1
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fe55 	bl	80012d4 <NRF_SET_PipeRX>
 800062a:	4603      	mov	r3, r0
 800062c:	f083 0301 	eor.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <main+0x76>
	  return NRF_ERROR;
 8000636:	2300      	movs	r3, #0
 8000638:	e066      	b.n	8000708 <main+0x144>
  }

  // set mode to receiver
  if(!NRF_SET_Mode(RX)){
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fcde 	bl	8000ffc <NRF_SET_Mode>
 8000640:	4603      	mov	r3, r0
 8000642:	f083 0301 	eor.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <main+0x8c>
	  return NRF_ERROR;
 800064c:	2300      	movs	r3, #0
 800064e:	e05b      	b.n	8000708 <main+0x144>
  }

  // turn transmitter on and wait for at least 1.5 ms
  if(!NRF_SET_PowerMode(PWR_UP)){
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fd05 	bl	8001060 <NRF_SET_PowerMode>
 8000656:	4603      	mov	r3, r0
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <main+0xa2>
	  return NRF_ERROR;
 8000662:	2300      	movs	r3, #0
 8000664:	e050      	b.n	8000708 <main+0x144>
  }
  HAL_Delay(2);
 8000666:	2002      	movs	r0, #2
 8000668:	f001 ffae 	bl	80025c8 <HAL_Delay>
  NRF_PrintConfig();
 800066c:	f001 f870 	bl	8001750 <NRF_PrintConfig>
  // put receiver in rx mode by enabling CE pin
  NRF_CE_SET_HIGH;
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000676:	4827      	ldr	r0, [pc, #156]	; (8000714 <main+0x150>)
 8000678:	f002 fdb0 	bl	80031dc <HAL_GPIO_WritePin>

  // data buffer
  uint8_t data_buffer[7];
  uint8_t res = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	76fb      	strb	r3, [r7, #27]
//		printf("\n");
//	}
//	else{
//		printf("Receiver not working!\n");
//	}
	  if(nrfInterrupt){
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <main+0x154>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d03a      	beq.n	80006fe <main+0x13a>
	  		  uint8_t interrupt_src = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	70fb      	strb	r3, [r7, #3]
	  		  NRF_ReadRegs(NRF_REG_STATUS, &interrupt_src, 1);
 800068c:	1cfb      	adds	r3, r7, #3
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	2007      	movs	r0, #7
 8000694:	f000 fb38 	bl	8000d08 <NRF_ReadRegs>
	  		  uint8_t rx = (interrupt_src & 0x40) >> 6;
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	119b      	asrs	r3, r3, #6
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	76bb      	strb	r3, [r7, #26]
	  		  uint8_t tx = (interrupt_src & 0x20) >> 5;
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	115b      	asrs	r3, r3, #5
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	767b      	strb	r3, [r7, #25]
	  		  uint8_t max = (interrupt_src & 0x10) >> 4;
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	111b      	asrs	r3, r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	763b      	strb	r3, [r7, #24]
	  		  printf("Interrupts:\nRx: %d\nTx: %d\nMax: %d\n", rx, tx, max);
 80006bc:	7eb9      	ldrb	r1, [r7, #26]
 80006be:	7e7a      	ldrb	r2, [r7, #25]
 80006c0:	7e3b      	ldrb	r3, [r7, #24]
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <main+0x158>)
 80006c4:	f004 ff1c 	bl	8005500 <iprintf>
	  		  NRF_IRQ_Callback(&nrfInterrupt, data_buffer);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <main+0x154>)
 80006ce:	f000 ff7a 	bl	80015c6 <NRF_IRQ_Callback>
	  		  printf("Message: ");
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <main+0x15c>)
 80006d4:	f004 ff14 	bl	8005500 <iprintf>
	  		  for(int i =0; i <7; i++){
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	e009      	b.n	80006f2 <main+0x12e>
	  			  printf("%c", data_buffer[i]);
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 ff22 	bl	8005530 <putchar>
	  		  for(int i =0; i <7; i++){
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	3301      	adds	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	2b06      	cmp	r3, #6
 80006f6:	ddf2      	ble.n	80006de <main+0x11a>
	  		  }
	  		  printf("\n");
 80006f8:	200a      	movs	r0, #10
 80006fa:	f004 ff19 	bl	8005530 <putchar>
	  	  }
	HAL_Delay(5000);
 80006fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000702:	f001 ff61 	bl	80025c8 <HAL_Delay>
	  if(nrfInterrupt){
 8000706:	e7bb      	b.n	8000680 <main+0xbc>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000708:	4618      	mov	r0, r3
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	40021000 	.word	0x40021000
 8000718:	20000908 	.word	0x20000908
 800071c:	080064f0 	.word	0x080064f0
 8000720:	08006514 	.word	0x08006514

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fedc 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <SystemClock_Config+0xcc>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <SystemClock_Config+0xd0>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000784:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000798:	23a8      	movs	r3, #168	; 0xa8
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a0:	2307      	movs	r3, #7
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 f825 	bl	80037f8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b4:	f000 fa86 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2105      	movs	r1, #5
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 fa86 	bl	8003ce8 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007e2:	f000 fa6f 	bl	8000cc4 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ETH_Init+0x84>)
 80007fe:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_ETH_Init+0x88>)
 8000800:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_ETH_Init+0x8c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_ETH_Init+0x8c>)
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ETH_Init+0x8c>)
 8000810:	22e1      	movs	r2, #225	; 0xe1
 8000812:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_ETH_Init+0x8c>)
 8000816:	2200      	movs	r2, #0
 8000818:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ETH_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_ETH_Init+0x8c>)
 8000822:	2200      	movs	r2, #0
 8000824:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_ETH_Init+0x84>)
 8000828:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_ETH_Init+0x8c>)
 800082a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_ETH_Init+0x84>)
 800082e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000832:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_ETH_Init+0x84>)
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MX_ETH_Init+0x90>)
 8000838:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_ETH_Init+0x84>)
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_ETH_Init+0x94>)
 800083e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_ETH_Init+0x84>)
 8000842:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000846:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_ETH_Init+0x84>)
 800084a:	f001 fff3 	bl	8002834 <HAL_ETH_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 fa36 	bl	8000cc4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000858:	2238      	movs	r2, #56	; 0x38
 800085a:	2100      	movs	r1, #0
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_ETH_Init+0x98>)
 800085e:	f004 fe47 	bl	80054f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_ETH_Init+0x98>)
 8000864:	2221      	movs	r2, #33	; 0x21
 8000866:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_ETH_Init+0x98>)
 800086a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800086e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_ETH_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000208 	.word	0x20000208
 8000880:	40028000 	.word	0x40028000
 8000884:	2000090c 	.word	0x2000090c
 8000888:	20000168 	.word	0x20000168
 800088c:	200000c8 	.word	0x200000c8
 8000890:	20000090 	.word	0x20000090

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_I2C1_Init+0x74>)
 80008d2:	f002 fcb5 	bl	8003240 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f9f2 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_I2C1_Init+0x74>)
 80008e4:	f002 fdf0 	bl	80034c8 <HAL_I2CEx_ConfigAnalogFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008ee:	f000 f9e9 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_I2C1_Init+0x74>)
 80008f6:	f002 fe23 	bl	8003540 <HAL_I2CEx_ConfigDigitalFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 f9e0 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002b8 	.word	0x200002b8
 800090c:	40005400 	.word	0x40005400
 8000910:	000186a0 	.word	0x000186a0

08000914 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_I2C2_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_I2C2_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_I2C2_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <MX_I2C2_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_I2C2_Init+0x74>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_I2C2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_I2C2_Init+0x74>)
 8000952:	f002 fc75 	bl	8003240 <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800095c:	f000 f9b2 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_I2C2_Init+0x74>)
 8000964:	f002 fdb0 	bl	80034c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800096e:	f000 f9a9 	bl	8000cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_I2C2_Init+0x74>)
 8000976:	f002 fde3 	bl	8003540 <HAL_I2CEx_ConfigDigitalFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 f9a0 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000030c 	.word	0x2000030c
 800098c:	40005800 	.word	0x40005800
 8000990:	000186a0 	.word	0x000186a0

08000994 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_SPI2_Init+0x64>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_SPI2_Init+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009c8:	2220      	movs	r2, #32
 80009ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009e0:	220a      	movs	r2, #10
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_SPI2_Init+0x64>)
 80009e6:	f003 fb9f 	bl	8004128 <HAL_SPI_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009f0:	f000 f968 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000360 	.word	0x20000360
 80009fc:	40003800 	.word	0x40003800

08000a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_USART3_UART_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART3_UART_Init+0x4c>)
 8000a38:	f003 fe6c 	bl	8004714 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a42:	f000 f93f 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200003b8 	.word	0x200003b8
 8000a50:	40004800 	.word	0x40004800

08000a54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a98:	f002 fd91 	bl	80035be <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f90f 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200003fc 	.word	0x200003fc

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	4b6f      	ldr	r3, [pc, #444]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a6e      	ldr	r2, [pc, #440]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b6c      	ldr	r3, [pc, #432]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	4b68      	ldr	r3, [pc, #416]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a67      	ldr	r2, [pc, #412]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b65      	ldr	r3, [pc, #404]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a60      	ldr	r2, [pc, #384]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b5e      	ldr	r3, [pc, #376]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b5a      	ldr	r3, [pc, #360]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b57      	ldr	r3, [pc, #348]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a52      	ldr	r2, [pc, #328]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x1d8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI2_CSN_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f644 0181 	movw	r1, #18561	; 0x4881
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x1dc>)
 8000bae:	f002 fb15 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb8:	4835      	ldr	r0, [pc, #212]	; (8000c90 <MX_GPIO_Init+0x1e0>)
 8000bba:	f002 fb0f 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	4834      	ldr	r0, [pc, #208]	; (8000c94 <MX_GPIO_Init+0x1e4>)
 8000bc4:	f002 fb0a 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482e      	ldr	r0, [pc, #184]	; (8000c98 <MX_GPIO_Init+0x1e8>)
 8000be0:	f002 f950 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPI2_CSN_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI2_CSN_Pin|LD3_Pin|LD2_Pin;
 8000be4:	f644 0381 	movw	r3, #18561	; 0x4881
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4823      	ldr	r0, [pc, #140]	; (8000c8c <MX_GPIO_Init+0x1dc>)
 8000bfe:	f002 f941 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <MX_GPIO_Init+0x1e0>)
 8000c1a:	f002 f933 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <MX_GPIO_Init+0x1e0>)
 8000c38:	f002 f924 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4810      	ldr	r0, [pc, #64]	; (8000c94 <MX_GPIO_Init+0x1e4>)
 8000c54:	f002 f916 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <MX_GPIO_Init+0x1e4>)
 8000c6c:	f002 f90a 	bl	8002e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2102      	movs	r1, #2
 8000c74:	2028      	movs	r0, #40	; 0x28
 8000c76:	f001 fda6 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c7a:	2028      	movs	r0, #40	; 0x28
 8000c7c:	f001 fdbf 	bl	80027fe <HAL_NVIC_EnableIRQ>

}
 8000c80:	bf00      	nop
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40020800 	.word	0x40020800

08000c9c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin){
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cac:	d102      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x18>
		// if interrupt comes from IRQ pin, then set flag
		nrfInterrupt = 1;
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000908 	.word	0x20000908

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <NRF_SPI_RW>:
 */


#include "nrf/nrf.h"

uint8_t NRF_SPI_RW(uint8_t transmit_buff, uint8_t* receive_buff){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_TransmitReceive(&hspi2, &transmit_buff, receive_buff, 1, 1000) != HAL_OK){
 8000cdc:	1df9      	adds	r1, r7, #7
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <NRF_SPI_RW+0x34>)
 8000cea:	f003 faa6 	bl	800423a <HAL_SPI_TransmitReceive>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <NRF_SPI_RW+0x28>
		return NRF_ERROR;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e000      	b.n	8000cfa <NRF_SPI_RW+0x2a>
	}
	return NRF_OK;
 8000cf8:	2301      	movs	r3, #1
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000360 	.word	0x20000360

08000d08 <NRF_ReadRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return data from given register
 * @retval 1 in case of successful read , 0 in case of failure
 */
bool NRF_ReadRegs(uint8_t address, uint8_t* data, uint8_t length){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d22:	4815      	ldr	r0, [pc, #84]	; (8000d78 <NRF_ReadRegs+0x70>)
 8000d24:	f002 fa5a 	bl	80031dc <HAL_GPIO_WritePin>
	// send read command
	if(!NRF_SPI_RW(NRF_CMD_R_REGISTER | address, &address_rx)){
 8000d28:	f107 020f 	add.w	r2, r7, #15
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffcd 	bl	8000cd0 <NRF_SPI_RW>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10d      	bne.n	8000d58 <NRF_ReadRegs+0x50>
		return NRF_ERROR;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e017      	b.n	8000d70 <NRF_ReadRegs+0x68>
	}
	// command is locked by csn, so it will read bytes until length is 0
	while(length--){
		// passing NOP to not write anything
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	20ff      	movs	r0, #255	; 0xff
 8000d44:	f7ff ffc4 	bl	8000cd0 <NRF_SPI_RW>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <NRF_ReadRegs+0x4a>
			return NRF_ERROR;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e00e      	b.n	8000d70 <NRF_ReadRegs+0x68>
		}
		++data;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	603b      	str	r3, [r7, #0]
	while(length--){
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	1e5a      	subs	r2, r3, #1
 8000d5c:	71ba      	strb	r2, [r7, #6]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1ee      	bne.n	8000d40 <NRF_ReadRegs+0x38>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <NRF_ReadRegs+0x70>)
 8000d6a:	f002 fa37 	bl	80031dc <HAL_GPIO_WritePin>
	return NRF_OK;
 8000d6e:	2301      	movs	r3, #1

}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40020400 	.word	0x40020400

08000d7c <NRF_WriteRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return None
 * @retval 1 in case of successful write, 0 in case of failure
 */
bool NRF_WriteRegs(uint8_t address, uint8_t* data, uint8_t length){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	4819      	ldr	r0, [pc, #100]	; (8000dfc <NRF_WriteRegs+0x80>)
 8000d98:	f002 fa20 	bl	80031dc <HAL_GPIO_WritePin>
	// send write command
	if(!NRF_SPI_RW(NRF_CMD_W_REGISTER | address, &address_rx)){
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f043 0320 	orr.w	r3, r3, #32
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f107 020f 	add.w	r2, r7, #15
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff90 	bl	8000cd0 <NRF_SPI_RW>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d111      	bne.n	8000dda <NRF_WriteRegs+0x5e>
		return NRF_ERROR;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e01b      	b.n	8000df2 <NRF_WriteRegs+0x76>
	}
	// command is locked by csn, so it will write bytes until length is 0
	while(length--){
		if(!NRF_SPI_RW(*data, &address_rx)){
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f107 020f 	add.w	r2, r7, #15
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff83 	bl	8000cd0 <NRF_SPI_RW>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <NRF_WriteRegs+0x58>
			return NRF_ERROR;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e00e      	b.n	8000df2 <NRF_WriteRegs+0x76>
		}
		++data;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	603b      	str	r3, [r7, #0]
	while(length--){
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	71ba      	strb	r2, [r7, #6]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ea      	bne.n	8000dba <NRF_WriteRegs+0x3e>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dea:	4804      	ldr	r0, [pc, #16]	; (8000dfc <NRF_WriteRegs+0x80>)
 8000dec:	f002 f9f6 	bl	80031dc <HAL_GPIO_WritePin>
	return NRF_OK;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020400 	.word	0x40020400

08000e00 <NRF_Init>:
 * @brief Init function. Defines basic configuration:
 * - only one pipe, enabled enhanced shockburst, up to 5 retransmits
 * - rest of parameters defined in function body
 * @param[in] nrf : pointer to transciever handler
 */
bool NRF_Init(NRF_HandleTypedef* nrf){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	// below parameters are configurable, wanted to keep them in one place
	nrf->rate_ = RATE_1Mbps;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
	nrf->frequency_ = (uint8_t)10;	// channel frequency 2410MHz
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	220a      	movs	r2, #10
 8000e12:	705a      	strb	r2, [r3, #1]
	nrf->power_amp_ = dBm_0; 	// max power, TX only
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	709a      	strb	r2, [r3, #2]
	nrf->lna_ = LNA_HIGH;	// rx only
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	70da      	strb	r2, [r3, #3]
	nrf->dpl_ = DPL_OFF;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	715a      	strb	r2, [r3, #5]
	nrf->crc_ = CRC_ENABLE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	719a      	strb	r2, [r3, #6]
	nrf->crc_bytes_ = CRCB_ONE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	71da      	strb	r2, [r3, #7]
	nrf->address_width_ = ADR_THREE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	721a      	strb	r2, [r3, #8]
	nrf->retransmissions_ = ARC_TEN;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	725a      	strb	r2, [r3, #9]
	nrf->ret_delay_ = DELAY_2000uS;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2207      	movs	r2, #7
 8000e42:	729a      	strb	r2, [r3, #10]

	if(!NRF_SET_RadioParams(nrf->rate_, nrf->power_amp_, nrf->lna_)){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7818      	ldrb	r0, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7899      	ldrb	r1, [r3, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	78db      	ldrb	r3, [r3, #3]
 8000e50:	461a      	mov	r2, r3
 8000e52:	f000 f872 	bl	8000f3a <NRF_SET_RadioParams>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f083 0301 	eor.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <NRF_Init+0x66>
		return NRF_ERROR;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e065      	b.n	8000f32 <NRF_Init+0x132>
	}
	if(!NRF_SET_Frequency(nrf->frequency_)){
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f8a8 	bl	8000fc0 <NRF_SET_Frequency>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f083 0301 	eor.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <NRF_Init+0x80>
		return NRF_ERROR;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e058      	b.n	8000f32 <NRF_Init+0x132>
	}
	if(!NRF_SET_DynamicPayload(nrf->dpl_)){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	795b      	ldrb	r3, [r3, #5]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f921 	bl	80010cc <NRF_SET_DynamicPayload>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <NRF_Init+0x9a>
		return NRF_ERROR;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e04b      	b.n	8000f32 <NRF_Init+0x132>
	}
	if(!NRF_SET_CRC(nrf->crc_, nrf->crc_bytes_)){
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	799a      	ldrb	r2, [r3, #6]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	79db      	ldrb	r3, [r3, #7]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	f000 f943 	bl	8001130 <NRF_SET_CRC>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <NRF_Init+0xba>
		return NRF_ERROR;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e03b      	b.n	8000f32 <NRF_Init+0x132>
//	uint8_t reg=0;
//		NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1);
//		printf("RF_SETUP: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
//				(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	if(!NRF_SET_PipeAddressWidth(nrf->address_width_)){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7a1b      	ldrb	r3, [r3, #8]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f974 	bl	80011ac <NRF_SET_PipeAddressWidth>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f083 0301 	eor.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <NRF_Init+0xd4>
		return NRF_ERROR;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e02e      	b.n	8000f32 <NRF_Init+0x132>
	}
	if(!NRF_SET_Retransmission(nrf->ret_delay_,  nrf->retransmissions_)){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a9a      	ldrb	r2, [r3, #10]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7a5b      	ldrb	r3, [r3, #9]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f000 f982 	bl	80011e8 <NRF_SET_Retransmission>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f083 0301 	eor.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <NRF_Init+0xf4>
		return NRF_ERROR;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e01e      	b.n	8000f32 <NRF_Init+0x132>
	}
	// flush fifos
	if(!NRF_FlushTXFifo()){
 8000ef4:	f000 fae4 	bl	80014c0 <NRF_FlushTXFifo>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <NRF_Init+0x108>
		return NRF_ERROR;
 8000f04:	2300      	movs	r3, #0
 8000f06:	e014      	b.n	8000f32 <NRF_Init+0x132>
	}
	if(!NRF_FlushRXFifo()){
 8000f08:	f000 fab8 	bl	800147c <NRF_FlushRXFifo>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <NRF_Init+0x11c>
		return NRF_ERROR;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e00a      	b.n	8000f32 <NRF_Init+0x132>
	}

	// clear irq flags
	if(!NRF_ClearIRQFlags()){
 8000f1c:	f000 fb2a 	bl	8001574 <NRF_ClearIRQFlags>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <NRF_Init+0x130>
		return NRF_ERROR;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e000      	b.n	8000f32 <NRF_Init+0x132>
	}
	return NRF_OK;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <NRF_SET_RadioParams>:
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */

bool NRF_SET_RadioParams(NRF_AirDataRate rate, NRF_PowerAmplifier amp, NRF_LNAsetup lna){
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	460b      	mov	r3, r1
 8000f46:	71bb      	strb	r3, [r7, #6]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	717b      	strb	r3, [r7, #5]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8000f4c:	f107 030f 	add.w	r3, r7, #15
 8000f50:	2201      	movs	r2, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	2006      	movs	r0, #6
 8000f56:	f7ff fed7 	bl	8000d08 <NRF_ReadRegs>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <NRF_SET_RadioParams+0x30>
		return NRF_ERROR;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e026      	b.n	8000fb8 <NRF_SET_RadioParams+0x7e>
	}
	reg &= ~(NRF_MASK_RF_DR  | NRF_MASK_RF_PWR | NRF_MASK_LNA);		// sets bits to 0
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
	reg |= ((rate << 3) | (amp << 1) | lna);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f7ff feeb 	bl	8000d7c <NRF_WriteRegs>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f083 0301 	eor.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <NRF_SET_RadioParams+0x7c>
		return NRF_ERROR;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <NRF_SET_RadioParams+0x7e>
	}
	return NRF_OK;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <NRF_SET_Frequency>:
 * @param[in] rate : uint8_t, range 0-125
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Frequency(NRF_Frequency freq){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_freq = freq & NRF_MASK_RF_CH;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_CH, &safe_freq, 1)){
 8000fd4:	f107 030f 	add.w	r3, r7, #15
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f7ff fecd 	bl	8000d7c <NRF_WriteRegs>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <NRF_SET_Frequency+0x32>
		return NRF_ERROR;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <NRF_SET_Frequency+0x34>
	}
	return NRF_OK;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <NRF_SET_Mode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Mode(NRF_Mode mode){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fe7a 	bl	8000d08 <NRF_ReadRegs>
 8001014:	4603      	mov	r3, r0
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <NRF_SET_Mode+0x28>
		return NRF_ERROR;
 8001020:	2300      	movs	r3, #0
 8001022:	e019      	b.n	8001058 <NRF_SET_Mode+0x5c>
	}
	reg &= ~NRF_MASK_MODE;		// sets bit to 0
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
	reg |= mode;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4313      	orrs	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fe9b 	bl	8000d7c <NRF_WriteRegs>
 8001046:	4603      	mov	r3, r0
 8001048:	f083 0301 	eor.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <NRF_SET_Mode+0x5a>
		return NRF_ERROR;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <NRF_SET_Mode+0x5c>
	}
	return NRF_OK;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <NRF_SET_PowerMode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PowerMode(NRF_PowerMode pwr){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 800106a:	f107 030f 	add.w	r3, r7, #15
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fe48 	bl	8000d08 <NRF_ReadRegs>
 8001078:	4603      	mov	r3, r0
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <NRF_SET_PowerMode+0x28>
		return NRF_ERROR;
 8001084:	2300      	movs	r3, #0
 8001086:	e01d      	b.n	80010c4 <NRF_SET_PowerMode+0x64>
	}
	reg &= ~NRF_MASK_PWR_MODE;		// sets bit to 0
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f023 0302 	bic.w	r3, r3, #2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
	reg |= pwr << 1;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b25a      	sxtb	r2, r3
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 80010a4:	f107 030f 	add.w	r3, r7, #15
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fe65 	bl	8000d7c <NRF_WriteRegs>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f083 0301 	eor.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <NRF_SET_PowerMode+0x62>
		return NRF_ERROR;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <NRF_SET_PowerMode+0x64>
	}
	return NRF_OK;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <NRF_SET_DynamicPayload>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_DynamicPayload(NRF_DynamicPayload dpl){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_FEATURE, &reg, 1)){
 80010d6:	f107 030f 	add.w	r3, r7, #15
 80010da:	2201      	movs	r2, #1
 80010dc:	4619      	mov	r1, r3
 80010de:	201d      	movs	r0, #29
 80010e0:	f7ff fe12 	bl	8000d08 <NRF_ReadRegs>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <NRF_SET_DynamicPayload+0x28>
		return NRF_ERROR;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e019      	b.n	8001128 <NRF_SET_DynamicPayload+0x5c>
	}
	reg &= ~NRF_MASK_EN_DPL;		// sets bit to 0
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	f023 0304 	bic.w	r3, r3, #4
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73fb      	strb	r3, [r7, #15]
	reg |= dpl;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4313      	orrs	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_FEATURE, &reg, 1)){
 8001108:	f107 030f 	add.w	r3, r7, #15
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	201d      	movs	r0, #29
 8001112:	f7ff fe33 	bl	8000d7c <NRF_WriteRegs>
 8001116:	4603      	mov	r3, r0
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <NRF_SET_DynamicPayload+0x5a>
		return NRF_ERROR;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <NRF_SET_DynamicPayload+0x5c>
	}
	return NRF_OK;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <NRF_SET_CRC>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_CRC(NRF_CRC crc, NRF_CRCbytes bytes){
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8001140:	f107 030f 	add.w	r3, r7, #15
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fddd 	bl	8000d08 <NRF_ReadRegs>
 800114e:	4603      	mov	r3, r0
 8001150:	f083 0301 	eor.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <NRF_SET_CRC+0x2e>
		return NRF_ERROR;
 800115a:	2300      	movs	r3, #0
 800115c:	e022      	b.n	80011a4 <NRF_SET_CRC+0x74>
	}
	reg &= ~NRF_MASK_CRC;		// sets bits to 0
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f023 030c 	bic.w	r3, r3, #12
 8001164:	b2db      	uxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]
	reg |= ((crc << 3) | (bytes << 2));
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	b25a      	sxtb	r2, r3
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b25a      	sxtb	r2, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	b25b      	sxtb	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8001184:	f107 030f 	add.w	r3, r7, #15
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fdf5 	bl	8000d7c <NRF_WriteRegs>
 8001192:	4603      	mov	r3, r0
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <NRF_SET_CRC+0x72>
		return NRF_ERROR;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <NRF_SET_CRC+0x74>
	}
	return NRF_OK;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <NRF_SET_PipeAddressWidth>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddressWidth(NRF_AddressWidth width){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_width = width & NRF_MASK_AW;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_AW, &safe_width, 1)){
 80011c0:	f107 030f 	add.w	r3, r7, #15
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	2003      	movs	r0, #3
 80011ca:	f7ff fdd7 	bl	8000d7c <NRF_WriteRegs>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <NRF_SET_PipeAddressWidth+0x32>
		return NRF_ERROR;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <NRF_SET_PipeAddressWidth+0x34>
	}
	return NRF_OK;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <NRF_SET_Retransmission>:
 * @param[in] arc : how many retransmissions allowed
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Retransmission(NRF_RetransmitDelay ard, NRF_RetransmitCount arc){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	uint8_t retransmit_data = (ard << 4) | arc;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	b25a      	sxtb	r2, r3
 80011fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001202:	4313      	orrs	r3, r2
 8001204:	b25b      	sxtb	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_RETR, &retransmit_data, 1)){
 800120a:	f107 030f 	add.w	r3, r7, #15
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	2004      	movs	r0, #4
 8001214:	f7ff fdb2 	bl	8000d7c <NRF_WriteRegs>
 8001218:	4603      	mov	r3, r0
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <NRF_SET_Retransmission+0x40>
		return NRF_ERROR;
 8001224:	2300      	movs	r3, #0
 8001226:	e000      	b.n	800122a <NRF_SET_Retransmission+0x42>
	}
	return NRF_OK;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <NRF_SET_PipeAddress>:
 * @param[in] address : pointer to array with address (LSB first, its pretty crucial)
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddress(NRF_Pipe pipe, uint8_t* address){
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	6039      	str	r1, [r7, #0]
 800123c:	71fb      	strb	r3, [r7, #7]
	uint8_t address_width;
	if(!NRF_ReadRegs(NRF_REG_SETUP_AW, &address_width, 1)){
 800123e:	f107 030f 	add.w	r3, r7, #15
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	2003      	movs	r0, #3
 8001248:	f7ff fd5e 	bl	8000d08 <NRF_ReadRegs>
 800124c:	4603      	mov	r3, r0
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <NRF_SET_PipeAddress+0x2a>
		return NRF_ERROR;
 8001258:	2300      	movs	r3, #0
 800125a:	e037      	b.n	80012cc <NRF_SET_PipeAddress+0x9a>
	}

	switch(pipe){
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d00a      	beq.n	8001278 <NRF_SET_PipeAddress+0x46>
 8001262:	2b06      	cmp	r3, #6
 8001264:	dc2c      	bgt.n	80012c0 <NRF_SET_PipeAddress+0x8e>
 8001266:	2b01      	cmp	r3, #1
 8001268:	dc02      	bgt.n	8001270 <NRF_SET_PipeAddress+0x3e>
 800126a:	2b00      	cmp	r3, #0
 800126c:	da04      	bge.n	8001278 <NRF_SET_PipeAddress+0x46>
 800126e:	e027      	b.n	80012c0 <NRF_SET_PipeAddress+0x8e>
 8001270:	3b02      	subs	r3, #2
 8001272:	2b03      	cmp	r3, #3
 8001274:	d824      	bhi.n	80012c0 <NRF_SET_PipeAddress+0x8e>
 8001276:	e013      	b.n	80012a0 <NRF_SET_PipeAddress+0x6e>
		case RX_PIPE_0:
		case RX_PIPE_1:
		case TX_PIPE:
			address_width += 2;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3302      	adds	r3, #2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73fb      	strb	r3, [r7, #15]
			// for pipe 0-1 send all three bytes
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, address_width)){
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	330a      	adds	r3, #10
 8001284:	b2db      	uxtb	r3, r3
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fd76 	bl	8000d7c <NRF_WriteRegs>
 8001290:	4603      	mov	r3, r0
 8001292:	f083 0301 	eor.w	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <NRF_SET_PipeAddress+0x92>
				return NRF_ERROR;
 800129c:	2300      	movs	r3, #0
 800129e:	e015      	b.n	80012cc <NRF_SET_PipeAddress+0x9a>
		case RX_PIPE_2:
		case RX_PIPE_3:
		case RX_PIPE_4:
		case RX_PIPE_5:
			// for pipe 2-5 and tx send only LSB
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, 1)){
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	330a      	adds	r3, #10
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2201      	movs	r2, #1
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd66 	bl	8000d7c <NRF_WriteRegs>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <NRF_SET_PipeAddress+0x96>
				return NRF_ERROR;
 80012bc:	2300      	movs	r3, #0
 80012be:	e005      	b.n	80012cc <NRF_SET_PipeAddress+0x9a>
			}
			break;
		default:
			// some different value, return error
			return NRF_ERROR;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e003      	b.n	80012cc <NRF_SET_PipeAddress+0x9a>
			break;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <NRF_SET_PipeAddress+0x98>
			break;
 80012c8:	bf00      	nop
	}
	return NRF_OK;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <NRF_SET_PipeRX>:
 * @param[in]] payload_length : length (in bytes) of data packets send through pipe
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeRX(NRF_Pipe pipe, NRF_AutoAcknowledge auto_ack, uint8_t payload_length){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	460b      	mov	r3, r1
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	4613      	mov	r3, r2
 80012e4:	717b      	strb	r3, [r7, #5]
	// enable pipe
	uint8_t pipe_en;
	if(!NRF_ReadRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 80012e6:	f107 030f 	add.w	r3, r7, #15
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7ff fd0a 	bl	8000d08 <NRF_ReadRegs>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <NRF_SET_PipeRX+0x30>
		return NRF_ERROR;
 8001300:	2300      	movs	r3, #0
 8001302:	e073      	b.n	80013ec <NRF_SET_PipeRX+0x118>
	}
	pipe_en &= ~(NRF_MASK_EN_BASE << pipe);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2201      	movs	r2, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	b25a      	sxtb	r2, r3
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	4013      	ands	r3, r2
 8001318:	b25b      	sxtb	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
	pipe_en |= 1 << pipe;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2201      	movs	r2, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	b25a      	sxtb	r2, r3
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 8001334:	f107 030f 	add.w	r3, r7, #15
 8001338:	2201      	movs	r2, #1
 800133a:	4619      	mov	r1, r3
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fd1d 	bl	8000d7c <NRF_WriteRegs>
 8001342:	4603      	mov	r3, r0
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <NRF_SET_PipeRX+0x7e>
		return NRF_ERROR;
 800134e:	2300      	movs	r3, #0
 8001350:	e04c      	b.n	80013ec <NRF_SET_PipeRX+0x118>
	}


	// set auto acknowledge
	uint8_t aa_en;
	if(!NRF_ReadRegs(NRF_REG_EN_AA, &aa_en, 1)){
 8001352:	f107 030e 	add.w	r3, r7, #14
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fcd4 	bl	8000d08 <NRF_ReadRegs>
 8001360:	4603      	mov	r3, r0
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <NRF_SET_PipeRX+0x9c>
		return NRF_ERROR;
 800136c:	2300      	movs	r3, #0
 800136e:	e03d      	b.n	80013ec <NRF_SET_PipeRX+0x118>
	}
	aa_en &= ~(NRF_MASK_EN_BASE << pipe);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	b25b      	sxtb	r3, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	b25a      	sxtb	r2, r3
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	4013      	ands	r3, r2
 8001384:	b25b      	sxtb	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	73bb      	strb	r3, [r7, #14]
	aa_en |= 1 << pipe;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2201      	movs	r2, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	b25a      	sxtb	r2, r3
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b25b      	sxtb	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	73bb      	strb	r3, [r7, #14]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &aa_en, 1)){
 80013a0:	f107 030e 	add.w	r3, r7, #14
 80013a4:	2201      	movs	r2, #1
 80013a6:	4619      	mov	r1, r3
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fce7 	bl	8000d7c <NRF_WriteRegs>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f083 0301 	eor.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <NRF_SET_PipeRX+0xea>
		return NRF_ERROR;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e016      	b.n	80013ec <NRF_SET_PipeRX+0x118>
	}

	// set payload length (used when dpl is disabled)
	uint8_t safe_pl_len = NRF_MASK_RX_PW_P & payload_length;
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	737b      	strb	r3, [r7, #13]
	if(!NRF_WriteRegs(NRF_REG_RX_PW_BASE+pipe, &safe_pl_len, 1)){
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3311      	adds	r3, #17
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f107 010d 	add.w	r1, r7, #13
 80013d2:	2201      	movs	r2, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fcd1 	bl	8000d7c <NRF_WriteRegs>
 80013da:	4603      	mov	r3, r0
 80013dc:	f083 0301 	eor.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <NRF_SET_PipeRX+0x116>
		return NRF_ERROR;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <NRF_SET_PipeRX+0x118>
	}

	// if everything passed return ok
	return NRF_OK;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <NRF_GET_PipeNumber>:
 * @param[in] pipe : pointer to pipe variable
 *
 * @return nothing
 * @retval 1 if successfully get, 0 if something went wrong
 */
bool NRF_GET_PipeNumber(uint8_t* pipe){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	uint8_t status_reg = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	2007      	movs	r0, #7
 800140a:	f7ff fc7d 	bl	8000d08 <NRF_ReadRegs>
 800140e:	4603      	mov	r3, r0
 8001410:	f083 0301 	eor.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <NRF_GET_PipeNumber+0x2a>
		return NRF_ERROR;
 800141a:	2300      	movs	r3, #0
 800141c:	e008      	b.n	8001430 <NRF_GET_PipeNumber+0x3c>
	}
	*pipe = (status_reg & NRF_MASK_RX_P_NO) >> 1;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	105b      	asrs	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <NRF_GET_PayloadLength>:
 * @param[in] pipe : pipe number
 *
 * @return nothing
 * @retval 1 if successfully get, 0 if something went wrong
 */
bool NRF_GET_PayloadLength(uint8_t pipe, uint8_t* length){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
	if(!NRF_ReadRegs(NRF_REG_RX_PW_BASE+pipe, length, 1)){
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3311      	adds	r3, #17
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2201      	movs	r2, #1
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fc5a 	bl	8000d08 <NRF_ReadRegs>
 8001454:	4603      	mov	r3, r0
 8001456:	f083 0301 	eor.w	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <NRF_GET_PayloadLength+0x2c>
		return NRF_ERROR;
 8001460:	2300      	movs	r3, #0
 8001462:	e007      	b.n	8001474 <NRF_GET_PayloadLength+0x3c>
	}
	*length &= NRF_MASK_RX_PW_P;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800146c:	b2da      	uxtb	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	701a      	strb	r2, [r3, #0]
	return NRF_OK;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <NRF_FlushRXFifo>:
 * @brief flush rx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushRXFifo(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <NRF_FlushRXFifo+0x40>)
 800148e:	f001 fea5 	bl	80031dc <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_RX, &rx_buff)){
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	4619      	mov	r1, r3
 8001496:	20e2      	movs	r0, #226	; 0xe2
 8001498:	f7ff fc1a 	bl	8000cd0 <NRF_SPI_RW>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <NRF_FlushRXFifo+0x2a>
		return NRF_ERROR;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e006      	b.n	80014b4 <NRF_FlushRXFifo+0x38>
	}
	NRF_CSN_SET_HIGH;
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <NRF_FlushRXFifo+0x40>)
 80014ae:	f001 fe95 	bl	80031dc <HAL_GPIO_WritePin>
	return NRF_OK;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020400 	.word	0x40020400

080014c0 <NRF_FlushTXFifo>:
 * @brief flush tx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushTXFifo(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <NRF_FlushTXFifo+0x40>)
 80014d2:	f001 fe83 	bl	80031dc <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_TX, &rx_buff)){
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	4619      	mov	r1, r3
 80014da:	20e1      	movs	r0, #225	; 0xe1
 80014dc:	f7ff fbf8 	bl	8000cd0 <NRF_SPI_RW>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <NRF_FlushTXFifo+0x2a>
		return NRF_ERROR;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e006      	b.n	80014f8 <NRF_FlushTXFifo+0x38>
	}
	NRF_CSN_SET_HIGH;
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <NRF_FlushTXFifo+0x40>)
 80014f2:	f001 fe73 	bl	80031dc <HAL_GPIO_WritePin>
	return NRF_OK;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020400 	.word	0x40020400

08001504 <NRF_ReadRxPayload>:
 * @param[in] length : data length
 *
 * @return nothing
 * @retval 1 if successfully read, 0 if something went wrong
 */
bool NRF_ReadRxPayload(uint8_t* data, uint8_t length){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_buff = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_SET_LOW;
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800151a:	4815      	ldr	r0, [pc, #84]	; (8001570 <NRF_ReadRxPayload+0x6c>)
 800151c:	f001 fe5e 	bl	80031dc <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_R_RX_PAYLOAD, &rx_buff)){
 8001520:	f107 030f 	add.w	r3, r7, #15
 8001524:	4619      	mov	r1, r3
 8001526:	2061      	movs	r0, #97	; 0x61
 8001528:	f7ff fbd2 	bl	8000cd0 <NRF_SPI_RW>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <NRF_ReadRxPayload+0x4a>
		return NRF_ERROR;
 8001532:	2300      	movs	r3, #0
 8001534:	e017      	b.n	8001566 <NRF_ReadRxPayload+0x62>
	}
	while(length--){
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	20ff      	movs	r0, #255	; 0xff
 800153a:	f7ff fbc9 	bl	8000cd0 <NRF_SPI_RW>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <NRF_ReadRxPayload+0x44>
			return NRF_ERROR;
 8001544:	2300      	movs	r3, #0
 8001546:	e00e      	b.n	8001566 <NRF_ReadRxPayload+0x62>
		}
		data++;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
	while(length--){
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	70fa      	strb	r2, [r7, #3]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ee      	bne.n	8001536 <NRF_ReadRxPayload+0x32>
	}
	NRF_CSN_SET_HIGH;
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <NRF_ReadRxPayload+0x6c>)
 8001560:	f001 fe3c 	bl	80031dc <HAL_GPIO_WritePin>
	return NRF_OK;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020400 	.word	0x40020400

08001574 <NRF_ClearIRQFlags>:
 * @brief clear irq bits in status register
 *
 * @return nothing
 * @retval 1 if successfully cleared, 0 if something went wrong
 */
bool NRF_ClearIRQFlags(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	uint8_t status_reg;
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	2007      	movs	r0, #7
 8001582:	f7ff fbc1 	bl	8000d08 <NRF_ReadRegs>
 8001586:	4603      	mov	r3, r0
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <NRF_ClearIRQFlags+0x22>
		return NRF_ERROR;
 8001592:	2300      	movs	r3, #0
 8001594:	e013      	b.n	80015be <NRF_ClearIRQFlags+0x4a>
	}

	// write 1 to clear bits
	status_reg |= (NRF_MASK_RX_DR | NRF_MASK_TX_DS | NRF_MASK_MAX_RT);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800159c:	b2db      	uxtb	r3, r3
 800159e:	71fb      	strb	r3, [r7, #7]
	if(!NRF_WriteRegs(NRF_REG_STATUS, &status_reg, 1)){
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	2007      	movs	r0, #7
 80015a8:	f7ff fbe8 	bl	8000d7c <NRF_WriteRegs>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <NRF_ClearIRQFlags+0x48>
		return NRF_ERROR;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e000      	b.n	80015be <NRF_ClearIRQFlags+0x4a>
	}
	return NRF_OK;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <NRF_IRQ_Callback>:
 * @param[in] nrfInterruptFlag : pointer to global flag indicating interrupt state
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_Callback(uint8_t* nrfInterrupt, uint8_t* data_buffer){
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]

	if(*nrfInterrupt){
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d043      	beq.n	8001660 <NRF_IRQ_Callback+0x9a>

		uint8_t status_reg = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

		if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 80015dc:	f107 030f 	add.w	r3, r7, #15
 80015e0:	2201      	movs	r2, #1
 80015e2:	4619      	mov	r1, r3
 80015e4:	2007      	movs	r0, #7
 80015e6:	f7ff fb8f 	bl	8000d08 <NRF_ReadRegs>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <NRF_IRQ_Callback+0x34>
			return NRF_ERROR;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e033      	b.n	8001662 <NRF_IRQ_Callback+0x9c>
		}
		// if flag is high, run one of handlers
		if(NRF_MASK_RX_DR & status_reg){
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <NRF_IRQ_Callback+0x56>
			// interrupt: data ready rx fifo
			if(!NRF_IRQ_RxHandler(data_buffer)){
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f000 f82f 	bl	800166a <NRF_IRQ_RxHandler>
 800160c:	4603      	mov	r3, r0
 800160e:	f083 0301 	eor.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d021      	beq.n	800165c <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 8001618:	2300      	movs	r3, #0
 800161a:	e022      	b.n	8001662 <NRF_IRQ_Callback+0x9c>
			}
		}
		else if(NRF_MASK_TX_DS & status_reg){
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d009      	beq.n	800163c <NRF_IRQ_Callback+0x76>
			// interrupt: data sent tx fifo
			if(!NRF_IRQ_TxHandler()){
 8001628:	f000 f869 	bl	80016fe <NRF_IRQ_TxHandler>
 800162c:	4603      	mov	r3, r0
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d011      	beq.n	800165c <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 8001638:	2300      	movs	r3, #0
 800163a:	e012      	b.n	8001662 <NRF_IRQ_Callback+0x9c>
			}
		}
		else if(NRF_MASK_MAX_RT & status_reg){
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <NRF_IRQ_Callback+0x96>
			// interrupt : max no of retransmissions
			if(!NRF_IRQ_MaxHandler()){
 8001648:	f000 f868 	bl	800171c <NRF_IRQ_MaxHandler>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <NRF_IRQ_Callback+0x96>
				return NRF_ERROR;
 8001658:	2300      	movs	r3, #0
 800165a:	e002      	b.n	8001662 <NRF_IRQ_Callback+0x9c>
			}
		}
		return NRF_OK;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <NRF_IRQ_Callback+0x9c>
	}
	else{
		// somehow this was called without flag raised, so call error
		return NRF_ERROR;
 8001660:	2300      	movs	r3, #0
	}

}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <NRF_IRQ_RxHandler>:
 * @param[in] data_buffer : pointer to buffer to read data into
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_RxHandler(uint8_t* data_buffer){
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
	//get pipe number
	uint8_t pipe = 0x07; //sets as empty rx
 8001672:	2307      	movs	r3, #7
 8001674:	73fb      	strb	r3, [r7, #15]
	if(!NRF_GET_PipeNumber(&pipe)){
 8001676:	f107 030f 	add.w	r3, r7, #15
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff feba 	bl	80013f4 <NRF_GET_PipeNumber>
 8001680:	4603      	mov	r3, r0
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <NRF_IRQ_RxHandler+0x26>
		return NRF_ERROR;
 800168c:	2300      	movs	r3, #0
 800168e:	e032      	b.n	80016f6 <NRF_IRQ_RxHandler+0x8c>
	}

	//get length
	uint8_t length = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	73bb      	strb	r3, [r7, #14]
	if(!NRF_GET_PayloadLength(pipe, &length)){
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	f107 020e 	add.w	r2, r7, #14
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fecb 	bl	8001438 <NRF_GET_PayloadLength>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f083 0301 	eor.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <NRF_IRQ_RxHandler+0x48>
		return NRF_ERROR;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e021      	b.n	80016f6 <NRF_IRQ_RxHandler+0x8c>
	}

	//read data
	if(!NRF_ReadRxPayload(data_buffer, length)){
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff24 	bl	8001504 <NRF_ReadRxPayload>
 80016bc:	4603      	mov	r3, r0
 80016be:	f083 0301 	eor.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <NRF_IRQ_RxHandler+0x62>
		return NRF_ERROR;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e014      	b.n	80016f6 <NRF_IRQ_RxHandler+0x8c>
	}

	// deassert IRQ pin; my code supports
	// only one interrupt at a time, so I can clear all flags
	if(!NRF_ClearIRQFlags()){
 80016cc:	f7ff ff52 	bl	8001574 <NRF_ClearIRQFlags>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <NRF_IRQ_RxHandler+0x76>
		return NRF_ERROR;
 80016dc:	2300      	movs	r3, #0
 80016de:	e00a      	b.n	80016f6 <NRF_IRQ_RxHandler+0x8c>
	}
	if(!NRF_FlushRXFifo()){
 80016e0:	f7ff fecc 	bl	800147c <NRF_FlushRXFifo>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f083 0301 	eor.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <NRF_IRQ_RxHandler+0x8a>
		return NRF_ERROR;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e000      	b.n	80016f6 <NRF_IRQ_RxHandler+0x8c>
	}
	return NRF_OK;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <NRF_IRQ_TxHandler>:
 * @brief handle tx interrupt
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_TxHandler(void){
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
	// this only deasserts irq flags
	if(!NRF_ClearIRQFlags()){
 8001702:	f7ff ff37 	bl	8001574 <NRF_ClearIRQFlags>
 8001706:	4603      	mov	r3, r0
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <NRF_IRQ_TxHandler+0x18>
		return NRF_ERROR;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <NRF_IRQ_TxHandler+0x1a>
	}
	return NRF_OK;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	bd80      	pop	{r7, pc}

0800171c <NRF_IRQ_MaxHandler>:
 * @brief handle max interrupt
 *
 * @return nothing
 * @retval nothing
 */
bool NRF_IRQ_MaxHandler(void){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	// clear fifo and deassert pin
	// this config simply discards packet
	if(!NRF_FlushTXFifo()){
 8001720:	f7ff fece 	bl	80014c0 <NRF_FlushTXFifo>
 8001724:	4603      	mov	r3, r0
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <NRF_IRQ_MaxHandler+0x18>
		return NRF_ERROR;
 8001730:	2300      	movs	r3, #0
 8001732:	e00a      	b.n	800174a <NRF_IRQ_MaxHandler+0x2e>
	}

	if(!NRF_ClearIRQFlags()){
 8001734:	f7ff ff1e 	bl	8001574 <NRF_ClearIRQFlags>
 8001738:	4603      	mov	r3, r0
 800173a:	f083 0301 	eor.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <NRF_IRQ_MaxHandler+0x2c>
		return NRF_ERROR;
 8001744:	2300      	movs	r3, #0
 8001746:	e000      	b.n	800174a <NRF_IRQ_MaxHandler+0x2e>
	}
	return NRF_OK;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <NRF_PrintConfig>:

/*
 * debug dump fuction, prints registers in readable format
 */

void NRF_PrintConfig(){
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af06      	add	r7, sp, #24
	uint8_t reg = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
	NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1);
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	2201      	movs	r2, #1
 800175e:	4619      	mov	r1, r3
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fad1 	bl	8000d08 <NRF_ReadRegs>
	printf("CONFIG: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	09db      	lsrs	r3, r3, #7
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f003 0501 	and.w	r5, r3, #1
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f003 0601 	and.w	r6, r3, #1
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f003 0c01 	and.w	ip, r3, #1
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	08d2      	lsrs	r2, r2, #3
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f002 0201 	and.w	r2, r2, #1
 8001798:	79f9      	ldrb	r1, [r7, #7]
 800179a:	0889      	lsrs	r1, r1, #2
 800179c:	b2c9      	uxtb	r1, r1
 800179e:	f001 0101 	and.w	r1, r1, #1
 80017a2:	79f8      	ldrb	r0, [r7, #7]
 80017a4:	0840      	lsrs	r0, r0, #1
 80017a6:	b2c0      	uxtb	r0, r0
 80017a8:	f000 0001 	and.w	r0, r0, #1
 80017ac:	79fc      	ldrb	r4, [r7, #7]
 80017ae:	f004 0401 	and.w	r4, r4, #1
 80017b2:	9404      	str	r4, [sp, #16]
 80017b4:	9003      	str	r0, [sp, #12]
 80017b6:	9102      	str	r1, [sp, #8]
 80017b8:	9201      	str	r2, [sp, #4]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4663      	mov	r3, ip
 80017be:	4632      	mov	r2, r6
 80017c0:	4629      	mov	r1, r5
 80017c2:	48b9      	ldr	r0, [pc, #740]	; (8001aa8 <NRF_PrintConfig+0x358>)
 80017c4:	f003 fe9c 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_EN_AA, &reg, 1);
 80017c8:	1dfb      	adds	r3, r7, #7
 80017ca:	2201      	movs	r2, #1
 80017cc:	4619      	mov	r1, r3
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fa9a 	bl	8000d08 <NRF_ReadRegs>
	printf("EN_AA: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	09db      	lsrs	r3, r3, #7
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0501 	and.w	r5, r3, #1
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 0601 	and.w	r6, r3, #1
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f003 0c01 	and.w	ip, r3, #1
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	08d2      	lsrs	r2, r2, #3
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f002 0201 	and.w	r2, r2, #1
 8001806:	79f9      	ldrb	r1, [r7, #7]
 8001808:	0889      	lsrs	r1, r1, #2
 800180a:	b2c9      	uxtb	r1, r1
 800180c:	f001 0101 	and.w	r1, r1, #1
 8001810:	79f8      	ldrb	r0, [r7, #7]
 8001812:	0840      	lsrs	r0, r0, #1
 8001814:	b2c0      	uxtb	r0, r0
 8001816:	f000 0001 	and.w	r0, r0, #1
 800181a:	79fc      	ldrb	r4, [r7, #7]
 800181c:	f004 0401 	and.w	r4, r4, #1
 8001820:	9404      	str	r4, [sp, #16]
 8001822:	9003      	str	r0, [sp, #12]
 8001824:	9102      	str	r1, [sp, #8]
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	4663      	mov	r3, ip
 800182c:	4632      	mov	r2, r6
 800182e:	4629      	mov	r1, r5
 8001830:	489e      	ldr	r0, [pc, #632]	; (8001aac <NRF_PrintConfig+0x35c>)
 8001832:	f003 fe65 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_EN_RXADDR, &reg, 1);
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	2201      	movs	r2, #1
 800183a:	4619      	mov	r1, r3
 800183c:	2002      	movs	r0, #2
 800183e:	f7ff fa63 	bl	8000d08 <NRF_ReadRegs>
	printf("EN_RXADDR: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	09db      	lsrs	r3, r3, #7
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0501 	and.w	r5, r3, #1
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0601 	and.w	r6, r3, #1
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f003 0c01 	and.w	ip, r3, #1
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 0201 	and.w	r2, r2, #1
 8001874:	79f9      	ldrb	r1, [r7, #7]
 8001876:	0889      	lsrs	r1, r1, #2
 8001878:	b2c9      	uxtb	r1, r1
 800187a:	f001 0101 	and.w	r1, r1, #1
 800187e:	79f8      	ldrb	r0, [r7, #7]
 8001880:	0840      	lsrs	r0, r0, #1
 8001882:	b2c0      	uxtb	r0, r0
 8001884:	f000 0001 	and.w	r0, r0, #1
 8001888:	79fc      	ldrb	r4, [r7, #7]
 800188a:	f004 0401 	and.w	r4, r4, #1
 800188e:	9404      	str	r4, [sp, #16]
 8001890:	9003      	str	r0, [sp, #12]
 8001892:	9102      	str	r1, [sp, #8]
 8001894:	9201      	str	r2, [sp, #4]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4663      	mov	r3, ip
 800189a:	4632      	mov	r2, r6
 800189c:	4629      	mov	r1, r5
 800189e:	4884      	ldr	r0, [pc, #528]	; (8001ab0 <NRF_PrintConfig+0x360>)
 80018a0:	f003 fe2e 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_SETUP_AW, &reg, 1);
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	2201      	movs	r2, #1
 80018a8:	4619      	mov	r1, r3
 80018aa:	2003      	movs	r0, #3
 80018ac:	f7ff fa2c 	bl	8000d08 <NRF_ReadRegs>
	printf("SETUP_AW: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	09db      	lsrs	r3, r3, #7
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f003 0501 	and.w	r5, r3, #1
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 0601 	and.w	r6, r3, #1
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f003 0c01 	and.w	ip, r3, #1
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	79fa      	ldrb	r2, [r7, #7]
 80018da:	08d2      	lsrs	r2, r2, #3
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f002 0201 	and.w	r2, r2, #1
 80018e2:	79f9      	ldrb	r1, [r7, #7]
 80018e4:	0889      	lsrs	r1, r1, #2
 80018e6:	b2c9      	uxtb	r1, r1
 80018e8:	f001 0101 	and.w	r1, r1, #1
 80018ec:	79f8      	ldrb	r0, [r7, #7]
 80018ee:	0840      	lsrs	r0, r0, #1
 80018f0:	b2c0      	uxtb	r0, r0
 80018f2:	f000 0001 	and.w	r0, r0, #1
 80018f6:	79fc      	ldrb	r4, [r7, #7]
 80018f8:	f004 0401 	and.w	r4, r4, #1
 80018fc:	9404      	str	r4, [sp, #16]
 80018fe:	9003      	str	r0, [sp, #12]
 8001900:	9102      	str	r1, [sp, #8]
 8001902:	9201      	str	r2, [sp, #4]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4663      	mov	r3, ip
 8001908:	4632      	mov	r2, r6
 800190a:	4629      	mov	r1, r5
 800190c:	4869      	ldr	r0, [pc, #420]	; (8001ab4 <NRF_PrintConfig+0x364>)
 800190e:	f003 fdf7 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_SETUP_RETR, &reg, 1);
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	2201      	movs	r2, #1
 8001916:	4619      	mov	r1, r3
 8001918:	2004      	movs	r0, #4
 800191a:	f7ff f9f5 	bl	8000d08 <NRF_ReadRegs>
	printf("SETUP_RETR: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	09db      	lsrs	r3, r3, #7
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f003 0501 	and.w	r5, r3, #1
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f003 0601 	and.w	r6, r3, #1
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f003 0c01 	and.w	ip, r3, #1
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	79fa      	ldrb	r2, [r7, #7]
 8001948:	08d2      	lsrs	r2, r2, #3
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 0201 	and.w	r2, r2, #1
 8001950:	79f9      	ldrb	r1, [r7, #7]
 8001952:	0889      	lsrs	r1, r1, #2
 8001954:	b2c9      	uxtb	r1, r1
 8001956:	f001 0101 	and.w	r1, r1, #1
 800195a:	79f8      	ldrb	r0, [r7, #7]
 800195c:	0840      	lsrs	r0, r0, #1
 800195e:	b2c0      	uxtb	r0, r0
 8001960:	f000 0001 	and.w	r0, r0, #1
 8001964:	79fc      	ldrb	r4, [r7, #7]
 8001966:	f004 0401 	and.w	r4, r4, #1
 800196a:	9404      	str	r4, [sp, #16]
 800196c:	9003      	str	r0, [sp, #12]
 800196e:	9102      	str	r1, [sp, #8]
 8001970:	9201      	str	r2, [sp, #4]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4663      	mov	r3, ip
 8001976:	4632      	mov	r2, r6
 8001978:	4629      	mov	r1, r5
 800197a:	484f      	ldr	r0, [pc, #316]	; (8001ab8 <NRF_PrintConfig+0x368>)
 800197c:	f003 fdc0 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_RF_CH, &reg, 1);
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	2201      	movs	r2, #1
 8001984:	4619      	mov	r1, r3
 8001986:	2005      	movs	r0, #5
 8001988:	f7ff f9be 	bl	8000d08 <NRF_ReadRegs>
	printf("RF_CH: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	09db      	lsrs	r3, r3, #7
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0501 	and.w	r5, r3, #1
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 0601 	and.w	r6, r3, #1
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 0c01 	and.w	ip, r3, #1
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	08d2      	lsrs	r2, r2, #3
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f002 0201 	and.w	r2, r2, #1
 80019be:	79f9      	ldrb	r1, [r7, #7]
 80019c0:	0889      	lsrs	r1, r1, #2
 80019c2:	b2c9      	uxtb	r1, r1
 80019c4:	f001 0101 	and.w	r1, r1, #1
 80019c8:	79f8      	ldrb	r0, [r7, #7]
 80019ca:	0840      	lsrs	r0, r0, #1
 80019cc:	b2c0      	uxtb	r0, r0
 80019ce:	f000 0001 	and.w	r0, r0, #1
 80019d2:	79fc      	ldrb	r4, [r7, #7]
 80019d4:	f004 0401 	and.w	r4, r4, #1
 80019d8:	9404      	str	r4, [sp, #16]
 80019da:	9003      	str	r0, [sp, #12]
 80019dc:	9102      	str	r1, [sp, #8]
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4663      	mov	r3, ip
 80019e4:	4632      	mov	r2, r6
 80019e6:	4629      	mov	r1, r5
 80019e8:	4834      	ldr	r0, [pc, #208]	; (8001abc <NRF_PrintConfig+0x36c>)
 80019ea:	f003 fd89 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1);
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	2201      	movs	r2, #1
 80019f2:	4619      	mov	r1, r3
 80019f4:	2006      	movs	r0, #6
 80019f6:	f7ff f987 	bl	8000d08 <NRF_ReadRegs>
	printf("RF_SETUP: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	09db      	lsrs	r3, r3, #7
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f003 0501 	and.w	r5, r3, #1
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 0601 	and.w	r6, r3, #1
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f003 0c01 	and.w	ip, r3, #1
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	08d2      	lsrs	r2, r2, #3
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f002 0201 	and.w	r2, r2, #1
 8001a2c:	79f9      	ldrb	r1, [r7, #7]
 8001a2e:	0889      	lsrs	r1, r1, #2
 8001a30:	b2c9      	uxtb	r1, r1
 8001a32:	f001 0101 	and.w	r1, r1, #1
 8001a36:	79f8      	ldrb	r0, [r7, #7]
 8001a38:	0840      	lsrs	r0, r0, #1
 8001a3a:	b2c0      	uxtb	r0, r0
 8001a3c:	f000 0001 	and.w	r0, r0, #1
 8001a40:	79fc      	ldrb	r4, [r7, #7]
 8001a42:	f004 0401 	and.w	r4, r4, #1
 8001a46:	9404      	str	r4, [sp, #16]
 8001a48:	9003      	str	r0, [sp, #12]
 8001a4a:	9102      	str	r1, [sp, #8]
 8001a4c:	9201      	str	r2, [sp, #4]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4663      	mov	r3, ip
 8001a52:	4632      	mov	r2, r6
 8001a54:	4629      	mov	r1, r5
 8001a56:	481a      	ldr	r0, [pc, #104]	; (8001ac0 <NRF_PrintConfig+0x370>)
 8001a58:	f003 fd52 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_STATUS, &reg, 1);
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4619      	mov	r1, r3
 8001a62:	2007      	movs	r0, #7
 8001a64:	f7ff f950 	bl	8000d08 <NRF_ReadRegs>
	printf("STATUS: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	09db      	lsrs	r3, r3, #7
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f003 0501 	and.w	r5, r3, #1
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f003 0601 	and.w	r6, r3, #1
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f003 0c01 	and.w	ip, r3, #1
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	08d2      	lsrs	r2, r2, #3
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 0201 	and.w	r2, r2, #1
 8001a9a:	79f9      	ldrb	r1, [r7, #7]
 8001a9c:	0889      	lsrs	r1, r1, #2
 8001a9e:	b2c9      	uxtb	r1, r1
 8001aa0:	f001 0101 	and.w	r1, r1, #1
 8001aa4:	e00e      	b.n	8001ac4 <NRF_PrintConfig+0x374>
 8001aa6:	bf00      	nop
 8001aa8:	08006520 	.word	0x08006520
 8001aac:	0800653c 	.word	0x0800653c
 8001ab0:	08006558 	.word	0x08006558
 8001ab4:	08006578 	.word	0x08006578
 8001ab8:	08006594 	.word	0x08006594
 8001abc:	080065b4 	.word	0x080065b4
 8001ac0:	080065d0 	.word	0x080065d0
 8001ac4:	79f8      	ldrb	r0, [r7, #7]
 8001ac6:	0840      	lsrs	r0, r0, #1
 8001ac8:	b2c0      	uxtb	r0, r0
 8001aca:	f000 0001 	and.w	r0, r0, #1
 8001ace:	79fc      	ldrb	r4, [r7, #7]
 8001ad0:	f004 0401 	and.w	r4, r4, #1
 8001ad4:	9404      	str	r4, [sp, #16]
 8001ad6:	9003      	str	r0, [sp, #12]
 8001ad8:	9102      	str	r1, [sp, #8]
 8001ada:	9201      	str	r2, [sp, #4]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4663      	mov	r3, ip
 8001ae0:	4632      	mov	r2, r6
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	48b1      	ldr	r0, [pc, #708]	; (8001dac <NRF_PrintConfig+0x65c>)
 8001ae6:	f003 fd0b 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_OBSERVE_TX, &reg, 1);
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	2201      	movs	r2, #1
 8001aee:	4619      	mov	r1, r3
 8001af0:	2008      	movs	r0, #8
 8001af2:	f7ff f909 	bl	8000d08 <NRF_ReadRegs>
	printf("OBSERVE_TX: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	09db      	lsrs	r3, r3, #7
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 0501 	and.w	r5, r3, #1
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 0601 	and.w	r6, r3, #1
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f003 0c01 	and.w	ip, r3, #1
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	08d2      	lsrs	r2, r2, #3
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f002 0201 	and.w	r2, r2, #1
 8001b28:	79f9      	ldrb	r1, [r7, #7]
 8001b2a:	0889      	lsrs	r1, r1, #2
 8001b2c:	b2c9      	uxtb	r1, r1
 8001b2e:	f001 0101 	and.w	r1, r1, #1
 8001b32:	79f8      	ldrb	r0, [r7, #7]
 8001b34:	0840      	lsrs	r0, r0, #1
 8001b36:	b2c0      	uxtb	r0, r0
 8001b38:	f000 0001 	and.w	r0, r0, #1
 8001b3c:	79fc      	ldrb	r4, [r7, #7]
 8001b3e:	f004 0401 	and.w	r4, r4, #1
 8001b42:	9404      	str	r4, [sp, #16]
 8001b44:	9003      	str	r0, [sp, #12]
 8001b46:	9102      	str	r1, [sp, #8]
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	4632      	mov	r2, r6
 8001b50:	4629      	mov	r1, r5
 8001b52:	4897      	ldr	r0, [pc, #604]	; (8001db0 <NRF_PrintConfig+0x660>)
 8001b54:	f003 fcd4 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	uint8_t address[6];
	for(int i=0; i<6; i++){
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e01d      	b.n	8001b9a <NRF_PrintConfig+0x44a>
		NRF_ReadRegs(NRF_REG_RX_ADDR_BASE+i, address, 6);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	330a      	adds	r3, #10
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4639      	mov	r1, r7
 8001b68:	2206      	movs	r2, #6
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f8cc 	bl	8000d08 <NRF_ReadRegs>
		printf("RX_ADDR_P%d: 0x%X%X%X%X%X%X\n", i, address[0], address[1], address[2], address[3], address[4], address[5]);
 8001b70:	783b      	ldrb	r3, [r7, #0]
 8001b72:	461c      	mov	r4, r3
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	461d      	mov	r5, r3
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	7939      	ldrb	r1, [r7, #4]
 8001b7e:	7978      	ldrb	r0, [r7, #5]
 8001b80:	9003      	str	r0, [sp, #12]
 8001b82:	9102      	str	r1, [sp, #8]
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	462b      	mov	r3, r5
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	4889      	ldr	r0, [pc, #548]	; (8001db4 <NRF_PrintConfig+0x664>)
 8001b90:	f003 fcb6 	bl	8005500 <iprintf>
	for(int i=0; i<6; i++){
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	ddde      	ble.n	8001b5e <NRF_PrintConfig+0x40e>
	}
	NRF_ReadRegs(NRF_REG_TX_ADDR, address, 6);
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	2010      	movs	r0, #16
 8001ba8:	f7ff f8ae 	bl	8000d08 <NRF_ReadRegs>
	printf("RX_ADDR_TX: 0x%X%X%X%X%X%X\n", address[0], address[1], address[2], address[3], address[4], address[5]);
 8001bac:	783b      	ldrb	r3, [r7, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	78bb      	ldrb	r3, [r7, #2]
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	793a      	ldrb	r2, [r7, #4]
 8001bbc:	7979      	ldrb	r1, [r7, #5]
 8001bbe:	9102      	str	r1, [sp, #8]
 8001bc0:	9201      	str	r2, [sp, #4]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	4601      	mov	r1, r0
 8001bca:	487b      	ldr	r0, [pc, #492]	; (8001db8 <NRF_PrintConfig+0x668>)
 8001bcc:	f003 fc98 	bl	8005500 <iprintf>

	for(int i=0; i<6; i++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	e03d      	b.n	8001c52 <NRF_PrintConfig+0x502>
		NRF_ReadRegs(NRF_REG_RX_PW_BASE+i, &reg, 1);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3311      	adds	r3, #17
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	1df9      	adds	r1, r7, #7
 8001be0:	2201      	movs	r2, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f890 	bl	8000d08 <NRF_ReadRegs>
		printf("RX_PW_P%d: %d%d%d%d%d%d%d%d\n",i, (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	09db      	lsrs	r3, r3, #7
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 0601 	and.w	r6, r3, #1
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f003 0c01 	and.w	ip, r3, #1
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	0912      	lsrs	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f002 0201 	and.w	r2, r2, #1
 8001c10:	79f9      	ldrb	r1, [r7, #7]
 8001c12:	08c9      	lsrs	r1, r1, #3
 8001c14:	b2c9      	uxtb	r1, r1
 8001c16:	f001 0101 	and.w	r1, r1, #1
 8001c1a:	79f8      	ldrb	r0, [r7, #7]
 8001c1c:	0880      	lsrs	r0, r0, #2
 8001c1e:	b2c0      	uxtb	r0, r0
 8001c20:	f000 0001 	and.w	r0, r0, #1
 8001c24:	79fc      	ldrb	r4, [r7, #7]
 8001c26:	0864      	lsrs	r4, r4, #1
 8001c28:	b2e4      	uxtb	r4, r4
 8001c2a:	f004 0401 	and.w	r4, r4, #1
 8001c2e:	79fd      	ldrb	r5, [r7, #7]
 8001c30:	f005 0501 	and.w	r5, r5, #1
 8001c34:	9505      	str	r5, [sp, #20]
 8001c36:	9404      	str	r4, [sp, #16]
 8001c38:	9003      	str	r0, [sp, #12]
 8001c3a:	9102      	str	r1, [sp, #8]
 8001c3c:	9201      	str	r2, [sp, #4]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	4663      	mov	r3, ip
 8001c42:	4632      	mov	r2, r6
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	485d      	ldr	r0, [pc, #372]	; (8001dbc <NRF_PrintConfig+0x66c>)
 8001c48:	f003 fc5a 	bl	8005500 <iprintf>
	for(int i=0; i<6; i++){
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	ddbe      	ble.n	8001bd6 <NRF_PrintConfig+0x486>
				(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);
	}
	NRF_ReadRegs(NRF_REG_FIFO_STATUS, &reg, 1);
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2017      	movs	r0, #23
 8001c60:	f7ff f852 	bl	8000d08 <NRF_ReadRegs>
	printf("FIFO_STATUS: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	09db      	lsrs	r3, r3, #7
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f003 0501 	and.w	r5, r3, #1
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 0601 	and.w	r6, r3, #1
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 0c01 	and.w	ip, r3, #1
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	08d2      	lsrs	r2, r2, #3
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 0201 	and.w	r2, r2, #1
 8001c96:	79f9      	ldrb	r1, [r7, #7]
 8001c98:	0889      	lsrs	r1, r1, #2
 8001c9a:	b2c9      	uxtb	r1, r1
 8001c9c:	f001 0101 	and.w	r1, r1, #1
 8001ca0:	79f8      	ldrb	r0, [r7, #7]
 8001ca2:	0840      	lsrs	r0, r0, #1
 8001ca4:	b2c0      	uxtb	r0, r0
 8001ca6:	f000 0001 	and.w	r0, r0, #1
 8001caa:	79fc      	ldrb	r4, [r7, #7]
 8001cac:	f004 0401 	and.w	r4, r4, #1
 8001cb0:	9404      	str	r4, [sp, #16]
 8001cb2:	9003      	str	r0, [sp, #12]
 8001cb4:	9102      	str	r1, [sp, #8]
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4663      	mov	r3, ip
 8001cbc:	4632      	mov	r2, r6
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	483f      	ldr	r0, [pc, #252]	; (8001dc0 <NRF_PrintConfig+0x670>)
 8001cc2:	f003 fc1d 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_DYNPD, &reg, 1);
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4619      	mov	r1, r3
 8001ccc:	201c      	movs	r0, #28
 8001cce:	f7ff f81b 	bl	8000d08 <NRF_ReadRegs>
	printf("DYNPD: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	09db      	lsrs	r3, r3, #7
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 0501 	and.w	r5, r3, #1
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f003 0601 	and.w	r6, r3, #1
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f003 0c01 	and.w	ip, r3, #1
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	08d2      	lsrs	r2, r2, #3
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f002 0201 	and.w	r2, r2, #1
 8001d04:	79f9      	ldrb	r1, [r7, #7]
 8001d06:	0889      	lsrs	r1, r1, #2
 8001d08:	b2c9      	uxtb	r1, r1
 8001d0a:	f001 0101 	and.w	r1, r1, #1
 8001d0e:	79f8      	ldrb	r0, [r7, #7]
 8001d10:	0840      	lsrs	r0, r0, #1
 8001d12:	b2c0      	uxtb	r0, r0
 8001d14:	f000 0001 	and.w	r0, r0, #1
 8001d18:	79fc      	ldrb	r4, [r7, #7]
 8001d1a:	f004 0401 	and.w	r4, r4, #1
 8001d1e:	9404      	str	r4, [sp, #16]
 8001d20:	9003      	str	r0, [sp, #12]
 8001d22:	9102      	str	r1, [sp, #8]
 8001d24:	9201      	str	r2, [sp, #4]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4663      	mov	r3, ip
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	4825      	ldr	r0, [pc, #148]	; (8001dc4 <NRF_PrintConfig+0x674>)
 8001d30:	f003 fbe6 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	NRF_ReadRegs(NRF_REG_FEATURE, &reg, 1);
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	2201      	movs	r2, #1
 8001d38:	4619      	mov	r1, r3
 8001d3a:	201d      	movs	r0, #29
 8001d3c:	f7fe ffe4 	bl	8000d08 <NRF_ReadRegs>
	printf("FEATURE: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	09db      	lsrs	r3, r3, #7
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 0501 	and.w	r5, r3, #1
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f003 0601 	and.w	r6, r3, #1
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 0c01 	and.w	ip, r3, #1
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	08d2      	lsrs	r2, r2, #3
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f002 0201 	and.w	r2, r2, #1
 8001d72:	79f9      	ldrb	r1, [r7, #7]
 8001d74:	0889      	lsrs	r1, r1, #2
 8001d76:	b2c9      	uxtb	r1, r1
 8001d78:	f001 0101 	and.w	r1, r1, #1
 8001d7c:	79f8      	ldrb	r0, [r7, #7]
 8001d7e:	0840      	lsrs	r0, r0, #1
 8001d80:	b2c0      	uxtb	r0, r0
 8001d82:	f000 0001 	and.w	r0, r0, #1
 8001d86:	79fc      	ldrb	r4, [r7, #7]
 8001d88:	f004 0401 	and.w	r4, r4, #1
 8001d8c:	9404      	str	r4, [sp, #16]
 8001d8e:	9003      	str	r0, [sp, #12]
 8001d90:	9102      	str	r1, [sp, #8]
 8001d92:	9201      	str	r2, [sp, #4]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4663      	mov	r3, ip
 8001d98:	4632      	mov	r2, r6
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <NRF_PrintConfig+0x678>)
 8001d9e:	f003 fbaf 	bl	8005500 <iprintf>
			(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	080065ec 	.word	0x080065ec
 8001db0:	08006608 	.word	0x08006608
 8001db4:	08006628 	.word	0x08006628
 8001db8:	08006648 	.word	0x08006648
 8001dbc:	08006664 	.word	0x08006664
 8001dc0:	08006684 	.word	0x08006684
 8001dc4:	080066a4 	.word	0x080066a4
 8001dc8:	080066c0 	.word	0x080066c0

08001dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_MspInit+0x4c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_MspInit+0x4c>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_MspInit+0x4c>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	; 0x38
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <HAL_ETH_MspInit+0x174>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f040 80a4 	bne.w	8001f88 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	6313      	str	r3, [r2, #48]	; 0x30
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f04:	2332      	movs	r3, #50	; 0x32
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f14:	230b      	movs	r3, #11
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481e      	ldr	r0, [pc, #120]	; (8001f98 <HAL_ETH_MspInit+0x17c>)
 8001f20:	f000 ffb0 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f24:	2386      	movs	r3, #134	; 0x86
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f34:	230b      	movs	r3, #11
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4817      	ldr	r0, [pc, #92]	; (8001f9c <HAL_ETH_MspInit+0x180>)
 8001f40:	f000 ffa0 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f56:	230b      	movs	r3, #11
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480f      	ldr	r0, [pc, #60]	; (8001fa0 <HAL_ETH_MspInit+0x184>)
 8001f62:	f000 ff8f 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f78:	230b      	movs	r3, #11
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <HAL_ETH_MspInit+0x188>)
 8001f84:	f000 ff7e 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3738      	adds	r7, #56	; 0x38
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40028000 	.word	0x40028000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40021800 	.word	0x40021800

08001fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_I2C_MspInit+0xe8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12d      	bne.n	8002026 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a30      	ldr	r2, [pc, #192]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001fe6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fec:	2312      	movs	r3, #18
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	4825      	ldr	r0, [pc, #148]	; (8002098 <HAL_I2C_MspInit+0xf0>)
 8002004:	f000 ff3e 	bl	8002e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_I2C_MspInit+0xec>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8002012:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_I2C_MspInit+0xec>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002024:	e030      	b.n	8002088 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_I2C_MspInit+0xf4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d12b      	bne.n	8002088 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_I2C_MspInit+0xec>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800204c:	2303      	movs	r3, #3
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002050:	2312      	movs	r3, #18
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800205c:	2304      	movs	r3, #4
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	480e      	ldr	r0, [pc, #56]	; (80020a0 <HAL_I2C_MspInit+0xf8>)
 8002068:	f000 ff0c 	bl	8002e84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_I2C_MspInit+0xec>)
 8002076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_I2C_MspInit+0xec>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	bf00      	nop
 800208a:	3730      	adds	r7, #48	; 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40005400 	.word	0x40005400
 8002094:	40023800 	.word	0x40023800
 8002098:	40020400 	.word	0x40020400
 800209c:	40005800 	.word	0x40005800
 80020a0:	40021400 	.word	0x40021400

080020a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_SPI_MspInit+0xc0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d14a      	bne.n	800215c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_SPI_MspInit+0xc4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800211a:	230c      	movs	r3, #12
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800212a:	2305      	movs	r3, #5
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <HAL_SPI_MspInit+0xc8>)
 8002136:	f000 fea5 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800214c:	2305      	movs	r3, #5
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <HAL_SPI_MspInit+0xcc>)
 8002158:	f000 fe94 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40003800 	.word	0x40003800
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020400 	.word	0x40020400

08002174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_UART_MspInit+0x84>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d12c      	bne.n	80021f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_UART_MspInit+0x88>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_UART_MspInit+0x88>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_UART_MspInit+0x88>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_MspInit+0x88>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_UART_MspInit+0x88>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_UART_MspInit+0x88>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021e0:	2307      	movs	r3, #7
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <HAL_UART_MspInit+0x8c>)
 80021ec:	f000 fe4a 	bl	8002e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40004800 	.word	0x40004800
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020c00 	.word	0x40020c00

08002204 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002224:	d13f      	bne.n	80022a6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002242:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002254:	230a      	movs	r3, #10
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <HAL_PCD_MspInit+0xb0>)
 8002260:	f000 fe10 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <HAL_PCD_MspInit+0xb0>)
 800227a:	f000 fe03 	bl	8002e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	6353      	str	r3, [r2, #52]	; 0x34
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_PCD_MspInit+0xac>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 f940 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002310:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002314:	f000 ff7c 	bl	8003210 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8002318:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800231c:	f000 ff78 	bl	8003210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00a      	b.n	800234c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002336:	f3af 8000 	nop.w
 800233a:	4601      	mov	r1, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	b2ca      	uxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf0      	blt.n	8002336 <_read+0x12>
	}

return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f90b 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x12>
	}
	return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_close>:

int _close(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	return -1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023be:	605a      	str	r2, [r3, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_isatty>:

int _isatty(int file)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
	return 1;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f003 f834 	bl	800549c <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20030000 	.word	0x20030000
 8002460:	00000400 	.word	0x00000400
 8002464:	20000914 	.word	0x20000914
 8002468:	20000930 	.word	0x20000930

0800246c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002496:	490e      	ldr	r1, [pc, #56]	; (80024d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024ac:	4c0b      	ldr	r4, [pc, #44]	; (80024dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ba:	f7ff ffd7 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024be:	f002 fff3 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c2:	f7fe f87f 	bl	80005c4 <main>
  bx  lr    
 80024c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024d4:	0800679c 	.word	0x0800679c
  ldr r2, =_sbss
 80024d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80024dc:	2000092c 	.word	0x2000092c

080024e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_Init+0x40>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_Init+0x40>)
 80024ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_Init+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <HAL_Init+0x40>)
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_Init+0x40>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800250c:	2003      	movs	r0, #3
 800250e:	f000 f94f 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002512:	2000      	movs	r0, #0
 8002514:	f000 f808 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002518:	f7ff fc58 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023c00 	.word	0x40023c00

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_InitTick+0x54>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x58>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f967 	bl	800281a <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d80a      	bhi.n	8002572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f000 f92f 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <HAL_InitTick+0x5c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000004 	.word	0x20000004
 8002580:	2000000c 	.word	0x2000000c
 8002584:	20000008 	.word	0x20000008

08002588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x20>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x24>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_IncTick+0x24>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	2000000c 	.word	0x2000000c
 80025ac:	20000918 	.word	0x20000918

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000918 	.word	0x20000918

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff ffee 	bl	80025b0 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c

08002610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff29 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff3e 	bl	8002658 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff8e 	bl	8002704 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5d 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff31 	bl	8002674 <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa2 	bl	800276c <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06c      	b.n	8002920 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2223      	movs	r2, #35	; 0x23
 8002854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fadf 	bl	8001e1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_ETH_Init+0xf4>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a30      	ldr	r2, [pc, #192]	; (8002928 <HAL_ETH_Init+0xf4>)
 8002868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_ETH_Init+0xf4>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <HAL_ETH_Init+0xf8>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a2b      	ldr	r2, [pc, #172]	; (800292c <HAL_ETH_Init+0xf8>)
 8002880:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002884:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_ETH_Init+0xf8>)
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4927      	ldr	r1, [pc, #156]	; (800292c <HAL_ETH_Init+0xf8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_ETH_Init+0xf8>)
 8002896:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b0:	f7ff fe7e 	bl	80025b0 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028b6:	e011      	b.n	80028dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028b8:	f7ff fe7a 	bl	80025b0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028c6:	d909      	bls.n	80028dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2204      	movs	r2, #4
 80028cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	22e0      	movs	r2, #224	; 0xe0
 80028d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e021      	b.n	8002920 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e4      	bne.n	80028b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f958 	bl	8002ba4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f9ff 	bl	8002cf8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa55 	bl	8002daa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	2100      	movs	r1, #0
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f9bd 	bl	8002c88 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2210      	movs	r2, #16
 800291a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	40013800 	.word	0x40013800

08002930 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <ETH_SetMACConfig+0x15c>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7c1b      	ldrb	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <ETH_SetMACConfig+0x28>
 8002952:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002956:	e000      	b.n	800295a <ETH_SetMACConfig+0x2a>
 8002958:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7c5b      	ldrb	r3, [r3, #17]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <ETH_SetMACConfig+0x38>
 8002962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002966:	e000      	b.n	800296a <ETH_SetMACConfig+0x3a>
 8002968:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800296a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002970:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7fdb      	ldrb	r3, [r3, #31]
 8002976:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002978:	431a      	orrs	r2, r3
                        macconf->Speed |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800297e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	7f92      	ldrb	r2, [r2, #30]
 8002984:	2a00      	cmp	r2, #0
 8002986:	d102      	bne.n	800298e <ETH_SetMACConfig+0x5e>
 8002988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298c:	e000      	b.n	8002990 <ETH_SetMACConfig+0x60>
 800298e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7f1b      	ldrb	r3, [r3, #28]
 8002996:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002998:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800299e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	d102      	bne.n	80029b8 <ETH_SetMACConfig+0x88>
 80029b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b6:	e000      	b.n	80029ba <ETH_SetMACConfig+0x8a>
 80029b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	7bdb      	ldrb	r3, [r3, #15]
 80029c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029d2:	4313      	orrs	r3, r2
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff fdec 	bl	80025c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	d101      	bne.n	8002a1e <ETH_SetMACConfig+0xee>
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	e000      	b.n	8002a20 <ETH_SetMACConfig+0xf0>
 8002a1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a20:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a2e:	2a01      	cmp	r2, #1
 8002a30:	d101      	bne.n	8002a36 <ETH_SetMACConfig+0x106>
 8002a32:	2208      	movs	r2, #8
 8002a34:	e000      	b.n	8002a38 <ETH_SetMACConfig+0x108>
 8002a36:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a38:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a40:	2a01      	cmp	r2, #1
 8002a42:	d101      	bne.n	8002a48 <ETH_SetMACConfig+0x118>
 8002a44:	2204      	movs	r2, #4
 8002a46:	e000      	b.n	8002a4a <ETH_SetMACConfig+0x11a>
 8002a48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a52:	2a01      	cmp	r2, #1
 8002a54:	d101      	bne.n	8002a5a <ETH_SetMACConfig+0x12a>
 8002a56:	2202      	movs	r2, #2
 8002a58:	e000      	b.n	8002a5c <ETH_SetMACConfig+0x12c>
 8002a5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff fda7 	bl	80025c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	ff20810f 	.word	0xff20810f

08002a90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <ETH_SetDMAConfig+0x110>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	7b1b      	ldrb	r3, [r3, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <ETH_SetDMAConfig+0x2c>
 8002ab6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aba:	e000      	b.n	8002abe <ETH_SetDMAConfig+0x2e>
 8002abc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	7b5b      	ldrb	r3, [r3, #13]
 8002ac2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ac4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	7f52      	ldrb	r2, [r2, #29]
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	d102      	bne.n	8002ad4 <ETH_SetDMAConfig+0x44>
 8002ace:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ad2:	e000      	b.n	8002ad6 <ETH_SetDMAConfig+0x46>
 8002ad4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ad6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	7b9b      	ldrb	r3, [r3, #14]
 8002adc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ade:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ae4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002aec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7f9b      	ldrb	r3, [r3, #30]
 8002af2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002af4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002afa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b02:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7ff fd4e 	bl	80025c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b44:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b4a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b50:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b58:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b5a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b62:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b68:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b76:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7ff fd1f 	bl	80025c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	f8de3f23 	.word	0xf8de3f23

08002ba4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b0a6      	sub	sp, #152	; 0x98
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002be0:	2300      	movs	r3, #0
 8002be2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fe86 	bl	8002930 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c58:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff08 	bl	8002a90 <ETH_SetDMAConfig>
}
 8002c80:	bf00      	nop
 8002c82:	3798      	adds	r7, #152	; 0x98
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3305      	adds	r3, #5
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	3204      	adds	r2, #4
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <ETH_MACAddressConfig+0x68>)
 8002caa:	4413      	add	r3, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	061a      	lsls	r2, r3, #24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <ETH_MACAddressConfig+0x6c>)
 8002cda:	4413      	add	r3, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40028040 	.word	0x40028040
 8002cf4:	40028044 	.word	0x40028044

08002cf8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	e03e      	b.n	8002d84 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	3206      	adds	r2, #6
 8002d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d80c      	bhi.n	8002d68 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68d9      	ldr	r1, [r3, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	461a      	mov	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e004      	b.n	8002d72 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3301      	adds	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d9bd      	bls.n	8002d06 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9c:	611a      	str	r2, [r3, #16]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e046      	b.n	8002e46 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6919      	ldr	r1, [r3, #16]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002df4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	3212      	adds	r2, #18
 8002e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d80c      	bhi.n	8002e36 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6919      	ldr	r1, [r3, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60da      	str	r2, [r3, #12]
 8002e34:	e004      	b.n	8002e40 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d9b5      	bls.n	8002db8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e76:	60da      	str	r2, [r3, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e177      	b.n	8003190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f040 8166 	bne.w	800318a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d005      	beq.n	8002ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d130      	bne.n	8002f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 0201 	and.w	r2, r3, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d017      	beq.n	8002f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d123      	bne.n	8002fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	08da      	lsrs	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3208      	adds	r2, #8
 8002fc2:	69b9      	ldr	r1, [r7, #24]
 8002fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0203 	and.w	r2, r3, #3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80c0 	beq.w	800318a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_GPIO_Init+0x324>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a65      	ldr	r2, [pc, #404]	; (80031a8 <HAL_GPIO_Init+0x324>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_GPIO_Init+0x324>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003026:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_GPIO_Init+0x328>)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	220f      	movs	r2, #15
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_GPIO_Init+0x32c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d037      	beq.n	80030c2 <HAL_GPIO_Init+0x23e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_GPIO_Init+0x330>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_GPIO_Init+0x23a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_GPIO_Init+0x334>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d02b      	beq.n	80030ba <HAL_GPIO_Init+0x236>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a55      	ldr	r2, [pc, #340]	; (80031bc <HAL_GPIO_Init+0x338>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d025      	beq.n	80030b6 <HAL_GPIO_Init+0x232>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a54      	ldr	r2, [pc, #336]	; (80031c0 <HAL_GPIO_Init+0x33c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01f      	beq.n	80030b2 <HAL_GPIO_Init+0x22e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a53      	ldr	r2, [pc, #332]	; (80031c4 <HAL_GPIO_Init+0x340>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d019      	beq.n	80030ae <HAL_GPIO_Init+0x22a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a52      	ldr	r2, [pc, #328]	; (80031c8 <HAL_GPIO_Init+0x344>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0x226>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a51      	ldr	r2, [pc, #324]	; (80031cc <HAL_GPIO_Init+0x348>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00d      	beq.n	80030a6 <HAL_GPIO_Init+0x222>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a50      	ldr	r2, [pc, #320]	; (80031d0 <HAL_GPIO_Init+0x34c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <HAL_GPIO_Init+0x21e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4f      	ldr	r2, [pc, #316]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_GPIO_Init+0x21a>
 800309a:	2309      	movs	r3, #9
 800309c:	e012      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 800309e:	230a      	movs	r3, #10
 80030a0:	e010      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030a2:	2308      	movs	r3, #8
 80030a4:	e00e      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030a6:	2307      	movs	r3, #7
 80030a8:	e00c      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030aa:	2306      	movs	r3, #6
 80030ac:	e00a      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030b2:	2304      	movs	r3, #4
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x240>
 80030c2:	2300      	movs	r3, #0
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f002 0203 	and.w	r2, r2, #3
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d4:	4935      	ldr	r1, [pc, #212]	; (80031ac <HAL_GPIO_Init+0x328>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_GPIO_Init+0x354>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003106:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <HAL_GPIO_Init+0x354>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <HAL_GPIO_Init+0x354>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003130:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <HAL_GPIO_Init+0x354>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003136:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <HAL_GPIO_Init+0x354>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315a:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_GPIO_Init+0x354>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_GPIO_Init+0x354>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <HAL_GPIO_Init+0x354>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	f67f ae84 	bls.w	8002ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021400 	.word	0x40021400
 80031c8:	40021800 	.word	0x40021800
 80031cc:	40021c00 	.word	0x40021c00
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40022400 	.word	0x40022400
 80031d8:	40013c00 	.word	0x40013c00

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f8:	e003      	b.n	8003202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	041a      	lsls	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd fd34 	bl	8000c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40013c00 	.word	0x40013c00

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12b      	b.n	80034aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe fe9e 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a4:	f000 ff18 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a81      	ldr	r2, [pc, #516]	; (80034b4 <HAL_I2C_Init+0x274>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <HAL_I2C_Init+0x84>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a80      	ldr	r2, [pc, #512]	; (80034b8 <HAL_I2C_Init+0x278>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e006      	b.n	80032d2 <HAL_I2C_Init+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a7d      	ldr	r2, [pc, #500]	; (80034bc <HAL_I2C_Init+0x27c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e7      	b.n	80034aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <HAL_I2C_Init+0x280>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a6a      	ldr	r2, [pc, #424]	; (80034b4 <HAL_I2C_Init+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <HAL_I2C_Init+0xd4>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	e009      	b.n	8003328 <HAL_I2C_Init+0xe8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a69      	ldr	r2, [pc, #420]	; (80034c4 <HAL_I2C_Init+0x284>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800333a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	495c      	ldr	r1, [pc, #368]	; (80034b4 <HAL_I2C_Init+0x274>)
 8003344:	428b      	cmp	r3, r1
 8003346:	d819      	bhi.n	800337c <HAL_I2C_Init+0x13c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e59      	subs	r1, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fbb1 f3f3 	udiv	r3, r1, r3
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800335c:	400b      	ands	r3, r1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_I2C_Init+0x138>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e59      	subs	r1, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	e051      	b.n	800341c <HAL_I2C_Init+0x1dc>
 8003378:	2304      	movs	r3, #4
 800337a:	e04f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_I2C_Init+0x168>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_I2C_Init+0x18e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x196>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e022      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10e      	bne.n	80033fc <HAL_I2C_Init+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e58      	subs	r0, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	440b      	add	r3, r1
 80033ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	e00f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800344a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6911      	ldr	r1, [r2, #16]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68d2      	ldr	r2, [r2, #12]
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	000186a0 	.word	0x000186a0
 80034b8:	001e847f 	.word	0x001e847f
 80034bc:	003d08ff 	.word	0x003d08ff
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	10624dd3 	.word	0x10624dd3

080034c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d129      	bne.n	8003532 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0210 	bic.w	r2, r2, #16
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	d12a      	bne.n	80035b0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2224      	movs	r2, #36	; 0x24
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	f023 030f 	bic.w	r3, r3, #15
 8003580:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b29a      	uxth	r2, r3
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	4313      	orrs	r3, r2
 800358a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	89fa      	ldrh	r2, [r7, #14]
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c0:	b08f      	sub	sp, #60	; 0x3c
 80035c2:	af0a      	add	r7, sp, #40	; 0x28
 80035c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e10f      	b.n	80037f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe fe0a 	bl	8002204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2203      	movs	r2, #3
 80035f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fca3 	bl	8004f5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	687e      	ldr	r6, [r7, #4]
 800361c:	466d      	mov	r5, sp
 800361e:	f106 0410 	add.w	r4, r6, #16
 8003622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800362e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003632:	1d33      	adds	r3, r6, #4
 8003634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f001 fc2e 	bl	8004e98 <USB_CoreInit>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0d0      	b.n	80037f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fc91 	bl	8004f7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e04a      	b.n	80036f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	333d      	adds	r3, #61	; 0x3d
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	333c      	adds	r3, #60	; 0x3c
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	b298      	uxth	r0, r3
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3344      	adds	r3, #68	; 0x44
 800369c:	4602      	mov	r2, r0
 800369e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3340      	adds	r3, #64	; 0x40
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3348      	adds	r3, #72	; 0x48
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334c      	adds	r3, #76	; 0x4c
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3354      	adds	r3, #84	; 0x54
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	3301      	adds	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d3af      	bcc.n	8003660 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e044      	b.n	8003790 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	3301      	adds	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3b5      	bcc.n	8003706 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	687e      	ldr	r6, [r7, #4]
 80037a2:	466d      	mov	r5, sp
 80037a4:	f106 0410 	add.w	r4, r6, #16
 80037a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037b8:	1d33      	adds	r3, r6, #4
 80037ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037bc:	6838      	ldr	r0, [r7, #0]
 80037be:	f001 fc29 	bl	8005014 <USB_DevInit>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e00d      	b.n	80037f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fdf4 	bl	80053d6 <USB_DevDisconnect>

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e267      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d075      	beq.n	8003902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003816:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00c      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382a:	2b08      	cmp	r3, #8
 800382c:	d112      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382e:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4b7e      	ldr	r3, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05b      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d157      	bne.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e242      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d106      	bne.n	800386c <HAL_RCC_OscConfig+0x74>
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x98>
 8003876:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6f      	ldr	r2, [pc, #444]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 8003890:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fe7e 	bl	80025b0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe fe7a 	bl	80025b0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e207      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	4b5b      	ldr	r3, [pc, #364]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe fe6a 	bl	80025b0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe fe66 	bl	80025b0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e1f3      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d063      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800390e:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003922:	2b08      	cmp	r3, #8
 8003924:	d11c      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e1c7      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4937      	ldr	r1, [pc, #220]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	e03a      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003968:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_RCC_OscConfig+0x244>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe fe1f 	bl	80025b0 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe fe1b 	bl	80025b0 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e1a8      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4925      	ldr	r1, [pc, #148]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e015      	b.n	80039d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x244>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fdfe 	bl	80025b0 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe fdfa 	bl	80025b0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e187      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d036      	beq.n	8003a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x248>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe fdde 	bl	80025b0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fe fdda 	bl	80025b0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e167      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x200>
 8003a16:	e01b      	b.n	8003a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_OscConfig+0x248>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fdc7 	bl	80025b0 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	e00e      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a26:	f7fe fdc3 	bl	80025b0 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d907      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e150      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470000 	.word	0x42470000
 8003a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a44:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ea      	bne.n	8003a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8097 	beq.w	8003b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	4b7d      	ldr	r3, [pc, #500]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7e:	4b7a      	ldr	r3, [pc, #488]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d118      	bne.n	8003acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9a:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fd83 	bl	80025b0 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aae:	f7fe fd7f 	bl	80025b0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e10c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x474>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a63      	ldr	r2, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	e01c      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x30c>
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a5e      	ldr	r2, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
 8003af6:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
 8003b04:	4b58      	ldr	r3, [pc, #352]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	4b55      	ldr	r3, [pc, #340]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fe fd44 	bl	80025b0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fd40 	bl	80025b0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0cb      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ee      	beq.n	8003b2c <HAL_RCC_OscConfig+0x334>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b50:	f7fe fd2e 	bl	80025b0 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe fd2a 	bl	80025b0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0b5      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ee      	bne.n	8003b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a1 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d05c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d141      	bne.n	8003c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fcfe 	bl	80025b0 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fcfa 	bl	80025b0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e087      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	019b      	lsls	r3, r3, #6
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	491b      	ldr	r1, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fe fcd3 	bl	80025b0 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe fccf 	bl	80025b0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e05c      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x416>
 8003c2c:	e054      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCC_OscConfig+0x478>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe fcbc 	bl	80025b0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe fcb8 	bl	80025b0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e045      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x470>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x444>
 8003c5a:	e03d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e038      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x4ec>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d121      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0cc      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d90c      	bls.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b63      	ldr	r3, [pc, #396]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0b8      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d3c:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d60:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	494d      	ldr	r1, [pc, #308]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d044      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e067      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4934      	ldr	r1, [pc, #208]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe fbea 	bl	80025b0 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe fbe6 	bl	80025b0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e04f      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d20c      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e032      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	490e      	ldr	r1, [pc, #56]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e6e:	f000 f821 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	490a      	ldr	r1, [pc, #40]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	5ccb      	ldrb	r3, [r1, r3]
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a09      	ldr	r2, [pc, #36]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fb4a 	bl	8002528 <HAL_InitTick>

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023c00 	.word	0x40023c00
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	080066dc 	.word	0x080066dc
 8003eac:	20000004 	.word	0x20000004
 8003eb0:	20000008 	.word	0x20000008

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b094      	sub	sp, #80	; 0x50
 8003eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ecc:	4b79      	ldr	r3, [pc, #484]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	f200 80e1 	bhi.w	80040a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d003      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ee6:	e0db      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003eec:	e0db      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eee:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef2:	e0d8      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003efe:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d063      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	2200      	movs	r2, #0
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
 8003f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	0159      	lsls	r1, r3, #5
 8003f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f38:	0150      	lsls	r0, r2, #5
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4621      	mov	r1, r4
 8003f40:	1a51      	subs	r1, r2, r1
 8003f42:	6139      	str	r1, [r7, #16]
 8003f44:	4629      	mov	r1, r5
 8003f46:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f58:	4659      	mov	r1, fp
 8003f5a:	018b      	lsls	r3, r1, #6
 8003f5c:	4651      	mov	r1, sl
 8003f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f62:	4651      	mov	r1, sl
 8003f64:	018a      	lsls	r2, r1, #6
 8003f66:	4651      	mov	r1, sl
 8003f68:	ebb2 0801 	subs.w	r8, r2, r1
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	eb18 0303 	adds.w	r3, r8, r3
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	462b      	mov	r3, r5
 8003f94:	eb49 0303 	adc.w	r3, r9, r3
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	024b      	lsls	r3, r1, #9
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	024a      	lsls	r2, r1, #9
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fba:	2200      	movs	r2, #0
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc4:	f7fc f964 	bl	8000290 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	e058      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4611      	mov	r1, r2
 8003fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	f04f 0000 	mov.w	r0, #0
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	0159      	lsls	r1, r3, #5
 8003ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffe:	0150      	lsls	r0, r2, #5
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4641      	mov	r1, r8
 8004006:	ebb2 0a01 	subs.w	sl, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800401c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004024:	ebb2 040a 	subs.w	r4, r2, sl
 8004028:	eb63 050b 	sbc.w	r5, r3, fp
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	00eb      	lsls	r3, r5, #3
 8004036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403a:	00e2      	lsls	r2, r4, #3
 800403c:	4614      	mov	r4, r2
 800403e:	461d      	mov	r5, r3
 8004040:	4643      	mov	r3, r8
 8004042:	18e3      	adds	r3, r4, r3
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	464b      	mov	r3, r9
 8004048:	eb45 0303 	adc.w	r3, r5, r3
 800404c:	607b      	str	r3, [r7, #4]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800405a:	4629      	mov	r1, r5
 800405c:	028b      	lsls	r3, r1, #10
 800405e:	4621      	mov	r1, r4
 8004060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004064:	4621      	mov	r1, r4
 8004066:	028a      	lsls	r2, r1, #10
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	61fa      	str	r2, [r7, #28]
 8004074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004078:	f7fc f90a 	bl	8000290 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4613      	mov	r3, r2
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3750      	adds	r7, #80	; 0x50
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	00f42400 	.word	0x00f42400
 80040bc:	007a1200 	.word	0x007a1200

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000004 	.word	0x20000004

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff0 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0a9b      	lsrs	r3, r3, #10
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	080066ec 	.word	0x080066ec

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffdc 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0b5b      	lsrs	r3, r3, #13
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	080066ec 	.word	0x080066ec

08004128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07b      	b.n	8004232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414a:	d009      	beq.n	8004160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e005      	b.n	8004160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd ff92 	bl	80020a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0104 	and.w	r1, r3, #4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0210 	and.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b08c      	sub	sp, #48	; 0x30
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004248:	2301      	movs	r3, #1
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_SPI_TransmitReceive+0x26>
 800425c:	2302      	movs	r3, #2
 800425e:	e18a      	b.n	8004576 <HAL_SPI_TransmitReceive+0x33c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004268:	f7fe f9a2 	bl	80025b0 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800427e:	887b      	ldrh	r3, [r7, #2]
 8004280:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004286:	2b01      	cmp	r3, #1
 8004288:	d00f      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x70>
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004290:	d107      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x68>
 800429a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d003      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042a8:	e15b      	b.n	8004562 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_SPI_TransmitReceive+0x82>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_SPI_TransmitReceive+0x82>
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042c2:	e14e      	b.n	8004562 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d003      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2205      	movs	r2, #5
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d007      	beq.n	800432c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004334:	d178      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_TransmitReceive+0x10a>
 800433e:	8b7b      	ldrh	r3, [r7, #26]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d166      	bne.n	8004412 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004368:	e053      	b.n	8004412 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d11b      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x176>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x176>
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d113      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d119      	bne.n	80043f2 <HAL_SPI_TransmitReceive+0x1b8>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d014      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	b292      	uxth	r2, r2
 80043d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ee:	2301      	movs	r3, #1
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043f2:	f7fe f8dd 	bl	80025b0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043fe:	429a      	cmp	r2, r3
 8004400:	d807      	bhi.n	8004412 <HAL_SPI_TransmitReceive+0x1d8>
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d003      	beq.n	8004412 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004410:	e0a7      	b.n	8004562 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1a6      	bne.n	800436a <HAL_SPI_TransmitReceive+0x130>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1a1      	bne.n	800436a <HAL_SPI_TransmitReceive+0x130>
 8004426:	e07c      	b.n	8004522 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x1fc>
 8004430:	8b7b      	ldrh	r3, [r7, #26]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d16b      	bne.n	800450e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800445c:	e057      	b.n	800450e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d11c      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x26c>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d017      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x26c>
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d114      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d119      	bne.n	80044e8 <HAL_SPI_TransmitReceive+0x2ae>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d014      	beq.n	80044e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044e8:	f7fe f862 	bl	80025b0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d803      	bhi.n	8004500 <HAL_SPI_TransmitReceive+0x2c6>
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d102      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x2cc>
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800450c:	e029      	b.n	8004562 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1a2      	bne.n	800445e <HAL_SPI_TransmitReceive+0x224>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d19d      	bne.n	800445e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8b2 	bl	8004690 <SPI_EndRxTxTransaction>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800453e:	e010      	b.n	8004562 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	e000      	b.n	8004562 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004560:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004576:	4618      	mov	r0, r3
 8004578:	3730      	adds	r7, #48	; 0x30
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004590:	f7fe f80e 	bl	80025b0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045a0:	f7fe f806 	bl	80025b0 <HAL_GetTick>
 80045a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	0d1b      	lsrs	r3, r3, #20
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b6:	e054      	b.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d050      	beq.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045c0:	f7fd fff6 	bl	80025b0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d902      	bls.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d13d      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ee:	d111      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f8:	d004      	beq.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d107      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461c:	d10f      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800463c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e017      	b.n	8004682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3b01      	subs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d19b      	bne.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000004 	.word	0x20000004

08004690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <SPI_EndRxTxTransaction+0x7c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <SPI_EndRxTxTransaction+0x80>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	0d5b      	lsrs	r3, r3, #21
 80046a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ba:	d112      	bne.n	80046e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2200      	movs	r2, #0
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff ff5a 	bl	8004580 <SPI_WaitFlagStateUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e00f      	b.n	8004702 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d0f2      	beq.n	80046e2 <SPI_EndRxTxTransaction+0x52>
 80046fc:	e000      	b.n	8004700 <SPI_EndRxTxTransaction+0x70>
        break;
 80046fe:	bf00      	nop
  }

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000004 	.word	0x20000004
 8004710:	165e9f81 	.word	0x165e9f81

08004714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e03f      	b.n	80047a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd fd1a 	bl	8002174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2224      	movs	r2, #36	; 0x24
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f929 	bl	80049b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800476c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695a      	ldr	r2, [r3, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800477c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b08a      	sub	sp, #40	; 0x28
 80047b2:	af02      	add	r7, sp, #8
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d17c      	bne.n	80048c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_Transmit+0x2c>
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e075      	b.n	80048ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_UART_Transmit+0x3e>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e06e      	b.n	80048ca <HAL_UART_Transmit+0x11c>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2221      	movs	r2, #33	; 0x21
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004802:	f7fd fed5 	bl	80025b0 <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d108      	bne.n	8004830 <HAL_UART_Transmit+0x82>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	e003      	b.n	8004838 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004840:	e02a      	b.n	8004898 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f840 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e036      	b.n	80048ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	3302      	adds	r3, #2
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e007      	b.n	800488a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1cf      	bne.n	8004842 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2140      	movs	r1, #64	; 0x40
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f810 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b090      	sub	sp, #64	; 0x40
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	e050      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d04c      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f2:	f7fd fe5d 	bl	80025b0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	429a      	cmp	r2, r3
 8004900:	d241      	bcs.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004922:	637a      	str	r2, [r7, #52]	; 0x34
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3314      	adds	r3, #20
 800493c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	613b      	str	r3, [r7, #16]
   return(result);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004956:	623a      	str	r2, [r7, #32]
 8004958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	69f9      	ldr	r1, [r7, #28]
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	61bb      	str	r3, [r7, #24]
   return(result);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d09f      	beq.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3740      	adds	r7, #64	; 0x40
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b0c0      	sub	sp, #256	; 0x100
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	ea40 0301 	orr.w	r3, r0, r1
 80049d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a08:	f021 010c 	bic.w	r1, r1, #12
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a16:	430b      	orrs	r3, r1
 8004a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	6999      	ldr	r1, [r3, #24]
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	ea40 0301 	orr.w	r3, r0, r1
 8004a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b8f      	ldr	r3, [pc, #572]	; (8004c7c <UART_SetConfig+0x2cc>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d005      	beq.n	8004a50 <UART_SetConfig+0xa0>
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d104      	bne.n	8004a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7ff fb56 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8004a54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a58:	e003      	b.n	8004a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a5a:	f7ff fb3d 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8004a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6c:	f040 810c 	bne.w	8004c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a92:	4621      	mov	r1, r4
 8004a94:	eb12 0801 	adds.w	r8, r2, r1
 8004a98:	4629      	mov	r1, r5
 8004a9a:	eb43 0901 	adc.w	r9, r3, r1
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab2:	4690      	mov	r8, r2
 8004ab4:	4699      	mov	r9, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	eb18 0303 	adds.w	r3, r8, r3
 8004abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	eb49 0303 	adc.w	r3, r9, r3
 8004ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ade:	460b      	mov	r3, r1
 8004ae0:	18db      	adds	r3, r3, r3
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	eb42 0303 	adc.w	r3, r2, r3
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
 8004aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004af4:	f7fb fbcc 	bl	8000290 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004afe:	fba3 2302 	umull	r2, r3, r3, r2
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	011c      	lsls	r4, r3, #4
 8004b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b20:	415b      	adcs	r3, r3
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b28:	4641      	mov	r1, r8
 8004b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b2e:	4649      	mov	r1, r9
 8004b30:	eb43 0b01 	adc.w	fp, r3, r1
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b48:	4692      	mov	sl, r2
 8004b4a:	469b      	mov	fp, r3
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb4b 0303 	adc.w	r3, fp, r3
 8004b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	643b      	str	r3, [r7, #64]	; 0x40
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	647b      	str	r3, [r7, #68]	; 0x44
 8004b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b8a:	f7fb fb81 	bl	8000290 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004b96:	fba3 2301 	umull	r2, r3, r3, r1
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2264      	movs	r2, #100	; 0x64
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	1acb      	subs	r3, r1, r3
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004bac:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bb8:	441c      	add	r4, r3
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bdc:	4641      	mov	r1, r8
 8004bde:	1851      	adds	r1, r2, r1
 8004be0:	6339      	str	r1, [r7, #48]	; 0x30
 8004be2:	4649      	mov	r1, r9
 8004be4:	414b      	adcs	r3, r1
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	00cb      	lsls	r3, r1, #3
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bfe:	4651      	mov	r1, sl
 8004c00:	00ca      	lsls	r2, r1, #3
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	189b      	adds	r3, r3, r2
 8004c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c10:	464b      	mov	r3, r9
 8004c12:	460a      	mov	r2, r1
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c30:	460b      	mov	r3, r1
 8004c32:	18db      	adds	r3, r3, r3
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	4613      	mov	r3, r2
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c46:	f7fb fb23 	bl	8000290 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 0207 	and.w	r2, r3, #7
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4422      	add	r2, r4
 8004c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c78:	e105      	b.n	8004e86 <UART_SetConfig+0x4d6>
 8004c7a:	bf00      	nop
 8004c7c:	40011000 	.word	0x40011000
 8004c80:	40011400 	.word	0x40011400
 8004c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	1891      	adds	r1, r2, r2
 8004ca0:	6239      	str	r1, [r7, #32]
 8004ca2:	415b      	adcs	r3, r3
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004caa:	4641      	mov	r1, r8
 8004cac:	1854      	adds	r4, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb43 0501 	adc.w	r5, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00eb      	lsls	r3, r5, #3
 8004cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	18e3      	adds	r3, r4, r3
 8004ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	eb45 0303 	adc.w	r3, r5, r3
 8004cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	008b      	lsls	r3, r1, #2
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d00:	4621      	mov	r1, r4
 8004d02:	008a      	lsls	r2, r1, #2
 8004d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d08:	f7fb fac2 	bl	8000290 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b60      	ldr	r3, [pc, #384]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	61b9      	str	r1, [r7, #24]
 8004d34:	415b      	adcs	r3, r3
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	1851      	adds	r1, r2, r1
 8004d40:	6139      	str	r1, [r7, #16]
 8004d42:	4649      	mov	r1, r9
 8004d44:	414b      	adcs	r3, r1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d54:	4659      	mov	r1, fp
 8004d56:	00cb      	lsls	r3, r1, #3
 8004d58:	4651      	mov	r1, sl
 8004d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5e:	4651      	mov	r1, sl
 8004d60:	00ca      	lsls	r2, r1, #3
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	4642      	mov	r2, r8
 8004d6a:	189b      	adds	r3, r3, r2
 8004d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d70:	464b      	mov	r3, r9
 8004d72:	460a      	mov	r2, r1
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d94:	4649      	mov	r1, r9
 8004d96:	008b      	lsls	r3, r1, #2
 8004d98:	4641      	mov	r1, r8
 8004d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9e:	4641      	mov	r1, r8
 8004da0:	008a      	lsls	r2, r1, #2
 8004da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004da6:	f7fb fa73 	bl	8000290 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	; 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	3332      	adds	r3, #50	; 0x32
 8004dc2:	4a34      	ldr	r2, [pc, #208]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dce:	441c      	add	r4, r3
 8004dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004dd8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dde:	4642      	mov	r2, r8
 8004de0:	464b      	mov	r3, r9
 8004de2:	1891      	adds	r1, r2, r2
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	415b      	adcs	r3, r3
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dee:	4641      	mov	r1, r8
 8004df0:	1851      	adds	r1, r2, r1
 8004df2:	6039      	str	r1, [r7, #0]
 8004df4:	4649      	mov	r1, r9
 8004df6:	414b      	adcs	r3, r1
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e06:	4659      	mov	r1, fp
 8004e08:	00cb      	lsls	r3, r1, #3
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e10:	4651      	mov	r1, sl
 8004e12:	00ca      	lsls	r2, r1, #3
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e20:	464b      	mov	r3, r9
 8004e22:	460a      	mov	r2, r1
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	663b      	str	r3, [r7, #96]	; 0x60
 8004e34:	667a      	str	r2, [r7, #100]	; 0x64
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e42:	4649      	mov	r1, r9
 8004e44:	008b      	lsls	r3, r1, #2
 8004e46:	4641      	mov	r1, r8
 8004e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	008a      	lsls	r2, r1, #2
 8004e50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e54:	f7fb fa1c 	bl	8000290 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2164      	movs	r1, #100	; 0x64
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	3332      	adds	r3, #50	; 0x32
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <UART_SetConfig+0x4e4>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f003 020f 	and.w	r2, r3, #15
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4422      	add	r2, r4
 8004e84:	609a      	str	r2, [r3, #8]
}
 8004e86:	bf00      	nop
 8004e88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	51eb851f 	.word	0x51eb851f

08004e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e98:	b084      	sub	sp, #16
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	f107 001c 	add.w	r0, r7, #28
 8004ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d122      	bne.n	8004ef6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 faa2 	bl	8005434 <USB_CoreReset>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e01a      	b.n	8004f2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa96 	bl	8005434 <USB_CoreReset>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f1e:	e005      	b.n	8004f2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10b      	bne.n	8004f4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f043 0206 	orr.w	r2, r3, #6
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f56:	b004      	add	sp, #16
 8004f58:	4770      	bx	lr

08004f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d115      	bne.n	8004fca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7fd fb0c 	bl	80025c8 <HAL_Delay>
      ms++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa2e 	bl	8005418 <USB_GetMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d01e      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b31      	cmp	r3, #49	; 0x31
 8004fc6:	d9f0      	bls.n	8004faa <USB_SetCurrentMode+0x2e>
 8004fc8:	e01a      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d115      	bne.n	8004ffc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f7fd faf3 	bl	80025c8 <HAL_Delay>
      ms++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fa15 	bl	8005418 <USB_GetMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b31      	cmp	r3, #49	; 0x31
 8004ff8:	d9f0      	bls.n	8004fdc <USB_SetCurrentMode+0x60>
 8004ffa:	e001      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e005      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b32      	cmp	r3, #50	; 0x32
 8005004:	d101      	bne.n	800500a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e009      	b.n	8005048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3340      	adds	r3, #64	; 0x40
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3301      	adds	r3, #1
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b0e      	cmp	r3, #14
 800504c:	d9f2      	bls.n	8005034 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11c      	bne.n	800508e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
 800508c:	e00b      	b.n	80050a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	4619      	mov	r1, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c0:	461a      	mov	r2, r3
 80050c2:	680b      	ldr	r3, [r1, #0]
 80050c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10c      	bne.n	80050e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050d2:	2100      	movs	r1, #0
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f965 	bl	80053a4 <USB_SetDevSpeed>
 80050da:	e008      	b.n	80050ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050dc:	2101      	movs	r1, #1
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f960 	bl	80053a4 <USB_SetDevSpeed>
 80050e4:	e003      	b.n	80050ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050e6:	2103      	movs	r1, #3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f95b 	bl	80053a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ee:	2110      	movs	r1, #16
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f8f3 	bl	80052dc <USB_FlushTxFifo>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f91f 	bl	8005344 <USB_FlushRxFifo>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	461a      	mov	r2, r3
 8005118:	2300      	movs	r3, #0
 800511a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	461a      	mov	r2, r3
 8005124:	2300      	movs	r3, #0
 8005126:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	461a      	mov	r2, r3
 8005130:	2300      	movs	r3, #0
 8005132:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e043      	b.n	80051c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005150:	d118      	bne.n	8005184 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e013      	b.n	8005196 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	461a      	mov	r2, r3
 800517c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e008      	b.n	8005196 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	461a      	mov	r2, r3
 8005192:	2300      	movs	r3, #0
 8005194:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	3301      	adds	r3, #1
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3b7      	bcc.n	800513a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e043      	b.n	8005258 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e6:	d118      	bne.n	800521a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e013      	b.n	800522c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	461a      	mov	r2, r3
 8005212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e008      	b.n	800522c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005250:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3301      	adds	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	429a      	cmp	r2, r3
 800525e:	d3b7      	bcc.n	80051d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005272:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005280:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f043 0210 	orr.w	r2, r3, #16
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <USB_DevInit+0x2c4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f043 0208 	orr.w	r2, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c0:	f043 0304 	orr.w	r3, r3, #4
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d4:	b004      	add	sp, #16
 80052d6:	4770      	bx	lr
 80052d8:	803c3800 	.word	0x803c3800

080052dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <USB_FlushTxFifo+0x64>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e01b      	b.n	8005334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	daf2      	bge.n	80052ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	019b      	lsls	r3, r3, #6
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a08      	ldr	r2, [pc, #32]	; (8005340 <USB_FlushTxFifo+0x64>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e006      	b.n	8005334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d0f0      	beq.n	8005314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	00030d40 	.word	0x00030d40

08005344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <USB_FlushRxFifo+0x5c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e018      	b.n	8005394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	daf2      	bge.n	8005350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2210      	movs	r2, #16
 8005372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <USB_FlushRxFifo+0x5c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e006      	b.n	8005394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b10      	cmp	r3, #16
 8005390:	d0f0      	beq.n	8005374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	00030d40 	.word	0x00030d40

080053a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053f0:	f023 0303 	bic.w	r3, r3, #3
 80053f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0301 	and.w	r3, r3, #1
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <USB_CoreReset+0x64>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e01b      	b.n	800548a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	daf2      	bge.n	8005440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <USB_CoreReset+0x64>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d0f0      	beq.n	800546a <USB_CoreReset+0x36>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	00030d40 	.word	0x00030d40

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	; (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000010 	.word	0x20000010

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4d0d      	ldr	r5, [pc, #52]	; (80054e0 <__libc_init_array+0x38>)
 80054ac:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054ae:	1b64      	subs	r4, r4, r5
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	2600      	movs	r6, #0
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	4d0b      	ldr	r5, [pc, #44]	; (80054e8 <__libc_init_array+0x40>)
 80054ba:	4c0c      	ldr	r4, [pc, #48]	; (80054ec <__libc_init_array+0x44>)
 80054bc:	f001 f80c 	bl	80064d8 <_init>
 80054c0:	1b64      	subs	r4, r4, r5
 80054c2:	10a4      	asrs	r4, r4, #2
 80054c4:	2600      	movs	r6, #0
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08006794 	.word	0x08006794
 80054e4:	08006794 	.word	0x08006794
 80054e8:	08006794 	.word	0x08006794
 80054ec:	08006798 	.word	0x08006798

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <iprintf>:
 8005500:	b40f      	push	{r0, r1, r2, r3}
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <iprintf+0x2c>)
 8005504:	b513      	push	{r0, r1, r4, lr}
 8005506:	681c      	ldr	r4, [r3, #0]
 8005508:	b124      	cbz	r4, 8005514 <iprintf+0x14>
 800550a:	69a3      	ldr	r3, [r4, #24]
 800550c:	b913      	cbnz	r3, 8005514 <iprintf+0x14>
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f87c 	bl	800560c <__sinit>
 8005514:	ab05      	add	r3, sp, #20
 8005516:	9a04      	ldr	r2, [sp, #16]
 8005518:	68a1      	ldr	r1, [r4, #8]
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	4620      	mov	r0, r4
 800551e:	f000 f9d3 	bl	80058c8 <_vfiprintf_r>
 8005522:	b002      	add	sp, #8
 8005524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005528:	b004      	add	sp, #16
 800552a:	4770      	bx	lr
 800552c:	20000010 	.word	0x20000010

08005530 <putchar>:
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <putchar+0x28>)
 8005532:	b513      	push	{r0, r1, r4, lr}
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	4601      	mov	r1, r0
 8005538:	b134      	cbz	r4, 8005548 <putchar+0x18>
 800553a:	69a3      	ldr	r3, [r4, #24]
 800553c:	b923      	cbnz	r3, 8005548 <putchar+0x18>
 800553e:	9001      	str	r0, [sp, #4]
 8005540:	4620      	mov	r0, r4
 8005542:	f000 f863 	bl	800560c <__sinit>
 8005546:	9901      	ldr	r1, [sp, #4]
 8005548:	68a2      	ldr	r2, [r4, #8]
 800554a:	4620      	mov	r0, r4
 800554c:	b002      	add	sp, #8
 800554e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005552:	f000 bc7d 	b.w	8005e50 <_putc_r>
 8005556:	bf00      	nop
 8005558:	20000010 	.word	0x20000010

0800555c <std>:
 800555c:	2300      	movs	r3, #0
 800555e:	b510      	push	{r4, lr}
 8005560:	4604      	mov	r4, r0
 8005562:	e9c0 3300 	strd	r3, r3, [r0]
 8005566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800556a:	6083      	str	r3, [r0, #8]
 800556c:	8181      	strh	r1, [r0, #12]
 800556e:	6643      	str	r3, [r0, #100]	; 0x64
 8005570:	81c2      	strh	r2, [r0, #14]
 8005572:	6183      	str	r3, [r0, #24]
 8005574:	4619      	mov	r1, r3
 8005576:	2208      	movs	r2, #8
 8005578:	305c      	adds	r0, #92	; 0x5c
 800557a:	f7ff ffb9 	bl	80054f0 <memset>
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <std+0x38>)
 8005580:	6263      	str	r3, [r4, #36]	; 0x24
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <std+0x3c>)
 8005584:	62a3      	str	r3, [r4, #40]	; 0x28
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <std+0x40>)
 8005588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <std+0x44>)
 800558c:	6224      	str	r4, [r4, #32]
 800558e:	6323      	str	r3, [r4, #48]	; 0x30
 8005590:	bd10      	pop	{r4, pc}
 8005592:	bf00      	nop
 8005594:	08005f01 	.word	0x08005f01
 8005598:	08005f23 	.word	0x08005f23
 800559c:	08005f5b 	.word	0x08005f5b
 80055a0:	08005f7f 	.word	0x08005f7f

080055a4 <_cleanup_r>:
 80055a4:	4901      	ldr	r1, [pc, #4]	; (80055ac <_cleanup_r+0x8>)
 80055a6:	f000 b8af 	b.w	8005708 <_fwalk_reent>
 80055aa:	bf00      	nop
 80055ac:	08006259 	.word	0x08006259

080055b0 <__sfmoreglue>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	2268      	movs	r2, #104	; 0x68
 80055b4:	1e4d      	subs	r5, r1, #1
 80055b6:	4355      	muls	r5, r2
 80055b8:	460e      	mov	r6, r1
 80055ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055be:	f000 f8e5 	bl	800578c <_malloc_r>
 80055c2:	4604      	mov	r4, r0
 80055c4:	b140      	cbz	r0, 80055d8 <__sfmoreglue+0x28>
 80055c6:	2100      	movs	r1, #0
 80055c8:	e9c0 1600 	strd	r1, r6, [r0]
 80055cc:	300c      	adds	r0, #12
 80055ce:	60a0      	str	r0, [r4, #8]
 80055d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055d4:	f7ff ff8c 	bl	80054f0 <memset>
 80055d8:	4620      	mov	r0, r4
 80055da:	bd70      	pop	{r4, r5, r6, pc}

080055dc <__sfp_lock_acquire>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__sfp_lock_acquire+0x8>)
 80055de:	f000 b8b3 	b.w	8005748 <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	2000091d 	.word	0x2000091d

080055e8 <__sfp_lock_release>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__sfp_lock_release+0x8>)
 80055ea:	f000 b8ae 	b.w	800574a <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	2000091d 	.word	0x2000091d

080055f4 <__sinit_lock_acquire>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__sinit_lock_acquire+0x8>)
 80055f6:	f000 b8a7 	b.w	8005748 <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	2000091e 	.word	0x2000091e

08005600 <__sinit_lock_release>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__sinit_lock_release+0x8>)
 8005602:	f000 b8a2 	b.w	800574a <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	2000091e 	.word	0x2000091e

0800560c <__sinit>:
 800560c:	b510      	push	{r4, lr}
 800560e:	4604      	mov	r4, r0
 8005610:	f7ff fff0 	bl	80055f4 <__sinit_lock_acquire>
 8005614:	69a3      	ldr	r3, [r4, #24]
 8005616:	b11b      	cbz	r3, 8005620 <__sinit+0x14>
 8005618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561c:	f7ff bff0 	b.w	8005600 <__sinit_lock_release>
 8005620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005624:	6523      	str	r3, [r4, #80]	; 0x50
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <__sinit+0x68>)
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <__sinit+0x6c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	62a2      	str	r2, [r4, #40]	; 0x28
 800562e:	42a3      	cmp	r3, r4
 8005630:	bf04      	itt	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	61a3      	streq	r3, [r4, #24]
 8005636:	4620      	mov	r0, r4
 8005638:	f000 f820 	bl	800567c <__sfp>
 800563c:	6060      	str	r0, [r4, #4]
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f81c 	bl	800567c <__sfp>
 8005644:	60a0      	str	r0, [r4, #8]
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f818 	bl	800567c <__sfp>
 800564c:	2200      	movs	r2, #0
 800564e:	60e0      	str	r0, [r4, #12]
 8005650:	2104      	movs	r1, #4
 8005652:	6860      	ldr	r0, [r4, #4]
 8005654:	f7ff ff82 	bl	800555c <std>
 8005658:	68a0      	ldr	r0, [r4, #8]
 800565a:	2201      	movs	r2, #1
 800565c:	2109      	movs	r1, #9
 800565e:	f7ff ff7d 	bl	800555c <std>
 8005662:	68e0      	ldr	r0, [r4, #12]
 8005664:	2202      	movs	r2, #2
 8005666:	2112      	movs	r1, #18
 8005668:	f7ff ff78 	bl	800555c <std>
 800566c:	2301      	movs	r3, #1
 800566e:	61a3      	str	r3, [r4, #24]
 8005670:	e7d2      	b.n	8005618 <__sinit+0xc>
 8005672:	bf00      	nop
 8005674:	080066f4 	.word	0x080066f4
 8005678:	080055a5 	.word	0x080055a5

0800567c <__sfp>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	4607      	mov	r7, r0
 8005680:	f7ff ffac 	bl	80055dc <__sfp_lock_acquire>
 8005684:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <__sfp+0x84>)
 8005686:	681e      	ldr	r6, [r3, #0]
 8005688:	69b3      	ldr	r3, [r6, #24]
 800568a:	b913      	cbnz	r3, 8005692 <__sfp+0x16>
 800568c:	4630      	mov	r0, r6
 800568e:	f7ff ffbd 	bl	800560c <__sinit>
 8005692:	3648      	adds	r6, #72	; 0x48
 8005694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005698:	3b01      	subs	r3, #1
 800569a:	d503      	bpl.n	80056a4 <__sfp+0x28>
 800569c:	6833      	ldr	r3, [r6, #0]
 800569e:	b30b      	cbz	r3, 80056e4 <__sfp+0x68>
 80056a0:	6836      	ldr	r6, [r6, #0]
 80056a2:	e7f7      	b.n	8005694 <__sfp+0x18>
 80056a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056a8:	b9d5      	cbnz	r5, 80056e0 <__sfp+0x64>
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <__sfp+0x88>)
 80056ac:	60e3      	str	r3, [r4, #12]
 80056ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056b2:	6665      	str	r5, [r4, #100]	; 0x64
 80056b4:	f000 f847 	bl	8005746 <__retarget_lock_init_recursive>
 80056b8:	f7ff ff96 	bl	80055e8 <__sfp_lock_release>
 80056bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056c4:	6025      	str	r5, [r4, #0]
 80056c6:	61a5      	str	r5, [r4, #24]
 80056c8:	2208      	movs	r2, #8
 80056ca:	4629      	mov	r1, r5
 80056cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056d0:	f7ff ff0e 	bl	80054f0 <memset>
 80056d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056dc:	4620      	mov	r0, r4
 80056de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e0:	3468      	adds	r4, #104	; 0x68
 80056e2:	e7d9      	b.n	8005698 <__sfp+0x1c>
 80056e4:	2104      	movs	r1, #4
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ff62 	bl	80055b0 <__sfmoreglue>
 80056ec:	4604      	mov	r4, r0
 80056ee:	6030      	str	r0, [r6, #0]
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d1d5      	bne.n	80056a0 <__sfp+0x24>
 80056f4:	f7ff ff78 	bl	80055e8 <__sfp_lock_release>
 80056f8:	230c      	movs	r3, #12
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	e7ee      	b.n	80056dc <__sfp+0x60>
 80056fe:	bf00      	nop
 8005700:	080066f4 	.word	0x080066f4
 8005704:	ffff0001 	.word	0xffff0001

08005708 <_fwalk_reent>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	4606      	mov	r6, r0
 800570e:	4688      	mov	r8, r1
 8005710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005714:	2700      	movs	r7, #0
 8005716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800571a:	f1b9 0901 	subs.w	r9, r9, #1
 800571e:	d505      	bpl.n	800572c <_fwalk_reent+0x24>
 8005720:	6824      	ldr	r4, [r4, #0]
 8005722:	2c00      	cmp	r4, #0
 8005724:	d1f7      	bne.n	8005716 <_fwalk_reent+0xe>
 8005726:	4638      	mov	r0, r7
 8005728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572c:	89ab      	ldrh	r3, [r5, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d907      	bls.n	8005742 <_fwalk_reent+0x3a>
 8005732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005736:	3301      	adds	r3, #1
 8005738:	d003      	beq.n	8005742 <_fwalk_reent+0x3a>
 800573a:	4629      	mov	r1, r5
 800573c:	4630      	mov	r0, r6
 800573e:	47c0      	blx	r8
 8005740:	4307      	orrs	r7, r0
 8005742:	3568      	adds	r5, #104	; 0x68
 8005744:	e7e9      	b.n	800571a <_fwalk_reent+0x12>

08005746 <__retarget_lock_init_recursive>:
 8005746:	4770      	bx	lr

08005748 <__retarget_lock_acquire_recursive>:
 8005748:	4770      	bx	lr

0800574a <__retarget_lock_release_recursive>:
 800574a:	4770      	bx	lr

0800574c <sbrk_aligned>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4e0e      	ldr	r6, [pc, #56]	; (8005788 <sbrk_aligned+0x3c>)
 8005750:	460c      	mov	r4, r1
 8005752:	6831      	ldr	r1, [r6, #0]
 8005754:	4605      	mov	r5, r0
 8005756:	b911      	cbnz	r1, 800575e <sbrk_aligned+0x12>
 8005758:	f000 fbc2 	bl	8005ee0 <_sbrk_r>
 800575c:	6030      	str	r0, [r6, #0]
 800575e:	4621      	mov	r1, r4
 8005760:	4628      	mov	r0, r5
 8005762:	f000 fbbd 	bl	8005ee0 <_sbrk_r>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d00a      	beq.n	8005780 <sbrk_aligned+0x34>
 800576a:	1cc4      	adds	r4, r0, #3
 800576c:	f024 0403 	bic.w	r4, r4, #3
 8005770:	42a0      	cmp	r0, r4
 8005772:	d007      	beq.n	8005784 <sbrk_aligned+0x38>
 8005774:	1a21      	subs	r1, r4, r0
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fbb2 	bl	8005ee0 <_sbrk_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d101      	bne.n	8005784 <sbrk_aligned+0x38>
 8005780:	f04f 34ff 	mov.w	r4, #4294967295
 8005784:	4620      	mov	r0, r4
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	20000924 	.word	0x20000924

0800578c <_malloc_r>:
 800578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005790:	1ccd      	adds	r5, r1, #3
 8005792:	f025 0503 	bic.w	r5, r5, #3
 8005796:	3508      	adds	r5, #8
 8005798:	2d0c      	cmp	r5, #12
 800579a:	bf38      	it	cc
 800579c:	250c      	movcc	r5, #12
 800579e:	2d00      	cmp	r5, #0
 80057a0:	4607      	mov	r7, r0
 80057a2:	db01      	blt.n	80057a8 <_malloc_r+0x1c>
 80057a4:	42a9      	cmp	r1, r5
 80057a6:	d905      	bls.n	80057b4 <_malloc_r+0x28>
 80057a8:	230c      	movs	r3, #12
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	2600      	movs	r6, #0
 80057ae:	4630      	mov	r0, r6
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b4:	4e2e      	ldr	r6, [pc, #184]	; (8005870 <_malloc_r+0xe4>)
 80057b6:	f000 fe03 	bl	80063c0 <__malloc_lock>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	461c      	mov	r4, r3
 80057be:	bb34      	cbnz	r4, 800580e <_malloc_r+0x82>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ffc2 	bl	800574c <sbrk_aligned>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	4604      	mov	r4, r0
 80057cc:	d14d      	bne.n	800586a <_malloc_r+0xde>
 80057ce:	6834      	ldr	r4, [r6, #0]
 80057d0:	4626      	mov	r6, r4
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d140      	bne.n	8005858 <_malloc_r+0xcc>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	4631      	mov	r1, r6
 80057da:	4638      	mov	r0, r7
 80057dc:	eb04 0803 	add.w	r8, r4, r3
 80057e0:	f000 fb7e 	bl	8005ee0 <_sbrk_r>
 80057e4:	4580      	cmp	r8, r0
 80057e6:	d13a      	bne.n	800585e <_malloc_r+0xd2>
 80057e8:	6821      	ldr	r1, [r4, #0]
 80057ea:	3503      	adds	r5, #3
 80057ec:	1a6d      	subs	r5, r5, r1
 80057ee:	f025 0503 	bic.w	r5, r5, #3
 80057f2:	3508      	adds	r5, #8
 80057f4:	2d0c      	cmp	r5, #12
 80057f6:	bf38      	it	cc
 80057f8:	250c      	movcc	r5, #12
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ffa5 	bl	800574c <sbrk_aligned>
 8005802:	3001      	adds	r0, #1
 8005804:	d02b      	beq.n	800585e <_malloc_r+0xd2>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	442b      	add	r3, r5
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	e00e      	b.n	800582c <_malloc_r+0xa0>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	1b52      	subs	r2, r2, r5
 8005812:	d41e      	bmi.n	8005852 <_malloc_r+0xc6>
 8005814:	2a0b      	cmp	r2, #11
 8005816:	d916      	bls.n	8005846 <_malloc_r+0xba>
 8005818:	1961      	adds	r1, r4, r5
 800581a:	42a3      	cmp	r3, r4
 800581c:	6025      	str	r5, [r4, #0]
 800581e:	bf18      	it	ne
 8005820:	6059      	strne	r1, [r3, #4]
 8005822:	6863      	ldr	r3, [r4, #4]
 8005824:	bf08      	it	eq
 8005826:	6031      	streq	r1, [r6, #0]
 8005828:	5162      	str	r2, [r4, r5]
 800582a:	604b      	str	r3, [r1, #4]
 800582c:	4638      	mov	r0, r7
 800582e:	f104 060b 	add.w	r6, r4, #11
 8005832:	f000 fdcb 	bl	80063cc <__malloc_unlock>
 8005836:	f026 0607 	bic.w	r6, r6, #7
 800583a:	1d23      	adds	r3, r4, #4
 800583c:	1af2      	subs	r2, r6, r3
 800583e:	d0b6      	beq.n	80057ae <_malloc_r+0x22>
 8005840:	1b9b      	subs	r3, r3, r6
 8005842:	50a3      	str	r3, [r4, r2]
 8005844:	e7b3      	b.n	80057ae <_malloc_r+0x22>
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	42a3      	cmp	r3, r4
 800584a:	bf0c      	ite	eq
 800584c:	6032      	streq	r2, [r6, #0]
 800584e:	605a      	strne	r2, [r3, #4]
 8005850:	e7ec      	b.n	800582c <_malloc_r+0xa0>
 8005852:	4623      	mov	r3, r4
 8005854:	6864      	ldr	r4, [r4, #4]
 8005856:	e7b2      	b.n	80057be <_malloc_r+0x32>
 8005858:	4634      	mov	r4, r6
 800585a:	6876      	ldr	r6, [r6, #4]
 800585c:	e7b9      	b.n	80057d2 <_malloc_r+0x46>
 800585e:	230c      	movs	r3, #12
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4638      	mov	r0, r7
 8005864:	f000 fdb2 	bl	80063cc <__malloc_unlock>
 8005868:	e7a1      	b.n	80057ae <_malloc_r+0x22>
 800586a:	6025      	str	r5, [r4, #0]
 800586c:	e7de      	b.n	800582c <_malloc_r+0xa0>
 800586e:	bf00      	nop
 8005870:	20000920 	.word	0x20000920

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	b410      	push	{r4}
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da08      	bge.n	8005892 <__sfputc_r+0x1e>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d103      	bne.n	8005892 <__sfputc_r+0x1e>
 800588a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588e:	f000 bb7b 	b.w	8005f88 <__swbuf_r>
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	1c58      	adds	r0, r3, #1
 8005896:	6010      	str	r0, [r2, #0]
 8005898:	7019      	strb	r1, [r3, #0]
 800589a:	4608      	mov	r0, r1
 800589c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <__sfputs_r>:
 80058a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a4:	4606      	mov	r6, r0
 80058a6:	460f      	mov	r7, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	18d5      	adds	r5, r2, r3
 80058ac:	42ac      	cmp	r4, r5
 80058ae:	d101      	bne.n	80058b4 <__sfputs_r+0x12>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e007      	b.n	80058c4 <__sfputs_r+0x22>
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	463a      	mov	r2, r7
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffda 	bl	8005874 <__sfputc_r>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d1f3      	bne.n	80058ac <__sfputs_r+0xa>
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c8 <_vfiprintf_r>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	b09d      	sub	sp, #116	; 0x74
 80058d0:	4614      	mov	r4, r2
 80058d2:	4698      	mov	r8, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	b118      	cbz	r0, 80058e0 <_vfiprintf_r+0x18>
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	b90b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x18>
 80058dc:	f7ff fe96 	bl	800560c <__sinit>
 80058e0:	4b89      	ldr	r3, [pc, #548]	; (8005b08 <_vfiprintf_r+0x240>)
 80058e2:	429d      	cmp	r5, r3
 80058e4:	d11b      	bne.n	800591e <_vfiprintf_r+0x56>
 80058e6:	6875      	ldr	r5, [r6, #4]
 80058e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ea:	07d9      	lsls	r1, r3, #31
 80058ec:	d405      	bmi.n	80058fa <_vfiprintf_r+0x32>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	059a      	lsls	r2, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_vfiprintf_r+0x32>
 80058f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f6:	f7ff ff27 	bl	8005748 <__retarget_lock_acquire_recursive>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	071b      	lsls	r3, r3, #28
 80058fe:	d501      	bpl.n	8005904 <_vfiprintf_r+0x3c>
 8005900:	692b      	ldr	r3, [r5, #16]
 8005902:	b9eb      	cbnz	r3, 8005940 <_vfiprintf_r+0x78>
 8005904:	4629      	mov	r1, r5
 8005906:	4630      	mov	r0, r6
 8005908:	f000 fba2 	bl	8006050 <__swsetup_r>
 800590c:	b1c0      	cbz	r0, 8005940 <_vfiprintf_r+0x78>
 800590e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005910:	07dc      	lsls	r4, r3, #31
 8005912:	d50e      	bpl.n	8005932 <_vfiprintf_r+0x6a>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	b01d      	add	sp, #116	; 0x74
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591e:	4b7b      	ldr	r3, [pc, #492]	; (8005b0c <_vfiprintf_r+0x244>)
 8005920:	429d      	cmp	r5, r3
 8005922:	d101      	bne.n	8005928 <_vfiprintf_r+0x60>
 8005924:	68b5      	ldr	r5, [r6, #8]
 8005926:	e7df      	b.n	80058e8 <_vfiprintf_r+0x20>
 8005928:	4b79      	ldr	r3, [pc, #484]	; (8005b10 <_vfiprintf_r+0x248>)
 800592a:	429d      	cmp	r5, r3
 800592c:	bf08      	it	eq
 800592e:	68f5      	ldreq	r5, [r6, #12]
 8005930:	e7da      	b.n	80058e8 <_vfiprintf_r+0x20>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	0598      	lsls	r0, r3, #22
 8005936:	d4ed      	bmi.n	8005914 <_vfiprintf_r+0x4c>
 8005938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593a:	f7ff ff06 	bl	800574a <__retarget_lock_release_recursive>
 800593e:	e7e9      	b.n	8005914 <_vfiprintf_r+0x4c>
 8005940:	2300      	movs	r3, #0
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
 8005944:	2320      	movs	r3, #32
 8005946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800594a:	f8cd 800c 	str.w	r8, [sp, #12]
 800594e:	2330      	movs	r3, #48	; 0x30
 8005950:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b14 <_vfiprintf_r+0x24c>
 8005954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005958:	f04f 0901 	mov.w	r9, #1
 800595c:	4623      	mov	r3, r4
 800595e:	469a      	mov	sl, r3
 8005960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005964:	b10a      	cbz	r2, 800596a <_vfiprintf_r+0xa2>
 8005966:	2a25      	cmp	r2, #37	; 0x25
 8005968:	d1f9      	bne.n	800595e <_vfiprintf_r+0x96>
 800596a:	ebba 0b04 	subs.w	fp, sl, r4
 800596e:	d00b      	beq.n	8005988 <_vfiprintf_r+0xc0>
 8005970:	465b      	mov	r3, fp
 8005972:	4622      	mov	r2, r4
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ff93 	bl	80058a2 <__sfputs_r>
 800597c:	3001      	adds	r0, #1
 800597e:	f000 80aa 	beq.w	8005ad6 <_vfiprintf_r+0x20e>
 8005982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005984:	445a      	add	r2, fp
 8005986:	9209      	str	r2, [sp, #36]	; 0x24
 8005988:	f89a 3000 	ldrb.w	r3, [sl]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a2 	beq.w	8005ad6 <_vfiprintf_r+0x20e>
 8005992:	2300      	movs	r3, #0
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800599c:	f10a 0a01 	add.w	sl, sl, #1
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a8:	931a      	str	r3, [sp, #104]	; 0x68
 80059aa:	4654      	mov	r4, sl
 80059ac:	2205      	movs	r2, #5
 80059ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b2:	4858      	ldr	r0, [pc, #352]	; (8005b14 <_vfiprintf_r+0x24c>)
 80059b4:	f7fa fc1c 	bl	80001f0 <memchr>
 80059b8:	9a04      	ldr	r2, [sp, #16]
 80059ba:	b9d8      	cbnz	r0, 80059f4 <_vfiprintf_r+0x12c>
 80059bc:	06d1      	lsls	r1, r2, #27
 80059be:	bf44      	itt	mi
 80059c0:	2320      	movmi	r3, #32
 80059c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c6:	0713      	lsls	r3, r2, #28
 80059c8:	bf44      	itt	mi
 80059ca:	232b      	movmi	r3, #43	; 0x2b
 80059cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d0:	f89a 3000 	ldrb.w	r3, [sl]
 80059d4:	2b2a      	cmp	r3, #42	; 0x2a
 80059d6:	d015      	beq.n	8005a04 <_vfiprintf_r+0x13c>
 80059d8:	9a07      	ldr	r2, [sp, #28]
 80059da:	4654      	mov	r4, sl
 80059dc:	2000      	movs	r0, #0
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	4621      	mov	r1, r4
 80059e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e8:	3b30      	subs	r3, #48	; 0x30
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d94e      	bls.n	8005a8c <_vfiprintf_r+0x1c4>
 80059ee:	b1b0      	cbz	r0, 8005a1e <_vfiprintf_r+0x156>
 80059f0:	9207      	str	r2, [sp, #28]
 80059f2:	e014      	b.n	8005a1e <_vfiprintf_r+0x156>
 80059f4:	eba0 0308 	sub.w	r3, r0, r8
 80059f8:	fa09 f303 	lsl.w	r3, r9, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	9304      	str	r3, [sp, #16]
 8005a00:	46a2      	mov	sl, r4
 8005a02:	e7d2      	b.n	80059aa <_vfiprintf_r+0xe2>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d19      	adds	r1, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9103      	str	r1, [sp, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfbb      	ittet	lt
 8005a10:	425b      	neglt	r3, r3
 8005a12:	f042 0202 	orrlt.w	r2, r2, #2
 8005a16:	9307      	strge	r3, [sp, #28]
 8005a18:	9307      	strlt	r3, [sp, #28]
 8005a1a:	bfb8      	it	lt
 8005a1c:	9204      	strlt	r2, [sp, #16]
 8005a1e:	7823      	ldrb	r3, [r4, #0]
 8005a20:	2b2e      	cmp	r3, #46	; 0x2e
 8005a22:	d10c      	bne.n	8005a3e <_vfiprintf_r+0x176>
 8005a24:	7863      	ldrb	r3, [r4, #1]
 8005a26:	2b2a      	cmp	r3, #42	; 0x2a
 8005a28:	d135      	bne.n	8005a96 <_vfiprintf_r+0x1ce>
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	9203      	str	r2, [sp, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfb8      	it	lt
 8005a36:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a3a:	3402      	adds	r4, #2
 8005a3c:	9305      	str	r3, [sp, #20]
 8005a3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b24 <_vfiprintf_r+0x25c>
 8005a42:	7821      	ldrb	r1, [r4, #0]
 8005a44:	2203      	movs	r2, #3
 8005a46:	4650      	mov	r0, sl
 8005a48:	f7fa fbd2 	bl	80001f0 <memchr>
 8005a4c:	b140      	cbz	r0, 8005a60 <_vfiprintf_r+0x198>
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	eba0 000a 	sub.w	r0, r0, sl
 8005a54:	fa03 f000 	lsl.w	r0, r3, r0
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	4303      	orrs	r3, r0
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a64:	482c      	ldr	r0, [pc, #176]	; (8005b18 <_vfiprintf_r+0x250>)
 8005a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a6a:	2206      	movs	r2, #6
 8005a6c:	f7fa fbc0 	bl	80001f0 <memchr>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d03f      	beq.n	8005af4 <_vfiprintf_r+0x22c>
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <_vfiprintf_r+0x254>)
 8005a76:	bb1b      	cbnz	r3, 8005ac0 <_vfiprintf_r+0x1f8>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	3307      	adds	r3, #7
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	3308      	adds	r3, #8
 8005a82:	9303      	str	r3, [sp, #12]
 8005a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a86:	443b      	add	r3, r7
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	e767      	b.n	800595c <_vfiprintf_r+0x94>
 8005a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a90:	460c      	mov	r4, r1
 8005a92:	2001      	movs	r0, #1
 8005a94:	e7a5      	b.n	80059e2 <_vfiprintf_r+0x11a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	3401      	adds	r4, #1
 8005a9a:	9305      	str	r3, [sp, #20]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f04f 0c0a 	mov.w	ip, #10
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa8:	3a30      	subs	r2, #48	; 0x30
 8005aaa:	2a09      	cmp	r2, #9
 8005aac:	d903      	bls.n	8005ab6 <_vfiprintf_r+0x1ee>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0c5      	beq.n	8005a3e <_vfiprintf_r+0x176>
 8005ab2:	9105      	str	r1, [sp, #20]
 8005ab4:	e7c3      	b.n	8005a3e <_vfiprintf_r+0x176>
 8005ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aba:	4604      	mov	r4, r0
 8005abc:	2301      	movs	r3, #1
 8005abe:	e7f0      	b.n	8005aa2 <_vfiprintf_r+0x1da>
 8005ac0:	ab03      	add	r3, sp, #12
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <_vfiprintf_r+0x258>)
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	4630      	mov	r0, r6
 8005acc:	f3af 8000 	nop.w
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	1c78      	adds	r0, r7, #1
 8005ad4:	d1d6      	bne.n	8005a84 <_vfiprintf_r+0x1bc>
 8005ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad8:	07d9      	lsls	r1, r3, #31
 8005ada:	d405      	bmi.n	8005ae8 <_vfiprintf_r+0x220>
 8005adc:	89ab      	ldrh	r3, [r5, #12]
 8005ade:	059a      	lsls	r2, r3, #22
 8005ae0:	d402      	bmi.n	8005ae8 <_vfiprintf_r+0x220>
 8005ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae4:	f7ff fe31 	bl	800574a <__retarget_lock_release_recursive>
 8005ae8:	89ab      	ldrh	r3, [r5, #12]
 8005aea:	065b      	lsls	r3, r3, #25
 8005aec:	f53f af12 	bmi.w	8005914 <_vfiprintf_r+0x4c>
 8005af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af2:	e711      	b.n	8005918 <_vfiprintf_r+0x50>
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <_vfiprintf_r+0x258>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	4630      	mov	r0, r6
 8005b00:	f000 f880 	bl	8005c04 <_printf_i>
 8005b04:	e7e4      	b.n	8005ad0 <_vfiprintf_r+0x208>
 8005b06:	bf00      	nop
 8005b08:	08006718 	.word	0x08006718
 8005b0c:	08006738 	.word	0x08006738
 8005b10:	080066f8 	.word	0x080066f8
 8005b14:	08006758 	.word	0x08006758
 8005b18:	08006762 	.word	0x08006762
 8005b1c:	00000000 	.word	0x00000000
 8005b20:	080058a3 	.word	0x080058a3
 8005b24:	0800675e 	.word	0x0800675e

08005b28 <_printf_common>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	4699      	mov	r9, r3
 8005b30:	688a      	ldr	r2, [r1, #8]
 8005b32:	690b      	ldr	r3, [r1, #16]
 8005b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	bfb8      	it	lt
 8005b3c:	4613      	movlt	r3, r2
 8005b3e:	6033      	str	r3, [r6, #0]
 8005b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b44:	4607      	mov	r7, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	b10a      	cbz	r2, 8005b4e <_printf_common+0x26>
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	6033      	str	r3, [r6, #0]
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	0699      	lsls	r1, r3, #26
 8005b52:	bf42      	ittt	mi
 8005b54:	6833      	ldrmi	r3, [r6, #0]
 8005b56:	3302      	addmi	r3, #2
 8005b58:	6033      	strmi	r3, [r6, #0]
 8005b5a:	6825      	ldr	r5, [r4, #0]
 8005b5c:	f015 0506 	ands.w	r5, r5, #6
 8005b60:	d106      	bne.n	8005b70 <_printf_common+0x48>
 8005b62:	f104 0a19 	add.w	sl, r4, #25
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	6832      	ldr	r2, [r6, #0]
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dc26      	bgt.n	8005bbe <_printf_common+0x96>
 8005b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b74:	1e13      	subs	r3, r2, #0
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	bf18      	it	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	0692      	lsls	r2, r2, #26
 8005b7e:	d42b      	bmi.n	8005bd8 <_printf_common+0xb0>
 8005b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b84:	4649      	mov	r1, r9
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d01e      	beq.n	8005bcc <_printf_common+0xa4>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	68e5      	ldr	r5, [r4, #12]
 8005b92:	6832      	ldr	r2, [r6, #0]
 8005b94:	f003 0306 	and.w	r3, r3, #6
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	bf08      	it	eq
 8005b9c:	1aad      	subeq	r5, r5, r2
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	bf0c      	ite	eq
 8005ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ba8:	2500      	movne	r5, #0
 8005baa:	4293      	cmp	r3, r2
 8005bac:	bfc4      	itt	gt
 8005bae:	1a9b      	subgt	r3, r3, r2
 8005bb0:	18ed      	addgt	r5, r5, r3
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	341a      	adds	r4, #26
 8005bb6:	42b5      	cmp	r5, r6
 8005bb8:	d11a      	bne.n	8005bf0 <_printf_common+0xc8>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e008      	b.n	8005bd0 <_printf_common+0xa8>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	47c0      	blx	r8
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d103      	bne.n	8005bd4 <_printf_common+0xac>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	e7c6      	b.n	8005b66 <_printf_common+0x3e>
 8005bd8:	18e1      	adds	r1, r4, r3
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	2030      	movs	r0, #48	; 0x30
 8005bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005be2:	4422      	add	r2, r4
 8005be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bec:	3302      	adds	r3, #2
 8005bee:	e7c7      	b.n	8005b80 <_printf_common+0x58>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0e6      	beq.n	8005bcc <_printf_common+0xa4>
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7d9      	b.n	8005bb6 <_printf_common+0x8e>
	...

08005c04 <_printf_i>:
 8005c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	7e0f      	ldrb	r7, [r1, #24]
 8005c0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c0c:	2f78      	cmp	r7, #120	; 0x78
 8005c0e:	4691      	mov	r9, r2
 8005c10:	4680      	mov	r8, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	469a      	mov	sl, r3
 8005c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c1a:	d807      	bhi.n	8005c2c <_printf_i+0x28>
 8005c1c:	2f62      	cmp	r7, #98	; 0x62
 8005c1e:	d80a      	bhi.n	8005c36 <_printf_i+0x32>
 8005c20:	2f00      	cmp	r7, #0
 8005c22:	f000 80d8 	beq.w	8005dd6 <_printf_i+0x1d2>
 8005c26:	2f58      	cmp	r7, #88	; 0x58
 8005c28:	f000 80a3 	beq.w	8005d72 <_printf_i+0x16e>
 8005c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c34:	e03a      	b.n	8005cac <_printf_i+0xa8>
 8005c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c3a:	2b15      	cmp	r3, #21
 8005c3c:	d8f6      	bhi.n	8005c2c <_printf_i+0x28>
 8005c3e:	a101      	add	r1, pc, #4	; (adr r1, 8005c44 <_printf_i+0x40>)
 8005c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005c2d 	.word	0x08005c2d
 8005c50:	08005c2d 	.word	0x08005c2d
 8005c54:	08005c2d 	.word	0x08005c2d
 8005c58:	08005c2d 	.word	0x08005c2d
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005c2d 	.word	0x08005c2d
 8005c64:	08005c2d 	.word	0x08005c2d
 8005c68:	08005c2d 	.word	0x08005c2d
 8005c6c:	08005c2d 	.word	0x08005c2d
 8005c70:	08005dbd 	.word	0x08005dbd
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005d9f 	.word	0x08005d9f
 8005c7c:	08005c2d 	.word	0x08005c2d
 8005c80:	08005c2d 	.word	0x08005c2d
 8005c84:	08005ddf 	.word	0x08005ddf
 8005c88:	08005c2d 	.word	0x08005c2d
 8005c8c:	08005ce1 	.word	0x08005ce1
 8005c90:	08005c2d 	.word	0x08005c2d
 8005c94:	08005c2d 	.word	0x08005c2d
 8005c98:	08005da7 	.word	0x08005da7
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0a3      	b.n	8005df8 <_printf_i+0x1f4>
 8005cb0:	6820      	ldr	r0, [r4, #0]
 8005cb2:	6829      	ldr	r1, [r5, #0]
 8005cb4:	0606      	lsls	r6, r0, #24
 8005cb6:	f101 0304 	add.w	r3, r1, #4
 8005cba:	d50a      	bpl.n	8005cd2 <_printf_i+0xce>
 8005cbc:	680e      	ldr	r6, [r1, #0]
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	2e00      	cmp	r6, #0
 8005cc2:	da03      	bge.n	8005ccc <_printf_i+0xc8>
 8005cc4:	232d      	movs	r3, #45	; 0x2d
 8005cc6:	4276      	negs	r6, r6
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	485e      	ldr	r0, [pc, #376]	; (8005e48 <_printf_i+0x244>)
 8005cce:	230a      	movs	r3, #10
 8005cd0:	e019      	b.n	8005d06 <_printf_i+0x102>
 8005cd2:	680e      	ldr	r6, [r1, #0]
 8005cd4:	602b      	str	r3, [r5, #0]
 8005cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cda:	bf18      	it	ne
 8005cdc:	b236      	sxthne	r6, r6
 8005cde:	e7ef      	b.n	8005cc0 <_printf_i+0xbc>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	1d19      	adds	r1, r3, #4
 8005ce6:	6029      	str	r1, [r5, #0]
 8005ce8:	0601      	lsls	r1, r0, #24
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0xec>
 8005cec:	681e      	ldr	r6, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <_printf_i+0xf2>
 8005cf0:	0646      	lsls	r6, r0, #25
 8005cf2:	d5fb      	bpl.n	8005cec <_printf_i+0xe8>
 8005cf4:	881e      	ldrh	r6, [r3, #0]
 8005cf6:	4854      	ldr	r0, [pc, #336]	; (8005e48 <_printf_i+0x244>)
 8005cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2308      	moveq	r3, #8
 8005cfe:	230a      	movne	r3, #10
 8005d00:	2100      	movs	r1, #0
 8005d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d06:	6865      	ldr	r5, [r4, #4]
 8005d08:	60a5      	str	r5, [r4, #8]
 8005d0a:	2d00      	cmp	r5, #0
 8005d0c:	bfa2      	ittt	ge
 8005d0e:	6821      	ldrge	r1, [r4, #0]
 8005d10:	f021 0104 	bicge.w	r1, r1, #4
 8005d14:	6021      	strge	r1, [r4, #0]
 8005d16:	b90e      	cbnz	r6, 8005d1c <_printf_i+0x118>
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d04d      	beq.n	8005db8 <_printf_i+0x1b4>
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d22:	fb03 6711 	mls	r7, r3, r1, r6
 8005d26:	5dc7      	ldrb	r7, [r0, r7]
 8005d28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d2c:	4637      	mov	r7, r6
 8005d2e:	42bb      	cmp	r3, r7
 8005d30:	460e      	mov	r6, r1
 8005d32:	d9f4      	bls.n	8005d1e <_printf_i+0x11a>
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d10b      	bne.n	8005d50 <_printf_i+0x14c>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07de      	lsls	r6, r3, #31
 8005d3c:	d508      	bpl.n	8005d50 <_printf_i+0x14c>
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	6861      	ldr	r1, [r4, #4]
 8005d42:	4299      	cmp	r1, r3
 8005d44:	bfde      	ittt	le
 8005d46:	2330      	movle	r3, #48	; 0x30
 8005d48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d50:	1b52      	subs	r2, r2, r5
 8005d52:	6122      	str	r2, [r4, #16]
 8005d54:	f8cd a000 	str.w	sl, [sp]
 8005d58:	464b      	mov	r3, r9
 8005d5a:	aa03      	add	r2, sp, #12
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f7ff fee2 	bl	8005b28 <_printf_common>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d14c      	bne.n	8005e02 <_printf_i+0x1fe>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	b004      	add	sp, #16
 8005d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d72:	4835      	ldr	r0, [pc, #212]	; (8005e48 <_printf_i+0x244>)
 8005d74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d78:	6829      	ldr	r1, [r5, #0]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d80:	6029      	str	r1, [r5, #0]
 8005d82:	061d      	lsls	r5, r3, #24
 8005d84:	d514      	bpl.n	8005db0 <_printf_i+0x1ac>
 8005d86:	07df      	lsls	r7, r3, #31
 8005d88:	bf44      	itt	mi
 8005d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d8e:	6023      	strmi	r3, [r4, #0]
 8005d90:	b91e      	cbnz	r6, 8005d9a <_printf_i+0x196>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f023 0320 	bic.w	r3, r3, #32
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	2310      	movs	r3, #16
 8005d9c:	e7b0      	b.n	8005d00 <_printf_i+0xfc>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	f043 0320 	orr.w	r3, r3, #32
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	2378      	movs	r3, #120	; 0x78
 8005da8:	4828      	ldr	r0, [pc, #160]	; (8005e4c <_printf_i+0x248>)
 8005daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dae:	e7e3      	b.n	8005d78 <_printf_i+0x174>
 8005db0:	0659      	lsls	r1, r3, #25
 8005db2:	bf48      	it	mi
 8005db4:	b2b6      	uxthmi	r6, r6
 8005db6:	e7e6      	b.n	8005d86 <_printf_i+0x182>
 8005db8:	4615      	mov	r5, r2
 8005dba:	e7bb      	b.n	8005d34 <_printf_i+0x130>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	6826      	ldr	r6, [r4, #0]
 8005dc0:	6961      	ldr	r1, [r4, #20]
 8005dc2:	1d18      	adds	r0, r3, #4
 8005dc4:	6028      	str	r0, [r5, #0]
 8005dc6:	0635      	lsls	r5, r6, #24
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0x1cc>
 8005dcc:	6019      	str	r1, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <_printf_i+0x1d2>
 8005dd0:	0670      	lsls	r0, r6, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0x1c8>
 8005dd4:	8019      	strh	r1, [r3, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	4615      	mov	r5, r2
 8005ddc:	e7ba      	b.n	8005d54 <_printf_i+0x150>
 8005dde:	682b      	ldr	r3, [r5, #0]
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	602a      	str	r2, [r5, #0]
 8005de4:	681d      	ldr	r5, [r3, #0]
 8005de6:	6862      	ldr	r2, [r4, #4]
 8005de8:	2100      	movs	r1, #0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7fa fa00 	bl	80001f0 <memchr>
 8005df0:	b108      	cbz	r0, 8005df6 <_printf_i+0x1f2>
 8005df2:	1b40      	subs	r0, r0, r5
 8005df4:	6060      	str	r0, [r4, #4]
 8005df6:	6863      	ldr	r3, [r4, #4]
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e00:	e7a8      	b.n	8005d54 <_printf_i+0x150>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4649      	mov	r1, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	47d0      	blx	sl
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d0ab      	beq.n	8005d68 <_printf_i+0x164>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	079b      	lsls	r3, r3, #30
 8005e14:	d413      	bmi.n	8005e3e <_printf_i+0x23a>
 8005e16:	68e0      	ldr	r0, [r4, #12]
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	4298      	cmp	r0, r3
 8005e1c:	bfb8      	it	lt
 8005e1e:	4618      	movlt	r0, r3
 8005e20:	e7a4      	b.n	8005d6c <_printf_i+0x168>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4632      	mov	r2, r6
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	47d0      	blx	sl
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d09b      	beq.n	8005d68 <_printf_i+0x164>
 8005e30:	3501      	adds	r5, #1
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	9903      	ldr	r1, [sp, #12]
 8005e36:	1a5b      	subs	r3, r3, r1
 8005e38:	42ab      	cmp	r3, r5
 8005e3a:	dcf2      	bgt.n	8005e22 <_printf_i+0x21e>
 8005e3c:	e7eb      	b.n	8005e16 <_printf_i+0x212>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	f104 0619 	add.w	r6, r4, #25
 8005e44:	e7f5      	b.n	8005e32 <_printf_i+0x22e>
 8005e46:	bf00      	nop
 8005e48:	08006769 	.word	0x08006769
 8005e4c:	0800677a 	.word	0x0800677a

08005e50 <_putc_r>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	460d      	mov	r5, r1
 8005e54:	4614      	mov	r4, r2
 8005e56:	4606      	mov	r6, r0
 8005e58:	b118      	cbz	r0, 8005e62 <_putc_r+0x12>
 8005e5a:	6983      	ldr	r3, [r0, #24]
 8005e5c:	b90b      	cbnz	r3, 8005e62 <_putc_r+0x12>
 8005e5e:	f7ff fbd5 	bl	800560c <__sinit>
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <_putc_r+0x84>)
 8005e64:	429c      	cmp	r4, r3
 8005e66:	d124      	bne.n	8005eb2 <_putc_r+0x62>
 8005e68:	6874      	ldr	r4, [r6, #4]
 8005e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e6c:	07d8      	lsls	r0, r3, #31
 8005e6e:	d405      	bmi.n	8005e7c <_putc_r+0x2c>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	0599      	lsls	r1, r3, #22
 8005e74:	d402      	bmi.n	8005e7c <_putc_r+0x2c>
 8005e76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e78:	f7ff fc66 	bl	8005748 <__retarget_lock_acquire_recursive>
 8005e7c:	68a3      	ldr	r3, [r4, #8]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	60a3      	str	r3, [r4, #8]
 8005e84:	da05      	bge.n	8005e92 <_putc_r+0x42>
 8005e86:	69a2      	ldr	r2, [r4, #24]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	db1c      	blt.n	8005ec6 <_putc_r+0x76>
 8005e8c:	b2eb      	uxtb	r3, r5
 8005e8e:	2b0a      	cmp	r3, #10
 8005e90:	d019      	beq.n	8005ec6 <_putc_r+0x76>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	701d      	strb	r5, [r3, #0]
 8005e9a:	b2ed      	uxtb	r5, r5
 8005e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e9e:	07da      	lsls	r2, r3, #31
 8005ea0:	d405      	bmi.n	8005eae <_putc_r+0x5e>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	059b      	lsls	r3, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <_putc_r+0x5e>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eaa:	f7ff fc4e 	bl	800574a <__retarget_lock_release_recursive>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	bd70      	pop	{r4, r5, r6, pc}
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <_putc_r+0x88>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d101      	bne.n	8005ebc <_putc_r+0x6c>
 8005eb8:	68b4      	ldr	r4, [r6, #8]
 8005eba:	e7d6      	b.n	8005e6a <_putc_r+0x1a>
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <_putc_r+0x8c>)
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	bf08      	it	eq
 8005ec2:	68f4      	ldreq	r4, [r6, #12]
 8005ec4:	e7d1      	b.n	8005e6a <_putc_r+0x1a>
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f000 f85c 	bl	8005f88 <__swbuf_r>
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	e7e3      	b.n	8005e9c <_putc_r+0x4c>
 8005ed4:	08006718 	.word	0x08006718
 8005ed8:	08006738 	.word	0x08006738
 8005edc:	080066f8 	.word	0x080066f8

08005ee0 <_sbrk_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d06      	ldr	r5, [pc, #24]	; (8005efc <_sbrk_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fc fa88 	bl	8002400 <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_sbrk_r+0x1a>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_sbrk_r+0x1a>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	20000928 	.word	0x20000928

08005f00 <__sread>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	460c      	mov	r4, r1
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	f000 fab2 	bl	8006470 <_read_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	bfab      	itete	ge
 8005f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f12:	89a3      	ldrhlt	r3, [r4, #12]
 8005f14:	181b      	addge	r3, r3, r0
 8005f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f1a:	bfac      	ite	ge
 8005f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f1e:	81a3      	strhlt	r3, [r4, #12]
 8005f20:	bd10      	pop	{r4, pc}

08005f22 <__swrite>:
 8005f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	461f      	mov	r7, r3
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	05db      	lsls	r3, r3, #23
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4616      	mov	r6, r2
 8005f32:	d505      	bpl.n	8005f40 <__swrite+0x1e>
 8005f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f38:	2302      	movs	r3, #2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f000 f9c8 	bl	80062d0 <_lseek_r>
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4a:	81a3      	strh	r3, [r4, #12]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4628      	mov	r0, r5
 8005f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f56:	f000 b869 	b.w	800602c <_write_r>

08005f5a <__sseek>:
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f62:	f000 f9b5 	bl	80062d0 <_lseek_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	bf15      	itete	ne
 8005f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f76:	81a3      	strheq	r3, [r4, #12]
 8005f78:	bf18      	it	ne
 8005f7a:	81a3      	strhne	r3, [r4, #12]
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <__sclose>:
 8005f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f82:	f000 b8d3 	b.w	800612c <_close_r>
	...

08005f88 <__swbuf_r>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	4605      	mov	r5, r0
 8005f90:	b118      	cbz	r0, 8005f9a <__swbuf_r+0x12>
 8005f92:	6983      	ldr	r3, [r0, #24]
 8005f94:	b90b      	cbnz	r3, 8005f9a <__swbuf_r+0x12>
 8005f96:	f7ff fb39 	bl	800560c <__sinit>
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <__swbuf_r+0x98>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d12b      	bne.n	8005ff8 <__swbuf_r+0x70>
 8005fa0:	686c      	ldr	r4, [r5, #4]
 8005fa2:	69a3      	ldr	r3, [r4, #24]
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	071a      	lsls	r2, r3, #28
 8005faa:	d52f      	bpl.n	800600c <__swbuf_r+0x84>
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	b36b      	cbz	r3, 800600c <__swbuf_r+0x84>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	1ac0      	subs	r0, r0, r3
 8005fb6:	6963      	ldr	r3, [r4, #20]
 8005fb8:	b2f6      	uxtb	r6, r6
 8005fba:	4283      	cmp	r3, r0
 8005fbc:	4637      	mov	r7, r6
 8005fbe:	dc04      	bgt.n	8005fca <__swbuf_r+0x42>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f948 	bl	8006258 <_fflush_r>
 8005fc8:	bb30      	cbnz	r0, 8006018 <__swbuf_r+0x90>
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	6022      	str	r2, [r4, #0]
 8005fd6:	701e      	strb	r6, [r3, #0]
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	3001      	adds	r0, #1
 8005fdc:	4283      	cmp	r3, r0
 8005fde:	d004      	beq.n	8005fea <__swbuf_r+0x62>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	07db      	lsls	r3, r3, #31
 8005fe4:	d506      	bpl.n	8005ff4 <__swbuf_r+0x6c>
 8005fe6:	2e0a      	cmp	r6, #10
 8005fe8:	d104      	bne.n	8005ff4 <__swbuf_r+0x6c>
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f933 	bl	8006258 <_fflush_r>
 8005ff2:	b988      	cbnz	r0, 8006018 <__swbuf_r+0x90>
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <__swbuf_r+0x9c>)
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d101      	bne.n	8006002 <__swbuf_r+0x7a>
 8005ffe:	68ac      	ldr	r4, [r5, #8]
 8006000:	e7cf      	b.n	8005fa2 <__swbuf_r+0x1a>
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <__swbuf_r+0xa0>)
 8006004:	429c      	cmp	r4, r3
 8006006:	bf08      	it	eq
 8006008:	68ec      	ldreq	r4, [r5, #12]
 800600a:	e7ca      	b.n	8005fa2 <__swbuf_r+0x1a>
 800600c:	4621      	mov	r1, r4
 800600e:	4628      	mov	r0, r5
 8006010:	f000 f81e 	bl	8006050 <__swsetup_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	d0cb      	beq.n	8005fb0 <__swbuf_r+0x28>
 8006018:	f04f 37ff 	mov.w	r7, #4294967295
 800601c:	e7ea      	b.n	8005ff4 <__swbuf_r+0x6c>
 800601e:	bf00      	nop
 8006020:	08006718 	.word	0x08006718
 8006024:	08006738 	.word	0x08006738
 8006028:	080066f8 	.word	0x080066f8

0800602c <_write_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	; (800604c <_write_r+0x20>)
 8006030:	4604      	mov	r4, r0
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	2200      	movs	r2, #0
 8006038:	602a      	str	r2, [r5, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fc f98f 	bl	800235e <_write>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_write_r+0x1e>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_write_r+0x1e>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000928 	.word	0x20000928

08006050 <__swsetup_r>:
 8006050:	4b32      	ldr	r3, [pc, #200]	; (800611c <__swsetup_r+0xcc>)
 8006052:	b570      	push	{r4, r5, r6, lr}
 8006054:	681d      	ldr	r5, [r3, #0]
 8006056:	4606      	mov	r6, r0
 8006058:	460c      	mov	r4, r1
 800605a:	b125      	cbz	r5, 8006066 <__swsetup_r+0x16>
 800605c:	69ab      	ldr	r3, [r5, #24]
 800605e:	b913      	cbnz	r3, 8006066 <__swsetup_r+0x16>
 8006060:	4628      	mov	r0, r5
 8006062:	f7ff fad3 	bl	800560c <__sinit>
 8006066:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <__swsetup_r+0xd0>)
 8006068:	429c      	cmp	r4, r3
 800606a:	d10f      	bne.n	800608c <__swsetup_r+0x3c>
 800606c:	686c      	ldr	r4, [r5, #4]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006074:	0719      	lsls	r1, r3, #28
 8006076:	d42c      	bmi.n	80060d2 <__swsetup_r+0x82>
 8006078:	06dd      	lsls	r5, r3, #27
 800607a:	d411      	bmi.n	80060a0 <__swsetup_r+0x50>
 800607c:	2309      	movs	r3, #9
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	f04f 30ff 	mov.w	r0, #4294967295
 800608a:	e03e      	b.n	800610a <__swsetup_r+0xba>
 800608c:	4b25      	ldr	r3, [pc, #148]	; (8006124 <__swsetup_r+0xd4>)
 800608e:	429c      	cmp	r4, r3
 8006090:	d101      	bne.n	8006096 <__swsetup_r+0x46>
 8006092:	68ac      	ldr	r4, [r5, #8]
 8006094:	e7eb      	b.n	800606e <__swsetup_r+0x1e>
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <__swsetup_r+0xd8>)
 8006098:	429c      	cmp	r4, r3
 800609a:	bf08      	it	eq
 800609c:	68ec      	ldreq	r4, [r5, #12]
 800609e:	e7e6      	b.n	800606e <__swsetup_r+0x1e>
 80060a0:	0758      	lsls	r0, r3, #29
 80060a2:	d512      	bpl.n	80060ca <__swsetup_r+0x7a>
 80060a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060a6:	b141      	cbz	r1, 80060ba <__swsetup_r+0x6a>
 80060a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ac:	4299      	cmp	r1, r3
 80060ae:	d002      	beq.n	80060b6 <__swsetup_r+0x66>
 80060b0:	4630      	mov	r0, r6
 80060b2:	f000 f991 	bl	80063d8 <_free_r>
 80060b6:	2300      	movs	r3, #0
 80060b8:	6363      	str	r3, [r4, #52]	; 0x34
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	2300      	movs	r3, #0
 80060c4:	6063      	str	r3, [r4, #4]
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f043 0308 	orr.w	r3, r3, #8
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	b94b      	cbnz	r3, 80060ea <__swsetup_r+0x9a>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d003      	beq.n	80060ea <__swsetup_r+0x9a>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4630      	mov	r0, r6
 80060e6:	f000 f92b 	bl	8006340 <__smakebuf_r>
 80060ea:	89a0      	ldrh	r0, [r4, #12]
 80060ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f0:	f010 0301 	ands.w	r3, r0, #1
 80060f4:	d00a      	beq.n	800610c <__swsetup_r+0xbc>
 80060f6:	2300      	movs	r3, #0
 80060f8:	60a3      	str	r3, [r4, #8]
 80060fa:	6963      	ldr	r3, [r4, #20]
 80060fc:	425b      	negs	r3, r3
 80060fe:	61a3      	str	r3, [r4, #24]
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	b943      	cbnz	r3, 8006116 <__swsetup_r+0xc6>
 8006104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006108:	d1ba      	bne.n	8006080 <__swsetup_r+0x30>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	0781      	lsls	r1, r0, #30
 800610e:	bf58      	it	pl
 8006110:	6963      	ldrpl	r3, [r4, #20]
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	e7f4      	b.n	8006100 <__swsetup_r+0xb0>
 8006116:	2000      	movs	r0, #0
 8006118:	e7f7      	b.n	800610a <__swsetup_r+0xba>
 800611a:	bf00      	nop
 800611c:	20000010 	.word	0x20000010
 8006120:	08006718 	.word	0x08006718
 8006124:	08006738 	.word	0x08006738
 8006128:	080066f8 	.word	0x080066f8

0800612c <_close_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_close_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fc f92d 	bl	8002396 <_close>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_close_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_close_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000928 	.word	0x20000928

0800614c <__sflush_r>:
 800614c:	898a      	ldrh	r2, [r1, #12]
 800614e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006152:	4605      	mov	r5, r0
 8006154:	0710      	lsls	r0, r2, #28
 8006156:	460c      	mov	r4, r1
 8006158:	d458      	bmi.n	800620c <__sflush_r+0xc0>
 800615a:	684b      	ldr	r3, [r1, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	dc05      	bgt.n	800616c <__sflush_r+0x20>
 8006160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	dc02      	bgt.n	800616c <__sflush_r+0x20>
 8006166:	2000      	movs	r0, #0
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800616e:	2e00      	cmp	r6, #0
 8006170:	d0f9      	beq.n	8006166 <__sflush_r+0x1a>
 8006172:	2300      	movs	r3, #0
 8006174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006178:	682f      	ldr	r7, [r5, #0]
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	d032      	beq.n	80061e4 <__sflush_r+0x98>
 800617e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	075a      	lsls	r2, r3, #29
 8006184:	d505      	bpl.n	8006192 <__sflush_r+0x46>
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	1ac0      	subs	r0, r0, r3
 800618a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800618c:	b10b      	cbz	r3, 8006192 <__sflush_r+0x46>
 800618e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006190:	1ac0      	subs	r0, r0, r3
 8006192:	2300      	movs	r3, #0
 8006194:	4602      	mov	r2, r0
 8006196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006198:	6a21      	ldr	r1, [r4, #32]
 800619a:	4628      	mov	r0, r5
 800619c:	47b0      	blx	r6
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	d106      	bne.n	80061b2 <__sflush_r+0x66>
 80061a4:	6829      	ldr	r1, [r5, #0]
 80061a6:	291d      	cmp	r1, #29
 80061a8:	d82c      	bhi.n	8006204 <__sflush_r+0xb8>
 80061aa:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <__sflush_r+0x108>)
 80061ac:	40ca      	lsrs	r2, r1
 80061ae:	07d6      	lsls	r6, r2, #31
 80061b0:	d528      	bpl.n	8006204 <__sflush_r+0xb8>
 80061b2:	2200      	movs	r2, #0
 80061b4:	6062      	str	r2, [r4, #4]
 80061b6:	04d9      	lsls	r1, r3, #19
 80061b8:	6922      	ldr	r2, [r4, #16]
 80061ba:	6022      	str	r2, [r4, #0]
 80061bc:	d504      	bpl.n	80061c8 <__sflush_r+0x7c>
 80061be:	1c42      	adds	r2, r0, #1
 80061c0:	d101      	bne.n	80061c6 <__sflush_r+0x7a>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	b903      	cbnz	r3, 80061c8 <__sflush_r+0x7c>
 80061c6:	6560      	str	r0, [r4, #84]	; 0x54
 80061c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ca:	602f      	str	r7, [r5, #0]
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d0ca      	beq.n	8006166 <__sflush_r+0x1a>
 80061d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061d4:	4299      	cmp	r1, r3
 80061d6:	d002      	beq.n	80061de <__sflush_r+0x92>
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 f8fd 	bl	80063d8 <_free_r>
 80061de:	2000      	movs	r0, #0
 80061e0:	6360      	str	r0, [r4, #52]	; 0x34
 80061e2:	e7c1      	b.n	8006168 <__sflush_r+0x1c>
 80061e4:	6a21      	ldr	r1, [r4, #32]
 80061e6:	2301      	movs	r3, #1
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b0      	blx	r6
 80061ec:	1c41      	adds	r1, r0, #1
 80061ee:	d1c7      	bne.n	8006180 <__sflush_r+0x34>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0c4      	beq.n	8006180 <__sflush_r+0x34>
 80061f6:	2b1d      	cmp	r3, #29
 80061f8:	d001      	beq.n	80061fe <__sflush_r+0xb2>
 80061fa:	2b16      	cmp	r3, #22
 80061fc:	d101      	bne.n	8006202 <__sflush_r+0xb6>
 80061fe:	602f      	str	r7, [r5, #0]
 8006200:	e7b1      	b.n	8006166 <__sflush_r+0x1a>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	e7ad      	b.n	8006168 <__sflush_r+0x1c>
 800620c:	690f      	ldr	r7, [r1, #16]
 800620e:	2f00      	cmp	r7, #0
 8006210:	d0a9      	beq.n	8006166 <__sflush_r+0x1a>
 8006212:	0793      	lsls	r3, r2, #30
 8006214:	680e      	ldr	r6, [r1, #0]
 8006216:	bf08      	it	eq
 8006218:	694b      	ldreq	r3, [r1, #20]
 800621a:	600f      	str	r7, [r1, #0]
 800621c:	bf18      	it	ne
 800621e:	2300      	movne	r3, #0
 8006220:	eba6 0807 	sub.w	r8, r6, r7
 8006224:	608b      	str	r3, [r1, #8]
 8006226:	f1b8 0f00 	cmp.w	r8, #0
 800622a:	dd9c      	ble.n	8006166 <__sflush_r+0x1a>
 800622c:	6a21      	ldr	r1, [r4, #32]
 800622e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006230:	4643      	mov	r3, r8
 8006232:	463a      	mov	r2, r7
 8006234:	4628      	mov	r0, r5
 8006236:	47b0      	blx	r6
 8006238:	2800      	cmp	r0, #0
 800623a:	dc06      	bgt.n	800624a <__sflush_r+0xfe>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006242:	81a3      	strh	r3, [r4, #12]
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	e78e      	b.n	8006168 <__sflush_r+0x1c>
 800624a:	4407      	add	r7, r0
 800624c:	eba8 0800 	sub.w	r8, r8, r0
 8006250:	e7e9      	b.n	8006226 <__sflush_r+0xda>
 8006252:	bf00      	nop
 8006254:	20400001 	.word	0x20400001

08006258 <_fflush_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	690b      	ldr	r3, [r1, #16]
 800625c:	4605      	mov	r5, r0
 800625e:	460c      	mov	r4, r1
 8006260:	b913      	cbnz	r3, 8006268 <_fflush_r+0x10>
 8006262:	2500      	movs	r5, #0
 8006264:	4628      	mov	r0, r5
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	b118      	cbz	r0, 8006272 <_fflush_r+0x1a>
 800626a:	6983      	ldr	r3, [r0, #24]
 800626c:	b90b      	cbnz	r3, 8006272 <_fflush_r+0x1a>
 800626e:	f7ff f9cd 	bl	800560c <__sinit>
 8006272:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <_fflush_r+0x6c>)
 8006274:	429c      	cmp	r4, r3
 8006276:	d11b      	bne.n	80062b0 <_fflush_r+0x58>
 8006278:	686c      	ldr	r4, [r5, #4]
 800627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0ef      	beq.n	8006262 <_fflush_r+0xa>
 8006282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006284:	07d0      	lsls	r0, r2, #31
 8006286:	d404      	bmi.n	8006292 <_fflush_r+0x3a>
 8006288:	0599      	lsls	r1, r3, #22
 800628a:	d402      	bmi.n	8006292 <_fflush_r+0x3a>
 800628c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800628e:	f7ff fa5b 	bl	8005748 <__retarget_lock_acquire_recursive>
 8006292:	4628      	mov	r0, r5
 8006294:	4621      	mov	r1, r4
 8006296:	f7ff ff59 	bl	800614c <__sflush_r>
 800629a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800629c:	07da      	lsls	r2, r3, #31
 800629e:	4605      	mov	r5, r0
 80062a0:	d4e0      	bmi.n	8006264 <_fflush_r+0xc>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	059b      	lsls	r3, r3, #22
 80062a6:	d4dd      	bmi.n	8006264 <_fflush_r+0xc>
 80062a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062aa:	f7ff fa4e 	bl	800574a <__retarget_lock_release_recursive>
 80062ae:	e7d9      	b.n	8006264 <_fflush_r+0xc>
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <_fflush_r+0x70>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <_fflush_r+0x62>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7df      	b.n	800627a <_fflush_r+0x22>
 80062ba:	4b04      	ldr	r3, [pc, #16]	; (80062cc <_fflush_r+0x74>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7da      	b.n	800627a <_fflush_r+0x22>
 80062c4:	08006718 	.word	0x08006718
 80062c8:	08006738 	.word	0x08006738
 80062cc:	080066f8 	.word	0x080066f8

080062d0 <_lseek_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4d07      	ldr	r5, [pc, #28]	; (80062f0 <_lseek_r+0x20>)
 80062d4:	4604      	mov	r4, r0
 80062d6:	4608      	mov	r0, r1
 80062d8:	4611      	mov	r1, r2
 80062da:	2200      	movs	r2, #0
 80062dc:	602a      	str	r2, [r5, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	f7fc f880 	bl	80023e4 <_lseek>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_lseek_r+0x1e>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_lseek_r+0x1e>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20000928 	.word	0x20000928

080062f4 <__swhatbuf_r>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	460e      	mov	r6, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	2900      	cmp	r1, #0
 80062fe:	b096      	sub	sp, #88	; 0x58
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	da08      	bge.n	8006318 <__swhatbuf_r+0x24>
 8006306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	061a      	lsls	r2, r3, #24
 8006310:	d410      	bmi.n	8006334 <__swhatbuf_r+0x40>
 8006312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006316:	e00e      	b.n	8006336 <__swhatbuf_r+0x42>
 8006318:	466a      	mov	r2, sp
 800631a:	f000 f8bb 	bl	8006494 <_fstat_r>
 800631e:	2800      	cmp	r0, #0
 8006320:	dbf1      	blt.n	8006306 <__swhatbuf_r+0x12>
 8006322:	9a01      	ldr	r2, [sp, #4]
 8006324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800632c:	425a      	negs	r2, r3
 800632e:	415a      	adcs	r2, r3
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	e7ee      	b.n	8006312 <__swhatbuf_r+0x1e>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	2000      	movs	r0, #0
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	b016      	add	sp, #88	; 0x58
 800633c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006340 <__smakebuf_r>:
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006344:	079d      	lsls	r5, r3, #30
 8006346:	4606      	mov	r6, r0
 8006348:	460c      	mov	r4, r1
 800634a:	d507      	bpl.n	800635c <__smakebuf_r+0x1c>
 800634c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	2301      	movs	r3, #1
 8006356:	6163      	str	r3, [r4, #20]
 8006358:	b002      	add	sp, #8
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	ab01      	add	r3, sp, #4
 800635e:	466a      	mov	r2, sp
 8006360:	f7ff ffc8 	bl	80062f4 <__swhatbuf_r>
 8006364:	9900      	ldr	r1, [sp, #0]
 8006366:	4605      	mov	r5, r0
 8006368:	4630      	mov	r0, r6
 800636a:	f7ff fa0f 	bl	800578c <_malloc_r>
 800636e:	b948      	cbnz	r0, 8006384 <__smakebuf_r+0x44>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	059a      	lsls	r2, r3, #22
 8006376:	d4ef      	bmi.n	8006358 <__smakebuf_r+0x18>
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7e3      	b.n	800634c <__smakebuf_r+0xc>
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <__smakebuf_r+0x7c>)
 8006386:	62b3      	str	r3, [r6, #40]	; 0x28
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	6020      	str	r0, [r4, #0]
 800638c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	6163      	str	r3, [r4, #20]
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	6120      	str	r0, [r4, #16]
 800639a:	b15b      	cbz	r3, 80063b4 <__smakebuf_r+0x74>
 800639c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 f889 	bl	80064b8 <_isatty_r>
 80063a6:	b128      	cbz	r0, 80063b4 <__smakebuf_r+0x74>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	89a0      	ldrh	r0, [r4, #12]
 80063b6:	4305      	orrs	r5, r0
 80063b8:	81a5      	strh	r5, [r4, #12]
 80063ba:	e7cd      	b.n	8006358 <__smakebuf_r+0x18>
 80063bc:	080055a5 	.word	0x080055a5

080063c0 <__malloc_lock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__malloc_lock+0x8>)
 80063c2:	f7ff b9c1 	b.w	8005748 <__retarget_lock_acquire_recursive>
 80063c6:	bf00      	nop
 80063c8:	2000091c 	.word	0x2000091c

080063cc <__malloc_unlock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_unlock+0x8>)
 80063ce:	f7ff b9bc 	b.w	800574a <__retarget_lock_release_recursive>
 80063d2:	bf00      	nop
 80063d4:	2000091c 	.word	0x2000091c

080063d8 <_free_r>:
 80063d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063da:	2900      	cmp	r1, #0
 80063dc:	d044      	beq.n	8006468 <_free_r+0x90>
 80063de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e2:	9001      	str	r0, [sp, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f1a1 0404 	sub.w	r4, r1, #4
 80063ea:	bfb8      	it	lt
 80063ec:	18e4      	addlt	r4, r4, r3
 80063ee:	f7ff ffe7 	bl	80063c0 <__malloc_lock>
 80063f2:	4a1e      	ldr	r2, [pc, #120]	; (800646c <_free_r+0x94>)
 80063f4:	9801      	ldr	r0, [sp, #4]
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	b933      	cbnz	r3, 8006408 <_free_r+0x30>
 80063fa:	6063      	str	r3, [r4, #4]
 80063fc:	6014      	str	r4, [r2, #0]
 80063fe:	b003      	add	sp, #12
 8006400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006404:	f7ff bfe2 	b.w	80063cc <__malloc_unlock>
 8006408:	42a3      	cmp	r3, r4
 800640a:	d908      	bls.n	800641e <_free_r+0x46>
 800640c:	6825      	ldr	r5, [r4, #0]
 800640e:	1961      	adds	r1, r4, r5
 8006410:	428b      	cmp	r3, r1
 8006412:	bf01      	itttt	eq
 8006414:	6819      	ldreq	r1, [r3, #0]
 8006416:	685b      	ldreq	r3, [r3, #4]
 8006418:	1949      	addeq	r1, r1, r5
 800641a:	6021      	streq	r1, [r4, #0]
 800641c:	e7ed      	b.n	80063fa <_free_r+0x22>
 800641e:	461a      	mov	r2, r3
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	b10b      	cbz	r3, 8006428 <_free_r+0x50>
 8006424:	42a3      	cmp	r3, r4
 8006426:	d9fa      	bls.n	800641e <_free_r+0x46>
 8006428:	6811      	ldr	r1, [r2, #0]
 800642a:	1855      	adds	r5, r2, r1
 800642c:	42a5      	cmp	r5, r4
 800642e:	d10b      	bne.n	8006448 <_free_r+0x70>
 8006430:	6824      	ldr	r4, [r4, #0]
 8006432:	4421      	add	r1, r4
 8006434:	1854      	adds	r4, r2, r1
 8006436:	42a3      	cmp	r3, r4
 8006438:	6011      	str	r1, [r2, #0]
 800643a:	d1e0      	bne.n	80063fe <_free_r+0x26>
 800643c:	681c      	ldr	r4, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	6053      	str	r3, [r2, #4]
 8006442:	4421      	add	r1, r4
 8006444:	6011      	str	r1, [r2, #0]
 8006446:	e7da      	b.n	80063fe <_free_r+0x26>
 8006448:	d902      	bls.n	8006450 <_free_r+0x78>
 800644a:	230c      	movs	r3, #12
 800644c:	6003      	str	r3, [r0, #0]
 800644e:	e7d6      	b.n	80063fe <_free_r+0x26>
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	1961      	adds	r1, r4, r5
 8006454:	428b      	cmp	r3, r1
 8006456:	bf04      	itt	eq
 8006458:	6819      	ldreq	r1, [r3, #0]
 800645a:	685b      	ldreq	r3, [r3, #4]
 800645c:	6063      	str	r3, [r4, #4]
 800645e:	bf04      	itt	eq
 8006460:	1949      	addeq	r1, r1, r5
 8006462:	6021      	streq	r1, [r4, #0]
 8006464:	6054      	str	r4, [r2, #4]
 8006466:	e7ca      	b.n	80063fe <_free_r+0x26>
 8006468:	b003      	add	sp, #12
 800646a:	bd30      	pop	{r4, r5, pc}
 800646c:	20000920 	.word	0x20000920

08006470 <_read_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	; (8006490 <_read_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fb ff50 	bl	8002324 <_read>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_read_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_read_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	20000928 	.word	0x20000928

08006494 <_fstat_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	; (80064b4 <_fstat_r+0x20>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	602b      	str	r3, [r5, #0]
 80064a2:	f7fb ff84 	bl	80023ae <_fstat>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d102      	bne.n	80064b0 <_fstat_r+0x1c>
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	b103      	cbz	r3, 80064b0 <_fstat_r+0x1c>
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop
 80064b4:	20000928 	.word	0x20000928

080064b8 <_isatty_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d06      	ldr	r5, [pc, #24]	; (80064d4 <_isatty_r+0x1c>)
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fb ff83 	bl	80023ce <_isatty>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_isatty_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_isatty_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	20000928 	.word	0x20000928

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
