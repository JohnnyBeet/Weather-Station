
Receiver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800cdf8  0800cdf8  0001cdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d4  0800d4d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d4  0800d4d4  0001d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4dc  0800d4dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4dc  0800d4dc  0001d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200001e4  0800d6c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800d6c8  00020aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001727c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7f  00000000  00000000  00037490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0003a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dc6  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001792a  00000000  00000000  00055746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b9c  00000000  00000000  0006d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac0  00000000  00000000  00101c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cddc 	.word	0x0800cddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800cddc 	.word	0x0800cddc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <am2320_init>:
 */


#include "am2320.h"

AM2320_HandleTypeDef am2320_init(I2C_HandleTypeDef* i2c_handle, uint8_t sensor_address){
 80010a8:	b4b0      	push	{r4, r5, r7}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	4613      	mov	r3, r2
 80010b4:	71fb      	strb	r3, [r7, #7]
	AM2320_HandleTypeDef am2320_;
	am2320_.i2c_handle_ = i2c_handle;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	617b      	str	r3, [r7, #20]

	// left shift cause i2c is weird
	am2320_.sensor_address_ = sensor_address << 1;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	763b      	strb	r3, [r7, #24]
	am2320_.last_temperature = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	847b      	strh	r3, [r7, #34]	; 0x22
	am2320_.last_humidity = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	return am2320_;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	461d      	mov	r5, r3
 80010ce:	f107 0414 	add.w	r4, r7, #20
 80010d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	602b      	str	r3, [r5, #0]
}
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	372c      	adds	r7, #44	; 0x2c
 80010de:	46bd      	mov	sp, r7
 80010e0:	bcb0      	pop	{r4, r5, r7}
 80010e2:	4770      	bx	lr

080010e4 <am2320_crc_checker>:

// taken from sensor documentation
uint16_t am2320_crc_checker(uint8_t* data, uint8_t size){
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]

	uint16_t crc =0xFFFF;
 80010f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f4:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	while(size--)
 80010f6:	e023      	b.n	8001140 <am2320_crc_checker+0x5c>
	{
		crc ^=*data++;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b29a      	uxth	r2, r3
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	4053      	eors	r3, r2
 8001106:	81fb      	strh	r3, [r7, #14]
		for(i=0;i<8;i++)
 8001108:	2300      	movs	r3, #0
 800110a:	737b      	strb	r3, [r7, #13]
 800110c:	e015      	b.n	800113a <am2320_crc_checker+0x56>
		{
			if(crc & 0x01)
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00a      	beq.n	800112e <am2320_crc_checker+0x4a>
			{
				crc>>=1;
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	085b      	lsrs	r3, r3, #1
 800111c:	81fb      	strh	r3, [r7, #14]
				crc^=0xA001;
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001124:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001128:	43db      	mvns	r3, r3
 800112a:	81fb      	strh	r3, [r7, #14]
 800112c:	e002      	b.n	8001134 <am2320_crc_checker+0x50>
			}
			else
			{
				crc>>=1;
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	81fb      	strh	r3, [r7, #14]
		for(i=0;i<8;i++)
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	3301      	adds	r3, #1
 8001138:	737b      	strb	r3, [r7, #13]
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9e6      	bls.n	800110e <am2320_crc_checker+0x2a>
	while(size--)
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	70fa      	strb	r2, [r7, #3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1d6      	bne.n	80010f8 <am2320_crc_checker+0x14>
			}
		}
	}
	return crc;
 800114a:	89fb      	ldrh	r3, [r7, #14]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <am2320_read_temperature_and_humidity>:

void am2320_read_temperature_and_humidity(AM2320_HandleTypeDef* am2320){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
	/* regs:
	 * empty_reg for waking the sensor up
	 * read_regs for triggering measurements and reading from sensor registers
	 * */
	uint8_t empty_reg[1] = { 0x00 };
 8001160:	2300      	movs	r3, #0
 8001162:	743b      	strb	r3, [r7, #16]
	uint8_t read_regs[3] = { 0x03, 0x00, 0x04 };
 8001164:	4a3e      	ldr	r2, [pc, #248]	; (8001260 <am2320_read_temperature_and_humidity+0x108>)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4611      	mov	r1, r2
 800116e:	8019      	strh	r1, [r3, #0]
 8001170:	3302      	adds	r3, #2
 8001172:	0c12      	lsrs	r2, r2, #16
 8001174:	701a      	strb	r2, [r3, #0]
	 * sends address (empty reg and 0 size for not writing anything)
	 * returns HAL_ERROR cause sensor doesn't ACK waking up
	 * after sending address it should wait for <800us;3ms>,
	 * but either hardware or HAL library for i2c seems to manage this
	 * */
	HAL_I2C_Master_Transmit(am2320->i2c_handle_, am2320->sensor_address_, empty_reg, 0, 1000);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	b299      	uxth	r1, r3
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	f003 fb5c 	bl	8004848 <HAL_I2C_Master_Transmit>

	/*TODO: comment properly
	 * prompts for measurement
	 * */
	if(HAL_I2C_Master_Transmit(am2320->i2c_handle_, am2320->sensor_address_, read_regs, 3, 1000) != HAL_OK){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	b299      	uxth	r1, r3
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2303      	movs	r3, #3
 80011a6:	f003 fb4f 	bl	8004848 <HAL_I2C_Master_Transmit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <am2320_read_temperature_and_humidity+0x6a>
		printf("Prompting for measurement went wrong!\n");
 80011b0:	482c      	ldr	r0, [pc, #176]	; (8001264 <am2320_read_temperature_and_humidity+0x10c>)
 80011b2:	f007 ffff 	bl	80091b4 <puts>
		//TODO: this is tragic, need to rework this!!!
		HAL_I2C_Init(am2320->i2c_handle_);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fa00 	bl	80045c0 <HAL_I2C_Init>
		return;
 80011c0:	e04b      	b.n	800125a <am2320_read_temperature_and_humidity+0x102>
	}

	/*TODO: comment properly
	 * receives am2320->sensor_data_
	 * */
	if(HAL_I2C_Master_Receive(am2320->i2c_handle_, am2320->sensor_address_, am2320->sensor_data_, 8, 1000) != HAL_OK){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	b299      	uxth	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1d5a      	adds	r2, r3, #5
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2308      	movs	r3, #8
 80011d8:	f003 fc34 	bl	8004a44 <HAL_I2C_Master_Receive>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d008      	beq.n	80011f4 <am2320_read_temperature_and_humidity+0x9c>
		printf("Receiving am2320->sensor_data_ failed!\n");
 80011e2:	4821      	ldr	r0, [pc, #132]	; (8001268 <am2320_read_temperature_and_humidity+0x110>)
 80011e4:	f007 ffe6 	bl	80091b4 <puts>
		//TODO: this is tragic, need to rework this!!!
		HAL_I2C_Init(am2320->i2c_handle_);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 f9e7 	bl	80045c0 <HAL_I2C_Init>
		return;
 80011f2:	e032      	b.n	800125a <am2320_read_temperature_and_humidity+0x102>
	}

	// check crc
	uint16_t sensor_crc = ((am2320->sensor_data_[7]<<8)+am2320->sensor_data_[6]);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7b1b      	ldrb	r3, [r3, #12]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7adb      	ldrb	r3, [r3, #11]
 8001202:	b29b      	uxth	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	82fb      	strh	r3, [r7, #22]
	uint16_t calculated_crc = am2320_crc_checker((am2320->sensor_data_), 6);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3305      	adds	r3, #5
 800120c:	2106      	movs	r1, #6
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff68 	bl	80010e4 <am2320_crc_checker>
 8001214:	4603      	mov	r3, r0
 8001216:	82bb      	strh	r3, [r7, #20]
	if(sensor_crc != calculated_crc){
 8001218:	8afa      	ldrh	r2, [r7, #22]
 800121a:	8abb      	ldrh	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	d003      	beq.n	8001228 <am2320_read_temperature_and_humidity+0xd0>
		printf("Wrong CRC!\n");
 8001220:	4812      	ldr	r0, [pc, #72]	; (800126c <am2320_read_temperature_and_humidity+0x114>)
 8001222:	f007 ffc7 	bl	80091b4 <puts>
		return;
 8001226:	e018      	b.n	800125a <am2320_read_temperature_and_humidity+0x102>
	}

	// different types, because temperature may be negative
	am2320->last_temperature = (int16_t)((am2320->sensor_data_[4]<<8)+am2320->sensor_data_[5]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7a5b      	ldrb	r3, [r3, #9]
 800122c:	b29b      	uxth	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7a9b      	ldrb	r3, [r3, #10]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	b29b      	uxth	r3, r3
 800123c:	b21a      	sxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	81da      	strh	r2, [r3, #14]
	am2320->last_humidity = ((am2320->sensor_data_[2]<<8)+am2320->sensor_data_[3]);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	79db      	ldrb	r3, [r3, #7]
 8001246:	b29b      	uxth	r3, r3
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7a1b      	ldrb	r3, [r3, #8]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4413      	add	r3, r2
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	821a      	strh	r2, [r3, #16]


}
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0800ce54 	.word	0x0800ce54
 8001264:	0800cdf8 	.word	0x0800cdf8
 8001268:	0800ce20 	.word	0x0800ce20
 800126c:	0800ce48 	.word	0x0800ce48

08001270 <bmp280_read_reg16>:
#define BMP280_RESET_VALUE 0x86

/*
 * TODO: make two functions out of this: one for reading
 */
bool bmp280_read_reg16(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint16_t* reg_contents){
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af04      	add	r7, sp, #16
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	460b      	mov	r3, r1
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	72fb      	strb	r3, [r7, #11]
	uint8_t reg_temp[2];
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, reg_address, 1, reg_temp, 2, HAL_MAX_DELAY) == HAL_OK){
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	b299      	uxth	r1, r3
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2302      	movs	r3, #2
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	f003 fef1 	bl	8005084 <HAL_I2C_Mem_Read>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10b      	bne.n	80012c0 <bmp280_read_reg16+0x50>
		*reg_contents = (reg_temp[1]<<8) | reg_temp[0];
 80012a8:	7d7b      	ldrb	r3, [r7, #21]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	7d3b      	ldrb	r3, [r7, #20]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	801a      	strh	r2, [r3, #0]
		return 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <bmp280_read_reg16+0x52>
	}
	else{
		return 0;
 80012c0:	2300      	movs	r3, #0
	}
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <bmp280_read_reg8>:

bool bmp280_read_reg8(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint8_t* reg_contents){
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b08a      	sub	sp, #40	; 0x28
 80012ce:	af04      	add	r7, sp, #16
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	460b      	mov	r3, r1
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	72fb      	strb	r3, [r7, #11]
	uint8_t reg_temp;
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, reg_address, 1, &reg_temp, 1, HAL_MAX_DELAY) == HAL_OK){
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	791b      	ldrb	r3, [r3, #4]
 80012e0:	b299      	uxth	r1, r3
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	f107 0317 	add.w	r3, r7, #23
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	f003 fec4 	bl	8005084 <HAL_I2C_Mem_Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <bmp280_read_reg8+0x42>
		*reg_contents = reg_temp;
 8001302:	7dfa      	ldrb	r2, [r7, #23]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	701a      	strb	r2, [r3, #0]
		return 1;
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <bmp280_read_reg8+0x44>
	}
	else{
		return 0;
 800130c:	2300      	movs	r3, #0
	}
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <bmp280_write_reg8>:

bool bmp280_write_reg8(BMP280_HandleTypedef* bmp, uint8_t reg_address, uint8_t* reg_contents){
 8001316:	b580      	push	{r7, lr}
 8001318:	b088      	sub	sp, #32
 800131a:	af04      	add	r7, sp, #16
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	460b      	mov	r3, r1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	72fb      	strb	r3, [r7, #11]
	if(HAL_I2C_Mem_Write(bmp->i2c_handle_, bmp->address_, reg_address, 1, reg_contents, 1, HAL_MAX_DELAY) == HAL_OK){
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	b299      	uxth	r1, r3
 800132e:	7afb      	ldrb	r3, [r7, #11]
 8001330:	b29a      	uxth	r2, r3
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	f003 fda5 	bl	8004e90 <HAL_I2C_Mem_Write>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <bmp280_write_reg8+0x3a>
		return 1;
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <bmp280_write_reg8+0x3c>
	}
	else{
		return 0;
 8001350:	2300      	movs	r3, #0
	}
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <bmp280_get_compensation_data>:

bool bmp280_get_compensation_data(BMP280_HandleTypedef* bmp){
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	if(bmp280_read_reg16(bmp, 0x88, &(bmp->compensation_params_.dig_T1)) &&
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	461a      	mov	r2, r3
 8001368:	2188      	movs	r1, #136	; 0x88
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff80 	bl	8001270 <bmp280_read_reg16>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06f      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8A, (uint16_t*) &(bmp->compensation_params_.dig_T2)) &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3308      	adds	r3, #8
 800137a:	461a      	mov	r2, r3
 800137c:	218a      	movs	r1, #138	; 0x8a
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff76 	bl	8001270 <bmp280_read_reg16>
 8001384:	4603      	mov	r3, r0
	if(bmp280_read_reg16(bmp, 0x88, &(bmp->compensation_params_.dig_T1)) &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d065      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8C, (uint16_t*) &(bmp->compensation_params_.dig_T3)) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	330a      	adds	r3, #10
 800138e:	461a      	mov	r2, r3
 8001390:	218c      	movs	r1, #140	; 0x8c
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff6c 	bl	8001270 <bmp280_read_reg16>
 8001398:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8A, (uint16_t*) &(bmp->compensation_params_.dig_T2)) &&
 800139a:	2b00      	cmp	r3, #0
 800139c:	d05b      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x8E, &(bmp->compensation_params_.dig_P1)) &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	330c      	adds	r3, #12
 80013a2:	461a      	mov	r2, r3
 80013a4:	218e      	movs	r1, #142	; 0x8e
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff62 	bl	8001270 <bmp280_read_reg16>
 80013ac:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8C, (uint16_t*) &(bmp->compensation_params_.dig_T3)) &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d051      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x90, (uint16_t*) &(bmp->compensation_params_.dig_P2)) &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	330e      	adds	r3, #14
 80013b6:	461a      	mov	r2, r3
 80013b8:	2190      	movs	r1, #144	; 0x90
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff58 	bl	8001270 <bmp280_read_reg16>
 80013c0:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x8E, &(bmp->compensation_params_.dig_P1)) &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d047      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x92, (uint16_t*) &(bmp->compensation_params_.dig_P3)) &&
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3310      	adds	r3, #16
 80013ca:	461a      	mov	r2, r3
 80013cc:	2192      	movs	r1, #146	; 0x92
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff4e 	bl	8001270 <bmp280_read_reg16>
 80013d4:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x90, (uint16_t*) &(bmp->compensation_params_.dig_P2)) &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03d      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x94, (uint16_t*) &(bmp->compensation_params_.dig_P4)) &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3312      	adds	r3, #18
 80013de:	461a      	mov	r2, r3
 80013e0:	2194      	movs	r1, #148	; 0x94
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff44 	bl	8001270 <bmp280_read_reg16>
 80013e8:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x92, (uint16_t*) &(bmp->compensation_params_.dig_P3)) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d033      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x96, (uint16_t*) &(bmp->compensation_params_.dig_P5)) &&
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3314      	adds	r3, #20
 80013f2:	461a      	mov	r2, r3
 80013f4:	2196      	movs	r1, #150	; 0x96
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff3a 	bl	8001270 <bmp280_read_reg16>
 80013fc:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x94, (uint16_t*) &(bmp->compensation_params_.dig_P4)) &&
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d029      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x98, (uint16_t*) &(bmp->compensation_params_.dig_P6)) &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3316      	adds	r3, #22
 8001406:	461a      	mov	r2, r3
 8001408:	2198      	movs	r1, #152	; 0x98
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff30 	bl	8001270 <bmp280_read_reg16>
 8001410:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x96, (uint16_t*) &(bmp->compensation_params_.dig_P5)) &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01f      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9A, (uint16_t*) &(bmp->compensation_params_.dig_P7)) &&
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3318      	adds	r3, #24
 800141a:	461a      	mov	r2, r3
 800141c:	219a      	movs	r1, #154	; 0x9a
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff26 	bl	8001270 <bmp280_read_reg16>
 8001424:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x98, (uint16_t*) &(bmp->compensation_params_.dig_P6)) &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d015      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9C, (uint16_t*) &(bmp->compensation_params_.dig_P8)) &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	331a      	adds	r3, #26
 800142e:	461a      	mov	r2, r3
 8001430:	219c      	movs	r1, #156	; 0x9c
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff1c 	bl	8001270 <bmp280_read_reg16>
 8001438:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x9A, (uint16_t*) &(bmp->compensation_params_.dig_P7)) &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
	   bmp280_read_reg16(bmp, 0x9E, (uint16_t*) &(bmp->compensation_params_.dig_P9))){
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	331c      	adds	r3, #28
 8001442:	461a      	mov	r2, r3
 8001444:	219e      	movs	r1, #158	; 0x9e
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff12 	bl	8001270 <bmp280_read_reg16>
 800144c:	4603      	mov	r3, r0
	   bmp280_read_reg16(bmp, 0x9C, (uint16_t*) &(bmp->compensation_params_.dig_P8)) &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <bmp280_get_compensation_data+0xfc>
		return 1;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <bmp280_get_compensation_data+0xfe>
	}
	else{
		return 0;
 8001456:	2300      	movs	r3, #0
	}
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <bmp280_init_force_mode>:

bool bmp280_init_force_mode(BMP280_HandleTypedef* bmp){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	bmp->address_ = BMP280_ADDRESS_0 << 1;	// SDO connected to ground
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	22ec      	movs	r2, #236	; 0xec
 800146c:	711a      	strb	r2, [r3, #4]
	bmp->mode_ = BMP280_SLEEP_MODE;     // to read in force mode it needs to be in sleep first
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	715a      	strb	r2, [r3, #5]
	bmp->filter_ = BMP280_FILTER_OFF;	// according to documentation for weather monitoring
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	779a      	strb	r2, [r3, #30]
	bmp->temperature_oversampling_ = BMP280_oversampling_x1;	// according to documentation
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	77da      	strb	r2, [r3, #31]
	bmp->pressure_oversampling_ = BMP280_oversampling_x1;		// according to documentation
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
	bmp->time_standby_ = BMP280_tsb_1000;	/* not relevant in forced mode, but dont want leave
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2205      	movs	r2, #5
 800148c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
											 * uninitialized
											 */

	// soft reset sensor
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_RESET, (uint8_t*) BMP280_RESET_VALUE)){
 8001490:	2286      	movs	r2, #134	; 0x86
 8001492:	21e0      	movs	r1, #224	; 0xe0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff3e 	bl	8001316 <bmp280_write_reg8>
 800149a:	4603      	mov	r3, r0
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <bmp280_init_force_mode+0x4a>
		return 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e07c      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}

	// wait for NVM data to copy
	while(1){
		uint8_t im_update;
		if(bmp280_read_reg8(bmp, BMP280_REG_ADDR_STATUS, &im_update) && (im_update & 1) == 0){
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	461a      	mov	r2, r3
 80014b0:	21f3      	movs	r1, #243	; 0xf3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff09 	bl	80012ca <bmp280_read_reg8>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f5      	beq.n	80014aa <bmp280_init_force_mode+0x4a>
 80014be:	7b3b      	ldrb	r3, [r7, #12]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <bmp280_init_force_mode+0x4a>
			break;
		}
	}

	// check if address is proper
	if((bmp->address_ >> 1) != BMP280_ADDRESS_0 && (bmp->address_ >> 1) != BMP280_ADDRESS_1){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b76      	cmp	r3, #118	; 0x76
 80014d2:	d100      	bne.n	80014d6 <bmp280_init_force_mode+0x76>
 80014d4:	e007      	b.n	80014e6 <bmp280_init_force_mode+0x86>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b77      	cmp	r3, #119	; 0x77
 80014e0:	d001      	beq.n	80014e6 <bmp280_init_force_mode+0x86>
		return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e05e      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}

	// read and check if proper id
	uint8_t read_id = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
	if(!bmp280_read_reg8(bmp, BMP280_REG_ADDR_ID, &read_id)){
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	461a      	mov	r2, r3
 80014f0:	21d0      	movs	r1, #208	; 0xd0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fee9 	bl	80012ca <bmp280_read_reg8>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <bmp280_init_force_mode+0xa8>
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e04d      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}
	else if(read_id != BMP280_ID){
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b58      	cmp	r3, #88	; 0x58
 800150c:	d001      	beq.n	8001512 <bmp280_init_force_mode+0xb2>
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e048      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}

	// get compensation data
	if(!bmp280_get_compensation_data(bmp)){
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff21 	bl	800135a <bmp280_get_compensation_data>
 8001518:	4603      	mov	r3, r0
 800151a:	f083 0301 	eor.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <bmp280_init_force_mode+0xc8>
		return 0;
 8001524:	2300      	movs	r3, #0
 8001526:	e03d      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}

	// set config and control registers and write them
	uint8_t config_reg_settings = (bmp->time_standby_ << 5) | (bmp->filter_ << 2);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	b25a      	sxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7f9b      	ldrb	r3, [r3, #30]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b25b      	sxtb	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	73bb      	strb	r3, [r7, #14]
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONFIG, &config_reg_settings)){
 8001542:	f107 030e 	add.w	r3, r7, #14
 8001546:	461a      	mov	r2, r3
 8001548:	21f5      	movs	r1, #245	; 0xf5
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fee3 	bl	8001316 <bmp280_write_reg8>
 8001550:	4603      	mov	r3, r0
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <bmp280_init_force_mode+0x100>
		return 0;
 800155c:	2300      	movs	r3, #0
 800155e:	e021      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}

	uint8_t control_reg_settings = (bmp->temperature_oversampling_ << 5) | (bmp->pressure_oversampling_ << 2) | bmp->mode_;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7fdb      	ldrb	r3, [r3, #31]
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	b25a      	sxtb	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	b25b      	sxtb	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b25a      	sxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	795b      	ldrb	r3, [r3, #5]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b25b      	sxtb	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	737b      	strb	r3, [r7, #13]
	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control_reg_settings)){
 8001584:	f107 030d 	add.w	r3, r7, #13
 8001588:	461a      	mov	r2, r3
 800158a:	21f4      	movs	r1, #244	; 0xf4
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fec2 	bl	8001316 <bmp280_write_reg8>
 8001592:	4603      	mov	r3, r0
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <bmp280_init_force_mode+0x142>
		return 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <bmp280_init_force_mode+0x144>
	}
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <bmp280_has_measurement_ended>:

bool bmp280_has_measurement_ended(BMP280_HandleTypedef* bmp){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint8_t measuring;
	if(bmp280_read_reg8(bmp, BMP280_REG_ADDR_STATUS, &measuring) && (measuring & 3) == 0){
 80015b4:	f107 030f 	add.w	r3, r7, #15
 80015b8:	461a      	mov	r2, r3
 80015ba:	21f3      	movs	r1, #243	; 0xf3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fe84 	bl	80012ca <bmp280_read_reg8>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <bmp280_has_measurement_ended+0x2a>
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <bmp280_has_measurement_ended+0x2a>
		return 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <bmp280_has_measurement_ended+0x2c>
	}
	else{
		return 0;
 80015d6:	2300      	movs	r3, #0
	}

}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef* bmp){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	//check if previous measurement has ended
	if(!bmp280_has_measurement_ended(bmp)){
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffdf 	bl	80015ac <bmp280_has_measurement_ended>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f083 0301 	eor.w	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <bmp280_force_measurement+0x1e>
		return 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e028      	b.n	8001650 <bmp280_force_measurement+0x70>
	}

	//read previous control settings
	uint8_t control;
	if(!bmp280_read_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control)){
 80015fe:	f107 030f 	add.w	r3, r7, #15
 8001602:	461a      	mov	r2, r3
 8001604:	21f4      	movs	r1, #244	; 0xf4
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fe5f 	bl	80012ca <bmp280_read_reg8>
 800160c:	4603      	mov	r3, r0
 800160e:	f083 0301 	eor.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <bmp280_force_measurement+0x3c>
		return 0;
 8001618:	2300      	movs	r3, #0
 800161a:	e019      	b.n	8001650 <bmp280_force_measurement+0x70>
	}

	//clears mode bits
	control &= ~0b11;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f023 0303 	bic.w	r3, r3, #3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	73fb      	strb	r3, [r7, #15]

	//sets mode bits to FORCED
	control |= BMP280_FORCED_MODE;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	73fb      	strb	r3, [r7, #15]

	if(!bmp280_write_reg8(bmp, BMP280_REG_ADDR_CONTROL, &control)){
 8001630:	f107 030f 	add.w	r3, r7, #15
 8001634:	461a      	mov	r2, r3
 8001636:	21f4      	movs	r1, #244	; 0xf4
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fe6c 	bl	8001316 <bmp280_write_reg8>
 800163e:	4603      	mov	r3, r0
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <bmp280_force_measurement+0x6e>
		return 0;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <bmp280_force_measurement+0x70>
	}

	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <bmp280_compensate_T_int32>:

int32_t t_fine;		// global variable as defined in datasheet (used later in pressure measurement)
int32_t bmp280_compensate_T_int32(BMP280_HandleTypedef* bmp, int32_t adc_T)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)bmp->compensation_params_.dig_T1<<1))) * ((int32_t)bmp->compensation_params_.dig_T2)) >> 11;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	10da      	asrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	88db      	ldrh	r3, [r3, #6]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	12db      	asrs	r3, r3, #11
 800167a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1)) * ((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1))) >> 12) *
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	111b      	asrs	r3, r3, #4
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	88d2      	ldrh	r2, [r2, #6]
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	1112      	asrs	r2, r2, #4
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	88c9      	ldrh	r1, [r1, #6]
 800168e:	1a52      	subs	r2, r2, r1
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	131b      	asrs	r3, r3, #12
	((int32_t)bmp->compensation_params_.dig_T3)) >> 14;
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
	var2 = (((((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1)) * ((adc_T>>4) - ((int32_t)bmp->compensation_params_.dig_T1))) >> 12) *
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	139b      	asrs	r3, r3, #14
 80016a2:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <bmp280_compensate_T_int32+0x74>)
 80016ac:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <bmp280_compensate_T_int32+0x74>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3380      	adds	r3, #128	; 0x80
 80016ba:	121b      	asrs	r3, r3, #8
 80016bc:	60fb      	str	r3, [r7, #12]
	return T;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20000200 	.word	0x20000200

080016d0 <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(BMP280_HandleTypedef* bmp, int32_t adc_P)
{
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b0ca      	sub	sp, #296	; 0x128
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80016dc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80016e0:	4bb2      	ldr	r3, [pc, #712]	; (80019ac <bmp280_compensate_P_int64+0x2dc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	17da      	asrs	r2, r3, #31
 80016e6:	461c      	mov	r4, r3
 80016e8:	4615      	mov	r5, r2
 80016ea:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80016ee:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016f2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)bmp->compensation_params_.dig_P6;
 80016f6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fe:	fb03 f102 	mul.w	r1, r3, r2
 8001702:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001706:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	18ca      	adds	r2, r1, r3
 8001710:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001714:	fba3 8903 	umull	r8, r9, r3, r3
 8001718:	eb02 0309 	add.w	r3, r2, r9
 800171c:	4699      	mov	r9, r3
 800171e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001722:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001726:	b21b      	sxth	r3, r3
 8001728:	17da      	asrs	r2, r3, #31
 800172a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800172e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001732:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001736:	4603      	mov	r3, r0
 8001738:	fb03 f209 	mul.w	r2, r3, r9
 800173c:	460b      	mov	r3, r1
 800173e:	fb08 f303 	mul.w	r3, r8, r3
 8001742:	4413      	add	r3, r2
 8001744:	4602      	mov	r2, r0
 8001746:	fba8 1202 	umull	r1, r2, r8, r2
 800174a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800174e:	460a      	mov	r2, r1
 8001750:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001754:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001758:	4413      	add	r3, r2
 800175a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800175e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001762:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001766:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)bmp->compensation_params_.dig_P5)<<17);
 800176a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800176e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001772:	b21b      	sxth	r3, r3
 8001774:	17da      	asrs	r2, r3, #31
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800177a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800177e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001782:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001786:	462a      	mov	r2, r5
 8001788:	fb02 f203 	mul.w	r2, r2, r3
 800178c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001790:	4621      	mov	r1, r4
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	441a      	add	r2, r3
 8001798:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800179c:	4621      	mov	r1, r4
 800179e:	fba3 1301 	umull	r1, r3, r3, r1
 80017a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017a6:	460b      	mov	r3, r1
 80017a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80017ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80017c2:	462b      	mov	r3, r5
 80017c4:	0459      	lsls	r1, r3, #17
 80017c6:	4623      	mov	r3, r4
 80017c8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017cc:	4623      	mov	r3, r4
 80017ce:	0458      	lsls	r0, r3, #17
 80017d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017d4:	1814      	adds	r4, r2, r0
 80017d6:	643c      	str	r4, [r7, #64]	; 0x40
 80017d8:	414b      	adcs	r3, r1
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
 80017dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80017e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)bmp->compensation_params_.dig_P4)<<35);
 80017e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	17da      	asrs	r2, r3, #31
 80017f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001804:	00d9      	lsls	r1, r3, #3
 8001806:	2000      	movs	r0, #0
 8001808:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800180c:	1814      	adds	r4, r2, r0
 800180e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001810:	414b      	adcs	r3, r1
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001814:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001818:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)bmp->compensation_params_.dig_P3)>>8) + ((var1 * (int64_t)bmp->compensation_params_.dig_P2)<<12);
 800181c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001820:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001824:	fb03 f102 	mul.w	r1, r3, r2
 8001828:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800182c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	18ca      	adds	r2, r1, r3
 8001836:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800183a:	fba3 1303 	umull	r1, r3, r3, r3
 800183e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001842:	460b      	mov	r3, r1
 8001844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800185a:	b21b      	sxth	r3, r3
 800185c:	17da      	asrs	r2, r3, #31
 800185e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001862:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001866:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800186a:	462b      	mov	r3, r5
 800186c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001870:	4642      	mov	r2, r8
 8001872:	fb02 f203 	mul.w	r2, r2, r3
 8001876:	464b      	mov	r3, r9
 8001878:	4621      	mov	r1, r4
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	4622      	mov	r2, r4
 8001882:	4641      	mov	r1, r8
 8001884:	fba2 1201 	umull	r1, r2, r2, r1
 8001888:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800188c:	460a      	mov	r2, r1
 800188e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001892:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001896:	4413      	add	r3, r2
 8001898:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80018a8:	4623      	mov	r3, r4
 80018aa:	0a18      	lsrs	r0, r3, #8
 80018ac:	462b      	mov	r3, r5
 80018ae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b2:	462b      	mov	r3, r5
 80018b4:	1219      	asrs	r1, r3, #8
 80018b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	17da      	asrs	r2, r3, #31
 80018c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018c6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018ce:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80018d2:	464a      	mov	r2, r9
 80018d4:	fb02 f203 	mul.w	r2, r2, r3
 80018d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018dc:	4644      	mov	r4, r8
 80018de:	fb04 f303 	mul.w	r3, r4, r3
 80018e2:	441a      	add	r2, r3
 80018e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018e8:	4644      	mov	r4, r8
 80018ea:	fba3 4304 	umull	r4, r3, r3, r4
 80018ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80018f2:	4623      	mov	r3, r4
 80018f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80018f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800190e:	464c      	mov	r4, r9
 8001910:	0323      	lsls	r3, r4, #12
 8001912:	4644      	mov	r4, r8
 8001914:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001918:	4644      	mov	r4, r8
 800191a:	0322      	lsls	r2, r4, #12
 800191c:	1884      	adds	r4, r0, r2
 800191e:	633c      	str	r4, [r7, #48]	; 0x30
 8001920:	eb41 0303 	adc.w	r3, r1, r3
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
 8001926:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800192a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bmp->compensation_params_.dig_P1)>>33;
 800192e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001932:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001936:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800193a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800193e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001942:	899b      	ldrh	r3, [r3, #12]
 8001944:	b29b      	uxth	r3, r3
 8001946:	2200      	movs	r2, #0
 8001948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800194c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001950:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001954:	462b      	mov	r3, r5
 8001956:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800195a:	4642      	mov	r2, r8
 800195c:	fb02 f203 	mul.w	r2, r2, r3
 8001960:	464b      	mov	r3, r9
 8001962:	4621      	mov	r1, r4
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	4622      	mov	r2, r4
 800196c:	4641      	mov	r1, r8
 800196e:	fba2 1201 	umull	r1, r2, r2, r1
 8001972:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001976:	460a      	mov	r2, r1
 8001978:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800197c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001992:	4629      	mov	r1, r5
 8001994:	104a      	asrs	r2, r1, #1
 8001996:	4629      	mov	r1, r5
 8001998:	17cb      	asrs	r3, r1, #31
 800199a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 800199e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019a2:	4313      	orrs	r3, r2
 80019a4:	d104      	bne.n	80019b0 <bmp280_compensate_P_int64+0x2e0>
	{
		return 0; // avoid exception caused by division by zero
 80019a6:	2300      	movs	r3, #0
 80019a8:	e14b      	b.n	8001c42 <bmp280_compensate_P_int64+0x572>
 80019aa:	bf00      	nop
 80019ac:	20000200 	.word	0x20000200
	}

	p = 1048576-adc_P;
 80019b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019b4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80019b8:	17da      	asrs	r2, r3, #31
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80019bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019be:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80019c2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80019c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ca:	105b      	asrs	r3, r3, #1
 80019cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019d4:	07db      	lsls	r3, r3, #31
 80019d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019de:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80019e2:	4621      	mov	r1, r4
 80019e4:	1a89      	subs	r1, r1, r2
 80019e6:	67b9      	str	r1, [r7, #120]	; 0x78
 80019e8:	4629      	mov	r1, r5
 80019ea:	eb61 0303 	sbc.w	r3, r1, r3
 80019ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019f0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80019f4:	4622      	mov	r2, r4
 80019f6:	462b      	mov	r3, r5
 80019f8:	1891      	adds	r1, r2, r2
 80019fa:	6239      	str	r1, [r7, #32]
 80019fc:	415b      	adcs	r3, r3
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001a00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a04:	4621      	mov	r1, r4
 8001a06:	1851      	adds	r1, r2, r1
 8001a08:	61b9      	str	r1, [r7, #24]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	414b      	adcs	r3, r1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	018b      	lsls	r3, r1, #6
 8001a20:	4641      	mov	r1, r8
 8001a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a26:	4641      	mov	r1, r8
 8001a28:	018a      	lsls	r2, r1, #6
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	1889      	adds	r1, r1, r2
 8001a2e:	6139      	str	r1, [r7, #16]
 8001a30:	4649      	mov	r1, r9
 8001a32:	eb43 0101 	adc.w	r1, r3, r1
 8001a36:	6179      	str	r1, [r7, #20]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a44:	4649      	mov	r1, r9
 8001a46:	008b      	lsls	r3, r1, #2
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a4e:	4641      	mov	r1, r8
 8001a50:	008a      	lsls	r2, r1, #2
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	4622      	mov	r2, r4
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	462a      	mov	r2, r5
 8001a62:	eb42 0303 	adc.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a74:	4649      	mov	r1, r9
 8001a76:	008b      	lsls	r3, r1, #2
 8001a78:	4641      	mov	r1, r8
 8001a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a7e:	4641      	mov	r1, r8
 8001a80:	008a      	lsls	r2, r1, #2
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	4622      	mov	r2, r4
 8001a8a:	189b      	adds	r3, r3, r2
 8001a8c:	673b      	str	r3, [r7, #112]	; 0x70
 8001a8e:	462b      	mov	r3, r5
 8001a90:	460a      	mov	r2, r1
 8001a92:	eb42 0303 	adc.w	r3, r2, r3
 8001a96:	677b      	str	r3, [r7, #116]	; 0x74
 8001a98:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001aa0:	f7ff f8fa 	bl	8000c98 <__aeabi_ldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)bmp->compensation_params_.dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ab0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	17da      	asrs	r2, r3, #31
 8001ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001abc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0b50      	lsrs	r0, r2, #13
 8001aca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ace:	1359      	asrs	r1, r3, #13
 8001ad0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	fb00 f203 	mul.w	r2, r0, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	fb03 f301 	mul.w	r3, r3, r1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	fba2 1200 	umull	r1, r2, r2, r0
 8001ae8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001aec:	460a      	mov	r2, r1
 8001aee:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001af2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001af6:	4413      	add	r3, r2
 8001af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001afc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0b50      	lsrs	r0, r2, #13
 8001b0a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b0e:	1359      	asrs	r1, r3, #13
 8001b10:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001b14:	462b      	mov	r3, r5
 8001b16:	fb00 f203 	mul.w	r2, r0, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	fb03 f301 	mul.w	r3, r3, r1
 8001b20:	4413      	add	r3, r2
 8001b22:	4622      	mov	r2, r4
 8001b24:	fba2 1200 	umull	r1, r2, r2, r0
 8001b28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001b32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001b36:	4413      	add	r3, r2
 8001b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001b48:	4621      	mov	r1, r4
 8001b4a:	0e4a      	lsrs	r2, r1, #25
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b52:	4629      	mov	r1, r5
 8001b54:	164b      	asrs	r3, r1, #25
 8001b56:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)bmp->compensation_params_.dig_P8) * p) >> 19;
 8001b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b5e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	17da      	asrs	r2, r3, #31
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
 8001b68:	667a      	str	r2, [r7, #100]	; 0x64
 8001b6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b72:	462a      	mov	r2, r5
 8001b74:	fb02 f203 	mul.w	r2, r2, r3
 8001b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001b88:	4621      	mov	r1, r4
 8001b8a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b8e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001b92:	460a      	mov	r2, r1
 8001b94:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001b98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001bae:	4621      	mov	r1, r4
 8001bb0:	0cca      	lsrs	r2, r1, #19
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001bb8:	4629      	mov	r1, r5
 8001bba:	14cb      	asrs	r3, r1, #19
 8001bbc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)bmp->compensation_params_.dig_P7)<<4);
 8001bc0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001bc4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	65bc      	str	r4, [r7, #88]	; 0x58
 8001bcc:	eb41 0303 	adc.w	r3, r1, r3
 8001bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bd2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bd6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001bda:	4621      	mov	r1, r4
 8001bdc:	1889      	adds	r1, r1, r2
 8001bde:	6539      	str	r1, [r7, #80]	; 0x50
 8001be0:	4629      	mov	r1, r5
 8001be2:	eb43 0101 	adc.w	r1, r3, r1
 8001be6:	6579      	str	r1, [r7, #84]	; 0x54
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	0a18      	lsrs	r0, r3, #8
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bfe:	462b      	mov	r3, r5
 8001c00:	1219      	asrs	r1, r3, #8
 8001c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	17da      	asrs	r2, r3, #31
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001c1e:	464c      	mov	r4, r9
 8001c20:	0123      	lsls	r3, r4, #4
 8001c22:	4644      	mov	r4, r8
 8001c24:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c28:	4644      	mov	r4, r8
 8001c2a:	0122      	lsls	r2, r4, #4
 8001c2c:	1884      	adds	r4, r0, r2
 8001c2e:	603c      	str	r4, [r7, #0]
 8001c30:	eb41 0303 	adc.w	r3, r1, r3
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c3a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001c3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c4e:	bf00      	nop

08001c50 <bmp280_get_measurements>:

bool bmp280_get_measurements(BMP280_HandleTypedef* bmp,
			uint32_t* pressure, int32_t* temperature){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	//check if measurement has ended
	if(!bmp280_has_measurement_ended(bmp)){
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fca5 	bl	80015ac <bmp280_has_measurement_ended>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f083 0301 	eor.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <bmp280_get_measurements+0x22>
		return 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e039      	b.n	8001ce6 <bmp280_get_measurements+0x96>
	uint8_t raw_data[6];
	uint32_t raw_pressure;
	int32_t raw_temperature;

	//read data in burst
	if(HAL_I2C_Mem_Read(bmp->i2c_handle_, bmp->address_, BMP280_REG_ADDR_PRESS, 1, raw_data, 6, HAL_MAX_DELAY) != HAL_OK){
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	b299      	uxth	r1, r3
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	2306      	movs	r3, #6
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	22f7      	movs	r2, #247	; 0xf7
 8001c90:	f003 f9f8 	bl	8005084 <HAL_I2C_Mem_Read>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <bmp280_get_measurements+0x4e>
		return 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e023      	b.n	8001ce6 <bmp280_get_measurements+0x96>
	}

	raw_pressure = raw_data[0] << 12 | raw_data[1] << 4 | raw_data[3] >> 4;
 8001c9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ca0:	031a      	lsls	r2, r3, #12
 8001ca2:	7c7b      	ldrb	r3, [r7, #17]
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	7cfa      	ldrb	r2, [r7, #19]
 8001caa:	0912      	lsrs	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61fb      	str	r3, [r7, #28]
	raw_temperature = raw_data[3] << 12 | raw_data[4] << 4 | raw_data[5] >> 4;
 8001cb2:	7cfb      	ldrb	r3, [r7, #19]
 8001cb4:	031a      	lsls	r2, r3, #12
 8001cb6:	7d3b      	ldrb	r3, [r7, #20]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	7d7a      	ldrb	r2, [r7, #21]
 8001cbe:	0912      	lsrs	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]

	*pressure = bmp280_compensate_P_int64(bmp, raw_pressure);
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff fd00 	bl	80016d0 <bmp280_compensate_P_int64>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	601a      	str	r2, [r3, #0]
	*temperature = bmp280_compensate_T_int32(bmp, raw_temperature);
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff fcbd 	bl	8001658 <bmp280_compensate_T_int32>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	601a      	str	r2, [r3, #0]
	return 1;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <UART_Send>:

#include "esp8662.h"

#define UART_TIMEOUT 1000

static uint8_t UART_Send(const char* data){
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(huartdma.huart, (uint8_t*)data, strlen(data), UART_TIMEOUT) != HAL_OK){
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <UART_Send+0x38>)
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7fe fa6f 	bl	80001e0 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f005 fd2e 	bl	800776e <HAL_UART_Transmit>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <UART_Send+0x2c>
		return 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <UART_Send+0x2e>
	}
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000348 	.word	0x20000348

08001d2c <ESP_FindResponse>:

/*
 * TODO: comment
 */
static ESP_ERROR_CODE ESP_FindResponse(const char* resp, uint16_t wait){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0c4      	sub	sp, #272	; 0x110
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d3a:	6018      	str	r0, [r3, #0]
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d42:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8001d46:	801a      	strh	r2, [r3, #0]
	char line[256];
	uint8_t idx = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint32_t real_wait = 2*wait;
 8001d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d52:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	HAL_TIM_Base_Start(&htim3);
 8001d5e:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <ESP_FindResponse+0xac>)
 8001d60:	f005 f840 	bl	8006de4 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim3) <= real_wait);
 8001d64:	bf00      	nop
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <ESP_FindResponse+0xac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d2f8      	bcs.n	8001d66 <ESP_FindResponse+0x3a>
	TIM3->CNT = 0;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <ESP_FindResponse+0xb0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Stop(&htim3);
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <ESP_FindResponse+0xac>)
 8001d7c:	f005 f88c 	bl	8006e98 <HAL_TIM_Base_Stop>
	while(UARTDMA_IsDataReady(&huartdma) && idx < 256){
 8001d80:	e010      	b.n	8001da4 <ESP_FindResponse+0x78>
		line[idx] = UARTDMA_GetCharFromBuffer(&huartdma);
 8001d82:	4817      	ldr	r0, [pc, #92]	; (8001de0 <ESP_FindResponse+0xb4>)
 8001d84:	f001 fe36 	bl	80039f4 <UARTDMA_GetCharFromBuffer>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d8e:	b2d1      	uxtb	r1, r2
 8001d90:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d94:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001d98:	54d1      	strb	r1, [r2, r3]
		idx++;
 8001d9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	while(UARTDMA_IsDataReady(&huartdma) && idx < 256){
 8001da4:	480e      	ldr	r0, [pc, #56]	; (8001de0 <ESP_FindResponse+0xb4>)
 8001da6:	f001 fe51 	bl	8003a4c <UARTDMA_IsDataReady>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e8      	bne.n	8001d82 <ESP_FindResponse+0x56>
	}
	if(strstr(line, resp) != NULL){
 8001db0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001db4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001db8:	f107 0208 	add.w	r2, r7, #8
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f007 fa26 	bl	8009210 <strstr>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <ESP_FindResponse+0xa2>
		return ESP_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e7ff      	b.n	8001dce <ESP_FindResponse+0xa2>
	}
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200008d0 	.word	0x200008d0
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	20000348 	.word	0x20000348

08001de4 <ESP_Init>:
 * @params: None
 *
 * @return: one of the error codes: success, failure, timeout
 * @retval: 0,1,2
 */
ESP_ERROR_CODE ESP_Init(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	if(!UART_Send("ATE0\r\n")){
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <ESP_Init+0x94>)
 8001dea:	f7ff ff81 	bl	8001cf0 <UART_Send>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <ESP_Init+0x14>
		return ESP_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e03c      	b.n	8001e72 <ESP_Init+0x8e>
	}
	if(ESP_FindResponse("OK", 200) != ESP_OK){
 8001df8:	21c8      	movs	r1, #200	; 0xc8
 8001dfa:	4820      	ldr	r0, [pc, #128]	; (8001e7c <ESP_Init+0x98>)
 8001dfc:	f7ff ff96 	bl	8001d2c <ESP_FindResponse>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <ESP_Init+0x26>
		return ESP_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e033      	b.n	8001e72 <ESP_Init+0x8e>
	}
	// reset esp
	if(!UART_Send("AT+RST\r\n")){
 8001e0a:	481d      	ldr	r0, [pc, #116]	; (8001e80 <ESP_Init+0x9c>)
 8001e0c:	f7ff ff70 	bl	8001cf0 <UART_Send>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <ESP_Init+0x36>
		return ESP_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02b      	b.n	8001e72 <ESP_Init+0x8e>
	}
	if(ESP_FindResponse("OK", 200) != ESP_OK){
 8001e1a:	21c8      	movs	r1, #200	; 0xc8
 8001e1c:	4817      	ldr	r0, [pc, #92]	; (8001e7c <ESP_Init+0x98>)
 8001e1e:	f7ff ff85 	bl	8001d2c <ESP_FindResponse>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <ESP_Init+0x48>
		return ESP_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e022      	b.n	8001e72 <ESP_Init+0x8e>
	}

	// set mode to end device
	if(!UART_Send("AT+CWMODE=1\r\n")){
 8001e2c:	4815      	ldr	r0, [pc, #84]	; (8001e84 <ESP_Init+0xa0>)
 8001e2e:	f7ff ff5f 	bl	8001cf0 <UART_Send>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <ESP_Init+0x58>
		return ESP_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e01a      	b.n	8001e72 <ESP_Init+0x8e>
	}
	if(ESP_FindResponse("OK", 200) != ESP_OK){
 8001e3c:	21c8      	movs	r1, #200	; 0xc8
 8001e3e:	480f      	ldr	r0, [pc, #60]	; (8001e7c <ESP_Init+0x98>)
 8001e40:	f7ff ff74 	bl	8001d2c <ESP_FindResponse>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <ESP_Init+0x6a>
		return ESP_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e011      	b.n	8001e72 <ESP_Init+0x8e>
	}

	// set single connection
	if(!UART_Send("AT+CIPMUX=0\r\n")){
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <ESP_Init+0xa4>)
 8001e50:	f7ff ff4e 	bl	8001cf0 <UART_Send>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <ESP_Init+0x7a>
		return ESP_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e009      	b.n	8001e72 <ESP_Init+0x8e>
	}
	if(ESP_FindResponse("OK", 200) != ESP_OK){
 8001e5e:	21c8      	movs	r1, #200	; 0xc8
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <ESP_Init+0x98>)
 8001e62:	f7ff ff63 	bl	8001d2c <ESP_FindResponse>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <ESP_Init+0x8c>
		return ESP_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <ESP_Init+0x8e>
	}
	return ESP_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	0800ce58 	.word	0x0800ce58
 8001e7c:	0800ce60 	.word	0x0800ce60
 8001e80:	0800ce64 	.word	0x0800ce64
 8001e84:	0800ce70 	.word	0x0800ce70
 8001e88:	0800ce80 	.word	0x0800ce80

08001e8c <ESP_WiFiConnect>:
 * @param[in] wifi_pass : pointer to string with wifi password
 *
 * @return: one of the error codes: success, failure, timeout
 * @retval: 0,1,2
 */
ESP_ERROR_CODE ESP_WiFiConnect(const char* wifi_ssid, const char* wifi_pass){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
	static char wifi_access[100];
	sprintf(wifi_access, "AT+CWJAP=\"%s\",\"%s\"\r\n", wifi_ssid, wifi_pass);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <ESP_WiFiConnect+0x44>)
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <ESP_WiFiConnect+0x48>)
 8001e9e:	f007 f997 	bl	80091d0 <siprintf>

	// make connection
	if(!UART_Send(wifi_access)){
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <ESP_WiFiConnect+0x48>)
 8001ea4:	f7ff ff24 	bl	8001cf0 <UART_Send>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <ESP_WiFiConnect+0x26>
		return ESP_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00a      	b.n	8001ec8 <ESP_WiFiConnect+0x3c>
	}
	if(ESP_FindResponse("OK", 2000) != ESP_OK){
 8001eb2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001eb6:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <ESP_WiFiConnect+0x4c>)
 8001eb8:	f7ff ff38 	bl	8001d2c <ESP_FindResponse>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <ESP_WiFiConnect+0x3a>
		return ESP_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <ESP_WiFiConnect+0x3c>
	}
	return ESP_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800ce90 	.word	0x0800ce90
 8001ed4:	20000204 	.word	0x20000204
 8001ed8:	0800ce60 	.word	0x0800ce60

08001edc <ESP_WeatherDataPrepare>:

/*
 * TODO: comment
 */
void ESP_WeatherDataPrepare(WeatherDataToSend* weather_data, RawMeasurements* raw_data){
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	weather_data->base_float_humidity = raw_data->base_am2320_humidity / 10.;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	8adb      	ldrh	r3, [r3, #22]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb22 	bl	8000534 <__aeabi_i2d>
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <ESP_WeatherDataPrepare+0xdc>)
 8001ef6:	f7fe fcb1 	bl	800085c <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe79 	bl	8000bf8 <__aeabi_d2f>
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	615a      	str	r2, [r3, #20]
	weather_data->base_float_temperature = (raw_data->base_am2320_temperature / 10. + raw_data->base_bmp280_temp / 100.) / 2.;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb0e 	bl	8000534 <__aeabi_i2d>
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <ESP_WeatherDataPrepare+0xdc>)
 8001f1e:	f7fe fc9d 	bl	800085c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	461d      	mov	r5, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb00 	bl	8000534 <__aeabi_i2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <ESP_WeatherDataPrepare+0xe0>)
 8001f3a:	f7fe fc8f 	bl	800085c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f5a:	f7fe fc7f 	bl	800085c <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fe47 	bl	8000bf8 <__aeabi_d2f>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	611a      	str	r2, [r3, #16]
	weather_data->base_float_press = raw_data->base_bmp280_press / 25600.;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe facd 	bl	8000514 <__aeabi_ui2d>
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <ESP_WeatherDataPrepare+0xe4>)
 8001f80:	f7fe fc6c 	bl	800085c <__aeabi_ddiv>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe34 	bl	8000bf8 <__aeabi_d2f>
 8001f90:	4602      	mov	r2, r0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60da      	str	r2, [r3, #12]
	weather_data->remote_float_humidity = 0.0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
	weather_data->remote_float_press = 0.0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
	weather_data->remote_float_temperature = 0.0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40240000 	.word	0x40240000
 8001fbc:	40590000 	.word	0x40590000
 8001fc0:	40d90000 	.word	0x40d90000

08001fc4 <ESP_SendData>:
 * @param[in] data : pointer to structure with accumulated weather data
 *
 * @return: one of the error codes: success, failure, timeout
 * @retval: 0,1,2
 */
ESP_ERROR_CODE ESP_SendData(const char* ip_address, WeatherDataToSend* data){
 8001fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc8:	b097      	sub	sp, #92	; 0x5c
 8001fca:	af0a      	add	r7, sp, #40	; 0x28
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24
 8001fce:	6239      	str	r1, [r7, #32]
 8001fd0:	466b      	mov	r3, sp
 8001fd2:	461e      	mov	r6, r3
	// prepare string
	static char data_buffer[200];
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
			data->remote_float_temperature, data->base_float_temperature, data->remote_float_press,
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	685b      	ldr	r3, [r3, #4]
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fabd 	bl	8000558 <__aeabi_f2d>
 8001fde:	e9c7 0106 	strd	r0, r1, [r7, #24]
			data->remote_float_temperature, data->base_float_temperature, data->remote_float_press,
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	691b      	ldr	r3, [r3, #16]
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fab6 	bl	8000558 <__aeabi_f2d>
 8001fec:	e9c7 0104 	strd	r0, r1, [r7, #16]
			data->remote_float_temperature, data->base_float_temperature, data->remote_float_press,
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	681b      	ldr	r3, [r3, #0]
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe faaf 	bl	8000558 <__aeabi_f2d>
 8001ffa:	e9c7 0102 	strd	r0, r1, [r7, #8]
			data->base_float_press, data->remote_float_humidity, data->base_float_humidity);
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	68db      	ldr	r3, [r3, #12]
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe faa8 	bl	8000558 <__aeabi_f2d>
 8002008:	e9c7 0100 	strd	r0, r1, [r7]
			data->base_float_press, data->remote_float_humidity, data->base_float_humidity);
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	689b      	ldr	r3, [r3, #8]
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe faa1 	bl	8000558 <__aeabi_f2d>
 8002016:	4682      	mov	sl, r0
 8002018:	468b      	mov	fp, r1
			data->base_float_press, data->remote_float_humidity, data->base_float_humidity);
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	695b      	ldr	r3, [r3, #20]
	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=%2.2f&field2=%2.2f&field3=%4.3f&field4=%4.3f&field5=%2.2f&field6=%2.2f\r\n",
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa9a 	bl	8000558 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800202c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002030:	ed97 7b00 	vldr	d7, [r7]
 8002034:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002038:	ed97 7b02 	vldr	d7, [r7, #8]
 800203c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002040:	ed97 7b04 	vldr	d7, [r7, #16]
 8002044:	ed8d 7b00 	vstr	d7, [sp]
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	493b      	ldr	r1, [pc, #236]	; (800213c <ESP_SendData+0x178>)
 800204e:	483c      	ldr	r0, [pc, #240]	; (8002140 <ESP_SendData+0x17c>)
 8002050:	f007 f8be 	bl	80091d0 <siprintf>

//	sprintf(data_buffer, "GET https://api.thingspeak.com/update?api_key=DCFXM8NU6FU9K22B&field1=11&field2=11&field3=11&field4=11&field5=11&field6=11\r\n");
	static char send_command[24];
	sprintf(send_command, "AT+CIPSEND=%d\r\n", strlen(data_buffer));
 8002054:	483a      	ldr	r0, [pc, #232]	; (8002140 <ESP_SendData+0x17c>)
 8002056:	f7fe f8c3 	bl	80001e0 <strlen>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4939      	ldr	r1, [pc, #228]	; (8002144 <ESP_SendData+0x180>)
 8002060:	4839      	ldr	r0, [pc, #228]	; (8002148 <ESP_SendData+0x184>)
 8002062:	f007 f8b5 	bl	80091d0 <siprintf>

	// connect to thingspeak
	char webserver_buffer[25+strlen(ip_address)+2];
 8002066:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002068:	f7fe f8ba 	bl	80001e0 <strlen>
 800206c:	4603      	mov	r3, r0
 800206e:	f103 011b 	add.w	r1, r3, #27
 8002072:	460b      	mov	r3, r1
 8002074:	3b01      	subs	r3, #1
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002078:	2300      	movs	r3, #0
 800207a:	4688      	mov	r8, r1
 800207c:	4699      	mov	r9, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002092:	2300      	movs	r3, #0
 8002094:	460c      	mov	r4, r1
 8002096:	461d      	mov	r5, r3
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	00eb      	lsls	r3, r5, #3
 80020a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a6:	00e2      	lsls	r2, r4, #3
 80020a8:	1dcb      	adds	r3, r1, #7
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	ebad 0d03 	sub.w	sp, sp, r3
 80020b2:	ab0a      	add	r3, sp, #40	; 0x28
 80020b4:	3300      	adds	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(webserver_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80\r\n", ip_address);
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	4924      	ldr	r1, [pc, #144]	; (800214c <ESP_SendData+0x188>)
 80020bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020be:	f007 f887 	bl	80091d0 <siprintf>
	if(!UART_Send(webserver_buffer)){
 80020c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020c4:	f7ff fe14 	bl	8001cf0 <UART_Send>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <ESP_SendData+0x10e>
		return ESP_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e02e      	b.n	8002130 <ESP_SendData+0x16c>
	}
	if(ESP_FindResponse("OK", 500) != ESP_OK){
 80020d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020d6:	481e      	ldr	r0, [pc, #120]	; (8002150 <ESP_SendData+0x18c>)
 80020d8:	f7ff fe28 	bl	8001d2c <ESP_FindResponse>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <ESP_SendData+0x122>
		return ESP_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e024      	b.n	8002130 <ESP_SendData+0x16c>
	}

	// start sending
	if(!UART_Send(send_command)){
 80020e6:	4818      	ldr	r0, [pc, #96]	; (8002148 <ESP_SendData+0x184>)
 80020e8:	f7ff fe02 	bl	8001cf0 <UART_Send>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <ESP_SendData+0x132>
		return ESP_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e01c      	b.n	8002130 <ESP_SendData+0x16c>
	}
	if(ESP_FindResponse("<", 500) != ESP_OK){
 80020f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020fa:	4816      	ldr	r0, [pc, #88]	; (8002154 <ESP_SendData+0x190>)
 80020fc:	f7ff fe16 	bl	8001d2c <ESP_FindResponse>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <ESP_SendData+0x146>
		return ESP_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e012      	b.n	8002130 <ESP_SendData+0x16c>
	}

	// send data
	if(!UART_Send(data_buffer)){
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <ESP_SendData+0x17c>)
 800210c:	f7ff fdf0 	bl	8001cf0 <UART_Send>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <ESP_SendData+0x156>
		return ESP_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00a      	b.n	8002130 <ESP_SendData+0x16c>
	}
	if(ESP_FindResponse("SEND OK", 2000) != ESP_OK){
 800211a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800211e:	480e      	ldr	r0, [pc, #56]	; (8002158 <ESP_SendData+0x194>)
 8002120:	f7ff fe04 	bl	8001d2c <ESP_FindResponse>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <ESP_SendData+0x16a>
		return ESP_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <ESP_SendData+0x16c>
	}
	return ESP_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	46b5      	mov	sp, r6

}
 8002132:	4618      	mov	r0, r3
 8002134:	3734      	adds	r7, #52	; 0x34
 8002136:	46bd      	mov	sp, r7
 8002138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800213c:	0800cea8 	.word	0x0800cea8
 8002140:	20000268 	.word	0x20000268
 8002144:	0800cf38 	.word	0x0800cf38
 8002148:	20000330 	.word	0x20000330
 800214c:	0800cf48 	.word	0x0800cf48
 8002150:	0800ce60 	.word	0x0800ce60
 8002154:	0800cf64 	.word	0x0800cf64
 8002158:	0800cf68 	.word	0x0800cf68

0800215c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b0a      	cmp	r3, #10
 8002168:	d102      	bne.n	8002170 <__io_putchar+0x14>
		__io_putchar('\r');
 800216a:	200d      	movs	r0, #13
 800216c:	f7ff fff6 	bl	800215c <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002170:	1d39      	adds	r1, r7, #4
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	2201      	movs	r2, #1
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <__io_putchar+0x2c>)
 800217a:	f005 faf8 	bl	800776e <HAL_UART_Transmit>

	return 1;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000960 	.word	0x20000960

0800218c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800218c:	b5b0      	push	{r4, r5, r7, lr}
 800218e:	b09c      	sub	sp, #112	; 0x70
 8002190:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002192:	f001 fcd1 	bl	8003b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002196:	f000 f97f 	bl	8002498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219a:	f000 fb61 	bl	8002860 <MX_GPIO_Init>
  MX_DMA_Init();
 800219e:	f000 fb3f 	bl	8002820 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021a2:	f000 fae9 	bl	8002778 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80021a6:	f000 f9e3 	bl	8002570 <MX_I2C1_Init>
  MX_I2C3_Init();
 80021aa:	f000 fa0f 	bl	80025cc <MX_I2C3_Init>
  MX_SPI2_Init();
 80021ae:	f000 fa3b 	bl	8002628 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80021b2:	f000 fb0b 	bl	80027cc <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80021b6:	f000 fabb 	bl	8002730 <MX_TIM10_Init>
  MX_TIM3_Init();
 80021ba:	f000 fa6b 	bl	8002694 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim10);
 80021be:	489f      	ldr	r0, [pc, #636]	; (800243c <main+0x2b0>)
 80021c0:	f004 fe92 	bl	8006ee8 <HAL_TIM_Base_Start_IT>
	// am2320 init
	AM2320_HandleTypeDef am2320 = am2320_init(&hi2c3, AM2320_ADDRESS);
 80021c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021c8:	225c      	movs	r2, #92	; 0x5c
 80021ca:	499d      	ldr	r1, [pc, #628]	; (8002440 <main+0x2b4>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe ff6b 	bl	80010a8 <am2320_init>

	// bmp280 init
	BMP280_HandleTypedef bmp280;
	bmp280.i2c_handle_ = &hi2c1;
 80021d2:	4b9c      	ldr	r3, [pc, #624]	; (8002444 <main+0x2b8>)
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
	bmp280_init_force_mode(&bmp280);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f940 	bl	8001460 <bmp280_init_force_mode>

	// nrf init
	NRF_HandleTypedef nrf;
	if(!NRF_Init(&nrf)){
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fca7 	bl	8002b38 <NRF_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f083 0301 	eor.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <main+0x6e>
		Error_Handler();
 80021f6:	f000 fc05 	bl	8002a04 <Error_Handler>

	// pipe configuration
	// address will be clocked from last to first
	// need to clock the same address as for transmitter
	static uint8_t nrf_addr[] = {0x69, 0x21, 0x37};
	if(!NRF_SET_PipeAddress(RX_PIPE_0, nrf_addr)){
 80021fa:	4993      	ldr	r1, [pc, #588]	; (8002448 <main+0x2bc>)
 80021fc:	2000      	movs	r0, #0
 80021fe:	f000 feb4 	bl	8002f6a <NRF_SET_PipeAddress>
 8002202:	4603      	mov	r3, r0
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <main+0x86>
		return NRF_ERROR;
 800220e:	2300      	movs	r3, #0
 8002210:	e10f      	b.n	8002432 <main+0x2a6>
	}
	// prepare pipe
	if(!NRF_SET_PipeRX(RX_PIPE_0, AA_ON, (uint8_t)7)){
 8002212:	2207      	movs	r2, #7
 8002214:	2101      	movs	r1, #1
 8002216:	2000      	movs	r0, #0
 8002218:	f000 fef8 	bl	800300c <NRF_SET_PipeRX>
 800221c:	4603      	mov	r3, r0
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <main+0xa0>
		return NRF_ERROR;
 8002228:	2300      	movs	r3, #0
 800222a:	e102      	b.n	8002432 <main+0x2a6>
	}

	// set mode to receiver
	if(!NRF_SET_Mode(RX)){
 800222c:	2001      	movs	r0, #1
 800222e:	f000 fd81 	bl	8002d34 <NRF_SET_Mode>
 8002232:	4603      	mov	r3, r0
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <main+0xb6>
		return NRF_ERROR;
 800223e:	2300      	movs	r3, #0
 8002240:	e0f7      	b.n	8002432 <main+0x2a6>
	}

	// turn transmitter on and wait for at least 1.5 ms
	if(!NRF_SET_PowerMode(PWR_UP)){
 8002242:	2001      	movs	r0, #1
 8002244:	f000 fda8 	bl	8002d98 <NRF_SET_PowerMode>
 8002248:	4603      	mov	r3, r0
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <main+0xcc>
		return NRF_ERROR;
 8002254:	2300      	movs	r3, #0
 8002256:	e0ec      	b.n	8002432 <main+0x2a6>
	}
	HAL_Delay(2);
 8002258:	2002      	movs	r0, #2
 800225a:	f001 fcdf 	bl	8003c1c <HAL_Delay>
	// put receiver in rx mode by enabling CE pin
	NRF_CE_SET_HIGH;
 800225e:	2201      	movs	r2, #1
 8002260:	2101      	movs	r1, #1
 8002262:	487a      	ldr	r0, [pc, #488]	; (800244c <main+0x2c0>)
 8002264:	f002 f97a 	bl	800455c <HAL_GPIO_WritePin>

	UARTDMA_Init(&huartdma, &huart6);
 8002268:	4979      	ldr	r1, [pc, #484]	; (8002450 <main+0x2c4>)
 800226a:	487a      	ldr	r0, [pc, #488]	; (8002454 <main+0x2c8>)
 800226c:	f001 fc03 	bl	8003a76 <UARTDMA_Init>
	ESP_ERROR_CODE ret;

	char ParseBuffer[18];
	for(int i = 0; i < 5; i++){
 8002270:	2300      	movs	r3, #0
 8002272:	667b      	str	r3, [r7, #100]	; 0x64
 8002274:	e014      	b.n	80022a0 <main+0x114>
		ret = ESP_Init();
 8002276:	f7ff fdb5 	bl	8001de4 <ESP_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if(ret != ESP_OK){
 8002280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <main+0x106>
			HAL_Delay(5000);
 8002288:	f241 3088 	movw	r0, #5000	; 0x1388
 800228c:	f001 fcc6 	bl	8003c1c <HAL_Delay>
 8002290:	e003      	b.n	800229a <main+0x10e>
		}
		else if(ret == ESP_OK){
 8002292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <main+0x11c>
	for(int i = 0; i < 5; i++){
 800229a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800229c:	3301      	adds	r3, #1
 800229e:	667b      	str	r3, [r7, #100]	; 0x64
 80022a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	dde7      	ble.n	8002276 <main+0xea>
 80022a6:	e000      	b.n	80022aa <main+0x11e>
			break;
 80022a8:	bf00      	nop
		}
	}
	ret = ESP_WiFiConnect("UPC8001681", "ape7cvyrHk8W"); // cracow
 80022aa:	496b      	ldr	r1, [pc, #428]	; (8002458 <main+0x2cc>)
 80022ac:	486b      	ldr	r0, [pc, #428]	; (800245c <main+0x2d0>)
 80022ae:	f7ff fded 	bl	8001e8c <ESP_WiFiConnect>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
//	ret = ESP_WiFiConnect("FunBox2-4233", "19DA77C9141D6FE165D23F24D3"); // ww
//	ret = ESP_WiFiConnect("Redmi", "2a4f83f2ce0c"); // phone hotspot
	for(int i = 0; i < 5; i++){
 80022b8:	2300      	movs	r3, #0
 80022ba:	663b      	str	r3, [r7, #96]	; 0x60
 80022bc:	e016      	b.n	80022ec <main+0x160>
		ret = ESP_WiFiConnect("UPC8001681", "ape7cvyrHk8W"); // cracow
 80022be:	4966      	ldr	r1, [pc, #408]	; (8002458 <main+0x2cc>)
 80022c0:	4866      	ldr	r0, [pc, #408]	; (800245c <main+0x2d0>)
 80022c2:	f7ff fde3 	bl	8001e8c <ESP_WiFiConnect>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if(ret != ESP_OK){
 80022cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <main+0x152>
			HAL_Delay(5000);
 80022d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80022d8:	f001 fca0 	bl	8003c1c <HAL_Delay>
 80022dc:	e003      	b.n	80022e6 <main+0x15a>
		}
		else if(ret == ESP_OK){
 80022de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <main+0x168>
	for(int i = 0; i < 5; i++){
 80022e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e8:	3301      	adds	r3, #1
 80022ea:	663b      	str	r3, [r7, #96]	; 0x60
 80022ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	dde5      	ble.n	80022be <main+0x132>
 80022f2:	e000      	b.n	80022f6 <main+0x16a>
			break;
 80022f4:	bf00      	nop
//			for(int i =0; i <7; i++){
//				printf("%c", data_buffer[i]);
//			}
//			printf("\n");
//		}
		if(startMeasFlag){
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <main+0x2d4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0fb      	beq.n	80022f6 <main+0x16a>
			am2320_read_temperature_and_humidity(&am2320);
 80022fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe ff28 	bl	8001158 <am2320_read_temperature_and_humidity>
			printf("Temperature: %d.%d\nHumidity: %d.%d\n",
					am2320.last_temperature /10, am2320.last_temperature % 10,
 8002308:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
			printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 800230c:	4a55      	ldr	r2, [pc, #340]	; (8002464 <main+0x2d8>)
 800230e:	fb82 1203 	smull	r1, r2, r2, r3
 8002312:	1092      	asrs	r2, r2, #2
 8002314:	17db      	asrs	r3, r3, #31
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	b21b      	sxth	r3, r3
 800231a:	4618      	mov	r0, r3
					am2320.last_temperature /10, am2320.last_temperature % 10,
 800231c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
			printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <main+0x2d8>)
 8002322:	fb83 1302 	smull	r1, r3, r3, r2
 8002326:	1099      	asrs	r1, r3, #2
 8002328:	17d3      	asrs	r3, r2, #31
 800232a:	1ac9      	subs	r1, r1, r3
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b21b      	sxth	r3, r3
 8002338:	461c      	mov	r4, r3
					am2320.last_humidity / 10, am2320.last_humidity % 10);
 800233a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
			printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 800233e:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <main+0x2dc>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	b29b      	uxth	r3, r3
 8002348:	461d      	mov	r5, r3
					am2320.last_humidity / 10, am2320.last_humidity % 10);
 800234a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
			printf("Temperature: %d.%d\nHumidity: %d.%d\n",
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <main+0x2dc>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	08d9      	lsrs	r1, r3, #3
 8002356:	460b      	mov	r3, r1
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	462b      	mov	r3, r5
 8002366:	4622      	mov	r2, r4
 8002368:	4601      	mov	r1, r0
 800236a:	4840      	ldr	r0, [pc, #256]	; (800246c <main+0x2e0>)
 800236c:	f006 fe9c 	bl	80090a8 <iprintf>
			bmp280_force_measurement(&bmp280);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f933 	bl	80015e0 <bmp280_force_measurement>
			bmp280_get_measurements(&bmp280, &bmp280_press, &bmp280_temp);
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4a3c      	ldr	r2, [pc, #240]	; (8002470 <main+0x2e4>)
 8002380:	493c      	ldr	r1, [pc, #240]	; (8002474 <main+0x2e8>)
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fc64 	bl	8001c50 <bmp280_get_measurements>
			printf("Temperature: %d.%d\nPressure: %.3f\n", (int)(bmp280_temp/100), (int)(bmp280_temp%100),
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <main+0x2e4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <main+0x2ec>)
 800238e:	fb82 1203 	smull	r1, r2, r2, r3
 8002392:	1152      	asrs	r2, r2, #5
 8002394:	17db      	asrs	r3, r3, #31
 8002396:	1ad5      	subs	r5, r2, r3
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <main+0x2e4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a36      	ldr	r2, [pc, #216]	; (8002478 <main+0x2ec>)
 800239e:	fb82 1203 	smull	r1, r2, r2, r3
 80023a2:	1151      	asrs	r1, r2, #5
 80023a4:	17da      	asrs	r2, r3, #31
 80023a6:	1a8c      	subs	r4, r1, r2
 80023a8:	2264      	movs	r2, #100	; 0x64
 80023aa:	fb04 f202 	mul.w	r2, r4, r2
 80023ae:	1a9c      	subs	r4, r3, r2
					(float)bmp280_press/25600.);
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <main+0x2e8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f8ca 	bl	8000558 <__aeabi_f2d>
			printf("Temperature: %d.%d\nPressure: %.3f\n", (int)(bmp280_temp/100), (int)(bmp280_temp%100),
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <main+0x2f0>)
 80023ca:	f7fe fa47 	bl	800085c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9cd 2300 	strd	r2, r3, [sp]
 80023d6:	4622      	mov	r2, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	4829      	ldr	r0, [pc, #164]	; (8002480 <main+0x2f4>)
 80023dc:	f006 fe64 	bl	80090a8 <iprintf>
			startMeasFlag = 0;
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <main+0x2d4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]

			//prep data
			raw_data.base_am2320_humidity = am2320.last_humidity;
 80023e6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <main+0x2f8>)
 80023ec:	82da      	strh	r2, [r3, #22]
			raw_data.base_am2320_temperature = am2320.last_temperature;
 80023ee:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <main+0x2f8>)
 80023f4:	829a      	strh	r2, [r3, #20]
			raw_data.base_bmp280_press = bmp280_press;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <main+0x2e8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a22      	ldr	r2, [pc, #136]	; (8002484 <main+0x2f8>)
 80023fc:	6113      	str	r3, [r2, #16]
			raw_data.base_bmp280_temp = bmp280_temp;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <main+0x2e4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <main+0x2f8>)
 8002404:	60d3      	str	r3, [r2, #12]
			ESP_WeatherDataPrepare(&weather_data, &raw_data);
 8002406:	491f      	ldr	r1, [pc, #124]	; (8002484 <main+0x2f8>)
 8002408:	481f      	ldr	r0, [pc, #124]	; (8002488 <main+0x2fc>)
 800240a:	f7ff fd67 	bl	8001edc <ESP_WeatherDataPrepare>
			ret = ESP_SendData("184.106.153.149", &weather_data);
 800240e:	491e      	ldr	r1, [pc, #120]	; (8002488 <main+0x2fc>)
 8002410:	481e      	ldr	r0, [pc, #120]	; (800248c <main+0x300>)
 8002412:	f7ff fdd7 	bl	8001fc4 <ESP_SendData>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(ret != ESP_OK){
 800241c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <main+0x29e>
				printf("Erro during sending\r\n");
 8002424:	481a      	ldr	r0, [pc, #104]	; (8002490 <main+0x304>)
 8002426:	f006 fec5 	bl	80091b4 <puts>
			}
			printf("got here\r\n");
 800242a:	481a      	ldr	r0, [pc, #104]	; (8002494 <main+0x308>)
 800242c:	f006 fec2 	bl	80091b4 <puts>
		if(startMeasFlag){
 8002430:	e761      	b.n	80022f6 <main+0x16a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8002432:	4618      	mov	r0, r3
 8002434:	3768      	adds	r7, #104	; 0x68
 8002436:	46bd      	mov	sp, r7
 8002438:	bdb0      	pop	{r4, r5, r7, pc}
 800243a:	bf00      	nop
 800243c:	20000918 	.word	0x20000918
 8002440:	20000824 	.word	0x20000824
 8002444:	200007d0 	.word	0x200007d0
 8002448:	20000000 	.word	0x20000000
 800244c:	40020800 	.word	0x40020800
 8002450:	200009a4 	.word	0x200009a4
 8002454:	20000348 	.word	0x20000348
 8002458:	0800cf70 	.word	0x0800cf70
 800245c:	0800cf80 	.word	0x0800cf80
 8002460:	20000a55 	.word	0x20000a55
 8002464:	66666667 	.word	0x66666667
 8002468:	cccccccd 	.word	0xcccccccd
 800246c:	0800cf8c 	.word	0x0800cf8c
 8002470:	20000a4c 	.word	0x20000a4c
 8002474:	20000a50 	.word	0x20000a50
 8002478:	51eb851f 	.word	0x51eb851f
 800247c:	40d90000 	.word	0x40d90000
 8002480:	0800cfb0 	.word	0x0800cfb0
 8002484:	20000a58 	.word	0x20000a58
 8002488:	20000a70 	.word	0x20000a70
 800248c:	0800cfd4 	.word	0x0800cfd4
 8002490:	0800cfe4 	.word	0x0800cfe4
 8002494:	0800cffc 	.word	0x0800cffc

08002498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b094      	sub	sp, #80	; 0x50
 800249c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	2230      	movs	r2, #48	; 0x30
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 ff7c 	bl	80083a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <SystemClock_Config+0xd0>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a28      	ldr	r2, [pc, #160]	; (8002568 <SystemClock_Config+0xd0>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <SystemClock_Config+0xd0>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	4b23      	ldr	r3, [pc, #140]	; (800256c <SystemClock_Config+0xd4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <SystemClock_Config+0xd4>)
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <SystemClock_Config+0xd4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002500:	2310      	movs	r3, #16
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002504:	2302      	movs	r3, #2
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800250c:	2310      	movs	r3, #16
 800250e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002510:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002516:	2304      	movs	r3, #4
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800251a:	2307      	movs	r3, #7
 800251c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fc80 	bl	8005e28 <HAL_RCC_OscConfig>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800252e:	f000 fa69 	bl	8002a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002532:	230f      	movs	r3, #15
 8002534:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2102      	movs	r1, #2
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fee2 	bl	8006318 <HAL_RCC_ClockConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800255a:	f000 fa53 	bl	8002a04 <Error_Handler>
  }
}
 800255e:	bf00      	nop
 8002560:	3750      	adds	r7, #80	; 0x50
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000

08002570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <MX_I2C1_Init+0x50>)
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <MX_I2C1_Init+0x54>)
 8002578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <MX_I2C1_Init+0x50>)
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <MX_I2C1_Init+0x58>)
 800257e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_I2C1_Init+0x50>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <MX_I2C1_Init+0x50>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <MX_I2C1_Init+0x50>)
 800258e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <MX_I2C1_Init+0x50>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_I2C1_Init+0x50>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <MX_I2C1_Init+0x50>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <MX_I2C1_Init+0x50>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <MX_I2C1_Init+0x50>)
 80025ae:	f002 f807 	bl	80045c0 <HAL_I2C_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025b8:	f000 fa24 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200007d0 	.word	0x200007d0
 80025c4:	40005400 	.word	0x40005400
 80025c8:	000186a0 	.word	0x000186a0

080025cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_I2C3_Init+0x50>)
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <MX_I2C3_Init+0x54>)
 80025d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_I2C3_Init+0x50>)
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <MX_I2C3_Init+0x58>)
 80025da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_I2C3_Init+0x50>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_I2C3_Init+0x50>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_I2C3_Init+0x50>)
 80025ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_I2C3_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_I2C3_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_I2C3_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_I2C3_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_I2C3_Init+0x50>)
 800260a:	f001 ffd9 	bl	80045c0 <HAL_I2C_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002614:	f000 f9f6 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000824 	.word	0x20000824
 8002620:	40005c00 	.word	0x40005c00
 8002624:	000186a0 	.word	0x000186a0

08002628 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800262c:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_SPI2_Init+0x64>)
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <MX_SPI2_Init+0x68>)
 8002630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <MX_SPI2_Init+0x64>)
 8002634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <MX_SPI2_Init+0x64>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_SPI2_Init+0x64>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_SPI2_Init+0x64>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_SPI2_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <MX_SPI2_Init+0x64>)
 8002654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002658:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_SPI2_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <MX_SPI2_Init+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_SPI2_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <MX_SPI2_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_SPI2_Init+0x64>)
 8002674:	220a      	movs	r2, #10
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <MX_SPI2_Init+0x64>)
 800267a:	f004 f86d 	bl	8006758 <HAL_SPI_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002684:	f000 f9be 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000878 	.word	0x20000878
 8002690:	40003800 	.word	0x40003800

08002694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	463b      	mov	r3, r7
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <MX_TIM3_Init+0x94>)
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <MX_TIM3_Init+0x98>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_TIM3_Init+0x94>)
 80026b8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80026bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_TIM3_Init+0x94>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_TIM3_Init+0x94>)
 80026c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_TIM3_Init+0x94>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <MX_TIM3_Init+0x94>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d8:	4813      	ldr	r0, [pc, #76]	; (8002728 <MX_TIM3_Init+0x94>)
 80026da:	f004 fb33 	bl	8006d44 <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026e4:	f000 f98e 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <MX_TIM3_Init+0x94>)
 80026f6:	f004 fd61 	bl	80071bc <HAL_TIM_ConfigClockSource>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002700:	f000 f980 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_TIM3_Init+0x94>)
 8002712:	f004 ff5d 	bl	80075d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800271c:	f000 f972 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200008d0 	.word	0x200008d0
 800272c:	40000400 	.word	0x40000400

08002730 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_TIM10_Init+0x40>)
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <MX_TIM10_Init+0x44>)
 8002738:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000-1;
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <MX_TIM10_Init+0x40>)
 800273c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002740:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_TIM10_Init+0x40>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 60000-1;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_TIM10_Init+0x40>)
 800274a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800274e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <MX_TIM10_Init+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_TIM10_Init+0x40>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_TIM10_Init+0x40>)
 800275e:	f004 faf1 	bl	8006d44 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002768:	f000 f94c 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000918 	.word	0x20000918
 8002774:	40014400 	.word	0x40014400

08002778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_USART2_UART_Init+0x50>)
 8002780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_USART2_UART_Init+0x4c>)
 80027b0:	f004 ff90 	bl	80076d4 <HAL_UART_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ba:	f000 f923 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000960 	.word	0x20000960
 80027c8:	40004400 	.word	0x40004400

080027cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <MX_USART6_UART_Init+0x50>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_USART6_UART_Init+0x4c>)
 8002804:	f004 ff66 	bl	80076d4 <HAL_UART_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800280e:	f000 f8f9 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200009a4 	.word	0x200009a4
 800281c:	40011400 	.word	0x40011400

08002820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_DMA_Init+0x3c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <MX_DMA_Init+0x3c>)
 8002830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_DMA_Init+0x3c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 3, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2103      	movs	r1, #3
 8002846:	2039      	movs	r0, #57	; 0x39
 8002848:	f001 fae7 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800284c:	2039      	movs	r0, #57	; 0x39
 800284e:	f001 fb00 	bl	8003e52 <HAL_NVIC_EnableIRQ>

}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <MX_GPIO_Init+0x124>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a41      	ldr	r2, [pc, #260]	; (8002984 <MX_GPIO_Init+0x124>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <MX_GPIO_Init+0x124>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <MX_GPIO_Init+0x124>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a3a      	ldr	r2, [pc, #232]	; (8002984 <MX_GPIO_Init+0x124>)
 800289c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <MX_GPIO_Init+0x124>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <MX_GPIO_Init+0x124>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a33      	ldr	r2, [pc, #204]	; (8002984 <MX_GPIO_Init+0x124>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <MX_GPIO_Init+0x124>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <MX_GPIO_Init+0x124>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <MX_GPIO_Init+0x124>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <MX_GPIO_Init+0x124>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2103      	movs	r1, #3
 80028ea:	4827      	ldr	r0, [pc, #156]	; (8002988 <MX_GPIO_Init+0x128>)
 80028ec:	f001 fe36 	bl	800455c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2120      	movs	r1, #32
 80028f4:	4825      	ldr	r0, [pc, #148]	; (800298c <MX_GPIO_Init+0x12c>)
 80028f6:	f001 fe31 	bl	800455c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002900:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <MX_GPIO_Init+0x128>)
 8002912:	f001 fc9f 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8002916:	2303      	movs	r3, #3
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4816      	ldr	r0, [pc, #88]	; (8002988 <MX_GPIO_Init+0x128>)
 800292e:	f001 fc91 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002932:	2320      	movs	r3, #32
 8002934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002936:	2301      	movs	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	4810      	ldr	r0, [pc, #64]	; (800298c <MX_GPIO_Init+0x12c>)
 800294a:	f001 fc83 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800294e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002954:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	480a      	ldr	r0, [pc, #40]	; (8002990 <MX_GPIO_Init+0x130>)
 8002966:	f001 fc75 	bl	8004254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2102      	movs	r1, #2
 800296e:	2028      	movs	r0, #40	; 0x28
 8002970:	f001 fa53 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002974:	2028      	movs	r0, #40	; 0x28
 8002976:	f001 fa6c 	bl	8003e52 <HAL_NVIC_EnableIRQ>

}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40020800 	.word	0x40020800
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400

08002994 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// nrf irq pin interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin){
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a4:	d102      	bne.n	80029ac <HAL_GPIO_EXTI_Callback+0x18>
		// if interrupt comes from IRQ pin, then set flag
		nrfInterrupt = 1;
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x24>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
	}
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	20000a48 	.word	0x20000a48

080029bc <HAL_TIM_PeriodElapsedCallback>:

// minute timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10f      	bne.n	80029ec <HAL_TIM_PeriodElapsedCallback+0x30>
		timerElapsedFlag++;
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029d6:	701a      	strb	r2, [r3, #0]
		if(timerElapsedFlag == 2){
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d105      	bne.n	80029ec <HAL_TIM_PeriodElapsedCallback+0x30>
			startMeasFlag = 1;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
			timerElapsedFlag = 0;
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	20000918 	.word	0x20000918
 80029fc:	20000a54 	.word	0x20000a54
 8002a00:	20000a55 	.word	0x20000a55

08002a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a08:	b672      	cpsid	i
}
 8002a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a0c:	e7fe      	b.n	8002a0c <Error_Handler+0x8>
	...

08002a10 <NRF_SPI_RW>:
 */


#include "nrf/nrf.h"

uint8_t NRF_SPI_RW(uint8_t transmit_buff, uint8_t* receive_buff){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_TransmitReceive(&hspi2, &transmit_buff, receive_buff, 1, 1000) != HAL_OK){
 8002a1c:	1df9      	adds	r1, r7, #7
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2301      	movs	r3, #1
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4806      	ldr	r0, [pc, #24]	; (8002a44 <NRF_SPI_RW+0x34>)
 8002a2a:	f003 ff1e 	bl	800686a <HAL_SPI_TransmitReceive>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <NRF_SPI_RW+0x28>
		return NRF_ERROR;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <NRF_SPI_RW+0x2a>
	}
	return NRF_OK;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000878 	.word	0x20000878

08002a48 <NRF_ReadRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return data from given register
 * @retval 1 in case of successful read , 0 in case of failure
 */
bool NRF_ReadRegs(uint8_t address, uint8_t* data, uint8_t length){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	71fb      	strb	r3, [r7, #7]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <NRF_ReadRegs+0x6c>)
 8002a62:	f001 fd7b 	bl	800455c <HAL_GPIO_WritePin>
	// send read command
	if(!NRF_SPI_RW(NRF_CMD_R_REGISTER | address, &address_rx)){
 8002a66:	f107 020f 	add.w	r2, r7, #15
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ffce 	bl	8002a10 <NRF_SPI_RW>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <NRF_ReadRegs+0x4e>
		return NRF_ERROR;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e016      	b.n	8002aac <NRF_ReadRegs+0x64>
	}
	// command is locked by csn, so it will read bytes until length is 0
	while(length--){
		// passing NOP to not write anything
		if(!NRF_SPI_RW(NRF_CMD_NOP, data)){
 8002a7e:	6839      	ldr	r1, [r7, #0]
 8002a80:	20ff      	movs	r0, #255	; 0xff
 8002a82:	f7ff ffc5 	bl	8002a10 <NRF_SPI_RW>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <NRF_ReadRegs+0x48>
			return NRF_ERROR;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e00d      	b.n	8002aac <NRF_ReadRegs+0x64>
		}
		++data;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	603b      	str	r3, [r7, #0]
	while(length--){
 8002a96:	79bb      	ldrb	r3, [r7, #6]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	71ba      	strb	r2, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <NRF_ReadRegs+0x36>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <NRF_ReadRegs+0x6c>)
 8002aa6:	f001 fd59 	bl	800455c <HAL_GPIO_WritePin>
	return NRF_OK;
 8002aaa:	2301      	movs	r3, #1

}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40020800 	.word	0x40020800

08002ab8 <NRF_WriteRegs>:
 * @param[in] length : how many bytes read from register
 *
 * @return None
 * @retval 1 in case of successful write, 0 in case of failure
 */
bool NRF_WriteRegs(uint8_t address, uint8_t* data, uint8_t length){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71bb      	strb	r3, [r7, #6]
	// buffer for receiving
	uint8_t address_rx = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
	// set csn low to initiate spi transmission
	NRF_CSN_SET_LOW;
 8002acc:	2200      	movs	r2, #0
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4818      	ldr	r0, [pc, #96]	; (8002b34 <NRF_WriteRegs+0x7c>)
 8002ad2:	f001 fd43 	bl	800455c <HAL_GPIO_WritePin>
	// send write command
	if(!NRF_SPI_RW(NRF_CMD_W_REGISTER | address, &address_rx)){
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f043 0320 	orr.w	r3, r3, #32
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f107 020f 	add.w	r2, r7, #15
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff93 	bl	8002a10 <NRF_SPI_RW>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <NRF_WriteRegs+0x5c>
		return NRF_ERROR;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e01a      	b.n	8002b2a <NRF_WriteRegs+0x72>
	}
	// command is locked by csn, so it will write bytes until length is 0
	while(length--){
		if(!NRF_SPI_RW(*data, &address_rx)){
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f107 020f 	add.w	r2, r7, #15
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff86 	bl	8002a10 <NRF_SPI_RW>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <NRF_WriteRegs+0x56>
			return NRF_ERROR;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e00d      	b.n	8002b2a <NRF_WriteRegs+0x72>
		}
		++data;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	603b      	str	r3, [r7, #0]
	while(length--){
 8002b14:	79bb      	ldrb	r3, [r7, #6]
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	71ba      	strb	r2, [r7, #6]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ea      	bne.n	8002af4 <NRF_WriteRegs+0x3c>
	}
	// release spi
	NRF_CSN_SET_HIGH;
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2102      	movs	r1, #2
 8002b22:	4804      	ldr	r0, [pc, #16]	; (8002b34 <NRF_WriteRegs+0x7c>)
 8002b24:	f001 fd1a 	bl	800455c <HAL_GPIO_WritePin>
	return NRF_OK;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40020800 	.word	0x40020800

08002b38 <NRF_Init>:
 * @brief Init function. Defines basic configuration:
 * - only one pipe, enabled enhanced shockburst, up to 5 retransmits
 * - rest of parameters defined in function body
 * @param[in] nrf : pointer to transciever handler
 */
bool NRF_Init(NRF_HandleTypedef* nrf){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	// below parameters are configurable, wanted to keep them in one place
	nrf->rate_ = RATE_1Mbps;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
	nrf->frequency_ = (uint8_t)10;	// channel frequency 2410MHz
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	220a      	movs	r2, #10
 8002b4a:	705a      	strb	r2, [r3, #1]
	nrf->power_amp_ = dBm_0; 	// max power, TX only
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	709a      	strb	r2, [r3, #2]
	nrf->lna_ = LNA_HIGH;	// rx only
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	70da      	strb	r2, [r3, #3]
	nrf->dpl_ = DPL_OFF;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	715a      	strb	r2, [r3, #5]
	nrf->crc_ = CRC_ENABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	719a      	strb	r2, [r3, #6]
	nrf->crc_bytes_ = CRCB_ONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	71da      	strb	r2, [r3, #7]
	nrf->address_width_ = ADR_THREE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	721a      	strb	r2, [r3, #8]
	nrf->retransmissions_ = ARC_TEN;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	220a      	movs	r2, #10
 8002b74:	725a      	strb	r2, [r3, #9]
	nrf->ret_delay_ = DELAY_2000uS;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2207      	movs	r2, #7
 8002b7a:	729a      	strb	r2, [r3, #10]

	if(!NRF_SET_RadioParams(nrf->rate_, nrf->power_amp_, nrf->lna_)){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7818      	ldrb	r0, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7899      	ldrb	r1, [r3, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	78db      	ldrb	r3, [r3, #3]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f000 f872 	bl	8002c72 <NRF_SET_RadioParams>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f083 0301 	eor.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <NRF_Init+0x66>
		return NRF_ERROR;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e065      	b.n	8002c6a <NRF_Init+0x132>
	}
	if(!NRF_SET_Frequency(nrf->frequency_)){
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f8a8 	bl	8002cf8 <NRF_SET_Frequency>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <NRF_Init+0x80>
		return NRF_ERROR;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e058      	b.n	8002c6a <NRF_Init+0x132>
	}
	if(!NRF_SET_DynamicPayload(nrf->dpl_)){
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	795b      	ldrb	r3, [r3, #5]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f921 	bl	8002e04 <NRF_SET_DynamicPayload>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <NRF_Init+0x9a>
		return NRF_ERROR;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e04b      	b.n	8002c6a <NRF_Init+0x132>
	}
	if(!NRF_SET_CRC(nrf->crc_, nrf->crc_bytes_)){
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	799a      	ldrb	r2, [r3, #6]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	79db      	ldrb	r3, [r3, #7]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f000 f943 	bl	8002e68 <NRF_SET_CRC>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <NRF_Init+0xba>
		return NRF_ERROR;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e03b      	b.n	8002c6a <NRF_Init+0x132>
//	uint8_t reg=0;
//		NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1);
//		printf("RF_SETUP: %d%d%d%d%d%d%d%d\n", (reg >> 7) & 1,(reg >> 6) & 1,(reg >> 5) & 1,
//				(reg >> 4) & 1,(reg >> 3) & 1,(reg >> 2) & 1,(reg >> 1) & 1, reg & 1);

	if(!NRF_SET_PipeAddressWidth(nrf->address_width_)){
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7a1b      	ldrb	r3, [r3, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f974 	bl	8002ee4 <NRF_SET_PipeAddressWidth>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <NRF_Init+0xd4>
		return NRF_ERROR;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e02e      	b.n	8002c6a <NRF_Init+0x132>
	}
	if(!NRF_SET_Retransmission(nrf->ret_delay_,  nrf->retransmissions_)){
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7a9a      	ldrb	r2, [r3, #10]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7a5b      	ldrb	r3, [r3, #9]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 f982 	bl	8002f20 <NRF_SET_Retransmission>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <NRF_Init+0xf4>
		return NRF_ERROR;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e01e      	b.n	8002c6a <NRF_Init+0x132>
	}
	// flush fifos
	if(!NRF_FlushTXFifo()){
 8002c2c:	f000 fa9e 	bl	800316c <NRF_FlushTXFifo>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <NRF_Init+0x108>
		return NRF_ERROR;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e014      	b.n	8002c6a <NRF_Init+0x132>
	}
	if(!NRF_FlushRXFifo()){
 8002c40:	f000 fa74 	bl	800312c <NRF_FlushRXFifo>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <NRF_Init+0x11c>
		return NRF_ERROR;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e00a      	b.n	8002c6a <NRF_Init+0x132>
	}

	// clear irq flags
	if(!NRF_ClearIRQFlags()){
 8002c54:	f000 faaa 	bl	80031ac <NRF_ClearIRQFlags>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f083 0301 	eor.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <NRF_Init+0x130>
		return NRF_ERROR;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <NRF_Init+0x132>
	}
	return NRF_OK;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <NRF_SET_RadioParams>:
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */

bool NRF_SET_RadioParams(NRF_AirDataRate rate, NRF_PowerAmplifier amp, NRF_LNAsetup lna){
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	71bb      	strb	r3, [r7, #6]
 8002c80:	4613      	mov	r3, r2
 8002c82:	717b      	strb	r3, [r7, #5]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8002c84:	f107 030f 	add.w	r3, r7, #15
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	2006      	movs	r0, #6
 8002c8e:	f7ff fedb 	bl	8002a48 <NRF_ReadRegs>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f083 0301 	eor.w	r3, r3, #1
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <NRF_SET_RadioParams+0x30>
		return NRF_ERROR;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e026      	b.n	8002cf0 <NRF_SET_RadioParams+0x7e>
	}
	reg &= ~(NRF_MASK_RF_DR  | NRF_MASK_RF_PWR | NRF_MASK_LNA);		// sets bits to 0
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	f023 030f 	bic.w	r3, r3, #15
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	73fb      	strb	r3, [r7, #15]
	reg |= ((rate << 3) | (amp << 1) | lna);
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	b25a      	sxtb	r2, r3
 8002cb2:	79bb      	ldrb	r3, [r7, #6]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	b25a      	sxtb	r2, r3
 8002cbc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b25a      	sxtb	r2, r3
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_SETUP, &reg, 1)){
 8002cd0:	f107 030f 	add.w	r3, r7, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2006      	movs	r0, #6
 8002cda:	f7ff feed 	bl	8002ab8 <NRF_WriteRegs>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <NRF_SET_RadioParams+0x7c>
		return NRF_ERROR;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <NRF_SET_RadioParams+0x7e>
	}
	return NRF_OK;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <NRF_SET_Frequency>:
 * @param[in] rate : uint8_t, range 0-125
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Frequency(NRF_Frequency freq){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_freq = freq & NRF_MASK_RF_CH;
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_RF_CH, &safe_freq, 1)){
 8002d0c:	f107 030f 	add.w	r3, r7, #15
 8002d10:	2201      	movs	r2, #1
 8002d12:	4619      	mov	r1, r3
 8002d14:	2005      	movs	r0, #5
 8002d16:	f7ff fecf 	bl	8002ab8 <NRF_WriteRegs>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f083 0301 	eor.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <NRF_SET_Frequency+0x32>
		return NRF_ERROR;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <NRF_SET_Frequency+0x34>
	}
	return NRF_OK;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <NRF_SET_Mode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Mode(NRF_Mode mode){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8002d3e:	f107 030f 	add.w	r3, r7, #15
 8002d42:	2201      	movs	r2, #1
 8002d44:	4619      	mov	r1, r3
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7ff fe7e 	bl	8002a48 <NRF_ReadRegs>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <NRF_SET_Mode+0x28>
		return NRF_ERROR;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e019      	b.n	8002d90 <NRF_SET_Mode+0x5c>
	}
	reg &= ~NRF_MASK_MODE;		// sets bit to 0
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	73fb      	strb	r3, [r7, #15]
	reg |= mode;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8002d70:	f107 030f 	add.w	r3, r7, #15
 8002d74:	2201      	movs	r2, #1
 8002d76:	4619      	mov	r1, r3
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff fe9d 	bl	8002ab8 <NRF_WriteRegs>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <NRF_SET_Mode+0x5a>
		return NRF_ERROR;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <NRF_SET_Mode+0x5c>
	}
	return NRF_OK;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <NRF_SET_PowerMode>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PowerMode(NRF_PowerMode pwr){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8002da2:	f107 030f 	add.w	r3, r7, #15
 8002da6:	2201      	movs	r2, #1
 8002da8:	4619      	mov	r1, r3
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7ff fe4c 	bl	8002a48 <NRF_ReadRegs>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <NRF_SET_PowerMode+0x28>
		return NRF_ERROR;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e01d      	b.n	8002dfc <NRF_SET_PowerMode+0x64>
	}
	reg &= ~NRF_MASK_PWR_MODE;		// sets bit to 0
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	f023 0302 	bic.w	r3, r3, #2
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	73fb      	strb	r3, [r7, #15]
	reg |= pwr << 1;
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	b25a      	sxtb	r2, r3
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8002ddc:	f107 030f 	add.w	r3, r7, #15
 8002de0:	2201      	movs	r2, #1
 8002de2:	4619      	mov	r1, r3
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7ff fe67 	bl	8002ab8 <NRF_WriteRegs>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f083 0301 	eor.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <NRF_SET_PowerMode+0x62>
		return NRF_ERROR;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <NRF_SET_PowerMode+0x64>
	}
	return NRF_OK;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <NRF_SET_DynamicPayload>:
 * @param[in] mode : some enum
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_DynamicPayload(NRF_DynamicPayload dpl){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_FEATURE, &reg, 1)){
 8002e0e:	f107 030f 	add.w	r3, r7, #15
 8002e12:	2201      	movs	r2, #1
 8002e14:	4619      	mov	r1, r3
 8002e16:	201d      	movs	r0, #29
 8002e18:	f7ff fe16 	bl	8002a48 <NRF_ReadRegs>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <NRF_SET_DynamicPayload+0x28>
		return NRF_ERROR;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e019      	b.n	8002e60 <NRF_SET_DynamicPayload+0x5c>
	}
	reg &= ~NRF_MASK_EN_DPL;		// sets bit to 0
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	f023 0304 	bic.w	r3, r3, #4
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	73fb      	strb	r3, [r7, #15]
	reg |= dpl;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_FEATURE, &reg, 1)){
 8002e40:	f107 030f 	add.w	r3, r7, #15
 8002e44:	2201      	movs	r2, #1
 8002e46:	4619      	mov	r1, r3
 8002e48:	201d      	movs	r0, #29
 8002e4a:	f7ff fe35 	bl	8002ab8 <NRF_WriteRegs>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f083 0301 	eor.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <NRF_SET_DynamicPayload+0x5a>
		return NRF_ERROR;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <NRF_SET_DynamicPayload+0x5c>
	}
	return NRF_OK;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <NRF_SET_CRC>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_CRC(NRF_CRC crc, NRF_CRCbytes bytes){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460a      	mov	r2, r1
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	if(!NRF_ReadRegs(NRF_REG_CONFIG, &reg, 1)){
 8002e78:	f107 030f 	add.w	r3, r7, #15
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff fde1 	bl	8002a48 <NRF_ReadRegs>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <NRF_SET_CRC+0x2e>
		return NRF_ERROR;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e022      	b.n	8002edc <NRF_SET_CRC+0x74>
	}
	reg &= ~NRF_MASK_CRC;		// sets bits to 0
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	f023 030c 	bic.w	r3, r3, #12
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73fb      	strb	r3, [r7, #15]
	reg |= ((crc << 3) | (bytes << 2));
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	b25a      	sxtb	r2, r3
 8002ea6:	79bb      	ldrb	r3, [r7, #6]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b25a      	sxtb	r2, r3
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_CONFIG, &reg, 1)){
 8002ebc:	f107 030f 	add.w	r3, r7, #15
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff fdf7 	bl	8002ab8 <NRF_WriteRegs>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f083 0301 	eor.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <NRF_SET_CRC+0x72>
		return NRF_ERROR;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <NRF_SET_CRC+0x74>
	}
	return NRF_OK;
 8002eda:	2301      	movs	r3, #1
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <NRF_SET_PipeAddressWidth>:
 * @param[in] bytes: number of crc bytes
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddressWidth(NRF_AddressWidth width){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
	uint8_t safe_width = width & NRF_MASK_AW;
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_AW, &safe_width, 1)){
 8002ef8:	f107 030f 	add.w	r3, r7, #15
 8002efc:	2201      	movs	r2, #1
 8002efe:	4619      	mov	r1, r3
 8002f00:	2003      	movs	r0, #3
 8002f02:	f7ff fdd9 	bl	8002ab8 <NRF_WriteRegs>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f083 0301 	eor.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <NRF_SET_PipeAddressWidth+0x32>
		return NRF_ERROR;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <NRF_SET_PipeAddressWidth+0x34>
	}
	return NRF_OK;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <NRF_SET_Retransmission>:
 * @param[in] arc : how many retransmissions allowed
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_Retransmission(NRF_RetransmitDelay ard, NRF_RetransmitCount arc){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	460a      	mov	r2, r1
 8002f2a:	71fb      	strb	r3, [r7, #7]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71bb      	strb	r3, [r7, #6]
	uint8_t retransmit_data = (ard << 4) | arc;
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	b25a      	sxtb	r2, r3
 8002f36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_SETUP_RETR, &retransmit_data, 1)){
 8002f42:	f107 030f 	add.w	r3, r7, #15
 8002f46:	2201      	movs	r2, #1
 8002f48:	4619      	mov	r1, r3
 8002f4a:	2004      	movs	r0, #4
 8002f4c:	f7ff fdb4 	bl	8002ab8 <NRF_WriteRegs>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <NRF_SET_Retransmission+0x40>
		return NRF_ERROR;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <NRF_SET_Retransmission+0x42>
	}
	return NRF_OK;
 8002f60:	2301      	movs	r3, #1
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <NRF_SET_PipeAddress>:
 * @param[in] address : pointer to array with address (LSB first, its pretty crucial)
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeAddress(NRF_Pipe pipe, uint8_t* address){
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	6039      	str	r1, [r7, #0]
 8002f74:	71fb      	strb	r3, [r7, #7]
	uint8_t address_width;
	if(!NRF_ReadRegs(NRF_REG_SETUP_AW, &address_width, 1)){
 8002f76:	f107 030f 	add.w	r3, r7, #15
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f7ff fd62 	bl	8002a48 <NRF_ReadRegs>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <NRF_SET_PipeAddress+0x2a>
		return NRF_ERROR;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e037      	b.n	8003004 <NRF_SET_PipeAddress+0x9a>
	}

	switch(pipe){
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d00a      	beq.n	8002fb0 <NRF_SET_PipeAddress+0x46>
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	dc2c      	bgt.n	8002ff8 <NRF_SET_PipeAddress+0x8e>
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	dc02      	bgt.n	8002fa8 <NRF_SET_PipeAddress+0x3e>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da04      	bge.n	8002fb0 <NRF_SET_PipeAddress+0x46>
 8002fa6:	e027      	b.n	8002ff8 <NRF_SET_PipeAddress+0x8e>
 8002fa8:	3b02      	subs	r3, #2
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d824      	bhi.n	8002ff8 <NRF_SET_PipeAddress+0x8e>
 8002fae:	e013      	b.n	8002fd8 <NRF_SET_PipeAddress+0x6e>
		case RX_PIPE_0:
		case RX_PIPE_1:
		case TX_PIPE:
			address_width += 2;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	73fb      	strb	r3, [r7, #15]
			// for pipe 0-1 send all three bytes
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, address_width)){
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	330a      	adds	r3, #10
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fd78 	bl	8002ab8 <NRF_WriteRegs>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f083 0301 	eor.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <NRF_SET_PipeAddress+0x92>
				return NRF_ERROR;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e015      	b.n	8003004 <NRF_SET_PipeAddress+0x9a>
		case RX_PIPE_2:
		case RX_PIPE_3:
		case RX_PIPE_4:
		case RX_PIPE_5:
			// for pipe 2-5 and tx send only LSB
			if(!NRF_WriteRegs(NRF_REG_RX_ADDR_BASE + pipe, address, 1)){
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	330a      	adds	r3, #10
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2201      	movs	r2, #1
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fd68 	bl	8002ab8 <NRF_WriteRegs>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <NRF_SET_PipeAddress+0x96>
				return NRF_ERROR;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e005      	b.n	8003004 <NRF_SET_PipeAddress+0x9a>
			}
			break;
		default:
			// some different value, return error
			return NRF_ERROR;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e003      	b.n	8003004 <NRF_SET_PipeAddress+0x9a>
			break;
 8002ffc:	bf00      	nop
 8002ffe:	e000      	b.n	8003002 <NRF_SET_PipeAddress+0x98>
			break;
 8003000:	bf00      	nop
	}
	return NRF_OK;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <NRF_SET_PipeRX>:
 * @param[in]] payload_length : length (in bytes) of data packets send through pipe
 *
 * @return nothing
 * @retval 1 if successfully set, 0 if something went wrong
 */
bool NRF_SET_PipeRX(NRF_Pipe pipe, NRF_AutoAcknowledge auto_ack, uint8_t payload_length){
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	460b      	mov	r3, r1
 8003018:	71bb      	strb	r3, [r7, #6]
 800301a:	4613      	mov	r3, r2
 800301c:	717b      	strb	r3, [r7, #5]
	// enable pipe
	uint8_t pipe_en;
	if(!NRF_ReadRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 800301e:	f107 030f 	add.w	r3, r7, #15
 8003022:	2201      	movs	r2, #1
 8003024:	4619      	mov	r1, r3
 8003026:	2002      	movs	r0, #2
 8003028:	f7ff fd0e 	bl	8002a48 <NRF_ReadRegs>
 800302c:	4603      	mov	r3, r0
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <NRF_SET_PipeRX+0x30>
		return NRF_ERROR;
 8003038:	2300      	movs	r3, #0
 800303a:	e073      	b.n	8003124 <NRF_SET_PipeRX+0x118>
	}
	pipe_en &= ~(NRF_MASK_EN_BASE << pipe);
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2201      	movs	r2, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	b25b      	sxtb	r3, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	b25a      	sxtb	r2, r3
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	b25b      	sxtb	r3, r3
 800304e:	4013      	ands	r3, r2
 8003050:	b25b      	sxtb	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	73fb      	strb	r3, [r7, #15]
	pipe_en |= 1 << pipe;
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2201      	movs	r2, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	b25a      	sxtb	r2, r3
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	b25b      	sxtb	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	b25b      	sxtb	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	73fb      	strb	r3, [r7, #15]
	if(!NRF_WriteRegs(NRF_REG_EN_RXADDR, &pipe_en, 1)){
 800306c:	f107 030f 	add.w	r3, r7, #15
 8003070:	2201      	movs	r2, #1
 8003072:	4619      	mov	r1, r3
 8003074:	2002      	movs	r0, #2
 8003076:	f7ff fd1f 	bl	8002ab8 <NRF_WriteRegs>
 800307a:	4603      	mov	r3, r0
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <NRF_SET_PipeRX+0x7e>
		return NRF_ERROR;
 8003086:	2300      	movs	r3, #0
 8003088:	e04c      	b.n	8003124 <NRF_SET_PipeRX+0x118>
	}


	// set auto acknowledge
	uint8_t aa_en;
	if(!NRF_ReadRegs(NRF_REG_EN_AA, &aa_en, 1)){
 800308a:	f107 030e 	add.w	r3, r7, #14
 800308e:	2201      	movs	r2, #1
 8003090:	4619      	mov	r1, r3
 8003092:	2001      	movs	r0, #1
 8003094:	f7ff fcd8 	bl	8002a48 <NRF_ReadRegs>
 8003098:	4603      	mov	r3, r0
 800309a:	f083 0301 	eor.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <NRF_SET_PipeRX+0x9c>
		return NRF_ERROR;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e03d      	b.n	8003124 <NRF_SET_PipeRX+0x118>
	}
	aa_en &= ~(NRF_MASK_EN_BASE << pipe);
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	b25a      	sxtb	r2, r3
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	4013      	ands	r3, r2
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	73bb      	strb	r3, [r7, #14]
	aa_en |= 1 << pipe;
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2201      	movs	r2, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	b25a      	sxtb	r2, r3
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	73bb      	strb	r3, [r7, #14]
	if(!NRF_WriteRegs(NRF_REG_EN_AA, &aa_en, 1)){
 80030d8:	f107 030e 	add.w	r3, r7, #14
 80030dc:	2201      	movs	r2, #1
 80030de:	4619      	mov	r1, r3
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7ff fce9 	bl	8002ab8 <NRF_WriteRegs>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <NRF_SET_PipeRX+0xea>
		return NRF_ERROR;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e016      	b.n	8003124 <NRF_SET_PipeRX+0x118>
	}

	// set payload length (used when dpl is disabled)
	uint8_t safe_pl_len = NRF_MASK_RX_PW_P & payload_length;
 80030f6:	797b      	ldrb	r3, [r7, #5]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	737b      	strb	r3, [r7, #13]
	if(!NRF_WriteRegs(NRF_REG_RX_PW_BASE+pipe, &safe_pl_len, 1)){
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	3311      	adds	r3, #17
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f107 010d 	add.w	r1, r7, #13
 800310a:	2201      	movs	r2, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fcd3 	bl	8002ab8 <NRF_WriteRegs>
 8003112:	4603      	mov	r3, r0
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <NRF_SET_PipeRX+0x116>
		return NRF_ERROR;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <NRF_SET_PipeRX+0x118>
	}

	// if everything passed return ok
	return NRF_OK;
 8003122:	2301      	movs	r3, #1
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <NRF_FlushRXFifo>:
 * @brief flush rx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushRXFifo(void){
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8003136:	2200      	movs	r2, #0
 8003138:	2102      	movs	r1, #2
 800313a:	480b      	ldr	r0, [pc, #44]	; (8003168 <NRF_FlushRXFifo+0x3c>)
 800313c:	f001 fa0e 	bl	800455c <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_RX, &rx_buff)){
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	4619      	mov	r1, r3
 8003144:	20e2      	movs	r0, #226	; 0xe2
 8003146:	f7ff fc63 	bl	8002a10 <NRF_SPI_RW>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <NRF_FlushRXFifo+0x28>
		return NRF_ERROR;
 8003150:	2300      	movs	r3, #0
 8003152:	e005      	b.n	8003160 <NRF_FlushRXFifo+0x34>
	}
	NRF_CSN_SET_HIGH;
 8003154:	2201      	movs	r2, #1
 8003156:	2102      	movs	r1, #2
 8003158:	4803      	ldr	r0, [pc, #12]	; (8003168 <NRF_FlushRXFifo+0x3c>)
 800315a:	f001 f9ff 	bl	800455c <HAL_GPIO_WritePin>
	return NRF_OK;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40020800 	.word	0x40020800

0800316c <NRF_FlushTXFifo>:
 * @brief flush tx fifo
 *
 * @return nothing
 * @retval 1 if successfully flushed, 0 if something went wrong
 */
bool NRF_FlushTXFifo(void){
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	71fb      	strb	r3, [r7, #7]
	NRF_CSN_SET_LOW;
 8003176:	2200      	movs	r2, #0
 8003178:	2102      	movs	r1, #2
 800317a:	480b      	ldr	r0, [pc, #44]	; (80031a8 <NRF_FlushTXFifo+0x3c>)
 800317c:	f001 f9ee 	bl	800455c <HAL_GPIO_WritePin>
	if(!NRF_SPI_RW(NRF_CMD_FLUSH_TX, &rx_buff)){
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	4619      	mov	r1, r3
 8003184:	20e1      	movs	r0, #225	; 0xe1
 8003186:	f7ff fc43 	bl	8002a10 <NRF_SPI_RW>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <NRF_FlushTXFifo+0x28>
		return NRF_ERROR;
 8003190:	2300      	movs	r3, #0
 8003192:	e005      	b.n	80031a0 <NRF_FlushTXFifo+0x34>
	}
	NRF_CSN_SET_HIGH;
 8003194:	2201      	movs	r2, #1
 8003196:	2102      	movs	r1, #2
 8003198:	4803      	ldr	r0, [pc, #12]	; (80031a8 <NRF_FlushTXFifo+0x3c>)
 800319a:	f001 f9df 	bl	800455c <HAL_GPIO_WritePin>
	return NRF_OK;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40020800 	.word	0x40020800

080031ac <NRF_ClearIRQFlags>:
 * @brief clear irq bits in status register
 *
 * @return nothing
 * @retval 1 if successfully cleared, 0 if something went wrong
 */
bool NRF_ClearIRQFlags(void){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
	uint8_t status_reg;
	if(!NRF_ReadRegs(NRF_REG_STATUS, &status_reg, 1)){
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	2201      	movs	r2, #1
 80031b6:	4619      	mov	r1, r3
 80031b8:	2007      	movs	r0, #7
 80031ba:	f7ff fc45 	bl	8002a48 <NRF_ReadRegs>
 80031be:	4603      	mov	r3, r0
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <NRF_ClearIRQFlags+0x22>
		return NRF_ERROR;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e013      	b.n	80031f6 <NRF_ClearIRQFlags+0x4a>
	}

	// write 1 to clear bits
	status_reg |= (NRF_MASK_RX_DR | NRF_MASK_TX_DS | NRF_MASK_MAX_RT);
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	71fb      	strb	r3, [r7, #7]
	if(!NRF_WriteRegs(NRF_REG_STATUS, &status_reg, 1)){
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	2201      	movs	r2, #1
 80031dc:	4619      	mov	r1, r3
 80031de:	2007      	movs	r0, #7
 80031e0:	f7ff fc6a 	bl	8002ab8 <NRF_WriteRegs>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <NRF_ClearIRQFlags+0x48>
		return NRF_ERROR;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <NRF_ClearIRQFlags+0x4a>
	}
	return NRF_OK;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_MspInit+0x4c>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_MspInit+0x4c>)
 8003210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_MspInit+0x4c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_MspInit+0x4c>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_MspInit+0x4c>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_MspInit+0x4c>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800323e:	2004      	movs	r0, #4
 8003240:	f000 fde0 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08c      	sub	sp, #48	; 0x30
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a42      	ldr	r2, [pc, #264]	; (8003378 <HAL_I2C_MspInit+0x128>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d12c      	bne.n	80032cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	4b41      	ldr	r3, [pc, #260]	; (800337c <HAL_I2C_MspInit+0x12c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a40      	ldr	r2, [pc, #256]	; (800337c <HAL_I2C_MspInit+0x12c>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b3e      	ldr	r3, [pc, #248]	; (800337c <HAL_I2C_MspInit+0x12c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDA_Pin;
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003292:	2312      	movs	r3, #18
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800329e:	2304      	movs	r3, #4
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4835      	ldr	r0, [pc, #212]	; (8003380 <HAL_I2C_MspInit+0x130>)
 80032aa:	f000 ffd3 	bl	8004254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	4b32      	ldr	r3, [pc, #200]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a31      	ldr	r2, [pc, #196]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032ca:	e050      	b.n	800336e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <HAL_I2C_MspInit+0x134>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d14b      	bne.n	800336e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a20      	ldr	r2, [pc, #128]	; (800337c <HAL_I2C_MspInit+0x12c>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_I2C_MspInit+0x12c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AM2320_SDA_Pin;
 800330e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003314:	2312      	movs	r3, #18
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331c:	2303      	movs	r3, #3
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003320:	2304      	movs	r3, #4
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AM2320_SDA_GPIO_Port, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	4817      	ldr	r0, [pc, #92]	; (8003388 <HAL_I2C_MspInit+0x138>)
 800332c:	f000 ff92 	bl	8004254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AM2320_SCL_Pin;
 8003330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003336:	2312      	movs	r3, #18
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333e:	2303      	movs	r3, #3
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003342:	2304      	movs	r3, #4
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AM2320_SCL_GPIO_Port, &GPIO_InitStruct);
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	4619      	mov	r1, r3
 800334c:	480f      	ldr	r0, [pc, #60]	; (800338c <HAL_I2C_MspInit+0x13c>)
 800334e:	f000 ff81 	bl	8004254 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_I2C_MspInit+0x12c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_I2C_MspInit+0x12c>)
 800335c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_I2C_MspInit+0x12c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
}
 800336e:	bf00      	nop
 8003370:	3730      	adds	r7, #48	; 0x30
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40005400 	.word	0x40005400
 800337c:	40023800 	.word	0x40023800
 8003380:	40020400 	.word	0x40020400
 8003384:	40005c00 	.word	0x40005c00
 8003388:	40020800 	.word	0x40020800
 800338c:	40020000 	.word	0x40020000

08003390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a28      	ldr	r2, [pc, #160]	; (8003450 <HAL_SPI_MspInit+0xc0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d14a      	bne.n	8003448 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_SPI_MspInit+0xc4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 8003406:	230c      	movs	r3, #12
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003416:	2305      	movs	r3, #5
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <HAL_SPI_MspInit+0xc8>)
 8003422:	f000 ff17 	bl	8004254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8003426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003438:	2305      	movs	r3, #5
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	4806      	ldr	r0, [pc, #24]	; (800345c <HAL_SPI_MspInit+0xcc>)
 8003444:	f000 ff06 	bl	8004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003448:	bf00      	nop
 800344a:	3728      	adds	r7, #40	; 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40003800 	.word	0x40003800
 8003454:	40023800 	.word	0x40023800
 8003458:	40020800 	.word	0x40020800
 800345c:	40020400 	.word	0x40020400

08003460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_TIM_Base_MspInit+0x70>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_TIM_Base_MspInit+0x74>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_TIM_Base_MspInit+0x74>)
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_TIM_Base_MspInit+0x74>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800348e:	e01a      	b.n	80034c6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_TIM_Base_MspInit+0x78>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d115      	bne.n	80034c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_TIM_Base_MspInit+0x74>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <HAL_TIM_Base_MspInit+0x74>)
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_TIM_Base_MspInit+0x74>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2101      	movs	r1, #1
 80034ba:	2019      	movs	r0, #25
 80034bc:	f000 fcad 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034c0:	2019      	movs	r0, #25
 80034c2:	f000 fcc6 	bl	8003e52 <HAL_NVIC_EnableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40014400 	.word	0x40014400

080034dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_UART_MspInit+0x154>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d12c      	bne.n	8003558 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a4b      	ldr	r2, [pc, #300]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a44      	ldr	r2, [pc, #272]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b42      	ldr	r3, [pc, #264]	; (8003634 <HAL_UART_MspInit+0x158>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003536:	230c      	movs	r3, #12
 8003538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003546:	2307      	movs	r3, #7
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354a:	f107 031c 	add.w	r3, r7, #28
 800354e:	4619      	mov	r1, r3
 8003550:	4839      	ldr	r0, [pc, #228]	; (8003638 <HAL_UART_MspInit+0x15c>)
 8003552:	f000 fe7f 	bl	8004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003556:	e066      	b.n	8003626 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART6)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a37      	ldr	r2, [pc, #220]	; (800363c <HAL_UART_MspInit+0x160>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d161      	bne.n	8003626 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	4a32      	ldr	r2, [pc, #200]	; (8003634 <HAL_UART_MspInit+0x158>)
 800356c:	f043 0320 	orr.w	r3, r3, #32
 8003570:	6453      	str	r3, [r2, #68]	; 0x44
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_UART_MspInit+0x158>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESP8662_TX_Pin|ESP8662_RX_Pin;
 800359a:	23c0      	movs	r3, #192	; 0xc0
 800359c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a6:	2303      	movs	r3, #3
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035aa:	2308      	movs	r3, #8
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ae:	f107 031c 	add.w	r3, r7, #28
 80035b2:	4619      	mov	r1, r3
 80035b4:	4822      	ldr	r0, [pc, #136]	; (8003640 <HAL_UART_MspInit+0x164>)
 80035b6:	f000 fe4d 	bl	8004254 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_UART_MspInit+0x16c>)
 80035be:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035c2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80035c6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035da:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035e2:	4b18      	ldr	r3, [pc, #96]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80035fa:	4812      	ldr	r0, [pc, #72]	; (8003644 <HAL_UART_MspInit+0x168>)
 80035fc:	f000 fc44 	bl	8003e88 <HAL_DMA_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8003606:	f7ff f9fd 	bl	8002a04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <HAL_UART_MspInit+0x168>)
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <HAL_UART_MspInit+0x168>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2103      	movs	r1, #3
 800361a:	2047      	movs	r0, #71	; 0x47
 800361c:	f000 fbfd 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003620:	2047      	movs	r0, #71	; 0x47
 8003622:	f000 fc16 	bl	8003e52 <HAL_NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40004400 	.word	0x40004400
 8003634:	40023800 	.word	0x40023800
 8003638:	40020000 	.word	0x40020000
 800363c:	40011400 	.word	0x40011400
 8003640:	40020800 	.word	0x40020800
 8003644:	200009e8 	.word	0x200009e8
 8003648:	40026428 	.word	0x40026428

0800364c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003650:	e7fe      	b.n	8003650 <NMI_Handler+0x4>

08003652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003656:	e7fe      	b.n	8003656 <HardFault_Handler+0x4>

08003658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800365c:	e7fe      	b.n	800365c <MemManage_Handler+0x4>

0800365e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003662:	e7fe      	b.n	8003662 <BusFault_Handler+0x4>

08003664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003668:	e7fe      	b.n	8003668 <UsageFault_Handler+0x4>

0800366a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003698:	f000 faa0 	bl	8003bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}

080036a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036a6:	f003 fc81 	bl	8006fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000918 	.word	0x20000918

080036b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80036b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80036bc:	f000 ff68 	bl	8004590 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 80036c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036c4:	f000 ff64 	bl	8004590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}

080036cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&huartdma);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <DMA2_Stream1_IRQHandler+0x10>)
 80036d2:	f000 f911 	bl	80038f8 <UARTDMA_DmaIrqHandler>
	return;
 80036d6:	bf00      	nop
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000348 	.word	0x20000348

080036e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <USART6_IRQHandler+0x10>)
 80036e6:	f000 f8dd 	bl	80038a4 <UARTDMA_UartIrqHandler>
	return;
 80036ea:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000348 	.word	0x20000348

080036f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
	return 1;
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_kill>:

int _kill(int pid, int sig)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800370e:	f004 fe1f 	bl	8008350 <__errno>
 8003712:	4603      	mov	r3, r0
 8003714:	2216      	movs	r2, #22
 8003716:	601a      	str	r2, [r3, #0]
	return -1;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_exit>:

void _exit (int status)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800372c:	f04f 31ff 	mov.w	r1, #4294967295
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffe7 	bl	8003704 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003736:	e7fe      	b.n	8003736 <_exit+0x12>

08003738 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e00a      	b.n	8003760 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800374a:	f3af 8000 	nop.w
 800374e:	4601      	mov	r1, r0
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	60ba      	str	r2, [r7, #8]
 8003756:	b2ca      	uxtb	r2, r1
 8003758:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	dbf0      	blt.n	800374a <_read+0x12>
	}

return len;
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	e009      	b.n	8003798 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	60ba      	str	r2, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fce5 	bl	800215c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3301      	adds	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	dbf1      	blt.n	8003784 <_write+0x12>
	}
	return len;
 80037a0:	687b      	ldr	r3, [r7, #4]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_close>:

int _close(int file)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
	return -1;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037d2:	605a      	str	r2, [r3, #4]
	return 0;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <_isatty>:

int _isatty(int file)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
	return 1;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
	return 0;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <_sbrk+0x5c>)
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <_sbrk+0x60>)
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <_sbrk+0x64>)
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <_sbrk+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <_sbrk+0x64>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d207      	bcs.n	8003854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003844:	f004 fd84 	bl	8008350 <__errno>
 8003848:	4603      	mov	r3, r0
 800384a:	220c      	movs	r2, #12
 800384c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e009      	b.n	8003868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <_sbrk+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <_sbrk+0x64>)
 8003864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20018000 	.word	0x20018000
 8003874:	00000400 	.word	0x00000400
 8003878:	20000a88 	.word	0x20000a88
 800387c:	20000aa0 	.word	0x20000aa0

08003880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <SystemInit+0x20>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <SystemInit+0x20>)
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <UARTDMA_UartIrqHandler>:
#include "string.h"



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
		tmp = tmp; // For unused warning
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60fb      	str	r3, [r7, #12]
	}
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	61bb      	str	r3, [r7, #24]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d065      	beq.n	80039e8 <UARTDMA_DmaIrqHandler+0xf0>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2220      	movs	r2, #32
 8003926:	409a      	lsls	r2, r3
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800393a:	617b      	str	r3, [r7, #20]

		UartBufferPointer = huartdma->UART_Buffer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3384      	adds	r3, #132	; 0x84
 8003940:	613b      	str	r3, [r7, #16]
		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	60fb      	str	r3, [r7, #12]

		// Write received data for UART main buffer - circular buffer
		for(i = 0; i < Length; i++)
 8003948:	2300      	movs	r3, #0
 800394a:	83fb      	strh	r3, [r7, #30]
 800394c:	e027      	b.n	800399e <UARTDMA_DmaIrqHandler+0xa6>
		{
			TempHead = (huartdma->UartBufferHead + 1) % UART_BUFFER_SIZE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8b3 3484 	ldrh.w	r3, [r3, #1156]	; 0x484
 8003954:	3301      	adds	r3, #1
 8003956:	425a      	negs	r2, r3
 8003958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003960:	bf58      	it	pl
 8003962:	4253      	negpl	r3, r2
 8003964:	817b      	strh	r3, [r7, #10]
			if(TempHead == huartdma->UartBufferTail)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8b3 3486 	ldrh.w	r3, [r3, #1158]	; 0x486
 800396c:	897a      	ldrh	r2, [r7, #10]
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <UARTDMA_DmaIrqHandler+0x88>
			{
				huartdma->UartBufferHead = huartdma->UartBufferTail;	// No room for new data
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 2486 	ldrh.w	r2, [r3, #1158]	; 0x486
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
 800397e:	e00b      	b.n	8003998 <UARTDMA_DmaIrqHandler+0xa0>
			}
			else
			{
				UartBufferPointer[TempHead] = DmaBufferPointer[i];
 8003980:	8bfb      	ldrh	r3, [r7, #30]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	441a      	add	r2, r3
 8003986:	897b      	ldrh	r3, [r7, #10]
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	440b      	add	r3, r1
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	701a      	strb	r2, [r3, #0]
//				if(UartBufferPointer[TempHead] == '\n')
//				{
//					huartdma->UartBufferLines++;
//				}
				huartdma->UartBufferHead = TempHead;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	897a      	ldrh	r2, [r7, #10]
 8003994:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
		for(i = 0; i < Length; i++)
 8003998:	8bfb      	ldrh	r3, [r7, #30]
 800399a:	3301      	adds	r3, #1
 800399c:	83fb      	strh	r3, [r7, #30]
 800399e:	8bfb      	ldrh	r3, [r7, #30]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d8d3      	bhi.n	800394e <UARTDMA_DmaIrqHandler+0x56>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	223f      	movs	r2, #63	; 0x3f
 80039b0:	409a      	lsls	r2, r3
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
	}
}
 80039e8:	bf00      	nop
 80039ea:	3724      	adds	r7, #36	; 0x24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <UARTDMA_GetCharFromBuffer>:

int UARTDMA_GetCharFromBuffer(UARTDMA_HandleTypeDef *huartdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead == huartdma->UartBufferTail)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	; 0x484
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8b3 3486 	ldrh.w	r3, [r3, #1158]	; 0x486
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d102      	bne.n	8003a12 <UARTDMA_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e016      	b.n	8003a40 <UARTDMA_GetCharFromBuffer+0x4c>
	}
	huartdma->UartBufferTail = (huartdma->UartBufferTail + 1) % UART_BUFFER_SIZE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8b3 3486 	ldrh.w	r3, [r3, #1158]	; 0x486
 8003a18:	3301      	adds	r3, #1
 8003a1a:	425a      	negs	r2, r3
 8003a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a20:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003a24:	bf58      	it	pl
 8003a26:	4253      	negpl	r3, r2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8a3 2486 	strh.w	r2, [r3, #1158]	; 0x486

	return huartdma->UART_Buffer[huartdma->UartBufferTail];
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b3 3486 	ldrh.w	r3, [r3, #1158]	; 0x486
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UARTDMA_IsDataReady>:

uint8_t UARTDMA_IsDataReady(UARTDMA_HandleTypeDef *huartdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	if(huartdma->UartBufferHead != huartdma->UartBufferTail)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	; 0x484
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 3486 	ldrh.w	r3, [r3, #1158]	; 0x486
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <UARTDMA_IsDataReady+0x1c>
		return 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <UARTDMA_IsDataReady+0x1e>
	else
		return 0;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <UARTDMA_Init>:
//	}
//	return 0;
//}

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	601a      	str	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0210 	orr.w	r2, r2, #16
 8003a98:	60da      	str	r2, [r3, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0210 	orr.w	r2, r2, #16
 8003ab0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	4619      	mov	r1, r3
 8003abe:	f003 fee8 	bl	8007892 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0208 	bic.w	r2, r2, #8
 8003ad8:	601a      	str	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ae8:	480d      	ldr	r0, [pc, #52]	; (8003b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aea:	490e      	ldr	r1, [pc, #56]	; (8003b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003aec:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af0:	e002      	b.n	8003af8 <LoopCopyDataInit>

08003af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003af6:	3304      	adds	r3, #4

08003af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003afc:	d3f9      	bcc.n	8003af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003afe:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b00:	4c0b      	ldr	r4, [pc, #44]	; (8003b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b04:	e001      	b.n	8003b0a <LoopFillZerobss>

08003b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b08:	3204      	adds	r2, #4

08003b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b0c:	d3fb      	bcc.n	8003b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b0e:	f7ff feb7 	bl	8003880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b12:	f004 fc23 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b16:	f7fe fb39 	bl	800218c <main>
  bx  lr    
 8003b1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b24:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003b28:	0800d4e4 	.word	0x0800d4e4
  ldr r2, =_sbss
 8003b2c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003b30:	20000aa0 	.word	0x20000aa0

08003b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b34:	e7fe      	b.n	8003b34 <ADC_IRQHandler>
	...

08003b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_Init+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <HAL_Init+0x40>)
 8003b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_Init+0x40>)
 8003b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_Init+0x40>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b60:	2003      	movs	r0, #3
 8003b62:	f000 f94f 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f000 f808 	bl	8003b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b6c:	f7ff fb48 	bl	8003200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023c00 	.word	0x40023c00

08003b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_InitTick+0x54>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_InitTick+0x58>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f967 	bl	8003e6e <HAL_SYSTICK_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00e      	b.n	8003bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d80a      	bhi.n	8003bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f000 f92f 	bl	8003e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bbc:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <HAL_InitTick+0x5c>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	2000000c 	.word	0x2000000c
 8003bd8:	20000008 	.word	0x20000008

08003bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_IncTick+0x20>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_IncTick+0x24>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_IncTick+0x24>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	2000000c 	.word	0x2000000c
 8003c00:	20000a8c 	.word	0x20000a8c

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_GetTick+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000a8c 	.word	0x20000a8c

08003c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff ffee 	bl	8003c04 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d005      	beq.n	8003c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_Delay+0x44>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c42:	bf00      	nop
 8003c44:	f7ff ffde 	bl	8003c04 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d8f7      	bhi.n	8003c44 <HAL_Delay+0x28>
  {
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000000c 	.word	0x2000000c

08003c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	60d3      	str	r3, [r2, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db0a      	blt.n	8003d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	490c      	ldr	r1, [pc, #48]	; (8003d50 <__NVIC_SetPriority+0x4c>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d2c:	e00a      	b.n	8003d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <__NVIC_SetPriority+0x50>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	440b      	add	r3, r1
 8003d42:	761a      	strb	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	bf28      	it	cs
 8003d76:	2304      	movcs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d902      	bls.n	8003d88 <NVIC_EncodePriority+0x30>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3b03      	subs	r3, #3
 8003d86:	e000      	b.n	8003d8a <NVIC_EncodePriority+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	4313      	orrs	r3, r2
         );
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd0:	d301      	bcc.n	8003dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <SysTick_Config+0x40>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dde:	210f      	movs	r1, #15
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f7ff ff8e 	bl	8003d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <SysTick_Config+0x40>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <SysTick_Config+0x40>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff29 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2c:	f7ff ff3e 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff8e 	bl	8003d58 <NVIC_EncodePriority>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff5d 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff31 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ffa2 	bl	8003dc0 <SysTick_Config>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff feb6 	bl	8003c04 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e099      	b.n	8003fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec4:	e00f      	b.n	8003ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec6:	f7ff fe9d 	bl	8003c04 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d908      	bls.n	8003ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e078      	b.n	8003fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e8      	bne.n	8003ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_DMA_Init+0x158>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d107      	bne.n	8003f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0307 	bic.w	r3, r3, #7
 8003f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d117      	bne.n	8003faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8e5 	bl	800415c <DMA_CheckFifoParam>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2240      	movs	r2, #64	; 0x40
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e016      	b.n	8003fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f89c 	bl	80040f0 <DMA_CalcBaseAndBitshift>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	223f      	movs	r2, #63	; 0x3f
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	f010803f 	.word	0xf010803f

08003fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_DMA_Start_IT+0x26>
 8004006:	2302      	movs	r3, #2
 8004008:	e040      	b.n	800408c <HAL_DMA_Start_IT+0xa8>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d12f      	bne.n	800407e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f82e 	bl	8004094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	223f      	movs	r2, #63	; 0x3f
 800403e:	409a      	lsls	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0216 	orr.w	r2, r2, #22
 8004052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e005      	b.n	800408a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d108      	bne.n	80040d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040d2:	e007      	b.n	80040e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	3b10      	subs	r3, #16
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <DMA_CalcBaseAndBitshift+0x64>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <DMA_CalcBaseAndBitshift+0x68>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b03      	cmp	r3, #3
 800411c:	d909      	bls.n	8004132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	659a      	str	r2, [r3, #88]	; 0x58
 8004130:	e007      	b.n	8004142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	aaaaaaab 	.word	0xaaaaaaab
 8004158:	0800d020 	.word	0x0800d020

0800415c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d11f      	bne.n	80041b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d856      	bhi.n	800422a <DMA_CheckFifoParam+0xce>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <DMA_CheckFifoParam+0x28>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a7 	.word	0x080041a7
 800418c:	08004195 	.word	0x08004195
 8004190:	0800422b 	.word	0x0800422b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d046      	beq.n	800422e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a4:	e043      	b.n	800422e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ae:	d140      	bne.n	8004232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b4:	e03d      	b.n	8004232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	d121      	bne.n	8004204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d837      	bhi.n	8004236 <DMA_CheckFifoParam+0xda>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <DMA_CheckFifoParam+0x70>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041e3 	.word	0x080041e3
 80041d4:	080041dd 	.word	0x080041dd
 80041d8:	080041f5 	.word	0x080041f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e030      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d025      	beq.n	800423a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f2:	e022      	b.n	800423a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041fc:	d11f      	bne.n	800423e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004202:	e01c      	b.n	800423e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d903      	bls.n	8004212 <DMA_CheckFifoParam+0xb6>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d003      	beq.n	8004218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004210:	e018      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      break;
 8004216:	e015      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e00b      	b.n	8004242 <DMA_CheckFifoParam+0xe6>
      break;
 800422a:	bf00      	nop
 800422c:	e00a      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
 8004230:	e008      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 8004232:	bf00      	nop
 8004234:	e006      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 8004236:	bf00      	nop
 8004238:	e004      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;   
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
    }
  } 
  
  return status; 
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop

08004254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e159      	b.n	8004524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	f040 8148 	bne.w	800451e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d005      	beq.n	80042a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d130      	bne.n	8004308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042dc:	2201      	movs	r2, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 0201 	and.w	r2, r3, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b03      	cmp	r3, #3
 8004312:	d017      	beq.n	8004344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d123      	bne.n	8004398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3208      	adds	r2, #8
 8004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	08da      	lsrs	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0203 	and.w	r2, r3, #3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a2 	beq.w	800451e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4a56      	ldr	r2, [pc, #344]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ea:	4b54      	ldr	r3, [pc, #336]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043f6:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	3302      	adds	r3, #2
 80043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a49      	ldr	r2, [pc, #292]	; (8004544 <HAL_GPIO_Init+0x2f0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x202>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a48      	ldr	r2, [pc, #288]	; (8004548 <HAL_GPIO_Init+0x2f4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x1fe>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a47      	ldr	r2, [pc, #284]	; (800454c <HAL_GPIO_Init+0x2f8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x1fa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a46      	ldr	r2, [pc, #280]	; (8004550 <HAL_GPIO_Init+0x2fc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x1f6>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a45      	ldr	r2, [pc, #276]	; (8004554 <HAL_GPIO_Init+0x300>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x1f2>
 8004442:	2304      	movs	r3, #4
 8004444:	e008      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004446:	2307      	movs	r3, #7
 8004448:	e006      	b.n	8004458 <HAL_GPIO_Init+0x204>
 800444a:	2303      	movs	r3, #3
 800444c:	e004      	b.n	8004458 <HAL_GPIO_Init+0x204>
 800444e:	2302      	movs	r3, #2
 8004450:	e002      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004456:	2300      	movs	r3, #0
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f002 0203 	and.w	r2, r2, #3
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	4093      	lsls	r3, r2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004468:	4935      	ldr	r1, [pc, #212]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	3302      	adds	r3, #2
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_GPIO_Init+0x304>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800449a:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_GPIO_Init+0x304>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044c4:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ee:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044f4:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <HAL_GPIO_Init+0x304>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	f67f aea2 	bls.w	8004270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	40013800 	.word	0x40013800
 8004544:	40020000 	.word	0x40020000
 8004548:	40020400 	.word	0x40020400
 800454c:	40020800 	.word	0x40020800
 8004550:	40020c00 	.word	0x40020c00
 8004554:	40021000 	.word	0x40021000
 8004558:	40013c00 	.word	0x40013c00

0800455c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
 8004568:	4613      	mov	r3, r2
 800456a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800456c:	787b      	ldrb	r3, [r7, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004572:	887a      	ldrh	r2, [r7, #2]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004578:	e003      	b.n	8004582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	041a      	lsls	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe f9f0 	bl	8002994 <HAL_GPIO_EXTI_Callback>
  }
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40013c00 	.word	0x40013c00

080045c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e12b      	b.n	800482a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fe fe32 	bl	8003250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004624:	f002 f870 	bl	8006708 <HAL_RCC_GetPCLK1Freq>
 8004628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a81      	ldr	r2, [pc, #516]	; (8004834 <HAL_I2C_Init+0x274>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d807      	bhi.n	8004644 <HAL_I2C_Init+0x84>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a80      	ldr	r2, [pc, #512]	; (8004838 <HAL_I2C_Init+0x278>)
 8004638:	4293      	cmp	r3, r2
 800463a:	bf94      	ite	ls
 800463c:	2301      	movls	r3, #1
 800463e:	2300      	movhi	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e006      	b.n	8004652 <HAL_I2C_Init+0x92>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a7d      	ldr	r2, [pc, #500]	; (800483c <HAL_I2C_Init+0x27c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	bf94      	ite	ls
 800464c:	2301      	movls	r3, #1
 800464e:	2300      	movhi	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0e7      	b.n	800482a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a78      	ldr	r2, [pc, #480]	; (8004840 <HAL_I2C_Init+0x280>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	0c9b      	lsrs	r3, r3, #18
 8004664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a6a      	ldr	r2, [pc, #424]	; (8004834 <HAL_I2C_Init+0x274>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d802      	bhi.n	8004694 <HAL_I2C_Init+0xd4>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3301      	adds	r3, #1
 8004692:	e009      	b.n	80046a8 <HAL_I2C_Init+0xe8>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	4a69      	ldr	r2, [pc, #420]	; (8004844 <HAL_I2C_Init+0x284>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	3301      	adds	r3, #1
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	495c      	ldr	r1, [pc, #368]	; (8004834 <HAL_I2C_Init+0x274>)
 80046c4:	428b      	cmp	r3, r1
 80046c6:	d819      	bhi.n	80046fc <HAL_I2C_Init+0x13c>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1e59      	subs	r1, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046dc:	400b      	ands	r3, r1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_I2C_Init+0x138>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1e59      	subs	r1, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f6:	e051      	b.n	800479c <HAL_I2C_Init+0x1dc>
 80046f8:	2304      	movs	r3, #4
 80046fa:	e04f      	b.n	800479c <HAL_I2C_Init+0x1dc>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d111      	bne.n	8004728 <HAL_I2C_Init+0x168>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1e58      	subs	r0, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	440b      	add	r3, r1
 8004712:	fbb0 f3f3 	udiv	r3, r0, r3
 8004716:	3301      	adds	r3, #1
 8004718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e012      	b.n	800474e <HAL_I2C_Init+0x18e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	0099      	lsls	r1, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	fbb0 f3f3 	udiv	r3, r0, r3
 800473e:	3301      	adds	r3, #1
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Init+0x196>
 8004752:	2301      	movs	r3, #1
 8004754:	e022      	b.n	800479c <HAL_I2C_Init+0x1dc>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10e      	bne.n	800477c <HAL_I2C_Init+0x1bc>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1e58      	subs	r0, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	440b      	add	r3, r1
 800476c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477a:	e00f      	b.n	800479c <HAL_I2C_Init+0x1dc>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e58      	subs	r0, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	0099      	lsls	r1, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004792:	3301      	adds	r3, #1
 8004794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	6809      	ldr	r1, [r1, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6911      	ldr	r1, [r2, #16]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68d2      	ldr	r2, [r2, #12]
 80047d6:	4311      	orrs	r1, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	430b      	orrs	r3, r1
 80047de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	000186a0 	.word	0x000186a0
 8004838:	001e847f 	.word	0x001e847f
 800483c:	003d08ff 	.word	0x003d08ff
 8004840:	431bde83 	.word	0x431bde83
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	460b      	mov	r3, r1
 8004856:	817b      	strh	r3, [r7, #10]
 8004858:	4613      	mov	r3, r2
 800485a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7ff f9d2 	bl	8003c04 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b20      	cmp	r3, #32
 800486c:	f040 80e0 	bne.w	8004a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2319      	movs	r3, #25
 8004876:	2201      	movs	r2, #1
 8004878:	4970      	ldr	r1, [pc, #448]	; (8004a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f001 f8f6 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
 8004888:	e0d3      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x50>
 8004894:	2302      	movs	r3, #2
 8004896:	e0cc      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d007      	beq.n	80048be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	; 0x21
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2210      	movs	r2, #16
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	893a      	ldrh	r2, [r7, #8]
 80048ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a50      	ldr	r2, [pc, #320]	; (8004a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004900:	8979      	ldrh	r1, [r7, #10]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fde2 	bl	80054d0 <I2C_MasterRequestWrite>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e08d      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800492c:	e066      	b.n	80049fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	6a39      	ldr	r1, [r7, #32]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f001 f970 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b04      	cmp	r3, #4
 8004944:	d107      	bne.n	8004956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06b      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11b      	bne.n	80049d0 <HAL_I2C_Master_Transmit+0x188>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	6a39      	ldr	r1, [r7, #32]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f001 f960 	bl	8005c9a <I2C_WaitOnBTFFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d107      	bne.n	80049f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e01a      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d194      	bne.n	800492e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	00100002 	.word	0x00100002
 8004a40:	ffff0000 	.word	0xffff0000

08004a44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08c      	sub	sp, #48	; 0x30
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	460b      	mov	r3, r1
 8004a52:	817b      	strh	r3, [r7, #10]
 8004a54:	4613      	mov	r3, r2
 8004a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7ff f8d4 	bl	8003c04 <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	f040 820b 	bne.w	8004e82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2319      	movs	r3, #25
 8004a72:	2201      	movs	r2, #1
 8004a74:	497c      	ldr	r1, [pc, #496]	; (8004c68 <HAL_I2C_Master_Receive+0x224>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fff8 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	e1fe      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2C_Master_Receive+0x50>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e1f7      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d007      	beq.n	8004aba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2222      	movs	r2, #34	; 0x22
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	893a      	ldrh	r2, [r7, #8]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_I2C_Master_Receive+0x228>)
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fd66 	bl	80055d4 <I2C_MasterRequestRead>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e1b8      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d113      	bne.n	8004b42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e18c      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d11b      	bne.n	8004b82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e16c      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11b      	bne.n	8004bc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	e14c      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004be8:	e138      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	f200 80f1 	bhi.w	8004dd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d123      	bne.n	8004c44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f001 f88b 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e139      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c42:	e10b      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d14e      	bne.n	8004cea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2200      	movs	r2, #0
 8004c54:	4906      	ldr	r1, [pc, #24]	; (8004c70 <HAL_I2C_Master_Receive+0x22c>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 ff08 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e10e      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
 8004c66:	bf00      	nop
 8004c68:	00100002 	.word	0x00100002
 8004c6c:	ffff0000 	.word	0xffff0000
 8004c70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ce8:	e0b8      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4966      	ldr	r1, [pc, #408]	; (8004e8c <HAL_I2C_Master_Receive+0x448>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 feb9 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0bf      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	494f      	ldr	r1, [pc, #316]	; (8004e8c <HAL_I2C_Master_Receive+0x448>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fe8b 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e091      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dd4:	e042      	b.n	8004e5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 ff9e 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e04c      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d118      	bne.n	8004e5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f aec2 	bne.w	8004bea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3728      	adds	r7, #40	; 0x28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	00010004 	.word	0x00010004

08004e90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	817b      	strh	r3, [r7, #10]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	813b      	strh	r3, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eaa:	f7fe feab 	bl	8003c04 <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	f040 80d9 	bne.w	8005070 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2319      	movs	r3, #25
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	496d      	ldr	r1, [pc, #436]	; (800507c <HAL_I2C_Mem_Write+0x1ec>)
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fdcf 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e0cc      	b.n	8005072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_I2C_Mem_Write+0x56>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0c5      	b.n	8005072 <HAL_I2C_Mem_Write+0x1e2>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d007      	beq.n	8004f0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2240      	movs	r2, #64	; 0x40
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a4d      	ldr	r2, [pc, #308]	; (8005080 <HAL_I2C_Mem_Write+0x1f0>)
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f4e:	88f8      	ldrh	r0, [r7, #6]
 8004f50:	893a      	ldrh	r2, [r7, #8]
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fc06 	bl	8005770 <I2C_RequestMemoryWrite>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d052      	beq.n	8005010 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e081      	b.n	8005072 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fe50 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d107      	bne.n	8004f96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06b      	b.n	8005072 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11b      	bne.n	8005010 <HAL_I2C_Mem_Write+0x180>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d017      	beq.n	8005010 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1aa      	bne.n	8004f6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fe3c 	bl	8005c9a <I2C_WaitOnBTFFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	2b04      	cmp	r3, #4
 800502e:	d107      	bne.n	8005040 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e016      	b.n	8005072 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	00100002 	.word	0x00100002
 8005080:	ffff0000 	.word	0xffff0000

08005084 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	; 0x30
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800509e:	f7fe fdb1 	bl	8003c04 <HAL_GetTick>
 80050a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	f040 8208 	bne.w	80054c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2319      	movs	r3, #25
 80050b8:	2201      	movs	r2, #1
 80050ba:	497b      	ldr	r1, [pc, #492]	; (80052a8 <HAL_I2C_Mem_Read+0x224>)
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fcd5 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
 80050ca:	e1fb      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_I2C_Mem_Read+0x56>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e1f4      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d007      	beq.n	8005100 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2222      	movs	r2, #34	; 0x22
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a5b      	ldr	r2, [pc, #364]	; (80052ac <HAL_I2C_Mem_Read+0x228>)
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005142:	88f8      	ldrh	r0, [r7, #6]
 8005144:	893a      	ldrh	r2, [r7, #8]
 8005146:	8979      	ldrh	r1, [r7, #10]
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4603      	mov	r3, r0
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fba2 	bl	800589c <I2C_RequestMemoryRead>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1b0      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d113      	bne.n	8005192 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	623b      	str	r3, [r7, #32]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	623b      	str	r3, [r7, #32]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	623b      	str	r3, [r7, #32]
 800517e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e184      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005196:	2b01      	cmp	r3, #1
 8005198:	d11b      	bne.n	80051d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e164      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d11b      	bne.n	8005212 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	e144      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005228:	e138      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	2b03      	cmp	r3, #3
 8005230:	f200 80f1 	bhi.w	8005416 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005238:	2b01      	cmp	r3, #1
 800523a:	d123      	bne.n	8005284 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fd6b 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e139      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005282:	e10b      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005288:	2b02      	cmp	r3, #2
 800528a:	d14e      	bne.n	800532a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	2200      	movs	r2, #0
 8005294:	4906      	ldr	r1, [pc, #24]	; (80052b0 <HAL_I2C_Mem_Read+0x22c>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fbe8 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e10e      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
 80052a6:	bf00      	nop
 80052a8:	00100002 	.word	0x00100002
 80052ac:	ffff0000 	.word	0xffff0000
 80052b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005328:	e0b8      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2200      	movs	r2, #0
 8005332:	4966      	ldr	r1, [pc, #408]	; (80054cc <HAL_I2C_Mem_Read+0x448>)
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 fb99 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0bf      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2200      	movs	r2, #0
 800538e:	494f      	ldr	r1, [pc, #316]	; (80054cc <HAL_I2C_Mem_Read+0x448>)
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fb6b 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e091      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005414:	e042      	b.n	800549c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 fc7e 	bl	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e04c      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b04      	cmp	r3, #4
 8005468:	d118      	bne.n	800549c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f47f aec2 	bne.w	800522a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e000      	b.n	80054c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
  }
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	; 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	00010004 	.word	0x00010004

080054d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	460b      	mov	r3, r1
 80054de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d006      	beq.n	80054fa <I2C_MasterRequestWrite+0x2a>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d003      	beq.n	80054fa <I2C_MasterRequestWrite+0x2a>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f8:	d108      	bne.n	800550c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e00b      	b.n	8005524 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	2b12      	cmp	r3, #18
 8005512:	d107      	bne.n	8005524 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fa9b 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d103      	bne.n	8005554 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e035      	b.n	80055c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005560:	d108      	bne.n	8005574 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005562:	897b      	ldrh	r3, [r7, #10]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	e01b      	b.n	80055ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005574:	897b      	ldrh	r3, [r7, #10]
 8005576:	11db      	asrs	r3, r3, #7
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0306 	and.w	r3, r3, #6
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f063 030f 	orn	r3, r3, #15
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	490e      	ldr	r1, [pc, #56]	; (80055cc <I2C_MasterRequestWrite+0xfc>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fac1 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e010      	b.n	80055c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4907      	ldr	r1, [pc, #28]	; (80055d0 <I2C_MasterRequestWrite+0x100>)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fab1 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00010008 	.word	0x00010008
 80055d0:	00010002 	.word	0x00010002

080055d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	460b      	mov	r3, r1
 80055e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d006      	beq.n	800560e <I2C_MasterRequestRead+0x3a>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d003      	beq.n	800560e <I2C_MasterRequestRead+0x3a>
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800560c:	d108      	bne.n	8005620 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e00b      	b.n	8005638 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	2b11      	cmp	r3, #17
 8005626:	d107      	bne.n	8005638 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fa11 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00d      	beq.n	800566c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565e:	d103      	bne.n	8005668 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005666:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e079      	b.n	8005760 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005674:	d108      	bne.n	8005688 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005676:	897b      	ldrh	r3, [r7, #10]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	611a      	str	r2, [r3, #16]
 8005686:	e05f      	b.n	8005748 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005688:	897b      	ldrh	r3, [r7, #10]
 800568a:	11db      	asrs	r3, r3, #7
 800568c:	b2db      	uxtb	r3, r3
 800568e:	f003 0306 	and.w	r3, r3, #6
 8005692:	b2db      	uxtb	r3, r3
 8005694:	f063 030f 	orn	r3, r3, #15
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4930      	ldr	r1, [pc, #192]	; (8005768 <I2C_MasterRequestRead+0x194>)
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fa37 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e054      	b.n	8005760 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80056b6:	897b      	ldrh	r3, [r7, #10]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4929      	ldr	r1, [pc, #164]	; (800576c <I2C_MasterRequestRead+0x198>)
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fa27 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e044      	b.n	8005760 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f9af 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005722:	d103      	bne.n	800572c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e017      	b.n	8005760 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005730:	897b      	ldrh	r3, [r7, #10]
 8005732:	11db      	asrs	r3, r3, #7
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f003 0306 	and.w	r3, r3, #6
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f063 030e 	orn	r3, r3, #14
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4907      	ldr	r1, [pc, #28]	; (800576c <I2C_MasterRequestRead+0x198>)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f9e3 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	00010008 	.word	0x00010008
 800576c:	00010002 	.word	0x00010002

08005770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f960 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c0:	d103      	bne.n	80057ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e05f      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ce:	897b      	ldrh	r3, [r7, #10]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	492d      	ldr	r1, [pc, #180]	; (8005898 <I2C_RequestMemoryWrite+0x128>)
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f998 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04c      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	6a39      	ldr	r1, [r7, #32]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fa02 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b04      	cmp	r3, #4
 8005820:	d107      	bne.n	8005832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e02b      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d105      	bne.n	8005848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	e021      	b.n	800588c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005848:	893b      	ldrh	r3, [r7, #8]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	6a39      	ldr	r1, [r7, #32]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f9dc 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b04      	cmp	r3, #4
 800586c:	d107      	bne.n	800587e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e005      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005882:	893b      	ldrh	r3, [r7, #8]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	00010002 	.word	0x00010002

0800589c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	817b      	strh	r3, [r7, #10]
 80058ae:	460b      	mov	r3, r1
 80058b0:	813b      	strh	r3, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2200      	movs	r2, #0
 80058de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f8c2 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d103      	bne.n	8005906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0aa      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	4952      	ldr	r1, [pc, #328]	; (8005a68 <I2C_RequestMemoryRead+0x1cc>)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f8fa 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e097      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005948:	6a39      	ldr	r1, [r7, #32]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f964 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2b04      	cmp	r3, #4
 800595c:	d107      	bne.n	800596e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e076      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005978:	893b      	ldrh	r3, [r7, #8]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	e021      	b.n	80059c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	b29b      	uxth	r3, r3
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005994:	6a39      	ldr	r1, [r7, #32]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f93e 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d107      	bne.n	80059ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e050      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059be:	893b      	ldrh	r3, [r7, #8]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f923 	bl	8005c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d107      	bne.n	80059f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e035      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f82b 	bl	8005a6c <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	d103      	bne.n	8005a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e013      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a38:	897b      	ldrh	r3, [r7, #10]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	4906      	ldr	r1, [pc, #24]	; (8005a68 <I2C_RequestMemoryRead+0x1cc>)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f863 	bl	8005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	00010002 	.word	0x00010002

08005a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a7c:	e025      	b.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d021      	beq.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fe f8bd 	bl	8003c04 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e023      	b.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10d      	bne.n	8005af0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	43da      	mvns	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	e00c      	b.n	8005b0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d0b6      	beq.n	8005a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b28:	e051      	b.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b38:	d123      	bne.n	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e046      	b.n	8005c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d021      	beq.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fe f83b 	bl	8003c04 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d116      	bne.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e020      	b.n	8005c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10c      	bne.n	8005bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	43da      	mvns	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bf14      	ite	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	2300      	moveq	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e00b      	b.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	43da      	mvns	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d18d      	bne.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c24:	e02d      	b.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f8ce 	bl	8005dc8 <I2C_IsAcknowledgeFailed>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e02d      	b.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d021      	beq.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7fd ffe1 	bl	8003c04 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d116      	bne.n	8005c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e007      	b.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d1ca      	bne.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ca6:	e02d      	b.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f88d 	bl	8005dc8 <I2C_IsAcknowledgeFailed>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e02d      	b.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d021      	beq.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc0:	f7fd ffa0 	bl	8003c04 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d302      	bcc.n	8005cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d116      	bne.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e007      	b.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d1ca      	bne.n	8005ca8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d28:	e042      	b.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d119      	bne.n	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0210 	mvn.w	r2, #16
 8005d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e029      	b.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6c:	f7fd ff4a 	bl	8003c04 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d116      	bne.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e007      	b.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d1b5      	bne.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d11b      	bne.n	8005e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	f043 0204 	orr.w	r2, r3, #4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e267      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d075      	beq.n	8005f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e46:	4b88      	ldr	r3, [pc, #544]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e52:	4b85      	ldr	r3, [pc, #532]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d112      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5e:	4b82      	ldr	r3, [pc, #520]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b7e      	ldr	r3, [pc, #504]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05b      	beq.n	8005f30 <HAL_RCC_OscConfig+0x108>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d157      	bne.n	8005f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e242      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCC_OscConfig+0x74>
 8005e8e:	4b76      	ldr	r3, [pc, #472]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a75      	ldr	r2, [pc, #468]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x98>
 8005ea6:	4b70      	ldr	r3, [pc, #448]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6f      	ldr	r2, [pc, #444]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b6d      	ldr	r3, [pc, #436]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6c      	ldr	r2, [pc, #432]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005ec0:	4b69      	ldr	r3, [pc, #420]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a68      	ldr	r2, [pc, #416]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b66      	ldr	r3, [pc, #408]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a65      	ldr	r2, [pc, #404]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fe90 	bl	8003c04 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fd fe8c 	bl	8003c04 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e207      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	4b5b      	ldr	r3, [pc, #364]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xc0>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fd fe7c 	bl	8003c04 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fd fe78 	bl	8003c04 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1f3      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f22:	4b51      	ldr	r3, [pc, #324]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0xe8>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d063      	beq.n	8006006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f3e:	4b4a      	ldr	r3, [pc, #296]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4a:	4b47      	ldr	r3, [pc, #284]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d11c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f56:	4b44      	ldr	r3, [pc, #272]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f62:	4b41      	ldr	r3, [pc, #260]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e1c7      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7a:	4b3b      	ldr	r3, [pc, #236]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4937      	ldr	r1, [pc, #220]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8e:	e03a      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d020      	beq.n	8005fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f98:	4b34      	ldr	r3, [pc, #208]	; (800606c <HAL_RCC_OscConfig+0x244>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9e:	f7fd fe31 	bl	8003c04 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa6:	f7fd fe2d 	bl	8003c04 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e1a8      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb8:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc4:	4b28      	ldr	r3, [pc, #160]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4925      	ldr	r1, [pc, #148]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	e015      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fda:	4b24      	ldr	r3, [pc, #144]	; (800606c <HAL_RCC_OscConfig+0x244>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fd fe10 	bl	8003c04 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe8:	f7fd fe0c 	bl	8003c04 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e187      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d036      	beq.n	8006080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <HAL_RCC_OscConfig+0x248>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fd fdf0 	bl	8003c04 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006028:	f7fd fdec 	bl	8003c04 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e167      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <HAL_RCC_OscConfig+0x240>)
 800603c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x200>
 8006046:	e01b      	b.n	8006080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006048:	4b09      	ldr	r3, [pc, #36]	; (8006070 <HAL_RCC_OscConfig+0x248>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604e:	f7fd fdd9 	bl	8003c04 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006054:	e00e      	b.n	8006074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006056:	f7fd fdd5 	bl	8003c04 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d907      	bls.n	8006074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e150      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
 8006068:	40023800 	.word	0x40023800
 800606c:	42470000 	.word	0x42470000
 8006070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006074:	4b88      	ldr	r3, [pc, #544]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1ea      	bne.n	8006056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8097 	beq.w	80061bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006092:	4b81      	ldr	r3, [pc, #516]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	4b7d      	ldr	r3, [pc, #500]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	4a7c      	ldr	r2, [pc, #496]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6413      	str	r3, [r2, #64]	; 0x40
 80060ae:	4b7a      	ldr	r3, [pc, #488]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	60bb      	str	r3, [r7, #8]
 80060b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060be:	4b77      	ldr	r3, [pc, #476]	; (800629c <HAL_RCC_OscConfig+0x474>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d118      	bne.n	80060fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ca:	4b74      	ldr	r3, [pc, #464]	; (800629c <HAL_RCC_OscConfig+0x474>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a73      	ldr	r2, [pc, #460]	; (800629c <HAL_RCC_OscConfig+0x474>)
 80060d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d6:	f7fd fd95 	bl	8003c04 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060de:	f7fd fd91 	bl	8003c04 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e10c      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f0:	4b6a      	ldr	r3, [pc, #424]	; (800629c <HAL_RCC_OscConfig+0x474>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d106      	bne.n	8006112 <HAL_RCC_OscConfig+0x2ea>
 8006104:	4b64      	ldr	r3, [pc, #400]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	4a63      	ldr	r2, [pc, #396]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	6713      	str	r3, [r2, #112]	; 0x70
 8006110:	e01c      	b.n	800614c <HAL_RCC_OscConfig+0x324>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d10c      	bne.n	8006134 <HAL_RCC_OscConfig+0x30c>
 800611a:	4b5f      	ldr	r3, [pc, #380]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	4a5e      	ldr	r2, [pc, #376]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	6713      	str	r3, [r2, #112]	; 0x70
 8006126:	4b5c      	ldr	r3, [pc, #368]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	4a5b      	ldr	r2, [pc, #364]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	6713      	str	r3, [r2, #112]	; 0x70
 8006132:	e00b      	b.n	800614c <HAL_RCC_OscConfig+0x324>
 8006134:	4b58      	ldr	r3, [pc, #352]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	4a57      	ldr	r2, [pc, #348]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	; 0x70
 8006140:	4b55      	ldr	r3, [pc, #340]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a54      	ldr	r2, [pc, #336]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006146:	f023 0304 	bic.w	r3, r3, #4
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7fd fd56 	bl	8003c04 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615a:	e00a      	b.n	8006172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800615c:	f7fd fd52 	bl	8003c04 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	; 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e0cb      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006172:	4b49      	ldr	r3, [pc, #292]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ee      	beq.n	800615c <HAL_RCC_OscConfig+0x334>
 800617e:	e014      	b.n	80061aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006180:	f7fd fd40 	bl	8003c04 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006186:	e00a      	b.n	800619e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fd fd3c 	bl	8003c04 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e0b5      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800619e:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ee      	bne.n	8006188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d105      	bne.n	80061bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b0:	4b39      	ldr	r3, [pc, #228]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	4a38      	ldr	r2, [pc, #224]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80061b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80a1 	beq.w	8006308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061c6:	4b34      	ldr	r3, [pc, #208]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d05c      	beq.n	800628c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d141      	bne.n	800625e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061da:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <HAL_RCC_OscConfig+0x478>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e0:	f7fd fd10 	bl	8003c04 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e8:	f7fd fd0c 	bl	8003c04 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e087      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fa:	4b27      	ldr	r3, [pc, #156]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	019b      	lsls	r3, r3, #6
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	3b01      	subs	r3, #1
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	061b      	lsls	r3, r3, #24
 800622a:	491b      	ldr	r1, [pc, #108]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 800622c:	4313      	orrs	r3, r2
 800622e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006236:	f7fd fce5 	bl	8003c04 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800623e:	f7fd fce1 	bl	8003c04 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e05c      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f0      	beq.n	800623e <HAL_RCC_OscConfig+0x416>
 800625c:	e054      	b.n	8006308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <HAL_RCC_OscConfig+0x478>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fd fcce 	bl	8003c04 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800626c:	f7fd fcca 	bl	8003c04 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e045      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_RCC_OscConfig+0x470>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x444>
 800628a:	e03d      	b.n	8006308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d107      	bne.n	80062a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e038      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
 8006298:	40023800 	.word	0x40023800
 800629c:	40007000 	.word	0x40007000
 80062a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062a4:	4b1b      	ldr	r3, [pc, #108]	; (8006314 <HAL_RCC_OscConfig+0x4ec>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d028      	beq.n	8006304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d121      	bne.n	8006304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d11a      	bne.n	8006304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062d4:	4013      	ands	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062dc:	4293      	cmp	r3, r2
 80062de:	d111      	bne.n	8006304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	3b01      	subs	r3, #1
 80062ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d107      	bne.n	8006304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40023800 	.word	0x40023800

08006318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0cc      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b68      	ldr	r3, [pc, #416]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d90c      	bls.n	8006354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b65      	ldr	r3, [pc, #404]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0b8      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800636c:	4b59      	ldr	r3, [pc, #356]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a58      	ldr	r2, [pc, #352]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006384:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4a52      	ldr	r2, [pc, #328]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800638e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006390:	4b50      	ldr	r3, [pc, #320]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	494d      	ldr	r1, [pc, #308]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d044      	beq.n	8006438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	4b47      	ldr	r3, [pc, #284]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d119      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e07f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d003      	beq.n	80063d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d6:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e06f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	4b3b      	ldr	r3, [pc, #236]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e067      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063f6:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f023 0203 	bic.w	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4934      	ldr	r1, [pc, #208]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006408:	f7fd fbfc 	bl	8003c04 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640e:	e00a      	b.n	8006426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006410:	f7fd fbf8 	bl	8003c04 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	; 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e04f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 020c 	and.w	r2, r3, #12
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	429a      	cmp	r2, r3
 8006436:	d1eb      	bne.n	8006410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006438:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d20c      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e032      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4916      	ldr	r1, [pc, #88]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648a:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	490e      	ldr	r1, [pc, #56]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800649e:	f000 f821 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	490a      	ldr	r1, [pc, #40]	; (80064d8 <HAL_RCC_ClockConfig+0x1c0>)
 80064b0:	5ccb      	ldrb	r3, [r1, r3]
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	4a09      	ldr	r2, [pc, #36]	; (80064dc <HAL_RCC_ClockConfig+0x1c4>)
 80064b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_ClockConfig+0x1c8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fd fb5c 	bl	8003b7c <HAL_InitTick>

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023c00 	.word	0x40023c00
 80064d4:	40023800 	.word	0x40023800
 80064d8:	0800d008 	.word	0x0800d008
 80064dc:	20000004 	.word	0x20000004
 80064e0:	20000008 	.word	0x20000008

080064e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e8:	b094      	sub	sp, #80	; 0x50
 80064ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	647b      	str	r3, [r7, #68]	; 0x44
 80064f0:	2300      	movs	r3, #0
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f4:	2300      	movs	r3, #0
 80064f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064fc:	4b79      	ldr	r3, [pc, #484]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 030c 	and.w	r3, r3, #12
 8006504:	2b08      	cmp	r3, #8
 8006506:	d00d      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x40>
 8006508:	2b08      	cmp	r3, #8
 800650a:	f200 80e1 	bhi.w	80066d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_RCC_GetSysClockFreq+0x34>
 8006512:	2b04      	cmp	r3, #4
 8006514:	d003      	beq.n	800651e <HAL_RCC_GetSysClockFreq+0x3a>
 8006516:	e0db      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006518:	4b73      	ldr	r3, [pc, #460]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800651a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800651c:	e0db      	b.n	80066d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800651e:	4b73      	ldr	r3, [pc, #460]	; (80066ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006520:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006522:	e0d8      	b.n	80066d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006524:	4b6f      	ldr	r3, [pc, #444]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800652c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800652e:	4b6d      	ldr	r3, [pc, #436]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d063      	beq.n	8006602 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653a:	4b6a      	ldr	r3, [pc, #424]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	099b      	lsrs	r3, r3, #6
 8006540:	2200      	movs	r2, #0
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
 8006544:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654c:	633b      	str	r3, [r7, #48]	; 0x30
 800654e:	2300      	movs	r3, #0
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
 8006552:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	f04f 0000 	mov.w	r0, #0
 800655e:	f04f 0100 	mov.w	r1, #0
 8006562:	0159      	lsls	r1, r3, #5
 8006564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006568:	0150      	lsls	r0, r2, #5
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4621      	mov	r1, r4
 8006570:	1a51      	subs	r1, r2, r1
 8006572:	6139      	str	r1, [r7, #16]
 8006574:	4629      	mov	r1, r5
 8006576:	eb63 0301 	sbc.w	r3, r3, r1
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006588:	4659      	mov	r1, fp
 800658a:	018b      	lsls	r3, r1, #6
 800658c:	4651      	mov	r1, sl
 800658e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006592:	4651      	mov	r1, sl
 8006594:	018a      	lsls	r2, r1, #6
 8006596:	4651      	mov	r1, sl
 8006598:	ebb2 0801 	subs.w	r8, r2, r1
 800659c:	4659      	mov	r1, fp
 800659e:	eb63 0901 	sbc.w	r9, r3, r1
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065b6:	4690      	mov	r8, r2
 80065b8:	4699      	mov	r9, r3
 80065ba:	4623      	mov	r3, r4
 80065bc:	eb18 0303 	adds.w	r3, r8, r3
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	462b      	mov	r3, r5
 80065c4:	eb49 0303 	adc.w	r3, r9, r3
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065d6:	4629      	mov	r1, r5
 80065d8:	024b      	lsls	r3, r1, #9
 80065da:	4621      	mov	r1, r4
 80065dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065e0:	4621      	mov	r1, r4
 80065e2:	024a      	lsls	r2, r1, #9
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ea:	2200      	movs	r2, #0
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065f4:	f7fa fba0 	bl	8000d38 <__aeabi_uldivmod>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4613      	mov	r3, r2
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	e058      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006602:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	2200      	movs	r2, #0
 800660a:	4618      	mov	r0, r3
 800660c:	4611      	mov	r1, r2
 800660e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	2300      	movs	r3, #0
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
 8006618:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	f04f 0000 	mov.w	r0, #0
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	0159      	lsls	r1, r3, #5
 800662a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800662e:	0150      	lsls	r0, r2, #5
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4641      	mov	r1, r8
 8006636:	ebb2 0a01 	subs.w	sl, r2, r1
 800663a:	4649      	mov	r1, r9
 800663c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800664c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006650:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006654:	ebb2 040a 	subs.w	r4, r2, sl
 8006658:	eb63 050b 	sbc.w	r5, r3, fp
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	00eb      	lsls	r3, r5, #3
 8006666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666a:	00e2      	lsls	r2, r4, #3
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	4643      	mov	r3, r8
 8006672:	18e3      	adds	r3, r4, r3
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	464b      	mov	r3, r9
 8006678:	eb45 0303 	adc.w	r3, r5, r3
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800668a:	4629      	mov	r1, r5
 800668c:	028b      	lsls	r3, r1, #10
 800668e:	4621      	mov	r1, r4
 8006690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006694:	4621      	mov	r1, r4
 8006696:	028a      	lsls	r2, r1, #10
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669e:	2200      	movs	r2, #0
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	61fa      	str	r2, [r7, #28]
 80066a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a8:	f7fa fb46 	bl	8000d38 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4613      	mov	r3, r2
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	3301      	adds	r3, #1
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066ce:	e002      	b.n	80066d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3750      	adds	r7, #80	; 0x50
 80066dc:	46bd      	mov	sp, r7
 80066de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e2:	bf00      	nop
 80066e4:	40023800 	.word	0x40023800
 80066e8:	00f42400 	.word	0x00f42400
 80066ec:	007a1200 	.word	0x007a1200

080066f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <HAL_RCC_GetHCLKFreq+0x14>)
 80066f6:	681b      	ldr	r3, [r3, #0]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20000004 	.word	0x20000004

08006708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800670c:	f7ff fff0 	bl	80066f0 <HAL_RCC_GetHCLKFreq>
 8006710:	4602      	mov	r2, r0
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	0a9b      	lsrs	r3, r3, #10
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	4903      	ldr	r1, [pc, #12]	; (800672c <HAL_RCC_GetPCLK1Freq+0x24>)
 800671e:	5ccb      	ldrb	r3, [r1, r3]
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006724:	4618      	mov	r0, r3
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40023800 	.word	0x40023800
 800672c:	0800d018 	.word	0x0800d018

08006730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006734:	f7ff ffdc 	bl	80066f0 <HAL_RCC_GetHCLKFreq>
 8006738:	4602      	mov	r2, r0
 800673a:	4b05      	ldr	r3, [pc, #20]	; (8006750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	0b5b      	lsrs	r3, r3, #13
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	4903      	ldr	r1, [pc, #12]	; (8006754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006746:	5ccb      	ldrb	r3, [r1, r3]
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800674c:	4618      	mov	r0, r3
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40023800 	.word	0x40023800
 8006754:	0800d018 	.word	0x0800d018

08006758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07b      	b.n	8006862 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677a:	d009      	beq.n	8006790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
 8006782:	e005      	b.n	8006790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc fdf0 	bl	8003390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	ea42 0103 	orr.w	r1, r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	f003 0104 	and.w	r1, r3, #4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	f003 0210 	and.w	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b08c      	sub	sp, #48	; 0x30
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x26>
 800688c:	2302      	movs	r3, #2
 800688e:	e18a      	b.n	8006ba6 <HAL_SPI_TransmitReceive+0x33c>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006898:	f7fd f9b4 	bl	8003c04 <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80068ae:	887b      	ldrh	r3, [r7, #2]
 80068b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00f      	beq.n	80068da <HAL_SPI_TransmitReceive+0x70>
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c0:	d107      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d103      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x68>
 80068ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d003      	beq.n	80068da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
 80068d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068d8:	e15b      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x82>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x82>
 80068e6:	887b      	ldrh	r3, [r7, #2]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d103      	bne.n	80068f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068f2:	e14e      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d003      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2205      	movs	r2, #5
 8006904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	887a      	ldrh	r2, [r7, #2]
 800691e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	887a      	ldrh	r2, [r7, #2]
 800692a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	887a      	ldrh	r2, [r7, #2]
 8006930:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d007      	beq.n	800695c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006964:	d178      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <HAL_SPI_TransmitReceive+0x10a>
 800696e:	8b7b      	ldrh	r3, [r7, #26]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d166      	bne.n	8006a42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	881a      	ldrh	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	1c9a      	adds	r2, r3, #2
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006998:	e053      	b.n	8006a42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d11b      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x176>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d016      	beq.n	80069e0 <HAL_SPI_TransmitReceive+0x176>
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d113      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	881a      	ldrh	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	1c9a      	adds	r2, r3, #2
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d119      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x1b8>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d014      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	b292      	uxth	r2, r2
 8006a04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a22:	f7fd f8ef 	bl	8003c04 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d807      	bhi.n	8006a42 <HAL_SPI_TransmitReceive+0x1d8>
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d003      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a40:	e0a7      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1a6      	bne.n	800699a <HAL_SPI_TransmitReceive+0x130>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1a1      	bne.n	800699a <HAL_SPI_TransmitReceive+0x130>
 8006a56:	e07c      	b.n	8006b52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_SPI_TransmitReceive+0x1fc>
 8006a60:	8b7b      	ldrh	r3, [r7, #26]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d16b      	bne.n	8006b3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a8c:	e057      	b.n	8006b3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d11c      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x26c>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d017      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x26c>
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d114      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d119      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x2ae>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d014      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b14:	2301      	movs	r3, #1
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b18:	f7fd f874 	bl	8003c04 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d803      	bhi.n	8006b30 <HAL_SPI_TransmitReceive+0x2c6>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d102      	bne.n	8006b36 <HAL_SPI_TransmitReceive+0x2cc>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b3c:	e029      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1a2      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x224>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d19d      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f8b2 	bl	8006cc0 <SPI_EndRxTxTransaction>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b6e:	e010      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	e000      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3730      	adds	r7, #48	; 0x30
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bc0:	f7fd f820 	bl	8003c04 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bd0:	f7fd f818 	bl	8003c04 <HAL_GetTick>
 8006bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bd6:	4b39      	ldr	r3, [pc, #228]	; (8006cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	015b      	lsls	r3, r3, #5
 8006bdc:	0d1b      	lsrs	r3, r3, #20
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	fb02 f303 	mul.w	r3, r2, r3
 8006be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be6:	e054      	b.n	8006c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d050      	beq.n	8006c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bf0:	f7fd f808 	bl	8003c04 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d902      	bls.n	8006c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d13d      	bne.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c1e:	d111      	bne.n	8006c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c28:	d004      	beq.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d107      	bne.n	8006c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4c:	d10f      	bne.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e017      	b.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	bf0c      	ite	eq
 8006ca2:	2301      	moveq	r3, #1
 8006ca4:	2300      	movne	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d19b      	bne.n	8006be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000004 	.word	0x20000004

08006cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ccc:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <SPI_EndRxTxTransaction+0x7c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <SPI_EndRxTxTransaction+0x80>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	0d5b      	lsrs	r3, r3, #21
 8006cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cdc:	fb02 f303 	mul.w	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cea:	d112      	bne.n	8006d12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff ff5a 	bl	8006bb0 <SPI_WaitFlagStateUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e00f      	b.n	8006d32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d28:	2b80      	cmp	r3, #128	; 0x80
 8006d2a:	d0f2      	beq.n	8006d12 <SPI_EndRxTxTransaction+0x52>
 8006d2c:	e000      	b.n	8006d30 <SPI_EndRxTxTransaction+0x70>
        break;
 8006d2e:	bf00      	nop
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000004 	.word	0x20000004
 8006d40:	165e9f81 	.word	0x165e9f81

08006d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e041      	b.n	8006dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fc fb78 	bl	8003460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f000 fb0a 	bl	800739c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d001      	beq.n	8006dfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e03c      	b.n	8006e76 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1e      	ldr	r2, [pc, #120]	; (8006e84 <HAL_TIM_Base_Start+0xa0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d018      	beq.n	8006e40 <HAL_TIM_Base_Start+0x5c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e16:	d013      	beq.n	8006e40 <HAL_TIM_Base_Start+0x5c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1a      	ldr	r2, [pc, #104]	; (8006e88 <HAL_TIM_Base_Start+0xa4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00e      	beq.n	8006e40 <HAL_TIM_Base_Start+0x5c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <HAL_TIM_Base_Start+0xa8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d009      	beq.n	8006e40 <HAL_TIM_Base_Start+0x5c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <HAL_TIM_Base_Start+0xac>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <HAL_TIM_Base_Start+0x5c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <HAL_TIM_Base_Start+0xb0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d111      	bne.n	8006e64 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d010      	beq.n	8006e74 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e62:	e007      	b.n	8006e74 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40010000 	.word	0x40010000
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800
 8006e90:	40000c00 	.word	0x40000c00
 8006e94:	40014000 	.word	0x40014000

08006e98 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10f      	bne.n	8006ed0 <HAL_TIM_Base_Stop+0x38>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6a1a      	ldr	r2, [r3, #32]
 8006eb6:	f240 4344 	movw	r3, #1092	; 0x444
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <HAL_TIM_Base_Stop+0x38>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d001      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e044      	b.n	8006f8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <HAL_TIM_Base_Start_IT+0xb0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x6c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d013      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x6c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1a      	ldr	r2, [pc, #104]	; (8006f9c <HAL_TIM_Base_Start_IT+0xb4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x6c>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x6c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x6c>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d111      	bne.n	8006f78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d010      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f76:	e007      	b.n	8006f88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40000c00 	.word	0x40000c00
 8006fa8:	40014000 	.word	0x40014000

08006fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d122      	bne.n	8007008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d11b      	bne.n	8007008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0202 	mvn.w	r2, #2
 8006fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9b5 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9a7 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9b8 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b04      	cmp	r3, #4
 8007014:	d122      	bne.n	800705c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d11b      	bne.n	800705c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0204 	mvn.w	r2, #4
 800702c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f98b 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8007048:	e005      	b.n	8007056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f97d 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f98e 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b08      	cmp	r3, #8
 8007068:	d122      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b08      	cmp	r3, #8
 8007076:	d11b      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0208 	mvn.w	r2, #8
 8007080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2204      	movs	r2, #4
 8007086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f961 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 800709c:	e005      	b.n	80070aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f953 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f964 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d122      	bne.n	8007104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d11b      	bne.n	8007104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0210 	mvn.w	r2, #16
 80070d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2208      	movs	r2, #8
 80070da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f937 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 80070f0:	e005      	b.n	80070fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f929 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f93a 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b01      	cmp	r3, #1
 8007110:	d10e      	bne.n	8007130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d107      	bne.n	8007130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0201 	mvn.w	r2, #1
 8007128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fb fc46 	bl	80029bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d10e      	bne.n	800715c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d107      	bne.n	800715c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fab2 	bl	80076c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d10e      	bne.n	8007188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	d107      	bne.n	8007188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f8ff 	bl	8007386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d10e      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d107      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0220 	mvn.w	r2, #32
 80071ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa7c 	bl	80076ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_TIM_ConfigClockSource+0x1c>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e0b4      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x186>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007210:	d03e      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0xd4>
 8007212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007216:	f200 8087 	bhi.w	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721e:	f000 8086 	beq.w	800732e <HAL_TIM_ConfigClockSource+0x172>
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007226:	d87f      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007228:	2b70      	cmp	r3, #112	; 0x70
 800722a:	d01a      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0xa6>
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d87b      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007230:	2b60      	cmp	r3, #96	; 0x60
 8007232:	d050      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x11a>
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d877      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007238:	2b50      	cmp	r3, #80	; 0x50
 800723a:	d03c      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0xfa>
 800723c:	2b50      	cmp	r3, #80	; 0x50
 800723e:	d873      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d058      	beq.n	80072f6 <HAL_TIM_ConfigClockSource+0x13a>
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d86f      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007248:	2b30      	cmp	r3, #48	; 0x30
 800724a:	d064      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15a>
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d86b      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d060      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15a>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d867      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05c      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15a>
 800725c:	2b10      	cmp	r3, #16
 800725e:	d05a      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15a>
 8007260:	e062      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6899      	ldr	r1, [r3, #8]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f000 f98d 	bl	8007590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	609a      	str	r2, [r3, #8]
      break;
 800728e:	e04f      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6899      	ldr	r1, [r3, #8]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f000 f976 	bl	8007590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072b2:	609a      	str	r2, [r3, #8]
      break;
 80072b4:	e03c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6859      	ldr	r1, [r3, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f000 f8ea 	bl	800749c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2150      	movs	r1, #80	; 0x50
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f943 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 80072d4:	e02c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f000 f909 	bl	80074fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2160      	movs	r1, #96	; 0x60
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f933 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 80072f4:	e01c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	6859      	ldr	r1, [r3, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	461a      	mov	r2, r3
 8007304:	f000 f8ca 	bl	800749c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2140      	movs	r1, #64	; 0x40
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f923 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 8007314:	e00c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f000 f91a 	bl	800755a <TIM_ITRx_SetConfig>
      break;
 8007326:	e003      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
      break;
 800732c:	e000      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800732e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a34      	ldr	r2, [pc, #208]	; (8007480 <TIM_Base_SetConfig+0xe4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00f      	beq.n	80073d4 <TIM_Base_SetConfig+0x38>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ba:	d00b      	beq.n	80073d4 <TIM_Base_SetConfig+0x38>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a31      	ldr	r2, [pc, #196]	; (8007484 <TIM_Base_SetConfig+0xe8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d007      	beq.n	80073d4 <TIM_Base_SetConfig+0x38>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a30      	ldr	r2, [pc, #192]	; (8007488 <TIM_Base_SetConfig+0xec>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_Base_SetConfig+0x38>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a2f      	ldr	r2, [pc, #188]	; (800748c <TIM_Base_SetConfig+0xf0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a25      	ldr	r2, [pc, #148]	; (8007480 <TIM_Base_SetConfig+0xe4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01b      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f4:	d017      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a22      	ldr	r2, [pc, #136]	; (8007484 <TIM_Base_SetConfig+0xe8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a21      	ldr	r2, [pc, #132]	; (8007488 <TIM_Base_SetConfig+0xec>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00f      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a20      	ldr	r2, [pc, #128]	; (800748c <TIM_Base_SetConfig+0xf0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00b      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1f      	ldr	r2, [pc, #124]	; (8007490 <TIM_Base_SetConfig+0xf4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d007      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <TIM_Base_SetConfig+0xf8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d003      	beq.n	8007426 <TIM_Base_SetConfig+0x8a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1d      	ldr	r2, [pc, #116]	; (8007498 <TIM_Base_SetConfig+0xfc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d108      	bne.n	8007438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a08      	ldr	r2, [pc, #32]	; (8007480 <TIM_Base_SetConfig+0xe4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d103      	bne.n	800746c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	615a      	str	r2, [r3, #20]
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40010000 	.word	0x40010000
 8007484:	40000400 	.word	0x40000400
 8007488:	40000800 	.word	0x40000800
 800748c:	40000c00 	.word	0x40000c00
 8007490:	40014000 	.word	0x40014000
 8007494:	40014400 	.word	0x40014400
 8007498:	40014800 	.word	0x40014800

0800749c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f023 0201 	bic.w	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f023 030a 	bic.w	r3, r3, #10
 80074d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0210 	bic.w	r2, r3, #16
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	f043 0307 	orr.w	r3, r3, #7
 800757c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	609a      	str	r2, [r3, #8]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	021a      	lsls	r2, r3, #8
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	609a      	str	r2, [r3, #8]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e050      	b.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d013      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a18      	ldr	r2, [pc, #96]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a16      	ldr	r2, [pc, #88]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a13      	ldr	r2, [pc, #76]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10c      	bne.n	8007678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4313      	orrs	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40014000 	.word	0x40014000

080076ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e03f      	b.n	8007766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7fb feee 	bl	80034dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2224      	movs	r2, #36	; 0x24
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fba5 	bl	8007e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800772c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695a      	ldr	r2, [r3, #20]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800773c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800774c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b08a      	sub	sp, #40	; 0x28
 8007772:	af02      	add	r7, sp, #8
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b20      	cmp	r3, #32
 800778c:	d17c      	bne.n	8007888 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_UART_Transmit+0x2c>
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e075      	b.n	800788a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_UART_Transmit+0x3e>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e06e      	b.n	800788a <HAL_UART_Transmit+0x11c>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2221      	movs	r2, #33	; 0x21
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077c2:	f7fc fa1f 	bl	8003c04 <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077dc:	d108      	bne.n	80077f0 <HAL_UART_Transmit+0x82>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	e003      	b.n	80077f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007800:	e02a      	b.n	8007858 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2200      	movs	r2, #0
 800780a:	2180      	movs	r1, #128	; 0x80
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f992 	bl	8007b36 <UART_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e036      	b.n	800788a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	3302      	adds	r3, #2
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e007      	b.n	800784a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1cf      	bne.n	8007802 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2200      	movs	r2, #0
 800786a:	2140      	movs	r1, #64	; 0x40
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f962 	bl	8007b36 <UART_WaitOnFlagUntilTimeout>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e006      	b.n	800788a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	4613      	mov	r3, r2
 800789e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d11d      	bne.n	80078e8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_UART_Receive_DMA+0x26>
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e016      	b.n	80078ea <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_UART_Receive_DMA+0x38>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e00f      	b.n	80078ea <HAL_UART_Receive_DMA+0x58>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	461a      	mov	r2, r3
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f998 	bl	8007c14 <UART_Start_Receive_DMA>
 80078e4:	4603      	mov	r3, r0
 80078e6:	e000      	b.n	80078ea <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	460b      	mov	r3, r1
 8007938:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b09c      	sub	sp, #112	; 0x70
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d172      	bne.n	8007a48 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007964:	2200      	movs	r2, #0
 8007966:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	330c      	adds	r3, #12
 800796e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800797e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007988:	65ba      	str	r2, [r7, #88]	; 0x58
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800798e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e5      	bne.n	8007968 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3314      	adds	r3, #20
 80079a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	667b      	str	r3, [r7, #100]	; 0x64
 80079b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3314      	adds	r3, #20
 80079ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079bc:	647a      	str	r2, [r7, #68]	; 0x44
 80079be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3314      	adds	r3, #20
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	623b      	str	r3, [r7, #32]
   return(result);
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e6:	663b      	str	r3, [r7, #96]	; 0x60
 80079e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3314      	adds	r3, #20
 80079ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079f0:	633a      	str	r2, [r7, #48]	; 0x30
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e5      	bne.n	80079d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d119      	bne.n	8007a48 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0310 	bic.w	r3, r3, #16
 8007a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a34:	61fa      	str	r2, [r7, #28]
 8007a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	617b      	str	r3, [r7, #20]
   return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e5      	bne.n	8007a14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d106      	bne.n	8007a5e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a54:	4619      	mov	r1, r3
 8007a56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a58:	f7ff ff69 	bl	800792e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a5c:	e002      	b.n	8007a64 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007a5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a60:	f7ff ff47 	bl	80078f2 <HAL_UART_RxCpltCallback>
}
 8007a64:	bf00      	nop
 8007a66:	3770      	adds	r7, #112	; 0x70
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d108      	bne.n	8007a94 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff ff4e 	bl	800792e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a92:	e002      	b.n	8007a9a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff ff36 	bl	8007906 <HAL_UART_RxHalfCpltCallback>
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abe:	2b80      	cmp	r3, #128	; 0x80
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	2300      	movne	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b21      	cmp	r3, #33	; 0x21
 8007ad4:	d108      	bne.n	8007ae8 <UART_DMAError+0x46>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ae2:	68b8      	ldr	r0, [r7, #8]
 8007ae4:	f000 f934 	bl	8007d50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	bf0c      	ite	eq
 8007af6:	2301      	moveq	r3, #1
 8007af8:	2300      	movne	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b22      	cmp	r3, #34	; 0x22
 8007b08:	d108      	bne.n	8007b1c <UART_DMAError+0x7a>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b16:	68b8      	ldr	r0, [r7, #8]
 8007b18:	f000 f942 	bl	8007da0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	f043 0210 	orr.w	r2, r3, #16
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b28:	68b8      	ldr	r0, [r7, #8]
 8007b2a:	f7ff fef6 	bl	800791a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b090      	sub	sp, #64	; 0x40
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b46:	e050      	b.n	8007bea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d04c      	beq.n	8007bea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b56:	f7fc f855 	bl	8003c04 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d241      	bcs.n	8007bea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b86:	637a      	str	r2, [r7, #52]	; 0x34
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3314      	adds	r3, #20
 8007ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f023 0301 	bic.w	r3, r3, #1
 8007bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bba:	623a      	str	r2, [r7, #32]
 8007bbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	69f9      	ldr	r1, [r7, #28]
 8007bc0:	6a3a      	ldr	r2, [r7, #32]
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e5      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e00f      	b.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d09f      	beq.n	8007b48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3740      	adds	r7, #64	; 0x40
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b098      	sub	sp, #96	; 0x60
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	88fa      	ldrh	r2, [r7, #6]
 8007c2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2222      	movs	r2, #34	; 0x22
 8007c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	4a40      	ldr	r2, [pc, #256]	; (8007d44 <UART_Start_Receive_DMA+0x130>)
 8007c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	4a3f      	ldr	r2, [pc, #252]	; (8007d48 <UART_Start_Receive_DMA+0x134>)
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	4a3e      	ldr	r2, [pc, #248]	; (8007d4c <UART_Start_Receive_DMA+0x138>)
 8007c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	2200      	movs	r2, #0
 8007c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c5c:	f107 0308 	add.w	r3, r7, #8
 8007c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	f7fc f9b6 	bl	8003fe4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	613b      	str	r3, [r7, #16]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	613b      	str	r3, [r7, #16]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	613b      	str	r3, [r7, #16]
 8007c8c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d019      	beq.n	8007cd2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e5      	bne.n	8007c9e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3314      	adds	r3, #20
 8007cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	f043 0301 	orr.w	r3, r3, #1
 8007ce8:	657b      	str	r3, [r7, #84]	; 0x54
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cf2:	63ba      	str	r2, [r7, #56]	; 0x38
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e5      	bne.n	8007cd2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3314      	adds	r3, #20
 8007d0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	617b      	str	r3, [r7, #20]
   return(result);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3314      	adds	r3, #20
 8007d24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d26:	627a      	str	r2, [r7, #36]	; 0x24
 8007d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6a39      	ldr	r1, [r7, #32]
 8007d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e5      	bne.n	8007d06 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3760      	adds	r7, #96	; 0x60
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	08007947 	.word	0x08007947
 8007d48:	08007a6d 	.word	0x08007a6d
 8007d4c:	08007aa3 	.word	0x08007aa3

08007d50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b089      	sub	sp, #36	; 0x24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d6e:	61fb      	str	r3, [r7, #28]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	330c      	adds	r3, #12
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	61ba      	str	r2, [r7, #24]
 8007d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6979      	ldr	r1, [r7, #20]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	613b      	str	r3, [r7, #16]
   return(result);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e5      	bne.n	8007d58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d94:	bf00      	nop
 8007d96:	3724      	adds	r7, #36	; 0x24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b095      	sub	sp, #84	; 0x54
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	330c      	adds	r3, #12
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dc8:	643a      	str	r2, [r7, #64]	; 0x40
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e5      	bne.n	8007da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3314      	adds	r3, #20
 8007de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f023 0301 	bic.w	r3, r3, #1
 8007df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d119      	bne.n	8007e4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f023 0310 	bic.w	r3, r3, #16
 8007e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e38:	61ba      	str	r2, [r7, #24]
 8007e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6979      	ldr	r1, [r7, #20]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	613b      	str	r3, [r7, #16]
   return(result);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e5a:	bf00      	nop
 8007e5c:	3754      	adds	r7, #84	; 0x54
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e6c:	b0c0      	sub	sp, #256	; 0x100
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e84:	68d9      	ldr	r1, [r3, #12]
 8007e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	ea40 0301 	orr.w	r3, r0, r1
 8007e90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ec0:	f021 010c 	bic.w	r1, r1, #12
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee2:	6999      	ldr	r1, [r3, #24]
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	ea40 0301 	orr.w	r3, r0, r1
 8007eee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b8f      	ldr	r3, [pc, #572]	; (8008134 <UART_SetConfig+0x2cc>)
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d005      	beq.n	8007f08 <UART_SetConfig+0xa0>
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b8d      	ldr	r3, [pc, #564]	; (8008138 <UART_SetConfig+0x2d0>)
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d104      	bne.n	8007f12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f08:	f7fe fc12 	bl	8006730 <HAL_RCC_GetPCLK2Freq>
 8007f0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f10:	e003      	b.n	8007f1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f12:	f7fe fbf9 	bl	8006708 <HAL_RCC_GetPCLK1Freq>
 8007f16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f24:	f040 810c 	bne.w	8008140 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	1891      	adds	r1, r2, r2
 8007f40:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f42:	415b      	adcs	r3, r3
 8007f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	eb12 0801 	adds.w	r8, r2, r1
 8007f50:	4629      	mov	r1, r5
 8007f52:	eb43 0901 	adc.w	r9, r3, r1
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f6a:	4690      	mov	r8, r2
 8007f6c:	4699      	mov	r9, r3
 8007f6e:	4623      	mov	r3, r4
 8007f70:	eb18 0303 	adds.w	r3, r8, r3
 8007f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f78:	462b      	mov	r3, r5
 8007f7a:	eb49 0303 	adc.w	r3, r9, r3
 8007f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f96:	460b      	mov	r3, r1
 8007f98:	18db      	adds	r3, r3, r3
 8007f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	eb42 0303 	adc.w	r3, r2, r3
 8007fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8007fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007fa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fac:	f7f8 fec4 	bl	8000d38 <__aeabi_uldivmod>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4b61      	ldr	r3, [pc, #388]	; (800813c <UART_SetConfig+0x2d4>)
 8007fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	011c      	lsls	r4, r3, #4
 8007fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	1891      	adds	r1, r2, r2
 8007fd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fd8:	415b      	adcs	r3, r3
 8007fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fe0:	4641      	mov	r1, r8
 8007fe2:	eb12 0a01 	adds.w	sl, r2, r1
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	eb43 0b01 	adc.w	fp, r3, r1
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ff8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008000:	4692      	mov	sl, r2
 8008002:	469b      	mov	fp, r3
 8008004:	4643      	mov	r3, r8
 8008006:	eb1a 0303 	adds.w	r3, sl, r3
 800800a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800800e:	464b      	mov	r3, r9
 8008010:	eb4b 0303 	adc.w	r3, fp, r3
 8008014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008024:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008028:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800802c:	460b      	mov	r3, r1
 800802e:	18db      	adds	r3, r3, r3
 8008030:	643b      	str	r3, [r7, #64]	; 0x40
 8008032:	4613      	mov	r3, r2
 8008034:	eb42 0303 	adc.w	r3, r2, r3
 8008038:	647b      	str	r3, [r7, #68]	; 0x44
 800803a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800803e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008042:	f7f8 fe79 	bl	8000d38 <__aeabi_uldivmod>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4611      	mov	r1, r2
 800804c:	4b3b      	ldr	r3, [pc, #236]	; (800813c <UART_SetConfig+0x2d4>)
 800804e:	fba3 2301 	umull	r2, r3, r3, r1
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	2264      	movs	r2, #100	; 0x64
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	1acb      	subs	r3, r1, r3
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008062:	4b36      	ldr	r3, [pc, #216]	; (800813c <UART_SetConfig+0x2d4>)
 8008064:	fba3 2302 	umull	r2, r3, r3, r2
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008070:	441c      	add	r4, r3
 8008072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008076:	2200      	movs	r2, #0
 8008078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800807c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008080:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008084:	4642      	mov	r2, r8
 8008086:	464b      	mov	r3, r9
 8008088:	1891      	adds	r1, r2, r2
 800808a:	63b9      	str	r1, [r7, #56]	; 0x38
 800808c:	415b      	adcs	r3, r3
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008094:	4641      	mov	r1, r8
 8008096:	1851      	adds	r1, r2, r1
 8008098:	6339      	str	r1, [r7, #48]	; 0x30
 800809a:	4649      	mov	r1, r9
 800809c:	414b      	adcs	r3, r1
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080ac:	4659      	mov	r1, fp
 80080ae:	00cb      	lsls	r3, r1, #3
 80080b0:	4651      	mov	r1, sl
 80080b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080b6:	4651      	mov	r1, sl
 80080b8:	00ca      	lsls	r2, r1, #3
 80080ba:	4610      	mov	r0, r2
 80080bc:	4619      	mov	r1, r3
 80080be:	4603      	mov	r3, r0
 80080c0:	4642      	mov	r2, r8
 80080c2:	189b      	adds	r3, r3, r2
 80080c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080c8:	464b      	mov	r3, r9
 80080ca:	460a      	mov	r2, r1
 80080cc:	eb42 0303 	adc.w	r3, r2, r3
 80080d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080e8:	460b      	mov	r3, r1
 80080ea:	18db      	adds	r3, r3, r3
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ee:	4613      	mov	r3, r2
 80080f0:	eb42 0303 	adc.w	r3, r2, r3
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080fe:	f7f8 fe1b 	bl	8000d38 <__aeabi_uldivmod>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <UART_SetConfig+0x2d4>)
 8008108:	fba3 1302 	umull	r1, r3, r3, r2
 800810c:	095b      	lsrs	r3, r3, #5
 800810e:	2164      	movs	r1, #100	; 0x64
 8008110:	fb01 f303 	mul.w	r3, r1, r3
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	3332      	adds	r3, #50	; 0x32
 800811a:	4a08      	ldr	r2, [pc, #32]	; (800813c <UART_SetConfig+0x2d4>)
 800811c:	fba2 2303 	umull	r2, r3, r2, r3
 8008120:	095b      	lsrs	r3, r3, #5
 8008122:	f003 0207 	and.w	r2, r3, #7
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4422      	add	r2, r4
 800812e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008130:	e105      	b.n	800833e <UART_SetConfig+0x4d6>
 8008132:	bf00      	nop
 8008134:	40011000 	.word	0x40011000
 8008138:	40011400 	.word	0x40011400
 800813c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008144:	2200      	movs	r2, #0
 8008146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800814a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800814e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008152:	4642      	mov	r2, r8
 8008154:	464b      	mov	r3, r9
 8008156:	1891      	adds	r1, r2, r2
 8008158:	6239      	str	r1, [r7, #32]
 800815a:	415b      	adcs	r3, r3
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
 800815e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008162:	4641      	mov	r1, r8
 8008164:	1854      	adds	r4, r2, r1
 8008166:	4649      	mov	r1, r9
 8008168:	eb43 0501 	adc.w	r5, r3, r1
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	00eb      	lsls	r3, r5, #3
 8008176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800817a:	00e2      	lsls	r2, r4, #3
 800817c:	4614      	mov	r4, r2
 800817e:	461d      	mov	r5, r3
 8008180:	4643      	mov	r3, r8
 8008182:	18e3      	adds	r3, r4, r3
 8008184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008188:	464b      	mov	r3, r9
 800818a:	eb45 0303 	adc.w	r3, r5, r3
 800818e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800819e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081ae:	4629      	mov	r1, r5
 80081b0:	008b      	lsls	r3, r1, #2
 80081b2:	4621      	mov	r1, r4
 80081b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081b8:	4621      	mov	r1, r4
 80081ba:	008a      	lsls	r2, r1, #2
 80081bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081c0:	f7f8 fdba 	bl	8000d38 <__aeabi_uldivmod>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4b60      	ldr	r3, [pc, #384]	; (800834c <UART_SetConfig+0x4e4>)
 80081ca:	fba3 2302 	umull	r2, r3, r3, r2
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	011c      	lsls	r4, r3, #4
 80081d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081e4:	4642      	mov	r2, r8
 80081e6:	464b      	mov	r3, r9
 80081e8:	1891      	adds	r1, r2, r2
 80081ea:	61b9      	str	r1, [r7, #24]
 80081ec:	415b      	adcs	r3, r3
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081f4:	4641      	mov	r1, r8
 80081f6:	1851      	adds	r1, r2, r1
 80081f8:	6139      	str	r1, [r7, #16]
 80081fa:	4649      	mov	r1, r9
 80081fc:	414b      	adcs	r3, r1
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800820c:	4659      	mov	r1, fp
 800820e:	00cb      	lsls	r3, r1, #3
 8008210:	4651      	mov	r1, sl
 8008212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008216:	4651      	mov	r1, sl
 8008218:	00ca      	lsls	r2, r1, #3
 800821a:	4610      	mov	r0, r2
 800821c:	4619      	mov	r1, r3
 800821e:	4603      	mov	r3, r0
 8008220:	4642      	mov	r2, r8
 8008222:	189b      	adds	r3, r3, r2
 8008224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008228:	464b      	mov	r3, r9
 800822a:	460a      	mov	r2, r1
 800822c:	eb42 0303 	adc.w	r3, r2, r3
 8008230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	67bb      	str	r3, [r7, #120]	; 0x78
 800823e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800824c:	4649      	mov	r1, r9
 800824e:	008b      	lsls	r3, r1, #2
 8008250:	4641      	mov	r1, r8
 8008252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008256:	4641      	mov	r1, r8
 8008258:	008a      	lsls	r2, r1, #2
 800825a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800825e:	f7f8 fd6b 	bl	8000d38 <__aeabi_uldivmod>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4b39      	ldr	r3, [pc, #228]	; (800834c <UART_SetConfig+0x4e4>)
 8008268:	fba3 1302 	umull	r1, r3, r3, r2
 800826c:	095b      	lsrs	r3, r3, #5
 800826e:	2164      	movs	r1, #100	; 0x64
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	3332      	adds	r3, #50	; 0x32
 800827a:	4a34      	ldr	r2, [pc, #208]	; (800834c <UART_SetConfig+0x4e4>)
 800827c:	fba2 2303 	umull	r2, r3, r2, r3
 8008280:	095b      	lsrs	r3, r3, #5
 8008282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008286:	441c      	add	r4, r3
 8008288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800828c:	2200      	movs	r2, #0
 800828e:	673b      	str	r3, [r7, #112]	; 0x70
 8008290:	677a      	str	r2, [r7, #116]	; 0x74
 8008292:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008296:	4642      	mov	r2, r8
 8008298:	464b      	mov	r3, r9
 800829a:	1891      	adds	r1, r2, r2
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	415b      	adcs	r3, r3
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082a6:	4641      	mov	r1, r8
 80082a8:	1851      	adds	r1, r2, r1
 80082aa:	6039      	str	r1, [r7, #0]
 80082ac:	4649      	mov	r1, r9
 80082ae:	414b      	adcs	r3, r1
 80082b0:	607b      	str	r3, [r7, #4]
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082be:	4659      	mov	r1, fp
 80082c0:	00cb      	lsls	r3, r1, #3
 80082c2:	4651      	mov	r1, sl
 80082c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082c8:	4651      	mov	r1, sl
 80082ca:	00ca      	lsls	r2, r1, #3
 80082cc:	4610      	mov	r0, r2
 80082ce:	4619      	mov	r1, r3
 80082d0:	4603      	mov	r3, r0
 80082d2:	4642      	mov	r2, r8
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082d8:	464b      	mov	r3, r9
 80082da:	460a      	mov	r2, r1
 80082dc:	eb42 0303 	adc.w	r3, r2, r3
 80082e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	663b      	str	r3, [r7, #96]	; 0x60
 80082ec:	667a      	str	r2, [r7, #100]	; 0x64
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082fa:	4649      	mov	r1, r9
 80082fc:	008b      	lsls	r3, r1, #2
 80082fe:	4641      	mov	r1, r8
 8008300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008304:	4641      	mov	r1, r8
 8008306:	008a      	lsls	r2, r1, #2
 8008308:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800830c:	f7f8 fd14 	bl	8000d38 <__aeabi_uldivmod>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <UART_SetConfig+0x4e4>)
 8008316:	fba3 1302 	umull	r1, r3, r3, r2
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	2164      	movs	r1, #100	; 0x64
 800831e:	fb01 f303 	mul.w	r3, r1, r3
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	3332      	adds	r3, #50	; 0x32
 8008328:	4a08      	ldr	r2, [pc, #32]	; (800834c <UART_SetConfig+0x4e4>)
 800832a:	fba2 2303 	umull	r2, r3, r2, r3
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4422      	add	r2, r4
 800833c:	609a      	str	r2, [r3, #8]
}
 800833e:	bf00      	nop
 8008340:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008344:	46bd      	mov	sp, r7
 8008346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800834a:	bf00      	nop
 800834c:	51eb851f 	.word	0x51eb851f

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000010 	.word	0x20000010

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	; (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	; (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	; (80083a0 <__libc_init_array+0x44>)
 8008370:	f004 fd34 	bl	800cddc <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	0800d4dc 	.word	0x0800d4dc
 8008398:	0800d4dc 	.word	0x0800d4dc
 800839c:	0800d4dc 	.word	0x0800d4dc
 80083a0:	0800d4e0 	.word	0x0800d4e0

080083a4 <memset>:
 80083a4:	4402      	add	r2, r0
 80083a6:	4603      	mov	r3, r0
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d100      	bne.n	80083ae <memset+0xa>
 80083ac:	4770      	bx	lr
 80083ae:	f803 1b01 	strb.w	r1, [r3], #1
 80083b2:	e7f9      	b.n	80083a8 <memset+0x4>

080083b4 <__cvt>:
 80083b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b8:	ec55 4b10 	vmov	r4, r5, d0
 80083bc:	2d00      	cmp	r5, #0
 80083be:	460e      	mov	r6, r1
 80083c0:	4619      	mov	r1, r3
 80083c2:	462b      	mov	r3, r5
 80083c4:	bfbb      	ittet	lt
 80083c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083ca:	461d      	movlt	r5, r3
 80083cc:	2300      	movge	r3, #0
 80083ce:	232d      	movlt	r3, #45	; 0x2d
 80083d0:	700b      	strb	r3, [r1, #0]
 80083d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083d8:	4691      	mov	r9, r2
 80083da:	f023 0820 	bic.w	r8, r3, #32
 80083de:	bfbc      	itt	lt
 80083e0:	4622      	movlt	r2, r4
 80083e2:	4614      	movlt	r4, r2
 80083e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083e8:	d005      	beq.n	80083f6 <__cvt+0x42>
 80083ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083ee:	d100      	bne.n	80083f2 <__cvt+0x3e>
 80083f0:	3601      	adds	r6, #1
 80083f2:	2102      	movs	r1, #2
 80083f4:	e000      	b.n	80083f8 <__cvt+0x44>
 80083f6:	2103      	movs	r1, #3
 80083f8:	ab03      	add	r3, sp, #12
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	ab02      	add	r3, sp, #8
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	ec45 4b10 	vmov	d0, r4, r5
 8008404:	4653      	mov	r3, sl
 8008406:	4632      	mov	r2, r6
 8008408:	f001 ff12 	bl	800a230 <_dtoa_r>
 800840c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008410:	4607      	mov	r7, r0
 8008412:	d102      	bne.n	800841a <__cvt+0x66>
 8008414:	f019 0f01 	tst.w	r9, #1
 8008418:	d022      	beq.n	8008460 <__cvt+0xac>
 800841a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800841e:	eb07 0906 	add.w	r9, r7, r6
 8008422:	d110      	bne.n	8008446 <__cvt+0x92>
 8008424:	783b      	ldrb	r3, [r7, #0]
 8008426:	2b30      	cmp	r3, #48	; 0x30
 8008428:	d10a      	bne.n	8008440 <__cvt+0x8c>
 800842a:	2200      	movs	r2, #0
 800842c:	2300      	movs	r3, #0
 800842e:	4620      	mov	r0, r4
 8008430:	4629      	mov	r1, r5
 8008432:	f7f8 fb51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008436:	b918      	cbnz	r0, 8008440 <__cvt+0x8c>
 8008438:	f1c6 0601 	rsb	r6, r6, #1
 800843c:	f8ca 6000 	str.w	r6, [sl]
 8008440:	f8da 3000 	ldr.w	r3, [sl]
 8008444:	4499      	add	r9, r3
 8008446:	2200      	movs	r2, #0
 8008448:	2300      	movs	r3, #0
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f8 fb43 	bl	8000ad8 <__aeabi_dcmpeq>
 8008452:	b108      	cbz	r0, 8008458 <__cvt+0xa4>
 8008454:	f8cd 900c 	str.w	r9, [sp, #12]
 8008458:	2230      	movs	r2, #48	; 0x30
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	454b      	cmp	r3, r9
 800845e:	d307      	bcc.n	8008470 <__cvt+0xbc>
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008464:	1bdb      	subs	r3, r3, r7
 8008466:	4638      	mov	r0, r7
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	b004      	add	sp, #16
 800846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008470:	1c59      	adds	r1, r3, #1
 8008472:	9103      	str	r1, [sp, #12]
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e7f0      	b.n	800845a <__cvt+0xa6>

08008478 <__exponent>:
 8008478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800847a:	4603      	mov	r3, r0
 800847c:	2900      	cmp	r1, #0
 800847e:	bfb8      	it	lt
 8008480:	4249      	neglt	r1, r1
 8008482:	f803 2b02 	strb.w	r2, [r3], #2
 8008486:	bfb4      	ite	lt
 8008488:	222d      	movlt	r2, #45	; 0x2d
 800848a:	222b      	movge	r2, #43	; 0x2b
 800848c:	2909      	cmp	r1, #9
 800848e:	7042      	strb	r2, [r0, #1]
 8008490:	dd2a      	ble.n	80084e8 <__exponent+0x70>
 8008492:	f10d 0407 	add.w	r4, sp, #7
 8008496:	46a4      	mov	ip, r4
 8008498:	270a      	movs	r7, #10
 800849a:	46a6      	mov	lr, r4
 800849c:	460a      	mov	r2, r1
 800849e:	fb91 f6f7 	sdiv	r6, r1, r7
 80084a2:	fb07 1516 	mls	r5, r7, r6, r1
 80084a6:	3530      	adds	r5, #48	; 0x30
 80084a8:	2a63      	cmp	r2, #99	; 0x63
 80084aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80084ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084b2:	4631      	mov	r1, r6
 80084b4:	dcf1      	bgt.n	800849a <__exponent+0x22>
 80084b6:	3130      	adds	r1, #48	; 0x30
 80084b8:	f1ae 0502 	sub.w	r5, lr, #2
 80084bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084c0:	1c44      	adds	r4, r0, #1
 80084c2:	4629      	mov	r1, r5
 80084c4:	4561      	cmp	r1, ip
 80084c6:	d30a      	bcc.n	80084de <__exponent+0x66>
 80084c8:	f10d 0209 	add.w	r2, sp, #9
 80084cc:	eba2 020e 	sub.w	r2, r2, lr
 80084d0:	4565      	cmp	r5, ip
 80084d2:	bf88      	it	hi
 80084d4:	2200      	movhi	r2, #0
 80084d6:	4413      	add	r3, r2
 80084d8:	1a18      	subs	r0, r3, r0
 80084da:	b003      	add	sp, #12
 80084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084e6:	e7ed      	b.n	80084c4 <__exponent+0x4c>
 80084e8:	2330      	movs	r3, #48	; 0x30
 80084ea:	3130      	adds	r1, #48	; 0x30
 80084ec:	7083      	strb	r3, [r0, #2]
 80084ee:	70c1      	strb	r1, [r0, #3]
 80084f0:	1d03      	adds	r3, r0, #4
 80084f2:	e7f1      	b.n	80084d8 <__exponent+0x60>

080084f4 <_printf_float>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	ed2d 8b02 	vpush	{d8}
 80084fc:	b08d      	sub	sp, #52	; 0x34
 80084fe:	460c      	mov	r4, r1
 8008500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008504:	4616      	mov	r6, r2
 8008506:	461f      	mov	r7, r3
 8008508:	4605      	mov	r5, r0
 800850a:	f003 f9a5 	bl	800b858 <_localeconv_r>
 800850e:	f8d0 a000 	ldr.w	sl, [r0]
 8008512:	4650      	mov	r0, sl
 8008514:	f7f7 fe64 	bl	80001e0 <strlen>
 8008518:	2300      	movs	r3, #0
 800851a:	930a      	str	r3, [sp, #40]	; 0x28
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	9305      	str	r3, [sp, #20]
 8008520:	f8d8 3000 	ldr.w	r3, [r8]
 8008524:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008528:	3307      	adds	r3, #7
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	f103 0208 	add.w	r2, r3, #8
 8008532:	f8c8 2000 	str.w	r2, [r8]
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800853e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	f8cd 8018 	str.w	r8, [sp, #24]
 800854c:	ee08 0a10 	vmov	s16, r0
 8008550:	4b9f      	ldr	r3, [pc, #636]	; (80087d0 <_printf_float+0x2dc>)
 8008552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	f7f8 faef 	bl	8000b3c <__aeabi_dcmpun>
 800855e:	bb88      	cbnz	r0, 80085c4 <_printf_float+0xd0>
 8008560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008564:	4b9a      	ldr	r3, [pc, #616]	; (80087d0 <_printf_float+0x2dc>)
 8008566:	f04f 32ff 	mov.w	r2, #4294967295
 800856a:	f7f8 fac9 	bl	8000b00 <__aeabi_dcmple>
 800856e:	bb48      	cbnz	r0, 80085c4 <_printf_float+0xd0>
 8008570:	2200      	movs	r2, #0
 8008572:	2300      	movs	r3, #0
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 fab8 	bl	8000aec <__aeabi_dcmplt>
 800857c:	b110      	cbz	r0, 8008584 <_printf_float+0x90>
 800857e:	232d      	movs	r3, #45	; 0x2d
 8008580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008584:	4b93      	ldr	r3, [pc, #588]	; (80087d4 <_printf_float+0x2e0>)
 8008586:	4894      	ldr	r0, [pc, #592]	; (80087d8 <_printf_float+0x2e4>)
 8008588:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800858c:	bf94      	ite	ls
 800858e:	4698      	movls	r8, r3
 8008590:	4680      	movhi	r8, r0
 8008592:	2303      	movs	r3, #3
 8008594:	6123      	str	r3, [r4, #16]
 8008596:	9b05      	ldr	r3, [sp, #20]
 8008598:	f023 0204 	bic.w	r2, r3, #4
 800859c:	6022      	str	r2, [r4, #0]
 800859e:	f04f 0900 	mov.w	r9, #0
 80085a2:	9700      	str	r7, [sp, #0]
 80085a4:	4633      	mov	r3, r6
 80085a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80085a8:	4621      	mov	r1, r4
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 f9d8 	bl	8008960 <_printf_common>
 80085b0:	3001      	adds	r0, #1
 80085b2:	f040 8090 	bne.w	80086d6 <_printf_float+0x1e2>
 80085b6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ba:	b00d      	add	sp, #52	; 0x34
 80085bc:	ecbd 8b02 	vpop	{d8}
 80085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	4640      	mov	r0, r8
 80085ca:	4649      	mov	r1, r9
 80085cc:	f7f8 fab6 	bl	8000b3c <__aeabi_dcmpun>
 80085d0:	b140      	cbz	r0, 80085e4 <_printf_float+0xf0>
 80085d2:	464b      	mov	r3, r9
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfbc      	itt	lt
 80085d8:	232d      	movlt	r3, #45	; 0x2d
 80085da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085de:	487f      	ldr	r0, [pc, #508]	; (80087dc <_printf_float+0x2e8>)
 80085e0:	4b7f      	ldr	r3, [pc, #508]	; (80087e0 <_printf_float+0x2ec>)
 80085e2:	e7d1      	b.n	8008588 <_printf_float+0x94>
 80085e4:	6863      	ldr	r3, [r4, #4]
 80085e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085ea:	9206      	str	r2, [sp, #24]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	d13f      	bne.n	8008670 <_printf_float+0x17c>
 80085f0:	2306      	movs	r3, #6
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	9b05      	ldr	r3, [sp, #20]
 80085f6:	6861      	ldr	r1, [r4, #4]
 80085f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085fc:	2300      	movs	r3, #0
 80085fe:	9303      	str	r3, [sp, #12]
 8008600:	ab0a      	add	r3, sp, #40	; 0x28
 8008602:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008606:	ab09      	add	r3, sp, #36	; 0x24
 8008608:	ec49 8b10 	vmov	d0, r8, r9
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	6022      	str	r2, [r4, #0]
 8008610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008614:	4628      	mov	r0, r5
 8008616:	f7ff fecd 	bl	80083b4 <__cvt>
 800861a:	9b06      	ldr	r3, [sp, #24]
 800861c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800861e:	2b47      	cmp	r3, #71	; 0x47
 8008620:	4680      	mov	r8, r0
 8008622:	d108      	bne.n	8008636 <_printf_float+0x142>
 8008624:	1cc8      	adds	r0, r1, #3
 8008626:	db02      	blt.n	800862e <_printf_float+0x13a>
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	4299      	cmp	r1, r3
 800862c:	dd41      	ble.n	80086b2 <_printf_float+0x1be>
 800862e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008632:	fa5f fb8b 	uxtb.w	fp, fp
 8008636:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800863a:	d820      	bhi.n	800867e <_printf_float+0x18a>
 800863c:	3901      	subs	r1, #1
 800863e:	465a      	mov	r2, fp
 8008640:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008644:	9109      	str	r1, [sp, #36]	; 0x24
 8008646:	f7ff ff17 	bl	8008478 <__exponent>
 800864a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800864c:	1813      	adds	r3, r2, r0
 800864e:	2a01      	cmp	r2, #1
 8008650:	4681      	mov	r9, r0
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	dc02      	bgt.n	800865c <_printf_float+0x168>
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	07d2      	lsls	r2, r2, #31
 800865a:	d501      	bpl.n	8008660 <_printf_float+0x16c>
 800865c:	3301      	adds	r3, #1
 800865e:	6123      	str	r3, [r4, #16]
 8008660:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008664:	2b00      	cmp	r3, #0
 8008666:	d09c      	beq.n	80085a2 <_printf_float+0xae>
 8008668:	232d      	movs	r3, #45	; 0x2d
 800866a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800866e:	e798      	b.n	80085a2 <_printf_float+0xae>
 8008670:	9a06      	ldr	r2, [sp, #24]
 8008672:	2a47      	cmp	r2, #71	; 0x47
 8008674:	d1be      	bne.n	80085f4 <_printf_float+0x100>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1bc      	bne.n	80085f4 <_printf_float+0x100>
 800867a:	2301      	movs	r3, #1
 800867c:	e7b9      	b.n	80085f2 <_printf_float+0xfe>
 800867e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008682:	d118      	bne.n	80086b6 <_printf_float+0x1c2>
 8008684:	2900      	cmp	r1, #0
 8008686:	6863      	ldr	r3, [r4, #4]
 8008688:	dd0b      	ble.n	80086a2 <_printf_float+0x1ae>
 800868a:	6121      	str	r1, [r4, #16]
 800868c:	b913      	cbnz	r3, 8008694 <_printf_float+0x1a0>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	07d0      	lsls	r0, r2, #31
 8008692:	d502      	bpl.n	800869a <_printf_float+0x1a6>
 8008694:	3301      	adds	r3, #1
 8008696:	440b      	add	r3, r1
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	65a1      	str	r1, [r4, #88]	; 0x58
 800869c:	f04f 0900 	mov.w	r9, #0
 80086a0:	e7de      	b.n	8008660 <_printf_float+0x16c>
 80086a2:	b913      	cbnz	r3, 80086aa <_printf_float+0x1b6>
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	07d2      	lsls	r2, r2, #31
 80086a8:	d501      	bpl.n	80086ae <_printf_float+0x1ba>
 80086aa:	3302      	adds	r3, #2
 80086ac:	e7f4      	b.n	8008698 <_printf_float+0x1a4>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e7f2      	b.n	8008698 <_printf_float+0x1a4>
 80086b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b8:	4299      	cmp	r1, r3
 80086ba:	db05      	blt.n	80086c8 <_printf_float+0x1d4>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	6121      	str	r1, [r4, #16]
 80086c0:	07d8      	lsls	r0, r3, #31
 80086c2:	d5ea      	bpl.n	800869a <_printf_float+0x1a6>
 80086c4:	1c4b      	adds	r3, r1, #1
 80086c6:	e7e7      	b.n	8008698 <_printf_float+0x1a4>
 80086c8:	2900      	cmp	r1, #0
 80086ca:	bfd4      	ite	le
 80086cc:	f1c1 0202 	rsble	r2, r1, #2
 80086d0:	2201      	movgt	r2, #1
 80086d2:	4413      	add	r3, r2
 80086d4:	e7e0      	b.n	8008698 <_printf_float+0x1a4>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	055a      	lsls	r2, r3, #21
 80086da:	d407      	bmi.n	80086ec <_printf_float+0x1f8>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	4642      	mov	r2, r8
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	d12c      	bne.n	8008744 <_printf_float+0x250>
 80086ea:	e764      	b.n	80085b6 <_printf_float+0xc2>
 80086ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086f0:	f240 80e0 	bls.w	80088b4 <_printf_float+0x3c0>
 80086f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086f8:	2200      	movs	r2, #0
 80086fa:	2300      	movs	r3, #0
 80086fc:	f7f8 f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008700:	2800      	cmp	r0, #0
 8008702:	d034      	beq.n	800876e <_printf_float+0x27a>
 8008704:	4a37      	ldr	r2, [pc, #220]	; (80087e4 <_printf_float+0x2f0>)
 8008706:	2301      	movs	r3, #1
 8008708:	4631      	mov	r1, r6
 800870a:	4628      	mov	r0, r5
 800870c:	47b8      	blx	r7
 800870e:	3001      	adds	r0, #1
 8008710:	f43f af51 	beq.w	80085b6 <_printf_float+0xc2>
 8008714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008718:	429a      	cmp	r2, r3
 800871a:	db02      	blt.n	8008722 <_printf_float+0x22e>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	07d8      	lsls	r0, r3, #31
 8008720:	d510      	bpl.n	8008744 <_printf_float+0x250>
 8008722:	ee18 3a10 	vmov	r3, s16
 8008726:	4652      	mov	r2, sl
 8008728:	4631      	mov	r1, r6
 800872a:	4628      	mov	r0, r5
 800872c:	47b8      	blx	r7
 800872e:	3001      	adds	r0, #1
 8008730:	f43f af41 	beq.w	80085b6 <_printf_float+0xc2>
 8008734:	f04f 0800 	mov.w	r8, #0
 8008738:	f104 091a 	add.w	r9, r4, #26
 800873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873e:	3b01      	subs	r3, #1
 8008740:	4543      	cmp	r3, r8
 8008742:	dc09      	bgt.n	8008758 <_printf_float+0x264>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	079b      	lsls	r3, r3, #30
 8008748:	f100 8105 	bmi.w	8008956 <_printf_float+0x462>
 800874c:	68e0      	ldr	r0, [r4, #12]
 800874e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008750:	4298      	cmp	r0, r3
 8008752:	bfb8      	it	lt
 8008754:	4618      	movlt	r0, r3
 8008756:	e730      	b.n	80085ba <_printf_float+0xc6>
 8008758:	2301      	movs	r3, #1
 800875a:	464a      	mov	r2, r9
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	f43f af27 	beq.w	80085b6 <_printf_float+0xc2>
 8008768:	f108 0801 	add.w	r8, r8, #1
 800876c:	e7e6      	b.n	800873c <_printf_float+0x248>
 800876e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	dc39      	bgt.n	80087e8 <_printf_float+0x2f4>
 8008774:	4a1b      	ldr	r2, [pc, #108]	; (80087e4 <_printf_float+0x2f0>)
 8008776:	2301      	movs	r3, #1
 8008778:	4631      	mov	r1, r6
 800877a:	4628      	mov	r0, r5
 800877c:	47b8      	blx	r7
 800877e:	3001      	adds	r0, #1
 8008780:	f43f af19 	beq.w	80085b6 <_printf_float+0xc2>
 8008784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008788:	4313      	orrs	r3, r2
 800878a:	d102      	bne.n	8008792 <_printf_float+0x29e>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	07d9      	lsls	r1, r3, #31
 8008790:	d5d8      	bpl.n	8008744 <_printf_float+0x250>
 8008792:	ee18 3a10 	vmov	r3, s16
 8008796:	4652      	mov	r2, sl
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f af09 	beq.w	80085b6 <_printf_float+0xc2>
 80087a4:	f04f 0900 	mov.w	r9, #0
 80087a8:	f104 0a1a 	add.w	sl, r4, #26
 80087ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ae:	425b      	negs	r3, r3
 80087b0:	454b      	cmp	r3, r9
 80087b2:	dc01      	bgt.n	80087b8 <_printf_float+0x2c4>
 80087b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b6:	e792      	b.n	80086de <_printf_float+0x1ea>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4652      	mov	r2, sl
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	f43f aef7 	beq.w	80085b6 <_printf_float+0xc2>
 80087c8:	f109 0901 	add.w	r9, r9, #1
 80087cc:	e7ee      	b.n	80087ac <_printf_float+0x2b8>
 80087ce:	bf00      	nop
 80087d0:	7fefffff 	.word	0x7fefffff
 80087d4:	0800d02c 	.word	0x0800d02c
 80087d8:	0800d030 	.word	0x0800d030
 80087dc:	0800d038 	.word	0x0800d038
 80087e0:	0800d034 	.word	0x0800d034
 80087e4:	0800d03c 	.word	0x0800d03c
 80087e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087ec:	429a      	cmp	r2, r3
 80087ee:	bfa8      	it	ge
 80087f0:	461a      	movge	r2, r3
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	4691      	mov	r9, r2
 80087f6:	dc37      	bgt.n	8008868 <_printf_float+0x374>
 80087f8:	f04f 0b00 	mov.w	fp, #0
 80087fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008800:	f104 021a 	add.w	r2, r4, #26
 8008804:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	eba3 0309 	sub.w	r3, r3, r9
 800880c:	455b      	cmp	r3, fp
 800880e:	dc33      	bgt.n	8008878 <_printf_float+0x384>
 8008810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008814:	429a      	cmp	r2, r3
 8008816:	db3b      	blt.n	8008890 <_printf_float+0x39c>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	07da      	lsls	r2, r3, #31
 800881c:	d438      	bmi.n	8008890 <_printf_float+0x39c>
 800881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008820:	9a05      	ldr	r2, [sp, #20]
 8008822:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008824:	1a9a      	subs	r2, r3, r2
 8008826:	eba3 0901 	sub.w	r9, r3, r1
 800882a:	4591      	cmp	r9, r2
 800882c:	bfa8      	it	ge
 800882e:	4691      	movge	r9, r2
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	dc35      	bgt.n	80088a2 <_printf_float+0x3ae>
 8008836:	f04f 0800 	mov.w	r8, #0
 800883a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800883e:	f104 0a1a 	add.w	sl, r4, #26
 8008842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	eba3 0309 	sub.w	r3, r3, r9
 800884c:	4543      	cmp	r3, r8
 800884e:	f77f af79 	ble.w	8008744 <_printf_float+0x250>
 8008852:	2301      	movs	r3, #1
 8008854:	4652      	mov	r2, sl
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	f43f aeaa 	beq.w	80085b6 <_printf_float+0xc2>
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	e7ec      	b.n	8008842 <_printf_float+0x34e>
 8008868:	4613      	mov	r3, r2
 800886a:	4631      	mov	r1, r6
 800886c:	4642      	mov	r2, r8
 800886e:	4628      	mov	r0, r5
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	d1c0      	bne.n	80087f8 <_printf_float+0x304>
 8008876:	e69e      	b.n	80085b6 <_printf_float+0xc2>
 8008878:	2301      	movs	r3, #1
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	9205      	str	r2, [sp, #20]
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f ae97 	beq.w	80085b6 <_printf_float+0xc2>
 8008888:	9a05      	ldr	r2, [sp, #20]
 800888a:	f10b 0b01 	add.w	fp, fp, #1
 800888e:	e7b9      	b.n	8008804 <_printf_float+0x310>
 8008890:	ee18 3a10 	vmov	r3, s16
 8008894:	4652      	mov	r2, sl
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	d1be      	bne.n	800881e <_printf_float+0x32a>
 80088a0:	e689      	b.n	80085b6 <_printf_float+0xc2>
 80088a2:	9a05      	ldr	r2, [sp, #20]
 80088a4:	464b      	mov	r3, r9
 80088a6:	4442      	add	r2, r8
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	d1c1      	bne.n	8008836 <_printf_float+0x342>
 80088b2:	e680      	b.n	80085b6 <_printf_float+0xc2>
 80088b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088b6:	2a01      	cmp	r2, #1
 80088b8:	dc01      	bgt.n	80088be <_printf_float+0x3ca>
 80088ba:	07db      	lsls	r3, r3, #31
 80088bc:	d538      	bpl.n	8008930 <_printf_float+0x43c>
 80088be:	2301      	movs	r3, #1
 80088c0:	4642      	mov	r2, r8
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f ae74 	beq.w	80085b6 <_printf_float+0xc2>
 80088ce:	ee18 3a10 	vmov	r3, s16
 80088d2:	4652      	mov	r2, sl
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f ae6b 	beq.w	80085b6 <_printf_float+0xc2>
 80088e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088e4:	2200      	movs	r2, #0
 80088e6:	2300      	movs	r3, #0
 80088e8:	f7f8 f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ec:	b9d8      	cbnz	r0, 8008926 <_printf_float+0x432>
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	f108 0201 	add.w	r2, r8, #1
 80088f4:	3b01      	subs	r3, #1
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	d10e      	bne.n	800891e <_printf_float+0x42a>
 8008900:	e659      	b.n	80085b6 <_printf_float+0xc2>
 8008902:	2301      	movs	r3, #1
 8008904:	4652      	mov	r2, sl
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	f43f ae52 	beq.w	80085b6 <_printf_float+0xc2>
 8008912:	f108 0801 	add.w	r8, r8, #1
 8008916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008918:	3b01      	subs	r3, #1
 800891a:	4543      	cmp	r3, r8
 800891c:	dcf1      	bgt.n	8008902 <_printf_float+0x40e>
 800891e:	464b      	mov	r3, r9
 8008920:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008924:	e6dc      	b.n	80086e0 <_printf_float+0x1ec>
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	f104 0a1a 	add.w	sl, r4, #26
 800892e:	e7f2      	b.n	8008916 <_printf_float+0x422>
 8008930:	2301      	movs	r3, #1
 8008932:	4642      	mov	r2, r8
 8008934:	e7df      	b.n	80088f6 <_printf_float+0x402>
 8008936:	2301      	movs	r3, #1
 8008938:	464a      	mov	r2, r9
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	f43f ae38 	beq.w	80085b6 <_printf_float+0xc2>
 8008946:	f108 0801 	add.w	r8, r8, #1
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	4543      	cmp	r3, r8
 8008952:	dcf0      	bgt.n	8008936 <_printf_float+0x442>
 8008954:	e6fa      	b.n	800874c <_printf_float+0x258>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	f104 0919 	add.w	r9, r4, #25
 800895e:	e7f4      	b.n	800894a <_printf_float+0x456>

08008960 <_printf_common>:
 8008960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	4616      	mov	r6, r2
 8008966:	4699      	mov	r9, r3
 8008968:	688a      	ldr	r2, [r1, #8]
 800896a:	690b      	ldr	r3, [r1, #16]
 800896c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008970:	4293      	cmp	r3, r2
 8008972:	bfb8      	it	lt
 8008974:	4613      	movlt	r3, r2
 8008976:	6033      	str	r3, [r6, #0]
 8008978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800897c:	4607      	mov	r7, r0
 800897e:	460c      	mov	r4, r1
 8008980:	b10a      	cbz	r2, 8008986 <_printf_common+0x26>
 8008982:	3301      	adds	r3, #1
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	0699      	lsls	r1, r3, #26
 800898a:	bf42      	ittt	mi
 800898c:	6833      	ldrmi	r3, [r6, #0]
 800898e:	3302      	addmi	r3, #2
 8008990:	6033      	strmi	r3, [r6, #0]
 8008992:	6825      	ldr	r5, [r4, #0]
 8008994:	f015 0506 	ands.w	r5, r5, #6
 8008998:	d106      	bne.n	80089a8 <_printf_common+0x48>
 800899a:	f104 0a19 	add.w	sl, r4, #25
 800899e:	68e3      	ldr	r3, [r4, #12]
 80089a0:	6832      	ldr	r2, [r6, #0]
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	dc26      	bgt.n	80089f6 <_printf_common+0x96>
 80089a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089ac:	1e13      	subs	r3, r2, #0
 80089ae:	6822      	ldr	r2, [r4, #0]
 80089b0:	bf18      	it	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	0692      	lsls	r2, r2, #26
 80089b6:	d42b      	bmi.n	8008a10 <_printf_common+0xb0>
 80089b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089bc:	4649      	mov	r1, r9
 80089be:	4638      	mov	r0, r7
 80089c0:	47c0      	blx	r8
 80089c2:	3001      	adds	r0, #1
 80089c4:	d01e      	beq.n	8008a04 <_printf_common+0xa4>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	68e5      	ldr	r5, [r4, #12]
 80089ca:	6832      	ldr	r2, [r6, #0]
 80089cc:	f003 0306 	and.w	r3, r3, #6
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	bf08      	it	eq
 80089d4:	1aad      	subeq	r5, r5, r2
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	6922      	ldr	r2, [r4, #16]
 80089da:	bf0c      	ite	eq
 80089dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e0:	2500      	movne	r5, #0
 80089e2:	4293      	cmp	r3, r2
 80089e4:	bfc4      	itt	gt
 80089e6:	1a9b      	subgt	r3, r3, r2
 80089e8:	18ed      	addgt	r5, r5, r3
 80089ea:	2600      	movs	r6, #0
 80089ec:	341a      	adds	r4, #26
 80089ee:	42b5      	cmp	r5, r6
 80089f0:	d11a      	bne.n	8008a28 <_printf_common+0xc8>
 80089f2:	2000      	movs	r0, #0
 80089f4:	e008      	b.n	8008a08 <_printf_common+0xa8>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4652      	mov	r2, sl
 80089fa:	4649      	mov	r1, r9
 80089fc:	4638      	mov	r0, r7
 80089fe:	47c0      	blx	r8
 8008a00:	3001      	adds	r0, #1
 8008a02:	d103      	bne.n	8008a0c <_printf_common+0xac>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	e7c6      	b.n	800899e <_printf_common+0x3e>
 8008a10:	18e1      	adds	r1, r4, r3
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	2030      	movs	r0, #48	; 0x30
 8008a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a1a:	4422      	add	r2, r4
 8008a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a24:	3302      	adds	r3, #2
 8008a26:	e7c7      	b.n	80089b8 <_printf_common+0x58>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	4638      	mov	r0, r7
 8008a30:	47c0      	blx	r8
 8008a32:	3001      	adds	r0, #1
 8008a34:	d0e6      	beq.n	8008a04 <_printf_common+0xa4>
 8008a36:	3601      	adds	r6, #1
 8008a38:	e7d9      	b.n	80089ee <_printf_common+0x8e>
	...

08008a3c <_printf_i>:
 8008a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	7e0f      	ldrb	r7, [r1, #24]
 8008a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a44:	2f78      	cmp	r7, #120	; 0x78
 8008a46:	4691      	mov	r9, r2
 8008a48:	4680      	mov	r8, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	469a      	mov	sl, r3
 8008a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a52:	d807      	bhi.n	8008a64 <_printf_i+0x28>
 8008a54:	2f62      	cmp	r7, #98	; 0x62
 8008a56:	d80a      	bhi.n	8008a6e <_printf_i+0x32>
 8008a58:	2f00      	cmp	r7, #0
 8008a5a:	f000 80d8 	beq.w	8008c0e <_printf_i+0x1d2>
 8008a5e:	2f58      	cmp	r7, #88	; 0x58
 8008a60:	f000 80a3 	beq.w	8008baa <_printf_i+0x16e>
 8008a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a6c:	e03a      	b.n	8008ae4 <_printf_i+0xa8>
 8008a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a72:	2b15      	cmp	r3, #21
 8008a74:	d8f6      	bhi.n	8008a64 <_printf_i+0x28>
 8008a76:	a101      	add	r1, pc, #4	; (adr r1, 8008a7c <_printf_i+0x40>)
 8008a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a7c:	08008ad5 	.word	0x08008ad5
 8008a80:	08008ae9 	.word	0x08008ae9
 8008a84:	08008a65 	.word	0x08008a65
 8008a88:	08008a65 	.word	0x08008a65
 8008a8c:	08008a65 	.word	0x08008a65
 8008a90:	08008a65 	.word	0x08008a65
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008a65 	.word	0x08008a65
 8008a9c:	08008a65 	.word	0x08008a65
 8008aa0:	08008a65 	.word	0x08008a65
 8008aa4:	08008a65 	.word	0x08008a65
 8008aa8:	08008bf5 	.word	0x08008bf5
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	08008bd7 	.word	0x08008bd7
 8008ab4:	08008a65 	.word	0x08008a65
 8008ab8:	08008a65 	.word	0x08008a65
 8008abc:	08008c17 	.word	0x08008c17
 8008ac0:	08008a65 	.word	0x08008a65
 8008ac4:	08008b19 	.word	0x08008b19
 8008ac8:	08008a65 	.word	0x08008a65
 8008acc:	08008a65 	.word	0x08008a65
 8008ad0:	08008bdf 	.word	0x08008bdf
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	602a      	str	r2, [r5, #0]
 8008adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0a3      	b.n	8008c30 <_printf_i+0x1f4>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	6829      	ldr	r1, [r5, #0]
 8008aec:	0606      	lsls	r6, r0, #24
 8008aee:	f101 0304 	add.w	r3, r1, #4
 8008af2:	d50a      	bpl.n	8008b0a <_printf_i+0xce>
 8008af4:	680e      	ldr	r6, [r1, #0]
 8008af6:	602b      	str	r3, [r5, #0]
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	da03      	bge.n	8008b04 <_printf_i+0xc8>
 8008afc:	232d      	movs	r3, #45	; 0x2d
 8008afe:	4276      	negs	r6, r6
 8008b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b04:	485e      	ldr	r0, [pc, #376]	; (8008c80 <_printf_i+0x244>)
 8008b06:	230a      	movs	r3, #10
 8008b08:	e019      	b.n	8008b3e <_printf_i+0x102>
 8008b0a:	680e      	ldr	r6, [r1, #0]
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b12:	bf18      	it	ne
 8008b14:	b236      	sxthne	r6, r6
 8008b16:	e7ef      	b.n	8008af8 <_printf_i+0xbc>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	6820      	ldr	r0, [r4, #0]
 8008b1c:	1d19      	adds	r1, r3, #4
 8008b1e:	6029      	str	r1, [r5, #0]
 8008b20:	0601      	lsls	r1, r0, #24
 8008b22:	d501      	bpl.n	8008b28 <_printf_i+0xec>
 8008b24:	681e      	ldr	r6, [r3, #0]
 8008b26:	e002      	b.n	8008b2e <_printf_i+0xf2>
 8008b28:	0646      	lsls	r6, r0, #25
 8008b2a:	d5fb      	bpl.n	8008b24 <_printf_i+0xe8>
 8008b2c:	881e      	ldrh	r6, [r3, #0]
 8008b2e:	4854      	ldr	r0, [pc, #336]	; (8008c80 <_printf_i+0x244>)
 8008b30:	2f6f      	cmp	r7, #111	; 0x6f
 8008b32:	bf0c      	ite	eq
 8008b34:	2308      	moveq	r3, #8
 8008b36:	230a      	movne	r3, #10
 8008b38:	2100      	movs	r1, #0
 8008b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b3e:	6865      	ldr	r5, [r4, #4]
 8008b40:	60a5      	str	r5, [r4, #8]
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	bfa2      	ittt	ge
 8008b46:	6821      	ldrge	r1, [r4, #0]
 8008b48:	f021 0104 	bicge.w	r1, r1, #4
 8008b4c:	6021      	strge	r1, [r4, #0]
 8008b4e:	b90e      	cbnz	r6, 8008b54 <_printf_i+0x118>
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	d04d      	beq.n	8008bf0 <_printf_i+0x1b4>
 8008b54:	4615      	mov	r5, r2
 8008b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b5e:	5dc7      	ldrb	r7, [r0, r7]
 8008b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b64:	4637      	mov	r7, r6
 8008b66:	42bb      	cmp	r3, r7
 8008b68:	460e      	mov	r6, r1
 8008b6a:	d9f4      	bls.n	8008b56 <_printf_i+0x11a>
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d10b      	bne.n	8008b88 <_printf_i+0x14c>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	07de      	lsls	r6, r3, #31
 8008b74:	d508      	bpl.n	8008b88 <_printf_i+0x14c>
 8008b76:	6923      	ldr	r3, [r4, #16]
 8008b78:	6861      	ldr	r1, [r4, #4]
 8008b7a:	4299      	cmp	r1, r3
 8008b7c:	bfde      	ittt	le
 8008b7e:	2330      	movle	r3, #48	; 0x30
 8008b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b88:	1b52      	subs	r2, r2, r5
 8008b8a:	6122      	str	r2, [r4, #16]
 8008b8c:	f8cd a000 	str.w	sl, [sp]
 8008b90:	464b      	mov	r3, r9
 8008b92:	aa03      	add	r2, sp, #12
 8008b94:	4621      	mov	r1, r4
 8008b96:	4640      	mov	r0, r8
 8008b98:	f7ff fee2 	bl	8008960 <_printf_common>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d14c      	bne.n	8008c3a <_printf_i+0x1fe>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	b004      	add	sp, #16
 8008ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008baa:	4835      	ldr	r0, [pc, #212]	; (8008c80 <_printf_i+0x244>)
 8008bac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bb8:	6029      	str	r1, [r5, #0]
 8008bba:	061d      	lsls	r5, r3, #24
 8008bbc:	d514      	bpl.n	8008be8 <_printf_i+0x1ac>
 8008bbe:	07df      	lsls	r7, r3, #31
 8008bc0:	bf44      	itt	mi
 8008bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc6:	6023      	strmi	r3, [r4, #0]
 8008bc8:	b91e      	cbnz	r6, 8008bd2 <_printf_i+0x196>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	f023 0320 	bic.w	r3, r3, #32
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	2310      	movs	r3, #16
 8008bd4:	e7b0      	b.n	8008b38 <_printf_i+0xfc>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f043 0320 	orr.w	r3, r3, #32
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	2378      	movs	r3, #120	; 0x78
 8008be0:	4828      	ldr	r0, [pc, #160]	; (8008c84 <_printf_i+0x248>)
 8008be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008be6:	e7e3      	b.n	8008bb0 <_printf_i+0x174>
 8008be8:	0659      	lsls	r1, r3, #25
 8008bea:	bf48      	it	mi
 8008bec:	b2b6      	uxthmi	r6, r6
 8008bee:	e7e6      	b.n	8008bbe <_printf_i+0x182>
 8008bf0:	4615      	mov	r5, r2
 8008bf2:	e7bb      	b.n	8008b6c <_printf_i+0x130>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	6826      	ldr	r6, [r4, #0]
 8008bf8:	6961      	ldr	r1, [r4, #20]
 8008bfa:	1d18      	adds	r0, r3, #4
 8008bfc:	6028      	str	r0, [r5, #0]
 8008bfe:	0635      	lsls	r5, r6, #24
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	d501      	bpl.n	8008c08 <_printf_i+0x1cc>
 8008c04:	6019      	str	r1, [r3, #0]
 8008c06:	e002      	b.n	8008c0e <_printf_i+0x1d2>
 8008c08:	0670      	lsls	r0, r6, #25
 8008c0a:	d5fb      	bpl.n	8008c04 <_printf_i+0x1c8>
 8008c0c:	8019      	strh	r1, [r3, #0]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	4615      	mov	r5, r2
 8008c14:	e7ba      	b.n	8008b8c <_printf_i+0x150>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	1d1a      	adds	r2, r3, #4
 8008c1a:	602a      	str	r2, [r5, #0]
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	6862      	ldr	r2, [r4, #4]
 8008c20:	2100      	movs	r1, #0
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7f7 fae4 	bl	80001f0 <memchr>
 8008c28:	b108      	cbz	r0, 8008c2e <_printf_i+0x1f2>
 8008c2a:	1b40      	subs	r0, r0, r5
 8008c2c:	6060      	str	r0, [r4, #4]
 8008c2e:	6863      	ldr	r3, [r4, #4]
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	2300      	movs	r3, #0
 8008c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c38:	e7a8      	b.n	8008b8c <_printf_i+0x150>
 8008c3a:	6923      	ldr	r3, [r4, #16]
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4649      	mov	r1, r9
 8008c40:	4640      	mov	r0, r8
 8008c42:	47d0      	blx	sl
 8008c44:	3001      	adds	r0, #1
 8008c46:	d0ab      	beq.n	8008ba0 <_printf_i+0x164>
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	079b      	lsls	r3, r3, #30
 8008c4c:	d413      	bmi.n	8008c76 <_printf_i+0x23a>
 8008c4e:	68e0      	ldr	r0, [r4, #12]
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	4298      	cmp	r0, r3
 8008c54:	bfb8      	it	lt
 8008c56:	4618      	movlt	r0, r3
 8008c58:	e7a4      	b.n	8008ba4 <_printf_i+0x168>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4640      	mov	r0, r8
 8008c62:	47d0      	blx	sl
 8008c64:	3001      	adds	r0, #1
 8008c66:	d09b      	beq.n	8008ba0 <_printf_i+0x164>
 8008c68:	3501      	adds	r5, #1
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	9903      	ldr	r1, [sp, #12]
 8008c6e:	1a5b      	subs	r3, r3, r1
 8008c70:	42ab      	cmp	r3, r5
 8008c72:	dcf2      	bgt.n	8008c5a <_printf_i+0x21e>
 8008c74:	e7eb      	b.n	8008c4e <_printf_i+0x212>
 8008c76:	2500      	movs	r5, #0
 8008c78:	f104 0619 	add.w	r6, r4, #25
 8008c7c:	e7f5      	b.n	8008c6a <_printf_i+0x22e>
 8008c7e:	bf00      	nop
 8008c80:	0800d03e 	.word	0x0800d03e
 8008c84:	0800d04f 	.word	0x0800d04f

08008c88 <_scanf_float>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	b087      	sub	sp, #28
 8008c8e:	4617      	mov	r7, r2
 8008c90:	9303      	str	r3, [sp, #12]
 8008c92:	688b      	ldr	r3, [r1, #8]
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c9a:	bf83      	ittte	hi
 8008c9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ca0:	195b      	addhi	r3, r3, r5
 8008ca2:	9302      	strhi	r3, [sp, #8]
 8008ca4:	2300      	movls	r3, #0
 8008ca6:	bf86      	itte	hi
 8008ca8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008cac:	608b      	strhi	r3, [r1, #8]
 8008cae:	9302      	strls	r3, [sp, #8]
 8008cb0:	680b      	ldr	r3, [r1, #0]
 8008cb2:	468b      	mov	fp, r1
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cba:	f84b 3b1c 	str.w	r3, [fp], #28
 8008cbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	465e      	mov	r6, fp
 8008cc8:	46aa      	mov	sl, r5
 8008cca:	46a9      	mov	r9, r5
 8008ccc:	9501      	str	r5, [sp, #4]
 8008cce:	68a2      	ldr	r2, [r4, #8]
 8008cd0:	b152      	cbz	r2, 8008ce8 <_scanf_float+0x60>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b4e      	cmp	r3, #78	; 0x4e
 8008cd8:	d864      	bhi.n	8008da4 <_scanf_float+0x11c>
 8008cda:	2b40      	cmp	r3, #64	; 0x40
 8008cdc:	d83c      	bhi.n	8008d58 <_scanf_float+0xd0>
 8008cde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ce2:	b2c8      	uxtb	r0, r1
 8008ce4:	280e      	cmp	r0, #14
 8008ce6:	d93a      	bls.n	8008d5e <_scanf_float+0xd6>
 8008ce8:	f1b9 0f00 	cmp.w	r9, #0
 8008cec:	d003      	beq.n	8008cf6 <_scanf_float+0x6e>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cfa:	f1ba 0f01 	cmp.w	sl, #1
 8008cfe:	f200 8113 	bhi.w	8008f28 <_scanf_float+0x2a0>
 8008d02:	455e      	cmp	r6, fp
 8008d04:	f200 8105 	bhi.w	8008f12 <_scanf_float+0x28a>
 8008d08:	2501      	movs	r5, #1
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	b007      	add	sp, #28
 8008d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d16:	2a0d      	cmp	r2, #13
 8008d18:	d8e6      	bhi.n	8008ce8 <_scanf_float+0x60>
 8008d1a:	a101      	add	r1, pc, #4	; (adr r1, 8008d20 <_scanf_float+0x98>)
 8008d1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d20:	08008e5f 	.word	0x08008e5f
 8008d24:	08008ce9 	.word	0x08008ce9
 8008d28:	08008ce9 	.word	0x08008ce9
 8008d2c:	08008ce9 	.word	0x08008ce9
 8008d30:	08008ebf 	.word	0x08008ebf
 8008d34:	08008e97 	.word	0x08008e97
 8008d38:	08008ce9 	.word	0x08008ce9
 8008d3c:	08008ce9 	.word	0x08008ce9
 8008d40:	08008e6d 	.word	0x08008e6d
 8008d44:	08008ce9 	.word	0x08008ce9
 8008d48:	08008ce9 	.word	0x08008ce9
 8008d4c:	08008ce9 	.word	0x08008ce9
 8008d50:	08008ce9 	.word	0x08008ce9
 8008d54:	08008e25 	.word	0x08008e25
 8008d58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d5c:	e7db      	b.n	8008d16 <_scanf_float+0x8e>
 8008d5e:	290e      	cmp	r1, #14
 8008d60:	d8c2      	bhi.n	8008ce8 <_scanf_float+0x60>
 8008d62:	a001      	add	r0, pc, #4	; (adr r0, 8008d68 <_scanf_float+0xe0>)
 8008d64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d68:	08008e17 	.word	0x08008e17
 8008d6c:	08008ce9 	.word	0x08008ce9
 8008d70:	08008e17 	.word	0x08008e17
 8008d74:	08008eab 	.word	0x08008eab
 8008d78:	08008ce9 	.word	0x08008ce9
 8008d7c:	08008dc5 	.word	0x08008dc5
 8008d80:	08008e01 	.word	0x08008e01
 8008d84:	08008e01 	.word	0x08008e01
 8008d88:	08008e01 	.word	0x08008e01
 8008d8c:	08008e01 	.word	0x08008e01
 8008d90:	08008e01 	.word	0x08008e01
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008e01 	.word	0x08008e01
 8008da0:	08008e01 	.word	0x08008e01
 8008da4:	2b6e      	cmp	r3, #110	; 0x6e
 8008da6:	d809      	bhi.n	8008dbc <_scanf_float+0x134>
 8008da8:	2b60      	cmp	r3, #96	; 0x60
 8008daa:	d8b2      	bhi.n	8008d12 <_scanf_float+0x8a>
 8008dac:	2b54      	cmp	r3, #84	; 0x54
 8008dae:	d077      	beq.n	8008ea0 <_scanf_float+0x218>
 8008db0:	2b59      	cmp	r3, #89	; 0x59
 8008db2:	d199      	bne.n	8008ce8 <_scanf_float+0x60>
 8008db4:	2d07      	cmp	r5, #7
 8008db6:	d197      	bne.n	8008ce8 <_scanf_float+0x60>
 8008db8:	2508      	movs	r5, #8
 8008dba:	e029      	b.n	8008e10 <_scanf_float+0x188>
 8008dbc:	2b74      	cmp	r3, #116	; 0x74
 8008dbe:	d06f      	beq.n	8008ea0 <_scanf_float+0x218>
 8008dc0:	2b79      	cmp	r3, #121	; 0x79
 8008dc2:	e7f6      	b.n	8008db2 <_scanf_float+0x12a>
 8008dc4:	6821      	ldr	r1, [r4, #0]
 8008dc6:	05c8      	lsls	r0, r1, #23
 8008dc8:	d51a      	bpl.n	8008e00 <_scanf_float+0x178>
 8008dca:	9b02      	ldr	r3, [sp, #8]
 8008dcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008dd0:	6021      	str	r1, [r4, #0]
 8008dd2:	f109 0901 	add.w	r9, r9, #1
 8008dd6:	b11b      	cbz	r3, 8008de0 <_scanf_float+0x158>
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	3201      	adds	r2, #1
 8008ddc:	9302      	str	r3, [sp, #8]
 8008dde:	60a2      	str	r2, [r4, #8]
 8008de0:	68a3      	ldr	r3, [r4, #8]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	3301      	adds	r3, #1
 8008dea:	6123      	str	r3, [r4, #16]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	607b      	str	r3, [r7, #4]
 8008df4:	f340 8084 	ble.w	8008f00 <_scanf_float+0x278>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	603b      	str	r3, [r7, #0]
 8008dfe:	e766      	b.n	8008cce <_scanf_float+0x46>
 8008e00:	eb1a 0f05 	cmn.w	sl, r5
 8008e04:	f47f af70 	bne.w	8008ce8 <_scanf_float+0x60>
 8008e08:	6822      	ldr	r2, [r4, #0]
 8008e0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e0e:	6022      	str	r2, [r4, #0]
 8008e10:	f806 3b01 	strb.w	r3, [r6], #1
 8008e14:	e7e4      	b.n	8008de0 <_scanf_float+0x158>
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	0610      	lsls	r0, r2, #24
 8008e1a:	f57f af65 	bpl.w	8008ce8 <_scanf_float+0x60>
 8008e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e22:	e7f4      	b.n	8008e0e <_scanf_float+0x186>
 8008e24:	f1ba 0f00 	cmp.w	sl, #0
 8008e28:	d10e      	bne.n	8008e48 <_scanf_float+0x1c0>
 8008e2a:	f1b9 0f00 	cmp.w	r9, #0
 8008e2e:	d10e      	bne.n	8008e4e <_scanf_float+0x1c6>
 8008e30:	6822      	ldr	r2, [r4, #0]
 8008e32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e3a:	d108      	bne.n	8008e4e <_scanf_float+0x1c6>
 8008e3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e40:	6022      	str	r2, [r4, #0]
 8008e42:	f04f 0a01 	mov.w	sl, #1
 8008e46:	e7e3      	b.n	8008e10 <_scanf_float+0x188>
 8008e48:	f1ba 0f02 	cmp.w	sl, #2
 8008e4c:	d055      	beq.n	8008efa <_scanf_float+0x272>
 8008e4e:	2d01      	cmp	r5, #1
 8008e50:	d002      	beq.n	8008e58 <_scanf_float+0x1d0>
 8008e52:	2d04      	cmp	r5, #4
 8008e54:	f47f af48 	bne.w	8008ce8 <_scanf_float+0x60>
 8008e58:	3501      	adds	r5, #1
 8008e5a:	b2ed      	uxtb	r5, r5
 8008e5c:	e7d8      	b.n	8008e10 <_scanf_float+0x188>
 8008e5e:	f1ba 0f01 	cmp.w	sl, #1
 8008e62:	f47f af41 	bne.w	8008ce8 <_scanf_float+0x60>
 8008e66:	f04f 0a02 	mov.w	sl, #2
 8008e6a:	e7d1      	b.n	8008e10 <_scanf_float+0x188>
 8008e6c:	b97d      	cbnz	r5, 8008e8e <_scanf_float+0x206>
 8008e6e:	f1b9 0f00 	cmp.w	r9, #0
 8008e72:	f47f af3c 	bne.w	8008cee <_scanf_float+0x66>
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e80:	f47f af39 	bne.w	8008cf6 <_scanf_float+0x6e>
 8008e84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e88:	6022      	str	r2, [r4, #0]
 8008e8a:	2501      	movs	r5, #1
 8008e8c:	e7c0      	b.n	8008e10 <_scanf_float+0x188>
 8008e8e:	2d03      	cmp	r5, #3
 8008e90:	d0e2      	beq.n	8008e58 <_scanf_float+0x1d0>
 8008e92:	2d05      	cmp	r5, #5
 8008e94:	e7de      	b.n	8008e54 <_scanf_float+0x1cc>
 8008e96:	2d02      	cmp	r5, #2
 8008e98:	f47f af26 	bne.w	8008ce8 <_scanf_float+0x60>
 8008e9c:	2503      	movs	r5, #3
 8008e9e:	e7b7      	b.n	8008e10 <_scanf_float+0x188>
 8008ea0:	2d06      	cmp	r5, #6
 8008ea2:	f47f af21 	bne.w	8008ce8 <_scanf_float+0x60>
 8008ea6:	2507      	movs	r5, #7
 8008ea8:	e7b2      	b.n	8008e10 <_scanf_float+0x188>
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	0591      	lsls	r1, r2, #22
 8008eae:	f57f af1b 	bpl.w	8008ce8 <_scanf_float+0x60>
 8008eb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008eb6:	6022      	str	r2, [r4, #0]
 8008eb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ebc:	e7a8      	b.n	8008e10 <_scanf_float+0x188>
 8008ebe:	6822      	ldr	r2, [r4, #0]
 8008ec0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ec4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ec8:	d006      	beq.n	8008ed8 <_scanf_float+0x250>
 8008eca:	0550      	lsls	r0, r2, #21
 8008ecc:	f57f af0c 	bpl.w	8008ce8 <_scanf_float+0x60>
 8008ed0:	f1b9 0f00 	cmp.w	r9, #0
 8008ed4:	f43f af0f 	beq.w	8008cf6 <_scanf_float+0x6e>
 8008ed8:	0591      	lsls	r1, r2, #22
 8008eda:	bf58      	it	pl
 8008edc:	9901      	ldrpl	r1, [sp, #4]
 8008ede:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ee2:	bf58      	it	pl
 8008ee4:	eba9 0101 	subpl.w	r1, r9, r1
 8008ee8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008eec:	bf58      	it	pl
 8008eee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	f04f 0900 	mov.w	r9, #0
 8008ef8:	e78a      	b.n	8008e10 <_scanf_float+0x188>
 8008efa:	f04f 0a03 	mov.w	sl, #3
 8008efe:	e787      	b.n	8008e10 <_scanf_float+0x188>
 8008f00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f04:	4639      	mov	r1, r7
 8008f06:	4640      	mov	r0, r8
 8008f08:	4798      	blx	r3
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f43f aedf 	beq.w	8008cce <_scanf_float+0x46>
 8008f10:	e6ea      	b.n	8008ce8 <_scanf_float+0x60>
 8008f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f1a:	463a      	mov	r2, r7
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4798      	blx	r3
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	e6ec      	b.n	8008d02 <_scanf_float+0x7a>
 8008f28:	1e6b      	subs	r3, r5, #1
 8008f2a:	2b06      	cmp	r3, #6
 8008f2c:	d825      	bhi.n	8008f7a <_scanf_float+0x2f2>
 8008f2e:	2d02      	cmp	r5, #2
 8008f30:	d836      	bhi.n	8008fa0 <_scanf_float+0x318>
 8008f32:	455e      	cmp	r6, fp
 8008f34:	f67f aee8 	bls.w	8008d08 <_scanf_float+0x80>
 8008f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f40:	463a      	mov	r2, r7
 8008f42:	4640      	mov	r0, r8
 8008f44:	4798      	blx	r3
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	e7f1      	b.n	8008f32 <_scanf_float+0x2aa>
 8008f4e:	9802      	ldr	r0, [sp, #8]
 8008f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f58:	9002      	str	r0, [sp, #8]
 8008f5a:	463a      	mov	r2, r7
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	4798      	blx	r3
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f6a:	fa5f fa8a 	uxtb.w	sl, sl
 8008f6e:	f1ba 0f02 	cmp.w	sl, #2
 8008f72:	d1ec      	bne.n	8008f4e <_scanf_float+0x2c6>
 8008f74:	3d03      	subs	r5, #3
 8008f76:	b2ed      	uxtb	r5, r5
 8008f78:	1b76      	subs	r6, r6, r5
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	05da      	lsls	r2, r3, #23
 8008f7e:	d52f      	bpl.n	8008fe0 <_scanf_float+0x358>
 8008f80:	055b      	lsls	r3, r3, #21
 8008f82:	d510      	bpl.n	8008fa6 <_scanf_float+0x31e>
 8008f84:	455e      	cmp	r6, fp
 8008f86:	f67f aebf 	bls.w	8008d08 <_scanf_float+0x80>
 8008f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f92:	463a      	mov	r2, r7
 8008f94:	4640      	mov	r0, r8
 8008f96:	4798      	blx	r3
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	e7f1      	b.n	8008f84 <_scanf_float+0x2fc>
 8008fa0:	46aa      	mov	sl, r5
 8008fa2:	9602      	str	r6, [sp, #8]
 8008fa4:	e7df      	b.n	8008f66 <_scanf_float+0x2de>
 8008fa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	2965      	cmp	r1, #101	; 0x65
 8008fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	d00c      	beq.n	8008fd4 <_scanf_float+0x34c>
 8008fba:	2945      	cmp	r1, #69	; 0x45
 8008fbc:	d00a      	beq.n	8008fd4 <_scanf_float+0x34c>
 8008fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc2:	463a      	mov	r2, r7
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4798      	blx	r3
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	1eb5      	subs	r5, r6, #2
 8008fd2:	6123      	str	r3, [r4, #16]
 8008fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fd8:	463a      	mov	r2, r7
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4798      	blx	r3
 8008fde:	462e      	mov	r6, r5
 8008fe0:	6825      	ldr	r5, [r4, #0]
 8008fe2:	f015 0510 	ands.w	r5, r5, #16
 8008fe6:	d159      	bne.n	800909c <_scanf_float+0x414>
 8008fe8:	7035      	strb	r5, [r6, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff4:	d11b      	bne.n	800902e <_scanf_float+0x3a6>
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	454b      	cmp	r3, r9
 8008ffa:	eba3 0209 	sub.w	r2, r3, r9
 8008ffe:	d123      	bne.n	8009048 <_scanf_float+0x3c0>
 8009000:	2200      	movs	r2, #0
 8009002:	4659      	mov	r1, fp
 8009004:	4640      	mov	r0, r8
 8009006:	f000 ff3d 	bl	8009e84 <_strtod_r>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	f012 0f02 	tst.w	r2, #2
 8009012:	ec57 6b10 	vmov	r6, r7, d0
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	d021      	beq.n	800905e <_scanf_float+0x3d6>
 800901a:	9903      	ldr	r1, [sp, #12]
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	600a      	str	r2, [r1, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	e9c3 6700 	strd	r6, r7, [r3]
 8009026:	68e3      	ldr	r3, [r4, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60e3      	str	r3, [r4, #12]
 800902c:	e66d      	b.n	8008d0a <_scanf_float+0x82>
 800902e:	9b04      	ldr	r3, [sp, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0e5      	beq.n	8009000 <_scanf_float+0x378>
 8009034:	9905      	ldr	r1, [sp, #20]
 8009036:	230a      	movs	r3, #10
 8009038:	462a      	mov	r2, r5
 800903a:	3101      	adds	r1, #1
 800903c:	4640      	mov	r0, r8
 800903e:	f000 ffa9 	bl	8009f94 <_strtol_r>
 8009042:	9b04      	ldr	r3, [sp, #16]
 8009044:	9e05      	ldr	r6, [sp, #20]
 8009046:	1ac2      	subs	r2, r0, r3
 8009048:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800904c:	429e      	cmp	r6, r3
 800904e:	bf28      	it	cs
 8009050:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009054:	4912      	ldr	r1, [pc, #72]	; (80090a0 <_scanf_float+0x418>)
 8009056:	4630      	mov	r0, r6
 8009058:	f000 f8ba 	bl	80091d0 <siprintf>
 800905c:	e7d0      	b.n	8009000 <_scanf_float+0x378>
 800905e:	9903      	ldr	r1, [sp, #12]
 8009060:	f012 0f04 	tst.w	r2, #4
 8009064:	f103 0204 	add.w	r2, r3, #4
 8009068:	600a      	str	r2, [r1, #0]
 800906a:	d1d9      	bne.n	8009020 <_scanf_float+0x398>
 800906c:	f8d3 8000 	ldr.w	r8, [r3]
 8009070:	ee10 2a10 	vmov	r2, s0
 8009074:	ee10 0a10 	vmov	r0, s0
 8009078:	463b      	mov	r3, r7
 800907a:	4639      	mov	r1, r7
 800907c:	f7f7 fd5e 	bl	8000b3c <__aeabi_dcmpun>
 8009080:	b128      	cbz	r0, 800908e <_scanf_float+0x406>
 8009082:	4808      	ldr	r0, [pc, #32]	; (80090a4 <_scanf_float+0x41c>)
 8009084:	f000 f89e 	bl	80091c4 <nanf>
 8009088:	ed88 0a00 	vstr	s0, [r8]
 800908c:	e7cb      	b.n	8009026 <_scanf_float+0x39e>
 800908e:	4630      	mov	r0, r6
 8009090:	4639      	mov	r1, r7
 8009092:	f7f7 fdb1 	bl	8000bf8 <__aeabi_d2f>
 8009096:	f8c8 0000 	str.w	r0, [r8]
 800909a:	e7c4      	b.n	8009026 <_scanf_float+0x39e>
 800909c:	2500      	movs	r5, #0
 800909e:	e634      	b.n	8008d0a <_scanf_float+0x82>
 80090a0:	0800d060 	.word	0x0800d060
 80090a4:	0800d4d0 	.word	0x0800d4d0

080090a8 <iprintf>:
 80090a8:	b40f      	push	{r0, r1, r2, r3}
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <iprintf+0x2c>)
 80090ac:	b513      	push	{r0, r1, r4, lr}
 80090ae:	681c      	ldr	r4, [r3, #0]
 80090b0:	b124      	cbz	r4, 80090bc <iprintf+0x14>
 80090b2:	69a3      	ldr	r3, [r4, #24]
 80090b4:	b913      	cbnz	r3, 80090bc <iprintf+0x14>
 80090b6:	4620      	mov	r0, r4
 80090b8:	f001 ffc2 	bl	800b040 <__sinit>
 80090bc:	ab05      	add	r3, sp, #20
 80090be:	9a04      	ldr	r2, [sp, #16]
 80090c0:	68a1      	ldr	r1, [r4, #8]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	4620      	mov	r0, r4
 80090c6:	f003 fb99 	bl	800c7fc <_vfiprintf_r>
 80090ca:	b002      	add	sp, #8
 80090cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d0:	b004      	add	sp, #16
 80090d2:	4770      	bx	lr
 80090d4:	20000010 	.word	0x20000010

080090d8 <_puts_r>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	460e      	mov	r6, r1
 80090dc:	4605      	mov	r5, r0
 80090de:	b118      	cbz	r0, 80090e8 <_puts_r+0x10>
 80090e0:	6983      	ldr	r3, [r0, #24]
 80090e2:	b90b      	cbnz	r3, 80090e8 <_puts_r+0x10>
 80090e4:	f001 ffac 	bl	800b040 <__sinit>
 80090e8:	69ab      	ldr	r3, [r5, #24]
 80090ea:	68ac      	ldr	r4, [r5, #8]
 80090ec:	b913      	cbnz	r3, 80090f4 <_puts_r+0x1c>
 80090ee:	4628      	mov	r0, r5
 80090f0:	f001 ffa6 	bl	800b040 <__sinit>
 80090f4:	4b2c      	ldr	r3, [pc, #176]	; (80091a8 <_puts_r+0xd0>)
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d120      	bne.n	800913c <_puts_r+0x64>
 80090fa:	686c      	ldr	r4, [r5, #4]
 80090fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090fe:	07db      	lsls	r3, r3, #31
 8009100:	d405      	bmi.n	800910e <_puts_r+0x36>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	0598      	lsls	r0, r3, #22
 8009106:	d402      	bmi.n	800910e <_puts_r+0x36>
 8009108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800910a:	f002 fbaa 	bl	800b862 <__retarget_lock_acquire_recursive>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	0719      	lsls	r1, r3, #28
 8009112:	d51d      	bpl.n	8009150 <_puts_r+0x78>
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	b1db      	cbz	r3, 8009150 <_puts_r+0x78>
 8009118:	3e01      	subs	r6, #1
 800911a:	68a3      	ldr	r3, [r4, #8]
 800911c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009120:	3b01      	subs	r3, #1
 8009122:	60a3      	str	r3, [r4, #8]
 8009124:	bb39      	cbnz	r1, 8009176 <_puts_r+0x9e>
 8009126:	2b00      	cmp	r3, #0
 8009128:	da38      	bge.n	800919c <_puts_r+0xc4>
 800912a:	4622      	mov	r2, r4
 800912c:	210a      	movs	r1, #10
 800912e:	4628      	mov	r0, r5
 8009130:	f000 ff32 	bl	8009f98 <__swbuf_r>
 8009134:	3001      	adds	r0, #1
 8009136:	d011      	beq.n	800915c <_puts_r+0x84>
 8009138:	250a      	movs	r5, #10
 800913a:	e011      	b.n	8009160 <_puts_r+0x88>
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <_puts_r+0xd4>)
 800913e:	429c      	cmp	r4, r3
 8009140:	d101      	bne.n	8009146 <_puts_r+0x6e>
 8009142:	68ac      	ldr	r4, [r5, #8]
 8009144:	e7da      	b.n	80090fc <_puts_r+0x24>
 8009146:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <_puts_r+0xd8>)
 8009148:	429c      	cmp	r4, r3
 800914a:	bf08      	it	eq
 800914c:	68ec      	ldreq	r4, [r5, #12]
 800914e:	e7d5      	b.n	80090fc <_puts_r+0x24>
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 ff72 	bl	800a03c <__swsetup_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	d0dd      	beq.n	8009118 <_puts_r+0x40>
 800915c:	f04f 35ff 	mov.w	r5, #4294967295
 8009160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009162:	07da      	lsls	r2, r3, #31
 8009164:	d405      	bmi.n	8009172 <_puts_r+0x9a>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	d402      	bmi.n	8009172 <_puts_r+0x9a>
 800916c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916e:	f002 fb79 	bl	800b864 <__retarget_lock_release_recursive>
 8009172:	4628      	mov	r0, r5
 8009174:	bd70      	pop	{r4, r5, r6, pc}
 8009176:	2b00      	cmp	r3, #0
 8009178:	da04      	bge.n	8009184 <_puts_r+0xac>
 800917a:	69a2      	ldr	r2, [r4, #24]
 800917c:	429a      	cmp	r2, r3
 800917e:	dc06      	bgt.n	800918e <_puts_r+0xb6>
 8009180:	290a      	cmp	r1, #10
 8009182:	d004      	beq.n	800918e <_puts_r+0xb6>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	6022      	str	r2, [r4, #0]
 800918a:	7019      	strb	r1, [r3, #0]
 800918c:	e7c5      	b.n	800911a <_puts_r+0x42>
 800918e:	4622      	mov	r2, r4
 8009190:	4628      	mov	r0, r5
 8009192:	f000 ff01 	bl	8009f98 <__swbuf_r>
 8009196:	3001      	adds	r0, #1
 8009198:	d1bf      	bne.n	800911a <_puts_r+0x42>
 800919a:	e7df      	b.n	800915c <_puts_r+0x84>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	250a      	movs	r5, #10
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	701d      	strb	r5, [r3, #0]
 80091a6:	e7db      	b.n	8009160 <_puts_r+0x88>
 80091a8:	0800d26c 	.word	0x0800d26c
 80091ac:	0800d28c 	.word	0x0800d28c
 80091b0:	0800d24c 	.word	0x0800d24c

080091b4 <puts>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <puts+0xc>)
 80091b6:	4601      	mov	r1, r0
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	f7ff bf8d 	b.w	80090d8 <_puts_r>
 80091be:	bf00      	nop
 80091c0:	20000010 	.word	0x20000010

080091c4 <nanf>:
 80091c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80091cc <nanf+0x8>
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	7fc00000 	.word	0x7fc00000

080091d0 <siprintf>:
 80091d0:	b40e      	push	{r1, r2, r3}
 80091d2:	b500      	push	{lr}
 80091d4:	b09c      	sub	sp, #112	; 0x70
 80091d6:	ab1d      	add	r3, sp, #116	; 0x74
 80091d8:	9002      	str	r0, [sp, #8]
 80091da:	9006      	str	r0, [sp, #24]
 80091dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091e0:	4809      	ldr	r0, [pc, #36]	; (8009208 <siprintf+0x38>)
 80091e2:	9107      	str	r1, [sp, #28]
 80091e4:	9104      	str	r1, [sp, #16]
 80091e6:	4909      	ldr	r1, [pc, #36]	; (800920c <siprintf+0x3c>)
 80091e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ec:	9105      	str	r1, [sp, #20]
 80091ee:	6800      	ldr	r0, [r0, #0]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	a902      	add	r1, sp, #8
 80091f4:	f003 f9d8 	bl	800c5a8 <_svfiprintf_r>
 80091f8:	9b02      	ldr	r3, [sp, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	b01c      	add	sp, #112	; 0x70
 8009200:	f85d eb04 	ldr.w	lr, [sp], #4
 8009204:	b003      	add	sp, #12
 8009206:	4770      	bx	lr
 8009208:	20000010 	.word	0x20000010
 800920c:	ffff0208 	.word	0xffff0208

08009210 <strstr>:
 8009210:	780a      	ldrb	r2, [r1, #0]
 8009212:	b570      	push	{r4, r5, r6, lr}
 8009214:	b96a      	cbnz	r2, 8009232 <strstr+0x22>
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	429a      	cmp	r2, r3
 800921a:	d109      	bne.n	8009230 <strstr+0x20>
 800921c:	460c      	mov	r4, r1
 800921e:	4605      	mov	r5, r0
 8009220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0f6      	beq.n	8009216 <strstr+0x6>
 8009228:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800922c:	429e      	cmp	r6, r3
 800922e:	d0f7      	beq.n	8009220 <strstr+0x10>
 8009230:	3001      	adds	r0, #1
 8009232:	7803      	ldrb	r3, [r0, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1ef      	bne.n	8009218 <strstr+0x8>
 8009238:	4618      	mov	r0, r3
 800923a:	e7ec      	b.n	8009216 <strstr+0x6>

0800923c <sulp>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	ec45 4b10 	vmov	d0, r4, r5
 8009246:	4616      	mov	r6, r2
 8009248:	f002 ff0c 	bl	800c064 <__ulp>
 800924c:	ec51 0b10 	vmov	r0, r1, d0
 8009250:	b17e      	cbz	r6, 8009272 <sulp+0x36>
 8009252:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009256:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd09      	ble.n	8009272 <sulp+0x36>
 800925e:	051b      	lsls	r3, r3, #20
 8009260:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009264:	2400      	movs	r4, #0
 8009266:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f7 f9cb 	bl	8000608 <__aeabi_dmul>
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	0000      	movs	r0, r0
	...

08009278 <_strtod_l>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	ed2d 8b02 	vpush	{d8}
 8009280:	b09d      	sub	sp, #116	; 0x74
 8009282:	461f      	mov	r7, r3
 8009284:	2300      	movs	r3, #0
 8009286:	9318      	str	r3, [sp, #96]	; 0x60
 8009288:	4ba2      	ldr	r3, [pc, #648]	; (8009514 <_strtod_l+0x29c>)
 800928a:	9213      	str	r2, [sp, #76]	; 0x4c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	4604      	mov	r4, r0
 8009292:	4618      	mov	r0, r3
 8009294:	4688      	mov	r8, r1
 8009296:	f7f6 ffa3 	bl	80001e0 <strlen>
 800929a:	f04f 0a00 	mov.w	sl, #0
 800929e:	4605      	mov	r5, r0
 80092a0:	f04f 0b00 	mov.w	fp, #0
 80092a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	2a2b      	cmp	r2, #43	; 0x2b
 80092ae:	d04e      	beq.n	800934e <_strtod_l+0xd6>
 80092b0:	d83b      	bhi.n	800932a <_strtod_l+0xb2>
 80092b2:	2a0d      	cmp	r2, #13
 80092b4:	d834      	bhi.n	8009320 <_strtod_l+0xa8>
 80092b6:	2a08      	cmp	r2, #8
 80092b8:	d834      	bhi.n	8009324 <_strtod_l+0xac>
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	d03e      	beq.n	800933c <_strtod_l+0xc4>
 80092be:	2300      	movs	r3, #0
 80092c0:	930a      	str	r3, [sp, #40]	; 0x28
 80092c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092c4:	7833      	ldrb	r3, [r6, #0]
 80092c6:	2b30      	cmp	r3, #48	; 0x30
 80092c8:	f040 80b0 	bne.w	800942c <_strtod_l+0x1b4>
 80092cc:	7873      	ldrb	r3, [r6, #1]
 80092ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092d2:	2b58      	cmp	r3, #88	; 0x58
 80092d4:	d168      	bne.n	80093a8 <_strtod_l+0x130>
 80092d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	ab18      	add	r3, sp, #96	; 0x60
 80092dc:	9702      	str	r7, [sp, #8]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	4a8d      	ldr	r2, [pc, #564]	; (8009518 <_strtod_l+0x2a0>)
 80092e2:	ab19      	add	r3, sp, #100	; 0x64
 80092e4:	a917      	add	r1, sp, #92	; 0x5c
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 ffae 	bl	800b248 <__gethex>
 80092ec:	f010 0707 	ands.w	r7, r0, #7
 80092f0:	4605      	mov	r5, r0
 80092f2:	d005      	beq.n	8009300 <_strtod_l+0x88>
 80092f4:	2f06      	cmp	r7, #6
 80092f6:	d12c      	bne.n	8009352 <_strtod_l+0xda>
 80092f8:	3601      	adds	r6, #1
 80092fa:	2300      	movs	r3, #0
 80092fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80092fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 8590 	bne.w	8009e28 <_strtod_l+0xbb0>
 8009308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930a:	b1eb      	cbz	r3, 8009348 <_strtod_l+0xd0>
 800930c:	4652      	mov	r2, sl
 800930e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009312:	ec43 2b10 	vmov	d0, r2, r3
 8009316:	b01d      	add	sp, #116	; 0x74
 8009318:	ecbd 8b02 	vpop	{d8}
 800931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009320:	2a20      	cmp	r2, #32
 8009322:	d1cc      	bne.n	80092be <_strtod_l+0x46>
 8009324:	3301      	adds	r3, #1
 8009326:	9317      	str	r3, [sp, #92]	; 0x5c
 8009328:	e7be      	b.n	80092a8 <_strtod_l+0x30>
 800932a:	2a2d      	cmp	r2, #45	; 0x2d
 800932c:	d1c7      	bne.n	80092be <_strtod_l+0x46>
 800932e:	2201      	movs	r2, #1
 8009330:	920a      	str	r2, [sp, #40]	; 0x28
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	9217      	str	r2, [sp, #92]	; 0x5c
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1c2      	bne.n	80092c2 <_strtod_l+0x4a>
 800933c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800933e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 856e 	bne.w	8009e24 <_strtod_l+0xbac>
 8009348:	4652      	mov	r2, sl
 800934a:	465b      	mov	r3, fp
 800934c:	e7e1      	b.n	8009312 <_strtod_l+0x9a>
 800934e:	2200      	movs	r2, #0
 8009350:	e7ee      	b.n	8009330 <_strtod_l+0xb8>
 8009352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009354:	b13a      	cbz	r2, 8009366 <_strtod_l+0xee>
 8009356:	2135      	movs	r1, #53	; 0x35
 8009358:	a81a      	add	r0, sp, #104	; 0x68
 800935a:	f002 ff8e 	bl	800c27a <__copybits>
 800935e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009360:	4620      	mov	r0, r4
 8009362:	f002 fb4d 	bl	800ba00 <_Bfree>
 8009366:	3f01      	subs	r7, #1
 8009368:	2f04      	cmp	r7, #4
 800936a:	d806      	bhi.n	800937a <_strtod_l+0x102>
 800936c:	e8df f007 	tbb	[pc, r7]
 8009370:	1714030a 	.word	0x1714030a
 8009374:	0a          	.byte	0x0a
 8009375:	00          	.byte	0x00
 8009376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800937a:	0728      	lsls	r0, r5, #28
 800937c:	d5c0      	bpl.n	8009300 <_strtod_l+0x88>
 800937e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009382:	e7bd      	b.n	8009300 <_strtod_l+0x88>
 8009384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800938a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800938e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009396:	e7f0      	b.n	800937a <_strtod_l+0x102>
 8009398:	f8df b180 	ldr.w	fp, [pc, #384]	; 800951c <_strtod_l+0x2a4>
 800939c:	e7ed      	b.n	800937a <_strtod_l+0x102>
 800939e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093a2:	f04f 3aff 	mov.w	sl, #4294967295
 80093a6:	e7e8      	b.n	800937a <_strtod_l+0x102>
 80093a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d0f9      	beq.n	80093a8 <_strtod_l+0x130>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0a3      	beq.n	8009300 <_strtod_l+0x88>
 80093b8:	2301      	movs	r3, #1
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80093c8:	464f      	mov	r7, r9
 80093ca:	220a      	movs	r2, #10
 80093cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80093ce:	7806      	ldrb	r6, [r0, #0]
 80093d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093d4:	b2d9      	uxtb	r1, r3
 80093d6:	2909      	cmp	r1, #9
 80093d8:	d92a      	bls.n	8009430 <_strtod_l+0x1b8>
 80093da:	9905      	ldr	r1, [sp, #20]
 80093dc:	462a      	mov	r2, r5
 80093de:	f003 fb9a 	bl	800cb16 <strncmp>
 80093e2:	b398      	cbz	r0, 800944c <_strtod_l+0x1d4>
 80093e4:	2000      	movs	r0, #0
 80093e6:	4632      	mov	r2, r6
 80093e8:	463d      	mov	r5, r7
 80093ea:	9005      	str	r0, [sp, #20]
 80093ec:	4603      	mov	r3, r0
 80093ee:	2a65      	cmp	r2, #101	; 0x65
 80093f0:	d001      	beq.n	80093f6 <_strtod_l+0x17e>
 80093f2:	2a45      	cmp	r2, #69	; 0x45
 80093f4:	d118      	bne.n	8009428 <_strtod_l+0x1b0>
 80093f6:	b91d      	cbnz	r5, 8009400 <_strtod_l+0x188>
 80093f8:	9a04      	ldr	r2, [sp, #16]
 80093fa:	4302      	orrs	r2, r0
 80093fc:	d09e      	beq.n	800933c <_strtod_l+0xc4>
 80093fe:	2500      	movs	r5, #0
 8009400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009404:	f108 0201 	add.w	r2, r8, #1
 8009408:	9217      	str	r2, [sp, #92]	; 0x5c
 800940a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800940e:	2a2b      	cmp	r2, #43	; 0x2b
 8009410:	d075      	beq.n	80094fe <_strtod_l+0x286>
 8009412:	2a2d      	cmp	r2, #45	; 0x2d
 8009414:	d07b      	beq.n	800950e <_strtod_l+0x296>
 8009416:	f04f 0c00 	mov.w	ip, #0
 800941a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800941e:	2909      	cmp	r1, #9
 8009420:	f240 8082 	bls.w	8009528 <_strtod_l+0x2b0>
 8009424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009428:	2600      	movs	r6, #0
 800942a:	e09d      	b.n	8009568 <_strtod_l+0x2f0>
 800942c:	2300      	movs	r3, #0
 800942e:	e7c4      	b.n	80093ba <_strtod_l+0x142>
 8009430:	2f08      	cmp	r7, #8
 8009432:	bfd8      	it	le
 8009434:	9907      	ldrle	r1, [sp, #28]
 8009436:	f100 0001 	add.w	r0, r0, #1
 800943a:	bfda      	itte	le
 800943c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009440:	9307      	strle	r3, [sp, #28]
 8009442:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009446:	3701      	adds	r7, #1
 8009448:	9017      	str	r0, [sp, #92]	; 0x5c
 800944a:	e7bf      	b.n	80093cc <_strtod_l+0x154>
 800944c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800944e:	195a      	adds	r2, r3, r5
 8009450:	9217      	str	r2, [sp, #92]	; 0x5c
 8009452:	5d5a      	ldrb	r2, [r3, r5]
 8009454:	2f00      	cmp	r7, #0
 8009456:	d037      	beq.n	80094c8 <_strtod_l+0x250>
 8009458:	9005      	str	r0, [sp, #20]
 800945a:	463d      	mov	r5, r7
 800945c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009460:	2b09      	cmp	r3, #9
 8009462:	d912      	bls.n	800948a <_strtod_l+0x212>
 8009464:	2301      	movs	r3, #1
 8009466:	e7c2      	b.n	80093ee <_strtod_l+0x176>
 8009468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	9217      	str	r2, [sp, #92]	; 0x5c
 800946e:	785a      	ldrb	r2, [r3, #1]
 8009470:	3001      	adds	r0, #1
 8009472:	2a30      	cmp	r2, #48	; 0x30
 8009474:	d0f8      	beq.n	8009468 <_strtod_l+0x1f0>
 8009476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800947a:	2b08      	cmp	r3, #8
 800947c:	f200 84d9 	bhi.w	8009e32 <_strtod_l+0xbba>
 8009480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009482:	9005      	str	r0, [sp, #20]
 8009484:	2000      	movs	r0, #0
 8009486:	9308      	str	r3, [sp, #32]
 8009488:	4605      	mov	r5, r0
 800948a:	3a30      	subs	r2, #48	; 0x30
 800948c:	f100 0301 	add.w	r3, r0, #1
 8009490:	d014      	beq.n	80094bc <_strtod_l+0x244>
 8009492:	9905      	ldr	r1, [sp, #20]
 8009494:	4419      	add	r1, r3
 8009496:	9105      	str	r1, [sp, #20]
 8009498:	462b      	mov	r3, r5
 800949a:	eb00 0e05 	add.w	lr, r0, r5
 800949e:	210a      	movs	r1, #10
 80094a0:	4573      	cmp	r3, lr
 80094a2:	d113      	bne.n	80094cc <_strtod_l+0x254>
 80094a4:	182b      	adds	r3, r5, r0
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	f105 0501 	add.w	r5, r5, #1
 80094ac:	4405      	add	r5, r0
 80094ae:	dc1c      	bgt.n	80094ea <_strtod_l+0x272>
 80094b0:	9907      	ldr	r1, [sp, #28]
 80094b2:	230a      	movs	r3, #10
 80094b4:	fb03 2301 	mla	r3, r3, r1, r2
 80094b8:	9307      	str	r3, [sp, #28]
 80094ba:	2300      	movs	r3, #0
 80094bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094be:	1c51      	adds	r1, r2, #1
 80094c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80094c2:	7852      	ldrb	r2, [r2, #1]
 80094c4:	4618      	mov	r0, r3
 80094c6:	e7c9      	b.n	800945c <_strtod_l+0x1e4>
 80094c8:	4638      	mov	r0, r7
 80094ca:	e7d2      	b.n	8009472 <_strtod_l+0x1fa>
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	dc04      	bgt.n	80094da <_strtod_l+0x262>
 80094d0:	9e07      	ldr	r6, [sp, #28]
 80094d2:	434e      	muls	r6, r1
 80094d4:	9607      	str	r6, [sp, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	e7e2      	b.n	80094a0 <_strtod_l+0x228>
 80094da:	f103 0c01 	add.w	ip, r3, #1
 80094de:	f1bc 0f10 	cmp.w	ip, #16
 80094e2:	bfd8      	it	le
 80094e4:	fb01 f909 	mulle.w	r9, r1, r9
 80094e8:	e7f5      	b.n	80094d6 <_strtod_l+0x25e>
 80094ea:	2d10      	cmp	r5, #16
 80094ec:	bfdc      	itt	le
 80094ee:	230a      	movle	r3, #10
 80094f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80094f4:	e7e1      	b.n	80094ba <_strtod_l+0x242>
 80094f6:	2300      	movs	r3, #0
 80094f8:	9305      	str	r3, [sp, #20]
 80094fa:	2301      	movs	r3, #1
 80094fc:	e77c      	b.n	80093f8 <_strtod_l+0x180>
 80094fe:	f04f 0c00 	mov.w	ip, #0
 8009502:	f108 0202 	add.w	r2, r8, #2
 8009506:	9217      	str	r2, [sp, #92]	; 0x5c
 8009508:	f898 2002 	ldrb.w	r2, [r8, #2]
 800950c:	e785      	b.n	800941a <_strtod_l+0x1a2>
 800950e:	f04f 0c01 	mov.w	ip, #1
 8009512:	e7f6      	b.n	8009502 <_strtod_l+0x28a>
 8009514:	0800d314 	.word	0x0800d314
 8009518:	0800d068 	.word	0x0800d068
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009522:	1c51      	adds	r1, r2, #1
 8009524:	9117      	str	r1, [sp, #92]	; 0x5c
 8009526:	7852      	ldrb	r2, [r2, #1]
 8009528:	2a30      	cmp	r2, #48	; 0x30
 800952a:	d0f9      	beq.n	8009520 <_strtod_l+0x2a8>
 800952c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009530:	2908      	cmp	r1, #8
 8009532:	f63f af79 	bhi.w	8009428 <_strtod_l+0x1b0>
 8009536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800953a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800953c:	9206      	str	r2, [sp, #24]
 800953e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009540:	1c51      	adds	r1, r2, #1
 8009542:	9117      	str	r1, [sp, #92]	; 0x5c
 8009544:	7852      	ldrb	r2, [r2, #1]
 8009546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800954a:	2e09      	cmp	r6, #9
 800954c:	d937      	bls.n	80095be <_strtod_l+0x346>
 800954e:	9e06      	ldr	r6, [sp, #24]
 8009550:	1b89      	subs	r1, r1, r6
 8009552:	2908      	cmp	r1, #8
 8009554:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009558:	dc02      	bgt.n	8009560 <_strtod_l+0x2e8>
 800955a:	4576      	cmp	r6, lr
 800955c:	bfa8      	it	ge
 800955e:	4676      	movge	r6, lr
 8009560:	f1bc 0f00 	cmp.w	ip, #0
 8009564:	d000      	beq.n	8009568 <_strtod_l+0x2f0>
 8009566:	4276      	negs	r6, r6
 8009568:	2d00      	cmp	r5, #0
 800956a:	d14d      	bne.n	8009608 <_strtod_l+0x390>
 800956c:	9904      	ldr	r1, [sp, #16]
 800956e:	4301      	orrs	r1, r0
 8009570:	f47f aec6 	bne.w	8009300 <_strtod_l+0x88>
 8009574:	2b00      	cmp	r3, #0
 8009576:	f47f aee1 	bne.w	800933c <_strtod_l+0xc4>
 800957a:	2a69      	cmp	r2, #105	; 0x69
 800957c:	d027      	beq.n	80095ce <_strtod_l+0x356>
 800957e:	dc24      	bgt.n	80095ca <_strtod_l+0x352>
 8009580:	2a49      	cmp	r2, #73	; 0x49
 8009582:	d024      	beq.n	80095ce <_strtod_l+0x356>
 8009584:	2a4e      	cmp	r2, #78	; 0x4e
 8009586:	f47f aed9 	bne.w	800933c <_strtod_l+0xc4>
 800958a:	499f      	ldr	r1, [pc, #636]	; (8009808 <_strtod_l+0x590>)
 800958c:	a817      	add	r0, sp, #92	; 0x5c
 800958e:	f002 f8b3 	bl	800b6f8 <__match>
 8009592:	2800      	cmp	r0, #0
 8009594:	f43f aed2 	beq.w	800933c <_strtod_l+0xc4>
 8009598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b28      	cmp	r3, #40	; 0x28
 800959e:	d12d      	bne.n	80095fc <_strtod_l+0x384>
 80095a0:	499a      	ldr	r1, [pc, #616]	; (800980c <_strtod_l+0x594>)
 80095a2:	aa1a      	add	r2, sp, #104	; 0x68
 80095a4:	a817      	add	r0, sp, #92	; 0x5c
 80095a6:	f002 f8bb 	bl	800b720 <__hexnan>
 80095aa:	2805      	cmp	r0, #5
 80095ac:	d126      	bne.n	80095fc <_strtod_l+0x384>
 80095ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80095b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095bc:	e6a0      	b.n	8009300 <_strtod_l+0x88>
 80095be:	210a      	movs	r1, #10
 80095c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80095c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095c8:	e7b9      	b.n	800953e <_strtod_l+0x2c6>
 80095ca:	2a6e      	cmp	r2, #110	; 0x6e
 80095cc:	e7db      	b.n	8009586 <_strtod_l+0x30e>
 80095ce:	4990      	ldr	r1, [pc, #576]	; (8009810 <_strtod_l+0x598>)
 80095d0:	a817      	add	r0, sp, #92	; 0x5c
 80095d2:	f002 f891 	bl	800b6f8 <__match>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f aeb0 	beq.w	800933c <_strtod_l+0xc4>
 80095dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095de:	498d      	ldr	r1, [pc, #564]	; (8009814 <_strtod_l+0x59c>)
 80095e0:	3b01      	subs	r3, #1
 80095e2:	a817      	add	r0, sp, #92	; 0x5c
 80095e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80095e6:	f002 f887 	bl	800b6f8 <__match>
 80095ea:	b910      	cbnz	r0, 80095f2 <_strtod_l+0x37a>
 80095ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ee:	3301      	adds	r3, #1
 80095f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80095f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009824 <_strtod_l+0x5ac>
 80095f6:	f04f 0a00 	mov.w	sl, #0
 80095fa:	e681      	b.n	8009300 <_strtod_l+0x88>
 80095fc:	4886      	ldr	r0, [pc, #536]	; (8009818 <_strtod_l+0x5a0>)
 80095fe:	f003 fa2f 	bl	800ca60 <nan>
 8009602:	ec5b ab10 	vmov	sl, fp, d0
 8009606:	e67b      	b.n	8009300 <_strtod_l+0x88>
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	9807      	ldr	r0, [sp, #28]
 800960c:	1af3      	subs	r3, r6, r3
 800960e:	2f00      	cmp	r7, #0
 8009610:	bf08      	it	eq
 8009612:	462f      	moveq	r7, r5
 8009614:	2d10      	cmp	r5, #16
 8009616:	9306      	str	r3, [sp, #24]
 8009618:	46a8      	mov	r8, r5
 800961a:	bfa8      	it	ge
 800961c:	f04f 0810 	movge.w	r8, #16
 8009620:	f7f6 ff78 	bl	8000514 <__aeabi_ui2d>
 8009624:	2d09      	cmp	r5, #9
 8009626:	4682      	mov	sl, r0
 8009628:	468b      	mov	fp, r1
 800962a:	dd13      	ble.n	8009654 <_strtod_l+0x3dc>
 800962c:	4b7b      	ldr	r3, [pc, #492]	; (800981c <_strtod_l+0x5a4>)
 800962e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009636:	f7f6 ffe7 	bl	8000608 <__aeabi_dmul>
 800963a:	4682      	mov	sl, r0
 800963c:	4648      	mov	r0, r9
 800963e:	468b      	mov	fp, r1
 8009640:	f7f6 ff68 	bl	8000514 <__aeabi_ui2d>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f6 fe26 	bl	800029c <__adddf3>
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	2d0f      	cmp	r5, #15
 8009656:	dc38      	bgt.n	80096ca <_strtod_l+0x452>
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f43f ae50 	beq.w	8009300 <_strtod_l+0x88>
 8009660:	dd24      	ble.n	80096ac <_strtod_l+0x434>
 8009662:	2b16      	cmp	r3, #22
 8009664:	dc0b      	bgt.n	800967e <_strtod_l+0x406>
 8009666:	496d      	ldr	r1, [pc, #436]	; (800981c <_strtod_l+0x5a4>)
 8009668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800966c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009670:	4652      	mov	r2, sl
 8009672:	465b      	mov	r3, fp
 8009674:	f7f6 ffc8 	bl	8000608 <__aeabi_dmul>
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	e640      	b.n	8009300 <_strtod_l+0x88>
 800967e:	9a06      	ldr	r2, [sp, #24]
 8009680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009684:	4293      	cmp	r3, r2
 8009686:	db20      	blt.n	80096ca <_strtod_l+0x452>
 8009688:	4c64      	ldr	r4, [pc, #400]	; (800981c <_strtod_l+0x5a4>)
 800968a:	f1c5 050f 	rsb	r5, r5, #15
 800968e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969a:	f7f6 ffb5 	bl	8000608 <__aeabi_dmul>
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	1b5d      	subs	r5, r3, r5
 80096a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096aa:	e7e3      	b.n	8009674 <_strtod_l+0x3fc>
 80096ac:	9b06      	ldr	r3, [sp, #24]
 80096ae:	3316      	adds	r3, #22
 80096b0:	db0b      	blt.n	80096ca <_strtod_l+0x452>
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	1b9e      	subs	r6, r3, r6
 80096b6:	4b59      	ldr	r3, [pc, #356]	; (800981c <_strtod_l+0x5a4>)
 80096b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80096bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096c0:	4650      	mov	r0, sl
 80096c2:	4659      	mov	r1, fp
 80096c4:	f7f7 f8ca 	bl	800085c <__aeabi_ddiv>
 80096c8:	e7d6      	b.n	8009678 <_strtod_l+0x400>
 80096ca:	9b06      	ldr	r3, [sp, #24]
 80096cc:	eba5 0808 	sub.w	r8, r5, r8
 80096d0:	4498      	add	r8, r3
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	dd74      	ble.n	80097c2 <_strtod_l+0x54a>
 80096d8:	f018 030f 	ands.w	r3, r8, #15
 80096dc:	d00a      	beq.n	80096f4 <_strtod_l+0x47c>
 80096de:	494f      	ldr	r1, [pc, #316]	; (800981c <_strtod_l+0x5a4>)
 80096e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096e4:	4652      	mov	r2, sl
 80096e6:	465b      	mov	r3, fp
 80096e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ec:	f7f6 ff8c 	bl	8000608 <__aeabi_dmul>
 80096f0:	4682      	mov	sl, r0
 80096f2:	468b      	mov	fp, r1
 80096f4:	f038 080f 	bics.w	r8, r8, #15
 80096f8:	d04f      	beq.n	800979a <_strtod_l+0x522>
 80096fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80096fe:	dd22      	ble.n	8009746 <_strtod_l+0x4ce>
 8009700:	2500      	movs	r5, #0
 8009702:	462e      	mov	r6, r5
 8009704:	9507      	str	r5, [sp, #28]
 8009706:	9505      	str	r5, [sp, #20]
 8009708:	2322      	movs	r3, #34	; 0x22
 800970a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009824 <_strtod_l+0x5ac>
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	f04f 0a00 	mov.w	sl, #0
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f adf2 	beq.w	8009300 <_strtod_l+0x88>
 800971c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800971e:	4620      	mov	r0, r4
 8009720:	f002 f96e 	bl	800ba00 <_Bfree>
 8009724:	9905      	ldr	r1, [sp, #20]
 8009726:	4620      	mov	r0, r4
 8009728:	f002 f96a 	bl	800ba00 <_Bfree>
 800972c:	4631      	mov	r1, r6
 800972e:	4620      	mov	r0, r4
 8009730:	f002 f966 	bl	800ba00 <_Bfree>
 8009734:	9907      	ldr	r1, [sp, #28]
 8009736:	4620      	mov	r0, r4
 8009738:	f002 f962 	bl	800ba00 <_Bfree>
 800973c:	4629      	mov	r1, r5
 800973e:	4620      	mov	r0, r4
 8009740:	f002 f95e 	bl	800ba00 <_Bfree>
 8009744:	e5dc      	b.n	8009300 <_strtod_l+0x88>
 8009746:	4b36      	ldr	r3, [pc, #216]	; (8009820 <_strtod_l+0x5a8>)
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	2300      	movs	r3, #0
 800974c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009750:	4650      	mov	r0, sl
 8009752:	4659      	mov	r1, fp
 8009754:	4699      	mov	r9, r3
 8009756:	f1b8 0f01 	cmp.w	r8, #1
 800975a:	dc21      	bgt.n	80097a0 <_strtod_l+0x528>
 800975c:	b10b      	cbz	r3, 8009762 <_strtod_l+0x4ea>
 800975e:	4682      	mov	sl, r0
 8009760:	468b      	mov	fp, r1
 8009762:	4b2f      	ldr	r3, [pc, #188]	; (8009820 <_strtod_l+0x5a8>)
 8009764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800976c:	4652      	mov	r2, sl
 800976e:	465b      	mov	r3, fp
 8009770:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009774:	f7f6 ff48 	bl	8000608 <__aeabi_dmul>
 8009778:	4b2a      	ldr	r3, [pc, #168]	; (8009824 <_strtod_l+0x5ac>)
 800977a:	460a      	mov	r2, r1
 800977c:	400b      	ands	r3, r1
 800977e:	492a      	ldr	r1, [pc, #168]	; (8009828 <_strtod_l+0x5b0>)
 8009780:	428b      	cmp	r3, r1
 8009782:	4682      	mov	sl, r0
 8009784:	d8bc      	bhi.n	8009700 <_strtod_l+0x488>
 8009786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800978a:	428b      	cmp	r3, r1
 800978c:	bf86      	itte	hi
 800978e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800982c <_strtod_l+0x5b4>
 8009792:	f04f 3aff 	movhi.w	sl, #4294967295
 8009796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800979a:	2300      	movs	r3, #0
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	e084      	b.n	80098aa <_strtod_l+0x632>
 80097a0:	f018 0f01 	tst.w	r8, #1
 80097a4:	d005      	beq.n	80097b2 <_strtod_l+0x53a>
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 ff2c 	bl	8000608 <__aeabi_dmul>
 80097b0:	2301      	movs	r3, #1
 80097b2:	9a04      	ldr	r2, [sp, #16]
 80097b4:	3208      	adds	r2, #8
 80097b6:	f109 0901 	add.w	r9, r9, #1
 80097ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097be:	9204      	str	r2, [sp, #16]
 80097c0:	e7c9      	b.n	8009756 <_strtod_l+0x4de>
 80097c2:	d0ea      	beq.n	800979a <_strtod_l+0x522>
 80097c4:	f1c8 0800 	rsb	r8, r8, #0
 80097c8:	f018 020f 	ands.w	r2, r8, #15
 80097cc:	d00a      	beq.n	80097e4 <_strtod_l+0x56c>
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <_strtod_l+0x5a4>)
 80097d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f7f7 f83e 	bl	800085c <__aeabi_ddiv>
 80097e0:	4682      	mov	sl, r0
 80097e2:	468b      	mov	fp, r1
 80097e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80097e8:	d0d7      	beq.n	800979a <_strtod_l+0x522>
 80097ea:	f1b8 0f1f 	cmp.w	r8, #31
 80097ee:	dd1f      	ble.n	8009830 <_strtod_l+0x5b8>
 80097f0:	2500      	movs	r5, #0
 80097f2:	462e      	mov	r6, r5
 80097f4:	9507      	str	r5, [sp, #28]
 80097f6:	9505      	str	r5, [sp, #20]
 80097f8:	2322      	movs	r3, #34	; 0x22
 80097fa:	f04f 0a00 	mov.w	sl, #0
 80097fe:	f04f 0b00 	mov.w	fp, #0
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	e786      	b.n	8009714 <_strtod_l+0x49c>
 8009806:	bf00      	nop
 8009808:	0800d039 	.word	0x0800d039
 800980c:	0800d07c 	.word	0x0800d07c
 8009810:	0800d031 	.word	0x0800d031
 8009814:	0800d1bc 	.word	0x0800d1bc
 8009818:	0800d4d0 	.word	0x0800d4d0
 800981c:	0800d3b0 	.word	0x0800d3b0
 8009820:	0800d388 	.word	0x0800d388
 8009824:	7ff00000 	.word	0x7ff00000
 8009828:	7ca00000 	.word	0x7ca00000
 800982c:	7fefffff 	.word	0x7fefffff
 8009830:	f018 0310 	ands.w	r3, r8, #16
 8009834:	bf18      	it	ne
 8009836:	236a      	movne	r3, #106	; 0x6a
 8009838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009be8 <_strtod_l+0x970>
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	4650      	mov	r0, sl
 8009840:	4659      	mov	r1, fp
 8009842:	2300      	movs	r3, #0
 8009844:	f018 0f01 	tst.w	r8, #1
 8009848:	d004      	beq.n	8009854 <_strtod_l+0x5dc>
 800984a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800984e:	f7f6 fedb 	bl	8000608 <__aeabi_dmul>
 8009852:	2301      	movs	r3, #1
 8009854:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009858:	f109 0908 	add.w	r9, r9, #8
 800985c:	d1f2      	bne.n	8009844 <_strtod_l+0x5cc>
 800985e:	b10b      	cbz	r3, 8009864 <_strtod_l+0x5ec>
 8009860:	4682      	mov	sl, r0
 8009862:	468b      	mov	fp, r1
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	b1c3      	cbz	r3, 800989a <_strtod_l+0x622>
 8009868:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800986c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009870:	2b00      	cmp	r3, #0
 8009872:	4659      	mov	r1, fp
 8009874:	dd11      	ble.n	800989a <_strtod_l+0x622>
 8009876:	2b1f      	cmp	r3, #31
 8009878:	f340 8124 	ble.w	8009ac4 <_strtod_l+0x84c>
 800987c:	2b34      	cmp	r3, #52	; 0x34
 800987e:	bfde      	ittt	le
 8009880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009884:	f04f 33ff 	movle.w	r3, #4294967295
 8009888:	fa03 f202 	lslle.w	r2, r3, r2
 800988c:	f04f 0a00 	mov.w	sl, #0
 8009890:	bfcc      	ite	gt
 8009892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009896:	ea02 0b01 	andle.w	fp, r2, r1
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	4650      	mov	r0, sl
 80098a0:	4659      	mov	r1, fp
 80098a2:	f7f7 f919 	bl	8000ad8 <__aeabi_dcmpeq>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1a2      	bne.n	80097f0 <_strtod_l+0x578>
 80098aa:	9b07      	ldr	r3, [sp, #28]
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	9908      	ldr	r1, [sp, #32]
 80098b0:	462b      	mov	r3, r5
 80098b2:	463a      	mov	r2, r7
 80098b4:	4620      	mov	r0, r4
 80098b6:	f002 f90b 	bl	800bad0 <__s2b>
 80098ba:	9007      	str	r0, [sp, #28]
 80098bc:	2800      	cmp	r0, #0
 80098be:	f43f af1f 	beq.w	8009700 <_strtod_l+0x488>
 80098c2:	9b05      	ldr	r3, [sp, #20]
 80098c4:	1b9e      	subs	r6, r3, r6
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfb4      	ite	lt
 80098cc:	4633      	movlt	r3, r6
 80098ce:	2300      	movge	r3, #0
 80098d0:	930c      	str	r3, [sp, #48]	; 0x30
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	2500      	movs	r5, #0
 80098d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098da:	9312      	str	r3, [sp, #72]	; 0x48
 80098dc:	462e      	mov	r6, r5
 80098de:	9b07      	ldr	r3, [sp, #28]
 80098e0:	4620      	mov	r0, r4
 80098e2:	6859      	ldr	r1, [r3, #4]
 80098e4:	f002 f84c 	bl	800b980 <_Balloc>
 80098e8:	9005      	str	r0, [sp, #20]
 80098ea:	2800      	cmp	r0, #0
 80098ec:	f43f af0c 	beq.w	8009708 <_strtod_l+0x490>
 80098f0:	9b07      	ldr	r3, [sp, #28]
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	3202      	adds	r2, #2
 80098f6:	f103 010c 	add.w	r1, r3, #12
 80098fa:	0092      	lsls	r2, r2, #2
 80098fc:	300c      	adds	r0, #12
 80098fe:	f002 f831 	bl	800b964 <memcpy>
 8009902:	ec4b ab10 	vmov	d0, sl, fp
 8009906:	aa1a      	add	r2, sp, #104	; 0x68
 8009908:	a919      	add	r1, sp, #100	; 0x64
 800990a:	4620      	mov	r0, r4
 800990c:	f002 fc26 	bl	800c15c <__d2b>
 8009910:	ec4b ab18 	vmov	d8, sl, fp
 8009914:	9018      	str	r0, [sp, #96]	; 0x60
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aef6 	beq.w	8009708 <_strtod_l+0x490>
 800991c:	2101      	movs	r1, #1
 800991e:	4620      	mov	r0, r4
 8009920:	f002 f970 	bl	800bc04 <__i2b>
 8009924:	4606      	mov	r6, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	f43f aeee 	beq.w	8009708 <_strtod_l+0x490>
 800992c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfab      	itete	ge
 8009934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800993a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800993e:	bfac      	ite	ge
 8009940:	eb03 0902 	addge.w	r9, r3, r2
 8009944:	1ad7      	sublt	r7, r2, r3
 8009946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009948:	eba3 0801 	sub.w	r8, r3, r1
 800994c:	4490      	add	r8, r2
 800994e:	4ba1      	ldr	r3, [pc, #644]	; (8009bd4 <_strtod_l+0x95c>)
 8009950:	f108 38ff 	add.w	r8, r8, #4294967295
 8009954:	4598      	cmp	r8, r3
 8009956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800995a:	f280 80c7 	bge.w	8009aec <_strtod_l+0x874>
 800995e:	eba3 0308 	sub.w	r3, r3, r8
 8009962:	2b1f      	cmp	r3, #31
 8009964:	eba2 0203 	sub.w	r2, r2, r3
 8009968:	f04f 0101 	mov.w	r1, #1
 800996c:	f300 80b1 	bgt.w	8009ad2 <_strtod_l+0x85a>
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	930d      	str	r3, [sp, #52]	; 0x34
 8009976:	2300      	movs	r3, #0
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	eb09 0802 	add.w	r8, r9, r2
 800997e:	9b04      	ldr	r3, [sp, #16]
 8009980:	45c1      	cmp	r9, r8
 8009982:	4417      	add	r7, r2
 8009984:	441f      	add	r7, r3
 8009986:	464b      	mov	r3, r9
 8009988:	bfa8      	it	ge
 800998a:	4643      	movge	r3, r8
 800998c:	42bb      	cmp	r3, r7
 800998e:	bfa8      	it	ge
 8009990:	463b      	movge	r3, r7
 8009992:	2b00      	cmp	r3, #0
 8009994:	bfc2      	ittt	gt
 8009996:	eba8 0803 	subgt.w	r8, r8, r3
 800999a:	1aff      	subgt	r7, r7, r3
 800999c:	eba9 0903 	subgt.w	r9, r9, r3
 80099a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd17      	ble.n	80099d6 <_strtod_l+0x75e>
 80099a6:	4631      	mov	r1, r6
 80099a8:	461a      	mov	r2, r3
 80099aa:	4620      	mov	r0, r4
 80099ac:	f002 f9ea 	bl	800bd84 <__pow5mult>
 80099b0:	4606      	mov	r6, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aea8 	beq.w	8009708 <_strtod_l+0x490>
 80099b8:	4601      	mov	r1, r0
 80099ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099bc:	4620      	mov	r0, r4
 80099be:	f002 f937 	bl	800bc30 <__multiply>
 80099c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f43f ae9f 	beq.w	8009708 <_strtod_l+0x490>
 80099ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099cc:	4620      	mov	r0, r4
 80099ce:	f002 f817 	bl	800ba00 <_Bfree>
 80099d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d4:	9318      	str	r3, [sp, #96]	; 0x60
 80099d6:	f1b8 0f00 	cmp.w	r8, #0
 80099da:	f300 808c 	bgt.w	8009af6 <_strtod_l+0x87e>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dd08      	ble.n	80099f6 <_strtod_l+0x77e>
 80099e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099e6:	9905      	ldr	r1, [sp, #20]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f002 f9cb 	bl	800bd84 <__pow5mult>
 80099ee:	9005      	str	r0, [sp, #20]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f43f ae89 	beq.w	8009708 <_strtod_l+0x490>
 80099f6:	2f00      	cmp	r7, #0
 80099f8:	dd08      	ble.n	8009a0c <_strtod_l+0x794>
 80099fa:	9905      	ldr	r1, [sp, #20]
 80099fc:	463a      	mov	r2, r7
 80099fe:	4620      	mov	r0, r4
 8009a00:	f002 fa1a 	bl	800be38 <__lshift>
 8009a04:	9005      	str	r0, [sp, #20]
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f ae7e 	beq.w	8009708 <_strtod_l+0x490>
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	dd08      	ble.n	8009a24 <_strtod_l+0x7ac>
 8009a12:	4631      	mov	r1, r6
 8009a14:	464a      	mov	r2, r9
 8009a16:	4620      	mov	r0, r4
 8009a18:	f002 fa0e 	bl	800be38 <__lshift>
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f ae72 	beq.w	8009708 <_strtod_l+0x490>
 8009a24:	9a05      	ldr	r2, [sp, #20]
 8009a26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f002 fa91 	bl	800bf50 <__mdiff>
 8009a2e:	4605      	mov	r5, r0
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f43f ae69 	beq.w	8009708 <_strtod_l+0x490>
 8009a36:	68c3      	ldr	r3, [r0, #12]
 8009a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60c3      	str	r3, [r0, #12]
 8009a3e:	4631      	mov	r1, r6
 8009a40:	f002 fa6a 	bl	800bf18 <__mcmp>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	da60      	bge.n	8009b0a <_strtod_l+0x892>
 8009a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a4e:	f040 8082 	bne.w	8009b56 <_strtod_l+0x8de>
 8009a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d17d      	bne.n	8009b56 <_strtod_l+0x8de>
 8009a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a5e:	0d1b      	lsrs	r3, r3, #20
 8009a60:	051b      	lsls	r3, r3, #20
 8009a62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a66:	d976      	bls.n	8009b56 <_strtod_l+0x8de>
 8009a68:	696b      	ldr	r3, [r5, #20]
 8009a6a:	b913      	cbnz	r3, 8009a72 <_strtod_l+0x7fa>
 8009a6c:	692b      	ldr	r3, [r5, #16]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	dd71      	ble.n	8009b56 <_strtod_l+0x8de>
 8009a72:	4629      	mov	r1, r5
 8009a74:	2201      	movs	r2, #1
 8009a76:	4620      	mov	r0, r4
 8009a78:	f002 f9de 	bl	800be38 <__lshift>
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4605      	mov	r5, r0
 8009a80:	f002 fa4a 	bl	800bf18 <__mcmp>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	dd66      	ble.n	8009b56 <_strtod_l+0x8de>
 8009a88:	9904      	ldr	r1, [sp, #16]
 8009a8a:	4a53      	ldr	r2, [pc, #332]	; (8009bd8 <_strtod_l+0x960>)
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	2900      	cmp	r1, #0
 8009a90:	f000 8081 	beq.w	8009b96 <_strtod_l+0x91e>
 8009a94:	ea02 010b 	and.w	r1, r2, fp
 8009a98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a9c:	dc7b      	bgt.n	8009b96 <_strtod_l+0x91e>
 8009a9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aa2:	f77f aea9 	ble.w	80097f8 <_strtod_l+0x580>
 8009aa6:	4b4d      	ldr	r3, [pc, #308]	; (8009bdc <_strtod_l+0x964>)
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	4659      	mov	r1, fp
 8009aac:	2200      	movs	r2, #0
 8009aae:	f7f6 fdab 	bl	8000608 <__aeabi_dmul>
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4303      	orrs	r3, r0
 8009ab6:	bf08      	it	eq
 8009ab8:	2322      	moveq	r3, #34	; 0x22
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	bf08      	it	eq
 8009ac0:	6023      	streq	r3, [r4, #0]
 8009ac2:	e62b      	b.n	800971c <_strtod_l+0x4a4>
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	ea03 0a0a 	and.w	sl, r3, sl
 8009ad0:	e6e3      	b.n	800989a <_strtod_l+0x622>
 8009ad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009ae2:	fa01 f308 	lsl.w	r3, r1, r8
 8009ae6:	9308      	str	r3, [sp, #32]
 8009ae8:	910d      	str	r1, [sp, #52]	; 0x34
 8009aea:	e746      	b.n	800997a <_strtod_l+0x702>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9308      	str	r3, [sp, #32]
 8009af0:	2301      	movs	r3, #1
 8009af2:	930d      	str	r3, [sp, #52]	; 0x34
 8009af4:	e741      	b.n	800997a <_strtod_l+0x702>
 8009af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009af8:	4642      	mov	r2, r8
 8009afa:	4620      	mov	r0, r4
 8009afc:	f002 f99c 	bl	800be38 <__lshift>
 8009b00:	9018      	str	r0, [sp, #96]	; 0x60
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f47f af6b 	bne.w	80099de <_strtod_l+0x766>
 8009b08:	e5fe      	b.n	8009708 <_strtod_l+0x490>
 8009b0a:	465f      	mov	r7, fp
 8009b0c:	d16e      	bne.n	8009bec <_strtod_l+0x974>
 8009b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b14:	b342      	cbz	r2, 8009b68 <_strtod_l+0x8f0>
 8009b16:	4a32      	ldr	r2, [pc, #200]	; (8009be0 <_strtod_l+0x968>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d128      	bne.n	8009b6e <_strtod_l+0x8f6>
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	4651      	mov	r1, sl
 8009b20:	b1eb      	cbz	r3, 8009b5e <_strtod_l+0x8e6>
 8009b22:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <_strtod_l+0x960>)
 8009b24:	403b      	ands	r3, r7
 8009b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2e:	d819      	bhi.n	8009b64 <_strtod_l+0x8ec>
 8009b30:	0d1b      	lsrs	r3, r3, #20
 8009b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	4299      	cmp	r1, r3
 8009b3c:	d117      	bne.n	8009b6e <_strtod_l+0x8f6>
 8009b3e:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <_strtod_l+0x96c>)
 8009b40:	429f      	cmp	r7, r3
 8009b42:	d102      	bne.n	8009b4a <_strtod_l+0x8d2>
 8009b44:	3101      	adds	r1, #1
 8009b46:	f43f addf 	beq.w	8009708 <_strtod_l+0x490>
 8009b4a:	4b23      	ldr	r3, [pc, #140]	; (8009bd8 <_strtod_l+0x960>)
 8009b4c:	403b      	ands	r3, r7
 8009b4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b52:	f04f 0a00 	mov.w	sl, #0
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1a4      	bne.n	8009aa6 <_strtod_l+0x82e>
 8009b5c:	e5de      	b.n	800971c <_strtod_l+0x4a4>
 8009b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b62:	e7ea      	b.n	8009b3a <_strtod_l+0x8c2>
 8009b64:	4613      	mov	r3, r2
 8009b66:	e7e8      	b.n	8009b3a <_strtod_l+0x8c2>
 8009b68:	ea53 030a 	orrs.w	r3, r3, sl
 8009b6c:	d08c      	beq.n	8009a88 <_strtod_l+0x810>
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	b1db      	cbz	r3, 8009baa <_strtod_l+0x932>
 8009b72:	423b      	tst	r3, r7
 8009b74:	d0ef      	beq.n	8009b56 <_strtod_l+0x8de>
 8009b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b78:	9a04      	ldr	r2, [sp, #16]
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	4659      	mov	r1, fp
 8009b7e:	b1c3      	cbz	r3, 8009bb2 <_strtod_l+0x93a>
 8009b80:	f7ff fb5c 	bl	800923c <sulp>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	ec51 0b18 	vmov	r0, r1, d8
 8009b8c:	f7f6 fb86 	bl	800029c <__adddf3>
 8009b90:	4682      	mov	sl, r0
 8009b92:	468b      	mov	fp, r1
 8009b94:	e7df      	b.n	8009b56 <_strtod_l+0x8de>
 8009b96:	4013      	ands	r3, r2
 8009b98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ba8:	e7d5      	b.n	8009b56 <_strtod_l+0x8de>
 8009baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bac:	ea13 0f0a 	tst.w	r3, sl
 8009bb0:	e7e0      	b.n	8009b74 <_strtod_l+0x8fc>
 8009bb2:	f7ff fb43 	bl	800923c <sulp>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	ec51 0b18 	vmov	r0, r1, d8
 8009bbe:	f7f6 fb6b 	bl	8000298 <__aeabi_dsub>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4682      	mov	sl, r0
 8009bc8:	468b      	mov	fp, r1
 8009bca:	f7f6 ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0c1      	beq.n	8009b56 <_strtod_l+0x8de>
 8009bd2:	e611      	b.n	80097f8 <_strtod_l+0x580>
 8009bd4:	fffffc02 	.word	0xfffffc02
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	39500000 	.word	0x39500000
 8009be0:	000fffff 	.word	0x000fffff
 8009be4:	7fefffff 	.word	0x7fefffff
 8009be8:	0800d090 	.word	0x0800d090
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f002 fb10 	bl	800c214 <__ratio>
 8009bf4:	ec59 8b10 	vmov	r8, r9, d0
 8009bf8:	ee10 0a10 	vmov	r0, s0
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 ff7c 	bl	8000b00 <__aeabi_dcmple>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d07a      	beq.n	8009d02 <_strtod_l+0xa8a>
 8009c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04a      	beq.n	8009ca8 <_strtod_l+0xa30>
 8009c12:	4b95      	ldr	r3, [pc, #596]	; (8009e68 <_strtod_l+0xbf0>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e68 <_strtod_l+0xbf0>
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	4b92      	ldr	r3, [pc, #584]	; (8009e6c <_strtod_l+0xbf4>)
 8009c24:	403b      	ands	r3, r7
 8009c26:	930d      	str	r3, [sp, #52]	; 0x34
 8009c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c2a:	4b91      	ldr	r3, [pc, #580]	; (8009e70 <_strtod_l+0xbf8>)
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	f040 80b0 	bne.w	8009d92 <_strtod_l+0xb1a>
 8009c32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c3a:	ec4b ab10 	vmov	d0, sl, fp
 8009c3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c42:	f002 fa0f 	bl	800c064 <__ulp>
 8009c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c4a:	ec53 2b10 	vmov	r2, r3, d0
 8009c4e:	f7f6 fcdb 	bl	8000608 <__aeabi_dmul>
 8009c52:	4652      	mov	r2, sl
 8009c54:	465b      	mov	r3, fp
 8009c56:	f7f6 fb21 	bl	800029c <__adddf3>
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4983      	ldr	r1, [pc, #524]	; (8009e6c <_strtod_l+0xbf4>)
 8009c5e:	4a85      	ldr	r2, [pc, #532]	; (8009e74 <_strtod_l+0xbfc>)
 8009c60:	4019      	ands	r1, r3
 8009c62:	4291      	cmp	r1, r2
 8009c64:	4682      	mov	sl, r0
 8009c66:	d960      	bls.n	8009d2a <_strtod_l+0xab2>
 8009c68:	ee18 3a90 	vmov	r3, s17
 8009c6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d104      	bne.n	8009c7e <_strtod_l+0xa06>
 8009c74:	ee18 3a10 	vmov	r3, s16
 8009c78:	3301      	adds	r3, #1
 8009c7a:	f43f ad45 	beq.w	8009708 <_strtod_l+0x490>
 8009c7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009e80 <_strtod_l+0xc08>
 8009c82:	f04f 3aff 	mov.w	sl, #4294967295
 8009c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f001 feb9 	bl	800ba00 <_Bfree>
 8009c8e:	9905      	ldr	r1, [sp, #20]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f001 feb5 	bl	800ba00 <_Bfree>
 8009c96:	4631      	mov	r1, r6
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f001 feb1 	bl	800ba00 <_Bfree>
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f001 fead 	bl	800ba00 <_Bfree>
 8009ca6:	e61a      	b.n	80098de <_strtod_l+0x666>
 8009ca8:	f1ba 0f00 	cmp.w	sl, #0
 8009cac:	d11b      	bne.n	8009ce6 <_strtod_l+0xa6e>
 8009cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cb2:	b9f3      	cbnz	r3, 8009cf2 <_strtod_l+0xa7a>
 8009cb4:	4b6c      	ldr	r3, [pc, #432]	; (8009e68 <_strtod_l+0xbf0>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 ff16 	bl	8000aec <__aeabi_dcmplt>
 8009cc0:	b9d0      	cbnz	r0, 8009cf8 <_strtod_l+0xa80>
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	4b6c      	ldr	r3, [pc, #432]	; (8009e78 <_strtod_l+0xc00>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f7f6 fc9d 	bl	8000608 <__aeabi_dmul>
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4689      	mov	r9, r1
 8009cd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009cda:	9315      	str	r3, [sp, #84]	; 0x54
 8009cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ce4:	e79d      	b.n	8009c22 <_strtod_l+0x9aa>
 8009ce6:	f1ba 0f01 	cmp.w	sl, #1
 8009cea:	d102      	bne.n	8009cf2 <_strtod_l+0xa7a>
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	f43f ad83 	beq.w	80097f8 <_strtod_l+0x580>
 8009cf2:	4b62      	ldr	r3, [pc, #392]	; (8009e7c <_strtod_l+0xc04>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	e78e      	b.n	8009c16 <_strtod_l+0x99e>
 8009cf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e78 <_strtod_l+0xc00>
 8009cfc:	f04f 0800 	mov.w	r8, #0
 8009d00:	e7e7      	b.n	8009cd2 <_strtod_l+0xa5a>
 8009d02:	4b5d      	ldr	r3, [pc, #372]	; (8009e78 <_strtod_l+0xc00>)
 8009d04:	4640      	mov	r0, r8
 8009d06:	4649      	mov	r1, r9
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f7f6 fc7d 	bl	8000608 <__aeabi_dmul>
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d10:	4680      	mov	r8, r0
 8009d12:	4689      	mov	r9, r1
 8009d14:	b933      	cbnz	r3, 8009d24 <_strtod_l+0xaac>
 8009d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d1a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d22:	e7dd      	b.n	8009ce0 <_strtod_l+0xa68>
 8009d24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009d28:	e7f9      	b.n	8009d1e <_strtod_l+0xaa6>
 8009d2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1a8      	bne.n	8009c86 <_strtod_l+0xa0e>
 8009d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d3a:	0d1b      	lsrs	r3, r3, #20
 8009d3c:	051b      	lsls	r3, r3, #20
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d1a1      	bne.n	8009c86 <_strtod_l+0xa0e>
 8009d42:	4640      	mov	r0, r8
 8009d44:	4649      	mov	r1, r9
 8009d46:	f7f7 f80f 	bl	8000d68 <__aeabi_d2lz>
 8009d4a:	f7f6 fc2f 	bl	80005ac <__aeabi_l2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7f6 fa9f 	bl	8000298 <__aeabi_dsub>
 8009d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d60:	ea43 030a 	orr.w	r3, r3, sl
 8009d64:	4313      	orrs	r3, r2
 8009d66:	4680      	mov	r8, r0
 8009d68:	4689      	mov	r9, r1
 8009d6a:	d055      	beq.n	8009e18 <_strtod_l+0xba0>
 8009d6c:	a336      	add	r3, pc, #216	; (adr r3, 8009e48 <_strtod_l+0xbd0>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 febb 	bl	8000aec <__aeabi_dcmplt>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f47f acd0 	bne.w	800971c <_strtod_l+0x4a4>
 8009d7c:	a334      	add	r3, pc, #208	; (adr r3, 8009e50 <_strtod_l+0xbd8>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fecf 	bl	8000b28 <__aeabi_dcmpgt>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f43f af7b 	beq.w	8009c86 <_strtod_l+0xa0e>
 8009d90:	e4c4      	b.n	800971c <_strtod_l+0x4a4>
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	b333      	cbz	r3, 8009de4 <_strtod_l+0xb6c>
 8009d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d9c:	d822      	bhi.n	8009de4 <_strtod_l+0xb6c>
 8009d9e:	a32e      	add	r3, pc, #184	; (adr r3, 8009e58 <_strtod_l+0xbe0>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 feaa 	bl	8000b00 <__aeabi_dcmple>
 8009dac:	b1a0      	cbz	r0, 8009dd8 <_strtod_l+0xb60>
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	f7f6 ff01 	bl	8000bb8 <__aeabi_d2uiz>
 8009db6:	2801      	cmp	r0, #1
 8009db8:	bf38      	it	cc
 8009dba:	2001      	movcc	r0, #1
 8009dbc:	f7f6 fbaa 	bl	8000514 <__aeabi_ui2d>
 8009dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	bb23      	cbnz	r3, 8009e12 <_strtod_l+0xb9a>
 8009dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dcc:	9010      	str	r0, [sp, #64]	; 0x40
 8009dce:	9311      	str	r3, [sp, #68]	; 0x44
 8009dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009de0:	1a9b      	subs	r3, r3, r2
 8009de2:	9309      	str	r3, [sp, #36]	; 0x24
 8009de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009de8:	eeb0 0a48 	vmov.f32	s0, s16
 8009dec:	eef0 0a68 	vmov.f32	s1, s17
 8009df0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009df4:	f002 f936 	bl	800c064 <__ulp>
 8009df8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009dfc:	ec53 2b10 	vmov	r2, r3, d0
 8009e00:	f7f6 fc02 	bl	8000608 <__aeabi_dmul>
 8009e04:	ec53 2b18 	vmov	r2, r3, d8
 8009e08:	f7f6 fa48 	bl	800029c <__adddf3>
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	e78d      	b.n	8009d2e <_strtod_l+0xab6>
 8009e12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009e16:	e7db      	b.n	8009dd0 <_strtod_l+0xb58>
 8009e18:	a311      	add	r3, pc, #68	; (adr r3, 8009e60 <_strtod_l+0xbe8>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fe65 	bl	8000aec <__aeabi_dcmplt>
 8009e22:	e7b2      	b.n	8009d8a <_strtod_l+0xb12>
 8009e24:	2300      	movs	r3, #0
 8009e26:	930a      	str	r3, [sp, #40]	; 0x28
 8009e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	f7ff ba6b 	b.w	8009308 <_strtod_l+0x90>
 8009e32:	2a65      	cmp	r2, #101	; 0x65
 8009e34:	f43f ab5f 	beq.w	80094f6 <_strtod_l+0x27e>
 8009e38:	2a45      	cmp	r2, #69	; 0x45
 8009e3a:	f43f ab5c 	beq.w	80094f6 <_strtod_l+0x27e>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f7ff bb94 	b.w	800956c <_strtod_l+0x2f4>
 8009e44:	f3af 8000 	nop.w
 8009e48:	94a03595 	.word	0x94a03595
 8009e4c:	3fdfffff 	.word	0x3fdfffff
 8009e50:	35afe535 	.word	0x35afe535
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	ffc00000 	.word	0xffc00000
 8009e5c:	41dfffff 	.word	0x41dfffff
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fcfffff 	.word	0x3fcfffff
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	7fe00000 	.word	0x7fe00000
 8009e74:	7c9fffff 	.word	0x7c9fffff
 8009e78:	3fe00000 	.word	0x3fe00000
 8009e7c:	bff00000 	.word	0xbff00000
 8009e80:	7fefffff 	.word	0x7fefffff

08009e84 <_strtod_r>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <_strtod_r+0x8>)
 8009e86:	f7ff b9f7 	b.w	8009278 <_strtod_l>
 8009e8a:	bf00      	nop
 8009e8c:	20000078 	.word	0x20000078

08009e90 <_strtol_l.constprop.0>:
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e96:	d001      	beq.n	8009e9c <_strtol_l.constprop.0+0xc>
 8009e98:	2b24      	cmp	r3, #36	; 0x24
 8009e9a:	d906      	bls.n	8009eaa <_strtol_l.constprop.0+0x1a>
 8009e9c:	f7fe fa58 	bl	8008350 <__errno>
 8009ea0:	2316      	movs	r3, #22
 8009ea2:	6003      	str	r3, [r0, #0]
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f90 <_strtol_l.constprop.0+0x100>
 8009eae:	460d      	mov	r5, r1
 8009eb0:	462e      	mov	r6, r5
 8009eb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009eba:	f017 0708 	ands.w	r7, r7, #8
 8009ebe:	d1f7      	bne.n	8009eb0 <_strtol_l.constprop.0+0x20>
 8009ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ec2:	d132      	bne.n	8009f2a <_strtol_l.constprop.0+0x9a>
 8009ec4:	782c      	ldrb	r4, [r5, #0]
 8009ec6:	2701      	movs	r7, #1
 8009ec8:	1cb5      	adds	r5, r6, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d05b      	beq.n	8009f86 <_strtol_l.constprop.0+0xf6>
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d109      	bne.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009ed2:	2c30      	cmp	r4, #48	; 0x30
 8009ed4:	d107      	bne.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009ed6:	782c      	ldrb	r4, [r5, #0]
 8009ed8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009edc:	2c58      	cmp	r4, #88	; 0x58
 8009ede:	d14d      	bne.n	8009f7c <_strtol_l.constprop.0+0xec>
 8009ee0:	786c      	ldrb	r4, [r5, #1]
 8009ee2:	2310      	movs	r3, #16
 8009ee4:	3502      	adds	r5, #2
 8009ee6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009eea:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eee:	f04f 0c00 	mov.w	ip, #0
 8009ef2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ef6:	4666      	mov	r6, ip
 8009ef8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009efc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f00:	f1be 0f09 	cmp.w	lr, #9
 8009f04:	d816      	bhi.n	8009f34 <_strtol_l.constprop.0+0xa4>
 8009f06:	4674      	mov	r4, lr
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	dd24      	ble.n	8009f56 <_strtol_l.constprop.0+0xc6>
 8009f0c:	f1bc 0f00 	cmp.w	ip, #0
 8009f10:	db1e      	blt.n	8009f50 <_strtol_l.constprop.0+0xc0>
 8009f12:	45b1      	cmp	r9, r6
 8009f14:	d31c      	bcc.n	8009f50 <_strtol_l.constprop.0+0xc0>
 8009f16:	d101      	bne.n	8009f1c <_strtol_l.constprop.0+0x8c>
 8009f18:	45a2      	cmp	sl, r4
 8009f1a:	db19      	blt.n	8009f50 <_strtol_l.constprop.0+0xc0>
 8009f1c:	fb06 4603 	mla	r6, r6, r3, r4
 8009f20:	f04f 0c01 	mov.w	ip, #1
 8009f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f28:	e7e8      	b.n	8009efc <_strtol_l.constprop.0+0x6c>
 8009f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f2c:	bf04      	itt	eq
 8009f2e:	782c      	ldrbeq	r4, [r5, #0]
 8009f30:	1cb5      	addeq	r5, r6, #2
 8009f32:	e7ca      	b.n	8009eca <_strtol_l.constprop.0+0x3a>
 8009f34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f38:	f1be 0f19 	cmp.w	lr, #25
 8009f3c:	d801      	bhi.n	8009f42 <_strtol_l.constprop.0+0xb2>
 8009f3e:	3c37      	subs	r4, #55	; 0x37
 8009f40:	e7e2      	b.n	8009f08 <_strtol_l.constprop.0+0x78>
 8009f42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f46:	f1be 0f19 	cmp.w	lr, #25
 8009f4a:	d804      	bhi.n	8009f56 <_strtol_l.constprop.0+0xc6>
 8009f4c:	3c57      	subs	r4, #87	; 0x57
 8009f4e:	e7db      	b.n	8009f08 <_strtol_l.constprop.0+0x78>
 8009f50:	f04f 3cff 	mov.w	ip, #4294967295
 8009f54:	e7e6      	b.n	8009f24 <_strtol_l.constprop.0+0x94>
 8009f56:	f1bc 0f00 	cmp.w	ip, #0
 8009f5a:	da05      	bge.n	8009f68 <_strtol_l.constprop.0+0xd8>
 8009f5c:	2322      	movs	r3, #34	; 0x22
 8009f5e:	6003      	str	r3, [r0, #0]
 8009f60:	4646      	mov	r6, r8
 8009f62:	b942      	cbnz	r2, 8009f76 <_strtol_l.constprop.0+0xe6>
 8009f64:	4630      	mov	r0, r6
 8009f66:	e79e      	b.n	8009ea6 <_strtol_l.constprop.0+0x16>
 8009f68:	b107      	cbz	r7, 8009f6c <_strtol_l.constprop.0+0xdc>
 8009f6a:	4276      	negs	r6, r6
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	d0f9      	beq.n	8009f64 <_strtol_l.constprop.0+0xd4>
 8009f70:	f1bc 0f00 	cmp.w	ip, #0
 8009f74:	d000      	beq.n	8009f78 <_strtol_l.constprop.0+0xe8>
 8009f76:	1e69      	subs	r1, r5, #1
 8009f78:	6011      	str	r1, [r2, #0]
 8009f7a:	e7f3      	b.n	8009f64 <_strtol_l.constprop.0+0xd4>
 8009f7c:	2430      	movs	r4, #48	; 0x30
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1b1      	bne.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009f82:	2308      	movs	r3, #8
 8009f84:	e7af      	b.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009f86:	2c30      	cmp	r4, #48	; 0x30
 8009f88:	d0a5      	beq.n	8009ed6 <_strtol_l.constprop.0+0x46>
 8009f8a:	230a      	movs	r3, #10
 8009f8c:	e7ab      	b.n	8009ee6 <_strtol_l.constprop.0+0x56>
 8009f8e:	bf00      	nop
 8009f90:	0800d0b9 	.word	0x0800d0b9

08009f94 <_strtol_r>:
 8009f94:	f7ff bf7c 	b.w	8009e90 <_strtol_l.constprop.0>

08009f98 <__swbuf_r>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	460e      	mov	r6, r1
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b118      	cbz	r0, 8009faa <__swbuf_r+0x12>
 8009fa2:	6983      	ldr	r3, [r0, #24]
 8009fa4:	b90b      	cbnz	r3, 8009faa <__swbuf_r+0x12>
 8009fa6:	f001 f84b 	bl	800b040 <__sinit>
 8009faa:	4b21      	ldr	r3, [pc, #132]	; (800a030 <__swbuf_r+0x98>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	d12b      	bne.n	800a008 <__swbuf_r+0x70>
 8009fb0:	686c      	ldr	r4, [r5, #4]
 8009fb2:	69a3      	ldr	r3, [r4, #24]
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	071a      	lsls	r2, r3, #28
 8009fba:	d52f      	bpl.n	800a01c <__swbuf_r+0x84>
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	b36b      	cbz	r3, 800a01c <__swbuf_r+0x84>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	6820      	ldr	r0, [r4, #0]
 8009fc4:	1ac0      	subs	r0, r0, r3
 8009fc6:	6963      	ldr	r3, [r4, #20]
 8009fc8:	b2f6      	uxtb	r6, r6
 8009fca:	4283      	cmp	r3, r0
 8009fcc:	4637      	mov	r7, r6
 8009fce:	dc04      	bgt.n	8009fda <__swbuf_r+0x42>
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f000 ffa0 	bl	800af18 <_fflush_r>
 8009fd8:	bb30      	cbnz	r0, 800a028 <__swbuf_r+0x90>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	701e      	strb	r6, [r3, #0]
 8009fe8:	6963      	ldr	r3, [r4, #20]
 8009fea:	3001      	adds	r0, #1
 8009fec:	4283      	cmp	r3, r0
 8009fee:	d004      	beq.n	8009ffa <__swbuf_r+0x62>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	07db      	lsls	r3, r3, #31
 8009ff4:	d506      	bpl.n	800a004 <__swbuf_r+0x6c>
 8009ff6:	2e0a      	cmp	r6, #10
 8009ff8:	d104      	bne.n	800a004 <__swbuf_r+0x6c>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 ff8b 	bl	800af18 <_fflush_r>
 800a002:	b988      	cbnz	r0, 800a028 <__swbuf_r+0x90>
 800a004:	4638      	mov	r0, r7
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <__swbuf_r+0x9c>)
 800a00a:	429c      	cmp	r4, r3
 800a00c:	d101      	bne.n	800a012 <__swbuf_r+0x7a>
 800a00e:	68ac      	ldr	r4, [r5, #8]
 800a010:	e7cf      	b.n	8009fb2 <__swbuf_r+0x1a>
 800a012:	4b09      	ldr	r3, [pc, #36]	; (800a038 <__swbuf_r+0xa0>)
 800a014:	429c      	cmp	r4, r3
 800a016:	bf08      	it	eq
 800a018:	68ec      	ldreq	r4, [r5, #12]
 800a01a:	e7ca      	b.n	8009fb2 <__swbuf_r+0x1a>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f80c 	bl	800a03c <__swsetup_r>
 800a024:	2800      	cmp	r0, #0
 800a026:	d0cb      	beq.n	8009fc0 <__swbuf_r+0x28>
 800a028:	f04f 37ff 	mov.w	r7, #4294967295
 800a02c:	e7ea      	b.n	800a004 <__swbuf_r+0x6c>
 800a02e:	bf00      	nop
 800a030:	0800d26c 	.word	0x0800d26c
 800a034:	0800d28c 	.word	0x0800d28c
 800a038:	0800d24c 	.word	0x0800d24c

0800a03c <__swsetup_r>:
 800a03c:	4b32      	ldr	r3, [pc, #200]	; (800a108 <__swsetup_r+0xcc>)
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	681d      	ldr	r5, [r3, #0]
 800a042:	4606      	mov	r6, r0
 800a044:	460c      	mov	r4, r1
 800a046:	b125      	cbz	r5, 800a052 <__swsetup_r+0x16>
 800a048:	69ab      	ldr	r3, [r5, #24]
 800a04a:	b913      	cbnz	r3, 800a052 <__swsetup_r+0x16>
 800a04c:	4628      	mov	r0, r5
 800a04e:	f000 fff7 	bl	800b040 <__sinit>
 800a052:	4b2e      	ldr	r3, [pc, #184]	; (800a10c <__swsetup_r+0xd0>)
 800a054:	429c      	cmp	r4, r3
 800a056:	d10f      	bne.n	800a078 <__swsetup_r+0x3c>
 800a058:	686c      	ldr	r4, [r5, #4]
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a060:	0719      	lsls	r1, r3, #28
 800a062:	d42c      	bmi.n	800a0be <__swsetup_r+0x82>
 800a064:	06dd      	lsls	r5, r3, #27
 800a066:	d411      	bmi.n	800a08c <__swsetup_r+0x50>
 800a068:	2309      	movs	r3, #9
 800a06a:	6033      	str	r3, [r6, #0]
 800a06c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a070:	81a3      	strh	r3, [r4, #12]
 800a072:	f04f 30ff 	mov.w	r0, #4294967295
 800a076:	e03e      	b.n	800a0f6 <__swsetup_r+0xba>
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <__swsetup_r+0xd4>)
 800a07a:	429c      	cmp	r4, r3
 800a07c:	d101      	bne.n	800a082 <__swsetup_r+0x46>
 800a07e:	68ac      	ldr	r4, [r5, #8]
 800a080:	e7eb      	b.n	800a05a <__swsetup_r+0x1e>
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <__swsetup_r+0xd8>)
 800a084:	429c      	cmp	r4, r3
 800a086:	bf08      	it	eq
 800a088:	68ec      	ldreq	r4, [r5, #12]
 800a08a:	e7e6      	b.n	800a05a <__swsetup_r+0x1e>
 800a08c:	0758      	lsls	r0, r3, #29
 800a08e:	d512      	bpl.n	800a0b6 <__swsetup_r+0x7a>
 800a090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a092:	b141      	cbz	r1, 800a0a6 <__swsetup_r+0x6a>
 800a094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a098:	4299      	cmp	r1, r3
 800a09a:	d002      	beq.n	800a0a2 <__swsetup_r+0x66>
 800a09c:	4630      	mov	r0, r6
 800a09e:	f002 f947 	bl	800c330 <_free_r>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	6063      	str	r3, [r4, #4]
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	f043 0308 	orr.w	r3, r3, #8
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	b94b      	cbnz	r3, 800a0d6 <__swsetup_r+0x9a>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0cc:	d003      	beq.n	800a0d6 <__swsetup_r+0x9a>
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f001 fbed 	bl	800b8b0 <__smakebuf_r>
 800a0d6:	89a0      	ldrh	r0, [r4, #12]
 800a0d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0dc:	f010 0301 	ands.w	r3, r0, #1
 800a0e0:	d00a      	beq.n	800a0f8 <__swsetup_r+0xbc>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60a3      	str	r3, [r4, #8]
 800a0e6:	6963      	ldr	r3, [r4, #20]
 800a0e8:	425b      	negs	r3, r3
 800a0ea:	61a3      	str	r3, [r4, #24]
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	b943      	cbnz	r3, 800a102 <__swsetup_r+0xc6>
 800a0f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0f4:	d1ba      	bne.n	800a06c <__swsetup_r+0x30>
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	0781      	lsls	r1, r0, #30
 800a0fa:	bf58      	it	pl
 800a0fc:	6963      	ldrpl	r3, [r4, #20]
 800a0fe:	60a3      	str	r3, [r4, #8]
 800a100:	e7f4      	b.n	800a0ec <__swsetup_r+0xb0>
 800a102:	2000      	movs	r0, #0
 800a104:	e7f7      	b.n	800a0f6 <__swsetup_r+0xba>
 800a106:	bf00      	nop
 800a108:	20000010 	.word	0x20000010
 800a10c:	0800d26c 	.word	0x0800d26c
 800a110:	0800d28c 	.word	0x0800d28c
 800a114:	0800d24c 	.word	0x0800d24c

0800a118 <quorem>:
 800a118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	6903      	ldr	r3, [r0, #16]
 800a11e:	690c      	ldr	r4, [r1, #16]
 800a120:	42a3      	cmp	r3, r4
 800a122:	4607      	mov	r7, r0
 800a124:	f2c0 8081 	blt.w	800a22a <quorem+0x112>
 800a128:	3c01      	subs	r4, #1
 800a12a:	f101 0814 	add.w	r8, r1, #20
 800a12e:	f100 0514 	add.w	r5, r0, #20
 800a132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a13c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a140:	3301      	adds	r3, #1
 800a142:	429a      	cmp	r2, r3
 800a144:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a148:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a14c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a150:	d331      	bcc.n	800a1b6 <quorem+0x9e>
 800a152:	f04f 0e00 	mov.w	lr, #0
 800a156:	4640      	mov	r0, r8
 800a158:	46ac      	mov	ip, r5
 800a15a:	46f2      	mov	sl, lr
 800a15c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a160:	b293      	uxth	r3, r2
 800a162:	fb06 e303 	mla	r3, r6, r3, lr
 800a166:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	ebaa 0303 	sub.w	r3, sl, r3
 800a170:	f8dc a000 	ldr.w	sl, [ip]
 800a174:	0c12      	lsrs	r2, r2, #16
 800a176:	fa13 f38a 	uxtah	r3, r3, sl
 800a17a:	fb06 e202 	mla	r2, r6, r2, lr
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	9b00      	ldr	r3, [sp, #0]
 800a182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a186:	b292      	uxth	r2, r2
 800a188:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a18c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a190:	f8bd 3000 	ldrh.w	r3, [sp]
 800a194:	4581      	cmp	r9, r0
 800a196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a19a:	f84c 3b04 	str.w	r3, [ip], #4
 800a19e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1a2:	d2db      	bcs.n	800a15c <quorem+0x44>
 800a1a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1a8:	b92b      	cbnz	r3, 800a1b6 <quorem+0x9e>
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	3b04      	subs	r3, #4
 800a1ae:	429d      	cmp	r5, r3
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	d32e      	bcc.n	800a212 <quorem+0xfa>
 800a1b4:	613c      	str	r4, [r7, #16]
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f001 feae 	bl	800bf18 <__mcmp>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	db24      	blt.n	800a20a <quorem+0xf2>
 800a1c0:	3601      	adds	r6, #1
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f04f 0c00 	mov.w	ip, #0
 800a1c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a1d0:	b293      	uxth	r3, r2
 800a1d2:	ebac 0303 	sub.w	r3, ip, r3
 800a1d6:	0c12      	lsrs	r2, r2, #16
 800a1d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a1dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ea:	45c1      	cmp	r9, r8
 800a1ec:	f840 3b04 	str.w	r3, [r0], #4
 800a1f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1f4:	d2e8      	bcs.n	800a1c8 <quorem+0xb0>
 800a1f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1fe:	b922      	cbnz	r2, 800a20a <quorem+0xf2>
 800a200:	3b04      	subs	r3, #4
 800a202:	429d      	cmp	r5, r3
 800a204:	461a      	mov	r2, r3
 800a206:	d30a      	bcc.n	800a21e <quorem+0x106>
 800a208:	613c      	str	r4, [r7, #16]
 800a20a:	4630      	mov	r0, r6
 800a20c:	b003      	add	sp, #12
 800a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a212:	6812      	ldr	r2, [r2, #0]
 800a214:	3b04      	subs	r3, #4
 800a216:	2a00      	cmp	r2, #0
 800a218:	d1cc      	bne.n	800a1b4 <quorem+0x9c>
 800a21a:	3c01      	subs	r4, #1
 800a21c:	e7c7      	b.n	800a1ae <quorem+0x96>
 800a21e:	6812      	ldr	r2, [r2, #0]
 800a220:	3b04      	subs	r3, #4
 800a222:	2a00      	cmp	r2, #0
 800a224:	d1f0      	bne.n	800a208 <quorem+0xf0>
 800a226:	3c01      	subs	r4, #1
 800a228:	e7eb      	b.n	800a202 <quorem+0xea>
 800a22a:	2000      	movs	r0, #0
 800a22c:	e7ee      	b.n	800a20c <quorem+0xf4>
	...

0800a230 <_dtoa_r>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	ed2d 8b04 	vpush	{d8-d9}
 800a238:	ec57 6b10 	vmov	r6, r7, d0
 800a23c:	b093      	sub	sp, #76	; 0x4c
 800a23e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a240:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a244:	9106      	str	r1, [sp, #24]
 800a246:	ee10 aa10 	vmov	sl, s0
 800a24a:	4604      	mov	r4, r0
 800a24c:	9209      	str	r2, [sp, #36]	; 0x24
 800a24e:	930c      	str	r3, [sp, #48]	; 0x30
 800a250:	46bb      	mov	fp, r7
 800a252:	b975      	cbnz	r5, 800a272 <_dtoa_r+0x42>
 800a254:	2010      	movs	r0, #16
 800a256:	f001 fb6b 	bl	800b930 <malloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	6260      	str	r0, [r4, #36]	; 0x24
 800a25e:	b920      	cbnz	r0, 800a26a <_dtoa_r+0x3a>
 800a260:	4ba7      	ldr	r3, [pc, #668]	; (800a500 <_dtoa_r+0x2d0>)
 800a262:	21ea      	movs	r1, #234	; 0xea
 800a264:	48a7      	ldr	r0, [pc, #668]	; (800a504 <_dtoa_r+0x2d4>)
 800a266:	f002 fc89 	bl	800cb7c <__assert_func>
 800a26a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a26e:	6005      	str	r5, [r0, #0]
 800a270:	60c5      	str	r5, [r0, #12]
 800a272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a274:	6819      	ldr	r1, [r3, #0]
 800a276:	b151      	cbz	r1, 800a28e <_dtoa_r+0x5e>
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	604a      	str	r2, [r1, #4]
 800a27c:	2301      	movs	r3, #1
 800a27e:	4093      	lsls	r3, r2
 800a280:	608b      	str	r3, [r1, #8]
 800a282:	4620      	mov	r0, r4
 800a284:	f001 fbbc 	bl	800ba00 <_Bfree>
 800a288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	1e3b      	subs	r3, r7, #0
 800a290:	bfaa      	itet	ge
 800a292:	2300      	movge	r3, #0
 800a294:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a298:	f8c8 3000 	strge.w	r3, [r8]
 800a29c:	4b9a      	ldr	r3, [pc, #616]	; (800a508 <_dtoa_r+0x2d8>)
 800a29e:	bfbc      	itt	lt
 800a2a0:	2201      	movlt	r2, #1
 800a2a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2a6:	ea33 030b 	bics.w	r3, r3, fp
 800a2aa:	d11b      	bne.n	800a2e4 <_dtoa_r+0xb4>
 800a2ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b8:	4333      	orrs	r3, r6
 800a2ba:	f000 8592 	beq.w	800ade2 <_dtoa_r+0xbb2>
 800a2be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c0:	b963      	cbnz	r3, 800a2dc <_dtoa_r+0xac>
 800a2c2:	4b92      	ldr	r3, [pc, #584]	; (800a50c <_dtoa_r+0x2dc>)
 800a2c4:	e022      	b.n	800a30c <_dtoa_r+0xdc>
 800a2c6:	4b92      	ldr	r3, [pc, #584]	; (800a510 <_dtoa_r+0x2e0>)
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	9801      	ldr	r0, [sp, #4]
 800a2d2:	b013      	add	sp, #76	; 0x4c
 800a2d4:	ecbd 8b04 	vpop	{d8-d9}
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	4b8b      	ldr	r3, [pc, #556]	; (800a50c <_dtoa_r+0x2dc>)
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	3303      	adds	r3, #3
 800a2e2:	e7f3      	b.n	800a2cc <_dtoa_r+0x9c>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	4659      	mov	r1, fp
 800a2ec:	f7f6 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2f0:	ec4b ab19 	vmov	d9, sl, fp
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	b158      	cbz	r0, 800a310 <_dtoa_r+0xe0>
 800a2f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 856b 	beq.w	800addc <_dtoa_r+0xbac>
 800a306:	4883      	ldr	r0, [pc, #524]	; (800a514 <_dtoa_r+0x2e4>)
 800a308:	6018      	str	r0, [r3, #0]
 800a30a:	1e43      	subs	r3, r0, #1
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	e7df      	b.n	800a2d0 <_dtoa_r+0xa0>
 800a310:	ec4b ab10 	vmov	d0, sl, fp
 800a314:	aa10      	add	r2, sp, #64	; 0x40
 800a316:	a911      	add	r1, sp, #68	; 0x44
 800a318:	4620      	mov	r0, r4
 800a31a:	f001 ff1f 	bl	800c15c <__d2b>
 800a31e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a322:	ee08 0a10 	vmov	s16, r0
 800a326:	2d00      	cmp	r5, #0
 800a328:	f000 8084 	beq.w	800a434 <_dtoa_r+0x204>
 800a32c:	ee19 3a90 	vmov	r3, s19
 800a330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a334:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a338:	4656      	mov	r6, sl
 800a33a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a33e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a342:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a346:	4b74      	ldr	r3, [pc, #464]	; (800a518 <_dtoa_r+0x2e8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f5 ffa3 	bl	8000298 <__aeabi_dsub>
 800a352:	a365      	add	r3, pc, #404	; (adr r3, 800a4e8 <_dtoa_r+0x2b8>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	a364      	add	r3, pc, #400	; (adr r3, 800a4f0 <_dtoa_r+0x2c0>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff9b 	bl	800029c <__adddf3>
 800a366:	4606      	mov	r6, r0
 800a368:	4628      	mov	r0, r5
 800a36a:	460f      	mov	r7, r1
 800a36c:	f7f6 f8e2 	bl	8000534 <__aeabi_i2d>
 800a370:	a361      	add	r3, pc, #388	; (adr r3, 800a4f8 <_dtoa_r+0x2c8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f6 f947 	bl	8000608 <__aeabi_dmul>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	f7f5 ff8b 	bl	800029c <__adddf3>
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	f7f6 fbed 	bl	8000b68 <__aeabi_d2iz>
 800a38e:	2200      	movs	r2, #0
 800a390:	9000      	str	r0, [sp, #0]
 800a392:	2300      	movs	r3, #0
 800a394:	4630      	mov	r0, r6
 800a396:	4639      	mov	r1, r7
 800a398:	f7f6 fba8 	bl	8000aec <__aeabi_dcmplt>
 800a39c:	b150      	cbz	r0, 800a3b4 <_dtoa_r+0x184>
 800a39e:	9800      	ldr	r0, [sp, #0]
 800a3a0:	f7f6 f8c8 	bl	8000534 <__aeabi_i2d>
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	f7f6 fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3ac:	b910      	cbnz	r0, 800a3b4 <_dtoa_r+0x184>
 800a3ae:	9b00      	ldr	r3, [sp, #0]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	9b00      	ldr	r3, [sp, #0]
 800a3b6:	2b16      	cmp	r3, #22
 800a3b8:	d85a      	bhi.n	800a470 <_dtoa_r+0x240>
 800a3ba:	9a00      	ldr	r2, [sp, #0]
 800a3bc:	4b57      	ldr	r3, [pc, #348]	; (800a51c <_dtoa_r+0x2ec>)
 800a3be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	ec51 0b19 	vmov	r0, r1, d9
 800a3ca:	f7f6 fb8f 	bl	8000aec <__aeabi_dcmplt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d050      	beq.n	800a474 <_dtoa_r+0x244>
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3de:	1b5d      	subs	r5, r3, r5
 800a3e0:	1e6b      	subs	r3, r5, #1
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	bf45      	ittet	mi
 800a3e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3ea:	9304      	strmi	r3, [sp, #16]
 800a3ec:	2300      	movpl	r3, #0
 800a3ee:	2300      	movmi	r3, #0
 800a3f0:	bf4c      	ite	mi
 800a3f2:	9305      	strmi	r3, [sp, #20]
 800a3f4:	9304      	strpl	r3, [sp, #16]
 800a3f6:	9b00      	ldr	r3, [sp, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db3d      	blt.n	800a478 <_dtoa_r+0x248>
 800a3fc:	9b05      	ldr	r3, [sp, #20]
 800a3fe:	9a00      	ldr	r2, [sp, #0]
 800a400:	920a      	str	r2, [sp, #40]	; 0x28
 800a402:	4413      	add	r3, r2
 800a404:	9305      	str	r3, [sp, #20]
 800a406:	2300      	movs	r3, #0
 800a408:	9307      	str	r3, [sp, #28]
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	2b09      	cmp	r3, #9
 800a40e:	f200 8089 	bhi.w	800a524 <_dtoa_r+0x2f4>
 800a412:	2b05      	cmp	r3, #5
 800a414:	bfc4      	itt	gt
 800a416:	3b04      	subgt	r3, #4
 800a418:	9306      	strgt	r3, [sp, #24]
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	f1a3 0302 	sub.w	r3, r3, #2
 800a420:	bfcc      	ite	gt
 800a422:	2500      	movgt	r5, #0
 800a424:	2501      	movle	r5, #1
 800a426:	2b03      	cmp	r3, #3
 800a428:	f200 8087 	bhi.w	800a53a <_dtoa_r+0x30a>
 800a42c:	e8df f003 	tbb	[pc, r3]
 800a430:	59383a2d 	.word	0x59383a2d
 800a434:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a438:	441d      	add	r5, r3
 800a43a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a43e:	2b20      	cmp	r3, #32
 800a440:	bfc1      	itttt	gt
 800a442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a446:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a44a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a44e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a452:	bfda      	itte	le
 800a454:	f1c3 0320 	rsble	r3, r3, #32
 800a458:	fa06 f003 	lslle.w	r0, r6, r3
 800a45c:	4318      	orrgt	r0, r3
 800a45e:	f7f6 f859 	bl	8000514 <__aeabi_ui2d>
 800a462:	2301      	movs	r3, #1
 800a464:	4606      	mov	r6, r0
 800a466:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a46a:	3d01      	subs	r5, #1
 800a46c:	930e      	str	r3, [sp, #56]	; 0x38
 800a46e:	e76a      	b.n	800a346 <_dtoa_r+0x116>
 800a470:	2301      	movs	r3, #1
 800a472:	e7b2      	b.n	800a3da <_dtoa_r+0x1aa>
 800a474:	900b      	str	r0, [sp, #44]	; 0x2c
 800a476:	e7b1      	b.n	800a3dc <_dtoa_r+0x1ac>
 800a478:	9b04      	ldr	r3, [sp, #16]
 800a47a:	9a00      	ldr	r2, [sp, #0]
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	4253      	negs	r3, r2
 800a482:	9307      	str	r3, [sp, #28]
 800a484:	2300      	movs	r3, #0
 800a486:	930a      	str	r3, [sp, #40]	; 0x28
 800a488:	e7bf      	b.n	800a40a <_dtoa_r+0x1da>
 800a48a:	2300      	movs	r3, #0
 800a48c:	9308      	str	r3, [sp, #32]
 800a48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a490:	2b00      	cmp	r3, #0
 800a492:	dc55      	bgt.n	800a540 <_dtoa_r+0x310>
 800a494:	2301      	movs	r3, #1
 800a496:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a49a:	461a      	mov	r2, r3
 800a49c:	9209      	str	r2, [sp, #36]	; 0x24
 800a49e:	e00c      	b.n	800a4ba <_dtoa_r+0x28a>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f3      	b.n	800a48c <_dtoa_r+0x25c>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a8:	9308      	str	r3, [sp, #32]
 800a4aa:	9b00      	ldr	r3, [sp, #0]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	9302      	str	r3, [sp, #8]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	bfb8      	it	lt
 800a4b8:	2301      	movlt	r3, #1
 800a4ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4bc:	2200      	movs	r2, #0
 800a4be:	6042      	str	r2, [r0, #4]
 800a4c0:	2204      	movs	r2, #4
 800a4c2:	f102 0614 	add.w	r6, r2, #20
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	6841      	ldr	r1, [r0, #4]
 800a4ca:	d93d      	bls.n	800a548 <_dtoa_r+0x318>
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f001 fa57 	bl	800b980 <_Balloc>
 800a4d2:	9001      	str	r0, [sp, #4]
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d13b      	bne.n	800a550 <_dtoa_r+0x320>
 800a4d8:	4b11      	ldr	r3, [pc, #68]	; (800a520 <_dtoa_r+0x2f0>)
 800a4da:	4602      	mov	r2, r0
 800a4dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4e0:	e6c0      	b.n	800a264 <_dtoa_r+0x34>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e7df      	b.n	800a4a6 <_dtoa_r+0x276>
 800a4e6:	bf00      	nop
 800a4e8:	636f4361 	.word	0x636f4361
 800a4ec:	3fd287a7 	.word	0x3fd287a7
 800a4f0:	8b60c8b3 	.word	0x8b60c8b3
 800a4f4:	3fc68a28 	.word	0x3fc68a28
 800a4f8:	509f79fb 	.word	0x509f79fb
 800a4fc:	3fd34413 	.word	0x3fd34413
 800a500:	0800d1c6 	.word	0x0800d1c6
 800a504:	0800d1dd 	.word	0x0800d1dd
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	0800d1c2 	.word	0x0800d1c2
 800a510:	0800d1b9 	.word	0x0800d1b9
 800a514:	0800d03d 	.word	0x0800d03d
 800a518:	3ff80000 	.word	0x3ff80000
 800a51c:	0800d3b0 	.word	0x0800d3b0
 800a520:	0800d238 	.word	0x0800d238
 800a524:	2501      	movs	r5, #1
 800a526:	2300      	movs	r3, #0
 800a528:	9306      	str	r3, [sp, #24]
 800a52a:	9508      	str	r5, [sp, #32]
 800a52c:	f04f 33ff 	mov.w	r3, #4294967295
 800a530:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a534:	2200      	movs	r2, #0
 800a536:	2312      	movs	r3, #18
 800a538:	e7b0      	b.n	800a49c <_dtoa_r+0x26c>
 800a53a:	2301      	movs	r3, #1
 800a53c:	9308      	str	r3, [sp, #32]
 800a53e:	e7f5      	b.n	800a52c <_dtoa_r+0x2fc>
 800a540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a542:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a546:	e7b8      	b.n	800a4ba <_dtoa_r+0x28a>
 800a548:	3101      	adds	r1, #1
 800a54a:	6041      	str	r1, [r0, #4]
 800a54c:	0052      	lsls	r2, r2, #1
 800a54e:	e7b8      	b.n	800a4c2 <_dtoa_r+0x292>
 800a550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	9b03      	ldr	r3, [sp, #12]
 800a558:	2b0e      	cmp	r3, #14
 800a55a:	f200 809d 	bhi.w	800a698 <_dtoa_r+0x468>
 800a55e:	2d00      	cmp	r5, #0
 800a560:	f000 809a 	beq.w	800a698 <_dtoa_r+0x468>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dd32      	ble.n	800a5d0 <_dtoa_r+0x3a0>
 800a56a:	4ab7      	ldr	r2, [pc, #732]	; (800a848 <_dtoa_r+0x618>)
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a574:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a578:	9b00      	ldr	r3, [sp, #0]
 800a57a:	05d8      	lsls	r0, r3, #23
 800a57c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a580:	d516      	bpl.n	800a5b0 <_dtoa_r+0x380>
 800a582:	4bb2      	ldr	r3, [pc, #712]	; (800a84c <_dtoa_r+0x61c>)
 800a584:	ec51 0b19 	vmov	r0, r1, d9
 800a588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a58c:	f7f6 f966 	bl	800085c <__aeabi_ddiv>
 800a590:	f007 070f 	and.w	r7, r7, #15
 800a594:	4682      	mov	sl, r0
 800a596:	468b      	mov	fp, r1
 800a598:	2503      	movs	r5, #3
 800a59a:	4eac      	ldr	r6, [pc, #688]	; (800a84c <_dtoa_r+0x61c>)
 800a59c:	b957      	cbnz	r7, 800a5b4 <_dtoa_r+0x384>
 800a59e:	4642      	mov	r2, r8
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	4650      	mov	r0, sl
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	f7f6 f959 	bl	800085c <__aeabi_ddiv>
 800a5aa:	4682      	mov	sl, r0
 800a5ac:	468b      	mov	fp, r1
 800a5ae:	e028      	b.n	800a602 <_dtoa_r+0x3d2>
 800a5b0:	2502      	movs	r5, #2
 800a5b2:	e7f2      	b.n	800a59a <_dtoa_r+0x36a>
 800a5b4:	07f9      	lsls	r1, r7, #31
 800a5b6:	d508      	bpl.n	800a5ca <_dtoa_r+0x39a>
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5c0:	f7f6 f822 	bl	8000608 <__aeabi_dmul>
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4689      	mov	r9, r1
 800a5ca:	107f      	asrs	r7, r7, #1
 800a5cc:	3608      	adds	r6, #8
 800a5ce:	e7e5      	b.n	800a59c <_dtoa_r+0x36c>
 800a5d0:	f000 809b 	beq.w	800a70a <_dtoa_r+0x4da>
 800a5d4:	9b00      	ldr	r3, [sp, #0]
 800a5d6:	4f9d      	ldr	r7, [pc, #628]	; (800a84c <_dtoa_r+0x61c>)
 800a5d8:	425e      	negs	r6, r3
 800a5da:	4b9b      	ldr	r3, [pc, #620]	; (800a848 <_dtoa_r+0x618>)
 800a5dc:	f006 020f 	and.w	r2, r6, #15
 800a5e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	ec51 0b19 	vmov	r0, r1, d9
 800a5ec:	f7f6 f80c 	bl	8000608 <__aeabi_dmul>
 800a5f0:	1136      	asrs	r6, r6, #4
 800a5f2:	4682      	mov	sl, r0
 800a5f4:	468b      	mov	fp, r1
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2502      	movs	r5, #2
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	d17a      	bne.n	800a6f4 <_dtoa_r+0x4c4>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1d3      	bne.n	800a5aa <_dtoa_r+0x37a>
 800a602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8082 	beq.w	800a70e <_dtoa_r+0x4de>
 800a60a:	4b91      	ldr	r3, [pc, #580]	; (800a850 <_dtoa_r+0x620>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	4650      	mov	r0, sl
 800a610:	4659      	mov	r1, fp
 800a612:	f7f6 fa6b 	bl	8000aec <__aeabi_dcmplt>
 800a616:	2800      	cmp	r0, #0
 800a618:	d079      	beq.n	800a70e <_dtoa_r+0x4de>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d076      	beq.n	800a70e <_dtoa_r+0x4de>
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dd36      	ble.n	800a694 <_dtoa_r+0x464>
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	4650      	mov	r0, sl
 800a62a:	4659      	mov	r1, fp
 800a62c:	1e5f      	subs	r7, r3, #1
 800a62e:	2200      	movs	r2, #0
 800a630:	4b88      	ldr	r3, [pc, #544]	; (800a854 <_dtoa_r+0x624>)
 800a632:	f7f5 ffe9 	bl	8000608 <__aeabi_dmul>
 800a636:	9e02      	ldr	r6, [sp, #8]
 800a638:	4682      	mov	sl, r0
 800a63a:	468b      	mov	fp, r1
 800a63c:	3501      	adds	r5, #1
 800a63e:	4628      	mov	r0, r5
 800a640:	f7f5 ff78 	bl	8000534 <__aeabi_i2d>
 800a644:	4652      	mov	r2, sl
 800a646:	465b      	mov	r3, fp
 800a648:	f7f5 ffde 	bl	8000608 <__aeabi_dmul>
 800a64c:	4b82      	ldr	r3, [pc, #520]	; (800a858 <_dtoa_r+0x628>)
 800a64e:	2200      	movs	r2, #0
 800a650:	f7f5 fe24 	bl	800029c <__adddf3>
 800a654:	46d0      	mov	r8, sl
 800a656:	46d9      	mov	r9, fp
 800a658:	4682      	mov	sl, r0
 800a65a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a65e:	2e00      	cmp	r6, #0
 800a660:	d158      	bne.n	800a714 <_dtoa_r+0x4e4>
 800a662:	4b7e      	ldr	r3, [pc, #504]	; (800a85c <_dtoa_r+0x62c>)
 800a664:	2200      	movs	r2, #0
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	f7f5 fe15 	bl	8000298 <__aeabi_dsub>
 800a66e:	4652      	mov	r2, sl
 800a670:	465b      	mov	r3, fp
 800a672:	4680      	mov	r8, r0
 800a674:	4689      	mov	r9, r1
 800a676:	f7f6 fa57 	bl	8000b28 <__aeabi_dcmpgt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f040 8295 	bne.w	800abaa <_dtoa_r+0x97a>
 800a680:	4652      	mov	r2, sl
 800a682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f6 fa2f 	bl	8000aec <__aeabi_dcmplt>
 800a68e:	2800      	cmp	r0, #0
 800a690:	f040 8289 	bne.w	800aba6 <_dtoa_r+0x976>
 800a694:	ec5b ab19 	vmov	sl, fp, d9
 800a698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f2c0 8148 	blt.w	800a930 <_dtoa_r+0x700>
 800a6a0:	9a00      	ldr	r2, [sp, #0]
 800a6a2:	2a0e      	cmp	r2, #14
 800a6a4:	f300 8144 	bgt.w	800a930 <_dtoa_r+0x700>
 800a6a8:	4b67      	ldr	r3, [pc, #412]	; (800a848 <_dtoa_r+0x618>)
 800a6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f280 80d5 	bge.w	800a864 <_dtoa_r+0x634>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f300 80d1 	bgt.w	800a864 <_dtoa_r+0x634>
 800a6c2:	f040 826f 	bne.w	800aba4 <_dtoa_r+0x974>
 800a6c6:	4b65      	ldr	r3, [pc, #404]	; (800a85c <_dtoa_r+0x62c>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f5 ff9b 	bl	8000608 <__aeabi_dmul>
 800a6d2:	4652      	mov	r2, sl
 800a6d4:	465b      	mov	r3, fp
 800a6d6:	f7f6 fa1d 	bl	8000b14 <__aeabi_dcmpge>
 800a6da:	9e03      	ldr	r6, [sp, #12]
 800a6dc:	4637      	mov	r7, r6
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f040 8245 	bne.w	800ab6e <_dtoa_r+0x93e>
 800a6e4:	9d01      	ldr	r5, [sp, #4]
 800a6e6:	2331      	movs	r3, #49	; 0x31
 800a6e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a6ec:	9b00      	ldr	r3, [sp, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	e240      	b.n	800ab76 <_dtoa_r+0x946>
 800a6f4:	07f2      	lsls	r2, r6, #31
 800a6f6:	d505      	bpl.n	800a704 <_dtoa_r+0x4d4>
 800a6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6fc:	f7f5 ff84 	bl	8000608 <__aeabi_dmul>
 800a700:	3501      	adds	r5, #1
 800a702:	2301      	movs	r3, #1
 800a704:	1076      	asrs	r6, r6, #1
 800a706:	3708      	adds	r7, #8
 800a708:	e777      	b.n	800a5fa <_dtoa_r+0x3ca>
 800a70a:	2502      	movs	r5, #2
 800a70c:	e779      	b.n	800a602 <_dtoa_r+0x3d2>
 800a70e:	9f00      	ldr	r7, [sp, #0]
 800a710:	9e03      	ldr	r6, [sp, #12]
 800a712:	e794      	b.n	800a63e <_dtoa_r+0x40e>
 800a714:	9901      	ldr	r1, [sp, #4]
 800a716:	4b4c      	ldr	r3, [pc, #304]	; (800a848 <_dtoa_r+0x618>)
 800a718:	4431      	add	r1, r6
 800a71a:	910d      	str	r1, [sp, #52]	; 0x34
 800a71c:	9908      	ldr	r1, [sp, #32]
 800a71e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a726:	2900      	cmp	r1, #0
 800a728:	d043      	beq.n	800a7b2 <_dtoa_r+0x582>
 800a72a:	494d      	ldr	r1, [pc, #308]	; (800a860 <_dtoa_r+0x630>)
 800a72c:	2000      	movs	r0, #0
 800a72e:	f7f6 f895 	bl	800085c <__aeabi_ddiv>
 800a732:	4652      	mov	r2, sl
 800a734:	465b      	mov	r3, fp
 800a736:	f7f5 fdaf 	bl	8000298 <__aeabi_dsub>
 800a73a:	9d01      	ldr	r5, [sp, #4]
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	4649      	mov	r1, r9
 800a742:	4640      	mov	r0, r8
 800a744:	f7f6 fa10 	bl	8000b68 <__aeabi_d2iz>
 800a748:	4606      	mov	r6, r0
 800a74a:	f7f5 fef3 	bl	8000534 <__aeabi_i2d>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f5 fd9f 	bl	8000298 <__aeabi_dsub>
 800a75a:	3630      	adds	r6, #48	; 0x30
 800a75c:	f805 6b01 	strb.w	r6, [r5], #1
 800a760:	4652      	mov	r2, sl
 800a762:	465b      	mov	r3, fp
 800a764:	4680      	mov	r8, r0
 800a766:	4689      	mov	r9, r1
 800a768:	f7f6 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d163      	bne.n	800a838 <_dtoa_r+0x608>
 800a770:	4642      	mov	r2, r8
 800a772:	464b      	mov	r3, r9
 800a774:	4936      	ldr	r1, [pc, #216]	; (800a850 <_dtoa_r+0x620>)
 800a776:	2000      	movs	r0, #0
 800a778:	f7f5 fd8e 	bl	8000298 <__aeabi_dsub>
 800a77c:	4652      	mov	r2, sl
 800a77e:	465b      	mov	r3, fp
 800a780:	f7f6 f9b4 	bl	8000aec <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	f040 80b5 	bne.w	800a8f4 <_dtoa_r+0x6c4>
 800a78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d081      	beq.n	800a694 <_dtoa_r+0x464>
 800a790:	4b30      	ldr	r3, [pc, #192]	; (800a854 <_dtoa_r+0x624>)
 800a792:	2200      	movs	r2, #0
 800a794:	4650      	mov	r0, sl
 800a796:	4659      	mov	r1, fp
 800a798:	f7f5 ff36 	bl	8000608 <__aeabi_dmul>
 800a79c:	4b2d      	ldr	r3, [pc, #180]	; (800a854 <_dtoa_r+0x624>)
 800a79e:	4682      	mov	sl, r0
 800a7a0:	468b      	mov	fp, r1
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f7f5 ff2e 	bl	8000608 <__aeabi_dmul>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	e7c6      	b.n	800a740 <_dtoa_r+0x510>
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	f7f5 ff27 	bl	8000608 <__aeabi_dmul>
 800a7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7bc:	9d01      	ldr	r5, [sp, #4]
 800a7be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7c0:	4682      	mov	sl, r0
 800a7c2:	468b      	mov	fp, r1
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f7f6 f9ce 	bl	8000b68 <__aeabi_d2iz>
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	f7f5 feb1 	bl	8000534 <__aeabi_i2d>
 800a7d2:	3630      	adds	r6, #48	; 0x30
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f5 fd5c 	bl	8000298 <__aeabi_dsub>
 800a7e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	4689      	mov	r9, r1
 800a7ec:	f04f 0200 	mov.w	r2, #0
 800a7f0:	d124      	bne.n	800a83c <_dtoa_r+0x60c>
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <_dtoa_r+0x630>)
 800a7f4:	4650      	mov	r0, sl
 800a7f6:	4659      	mov	r1, fp
 800a7f8:	f7f5 fd50 	bl	800029c <__adddf3>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4640      	mov	r0, r8
 800a802:	4649      	mov	r1, r9
 800a804:	f7f6 f990 	bl	8000b28 <__aeabi_dcmpgt>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d173      	bne.n	800a8f4 <_dtoa_r+0x6c4>
 800a80c:	4652      	mov	r2, sl
 800a80e:	465b      	mov	r3, fp
 800a810:	4913      	ldr	r1, [pc, #76]	; (800a860 <_dtoa_r+0x630>)
 800a812:	2000      	movs	r0, #0
 800a814:	f7f5 fd40 	bl	8000298 <__aeabi_dsub>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4640      	mov	r0, r8
 800a81e:	4649      	mov	r1, r9
 800a820:	f7f6 f964 	bl	8000aec <__aeabi_dcmplt>
 800a824:	2800      	cmp	r0, #0
 800a826:	f43f af35 	beq.w	800a694 <_dtoa_r+0x464>
 800a82a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a82c:	1e6b      	subs	r3, r5, #1
 800a82e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a830:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a834:	2b30      	cmp	r3, #48	; 0x30
 800a836:	d0f8      	beq.n	800a82a <_dtoa_r+0x5fa>
 800a838:	9700      	str	r7, [sp, #0]
 800a83a:	e049      	b.n	800a8d0 <_dtoa_r+0x6a0>
 800a83c:	4b05      	ldr	r3, [pc, #20]	; (800a854 <_dtoa_r+0x624>)
 800a83e:	f7f5 fee3 	bl	8000608 <__aeabi_dmul>
 800a842:	4680      	mov	r8, r0
 800a844:	4689      	mov	r9, r1
 800a846:	e7bd      	b.n	800a7c4 <_dtoa_r+0x594>
 800a848:	0800d3b0 	.word	0x0800d3b0
 800a84c:	0800d388 	.word	0x0800d388
 800a850:	3ff00000 	.word	0x3ff00000
 800a854:	40240000 	.word	0x40240000
 800a858:	401c0000 	.word	0x401c0000
 800a85c:	40140000 	.word	0x40140000
 800a860:	3fe00000 	.word	0x3fe00000
 800a864:	9d01      	ldr	r5, [sp, #4]
 800a866:	4656      	mov	r6, sl
 800a868:	465f      	mov	r7, fp
 800a86a:	4642      	mov	r2, r8
 800a86c:	464b      	mov	r3, r9
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fff3 	bl	800085c <__aeabi_ddiv>
 800a876:	f7f6 f977 	bl	8000b68 <__aeabi_d2iz>
 800a87a:	4682      	mov	sl, r0
 800a87c:	f7f5 fe5a 	bl	8000534 <__aeabi_i2d>
 800a880:	4642      	mov	r2, r8
 800a882:	464b      	mov	r3, r9
 800a884:	f7f5 fec0 	bl	8000608 <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4630      	mov	r0, r6
 800a88e:	4639      	mov	r1, r7
 800a890:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a894:	f7f5 fd00 	bl	8000298 <__aeabi_dsub>
 800a898:	f805 6b01 	strb.w	r6, [r5], #1
 800a89c:	9e01      	ldr	r6, [sp, #4]
 800a89e:	9f03      	ldr	r7, [sp, #12]
 800a8a0:	1bae      	subs	r6, r5, r6
 800a8a2:	42b7      	cmp	r7, r6
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	d135      	bne.n	800a916 <_dtoa_r+0x6e6>
 800a8aa:	f7f5 fcf7 	bl	800029c <__adddf3>
 800a8ae:	4642      	mov	r2, r8
 800a8b0:	464b      	mov	r3, r9
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	f7f6 f937 	bl	8000b28 <__aeabi_dcmpgt>
 800a8ba:	b9d0      	cbnz	r0, 800a8f2 <_dtoa_r+0x6c2>
 800a8bc:	4642      	mov	r2, r8
 800a8be:	464b      	mov	r3, r9
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	f7f6 f908 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8c8:	b110      	cbz	r0, 800a8d0 <_dtoa_r+0x6a0>
 800a8ca:	f01a 0f01 	tst.w	sl, #1
 800a8ce:	d110      	bne.n	800a8f2 <_dtoa_r+0x6c2>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	ee18 1a10 	vmov	r1, s16
 800a8d6:	f001 f893 	bl	800ba00 <_Bfree>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9800      	ldr	r0, [sp, #0]
 800a8de:	702b      	strb	r3, [r5, #0]
 800a8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	6018      	str	r0, [r3, #0]
 800a8e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f43f acf1 	beq.w	800a2d0 <_dtoa_r+0xa0>
 800a8ee:	601d      	str	r5, [r3, #0]
 800a8f0:	e4ee      	b.n	800a2d0 <_dtoa_r+0xa0>
 800a8f2:	9f00      	ldr	r7, [sp, #0]
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	461d      	mov	r5, r3
 800a8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8fc:	2a39      	cmp	r2, #57	; 0x39
 800a8fe:	d106      	bne.n	800a90e <_dtoa_r+0x6de>
 800a900:	9a01      	ldr	r2, [sp, #4]
 800a902:	429a      	cmp	r2, r3
 800a904:	d1f7      	bne.n	800a8f6 <_dtoa_r+0x6c6>
 800a906:	9901      	ldr	r1, [sp, #4]
 800a908:	2230      	movs	r2, #48	; 0x30
 800a90a:	3701      	adds	r7, #1
 800a90c:	700a      	strb	r2, [r1, #0]
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	3201      	adds	r2, #1
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e790      	b.n	800a838 <_dtoa_r+0x608>
 800a916:	4ba6      	ldr	r3, [pc, #664]	; (800abb0 <_dtoa_r+0x980>)
 800a918:	2200      	movs	r2, #0
 800a91a:	f7f5 fe75 	bl	8000608 <__aeabi_dmul>
 800a91e:	2200      	movs	r2, #0
 800a920:	2300      	movs	r3, #0
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	f7f6 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d09d      	beq.n	800a86a <_dtoa_r+0x63a>
 800a92e:	e7cf      	b.n	800a8d0 <_dtoa_r+0x6a0>
 800a930:	9a08      	ldr	r2, [sp, #32]
 800a932:	2a00      	cmp	r2, #0
 800a934:	f000 80d7 	beq.w	800aae6 <_dtoa_r+0x8b6>
 800a938:	9a06      	ldr	r2, [sp, #24]
 800a93a:	2a01      	cmp	r2, #1
 800a93c:	f300 80ba 	bgt.w	800aab4 <_dtoa_r+0x884>
 800a940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a942:	2a00      	cmp	r2, #0
 800a944:	f000 80b2 	beq.w	800aaac <_dtoa_r+0x87c>
 800a948:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a94c:	9e07      	ldr	r6, [sp, #28]
 800a94e:	9d04      	ldr	r5, [sp, #16]
 800a950:	9a04      	ldr	r2, [sp, #16]
 800a952:	441a      	add	r2, r3
 800a954:	9204      	str	r2, [sp, #16]
 800a956:	9a05      	ldr	r2, [sp, #20]
 800a958:	2101      	movs	r1, #1
 800a95a:	441a      	add	r2, r3
 800a95c:	4620      	mov	r0, r4
 800a95e:	9205      	str	r2, [sp, #20]
 800a960:	f001 f950 	bl	800bc04 <__i2b>
 800a964:	4607      	mov	r7, r0
 800a966:	2d00      	cmp	r5, #0
 800a968:	dd0c      	ble.n	800a984 <_dtoa_r+0x754>
 800a96a:	9b05      	ldr	r3, [sp, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dd09      	ble.n	800a984 <_dtoa_r+0x754>
 800a970:	42ab      	cmp	r3, r5
 800a972:	9a04      	ldr	r2, [sp, #16]
 800a974:	bfa8      	it	ge
 800a976:	462b      	movge	r3, r5
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	9204      	str	r2, [sp, #16]
 800a97c:	9a05      	ldr	r2, [sp, #20]
 800a97e:	1aed      	subs	r5, r5, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	b31b      	cbz	r3, 800a9d0 <_dtoa_r+0x7a0>
 800a988:	9b08      	ldr	r3, [sp, #32]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80af 	beq.w	800aaee <_dtoa_r+0x8be>
 800a990:	2e00      	cmp	r6, #0
 800a992:	dd13      	ble.n	800a9bc <_dtoa_r+0x78c>
 800a994:	4639      	mov	r1, r7
 800a996:	4632      	mov	r2, r6
 800a998:	4620      	mov	r0, r4
 800a99a:	f001 f9f3 	bl	800bd84 <__pow5mult>
 800a99e:	ee18 2a10 	vmov	r2, s16
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f001 f942 	bl	800bc30 <__multiply>
 800a9ac:	ee18 1a10 	vmov	r1, s16
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f001 f824 	bl	800ba00 <_Bfree>
 800a9b8:	ee08 8a10 	vmov	s16, r8
 800a9bc:	9b07      	ldr	r3, [sp, #28]
 800a9be:	1b9a      	subs	r2, r3, r6
 800a9c0:	d006      	beq.n	800a9d0 <_dtoa_r+0x7a0>
 800a9c2:	ee18 1a10 	vmov	r1, s16
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f001 f9dc 	bl	800bd84 <__pow5mult>
 800a9cc:	ee08 0a10 	vmov	s16, r0
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f001 f916 	bl	800bc04 <__i2b>
 800a9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	4606      	mov	r6, r0
 800a9de:	f340 8088 	ble.w	800aaf2 <_dtoa_r+0x8c2>
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4601      	mov	r1, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f001 f9cc 	bl	800bd84 <__pow5mult>
 800a9ec:	9b06      	ldr	r3, [sp, #24]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	f340 8081 	ble.w	800aaf8 <_dtoa_r+0x8c8>
 800a9f6:	f04f 0800 	mov.w	r8, #0
 800a9fa:	6933      	ldr	r3, [r6, #16]
 800a9fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa00:	6918      	ldr	r0, [r3, #16]
 800aa02:	f001 f8af 	bl	800bb64 <__hi0bits>
 800aa06:	f1c0 0020 	rsb	r0, r0, #32
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	4418      	add	r0, r3
 800aa0e:	f010 001f 	ands.w	r0, r0, #31
 800aa12:	f000 8092 	beq.w	800ab3a <_dtoa_r+0x90a>
 800aa16:	f1c0 0320 	rsb	r3, r0, #32
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	f340 808a 	ble.w	800ab34 <_dtoa_r+0x904>
 800aa20:	f1c0 001c 	rsb	r0, r0, #28
 800aa24:	9b04      	ldr	r3, [sp, #16]
 800aa26:	4403      	add	r3, r0
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	4403      	add	r3, r0
 800aa2e:	4405      	add	r5, r0
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd07      	ble.n	800aa48 <_dtoa_r+0x818>
 800aa38:	ee18 1a10 	vmov	r1, s16
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 f9fa 	bl	800be38 <__lshift>
 800aa44:	ee08 0a10 	vmov	s16, r0
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dd05      	ble.n	800aa5a <_dtoa_r+0x82a>
 800aa4e:	4631      	mov	r1, r6
 800aa50:	461a      	mov	r2, r3
 800aa52:	4620      	mov	r0, r4
 800aa54:	f001 f9f0 	bl	800be38 <__lshift>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d06e      	beq.n	800ab3e <_dtoa_r+0x90e>
 800aa60:	ee18 0a10 	vmov	r0, s16
 800aa64:	4631      	mov	r1, r6
 800aa66:	f001 fa57 	bl	800bf18 <__mcmp>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	da67      	bge.n	800ab3e <_dtoa_r+0x90e>
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	ee18 1a10 	vmov	r1, s16
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	220a      	movs	r2, #10
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 ffe1 	bl	800ba44 <__multadd>
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	ee08 0a10 	vmov	s16, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 81b1 	beq.w	800adf0 <_dtoa_r+0xbc0>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4639      	mov	r1, r7
 800aa92:	220a      	movs	r2, #10
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 ffd5 	bl	800ba44 <__multadd>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	f300 808e 	bgt.w	800abc0 <_dtoa_r+0x990>
 800aaa4:	9b06      	ldr	r3, [sp, #24]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	dc51      	bgt.n	800ab4e <_dtoa_r+0x91e>
 800aaaa:	e089      	b.n	800abc0 <_dtoa_r+0x990>
 800aaac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aab2:	e74b      	b.n	800a94c <_dtoa_r+0x71c>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	1e5e      	subs	r6, r3, #1
 800aab8:	9b07      	ldr	r3, [sp, #28]
 800aaba:	42b3      	cmp	r3, r6
 800aabc:	bfbf      	itttt	lt
 800aabe:	9b07      	ldrlt	r3, [sp, #28]
 800aac0:	9607      	strlt	r6, [sp, #28]
 800aac2:	1af2      	sublt	r2, r6, r3
 800aac4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aac6:	bfb6      	itet	lt
 800aac8:	189b      	addlt	r3, r3, r2
 800aaca:	1b9e      	subge	r6, r3, r6
 800aacc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	bfb8      	it	lt
 800aad2:	2600      	movlt	r6, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb7      	itett	lt
 800aad8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aadc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aae0:	1a9d      	sublt	r5, r3, r2
 800aae2:	2300      	movlt	r3, #0
 800aae4:	e734      	b.n	800a950 <_dtoa_r+0x720>
 800aae6:	9e07      	ldr	r6, [sp, #28]
 800aae8:	9d04      	ldr	r5, [sp, #16]
 800aaea:	9f08      	ldr	r7, [sp, #32]
 800aaec:	e73b      	b.n	800a966 <_dtoa_r+0x736>
 800aaee:	9a07      	ldr	r2, [sp, #28]
 800aaf0:	e767      	b.n	800a9c2 <_dtoa_r+0x792>
 800aaf2:	9b06      	ldr	r3, [sp, #24]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	dc18      	bgt.n	800ab2a <_dtoa_r+0x8fa>
 800aaf8:	f1ba 0f00 	cmp.w	sl, #0
 800aafc:	d115      	bne.n	800ab2a <_dtoa_r+0x8fa>
 800aafe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab02:	b993      	cbnz	r3, 800ab2a <_dtoa_r+0x8fa>
 800ab04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab08:	0d1b      	lsrs	r3, r3, #20
 800ab0a:	051b      	lsls	r3, r3, #20
 800ab0c:	b183      	cbz	r3, 800ab30 <_dtoa_r+0x900>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	3301      	adds	r3, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	9b05      	ldr	r3, [sp, #20]
 800ab16:	3301      	adds	r3, #1
 800ab18:	9305      	str	r3, [sp, #20]
 800ab1a:	f04f 0801 	mov.w	r8, #1
 800ab1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f47f af6a 	bne.w	800a9fa <_dtoa_r+0x7ca>
 800ab26:	2001      	movs	r0, #1
 800ab28:	e76f      	b.n	800aa0a <_dtoa_r+0x7da>
 800ab2a:	f04f 0800 	mov.w	r8, #0
 800ab2e:	e7f6      	b.n	800ab1e <_dtoa_r+0x8ee>
 800ab30:	4698      	mov	r8, r3
 800ab32:	e7f4      	b.n	800ab1e <_dtoa_r+0x8ee>
 800ab34:	f43f af7d 	beq.w	800aa32 <_dtoa_r+0x802>
 800ab38:	4618      	mov	r0, r3
 800ab3a:	301c      	adds	r0, #28
 800ab3c:	e772      	b.n	800aa24 <_dtoa_r+0x7f4>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dc37      	bgt.n	800abb4 <_dtoa_r+0x984>
 800ab44:	9b06      	ldr	r3, [sp, #24]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	dd34      	ble.n	800abb4 <_dtoa_r+0x984>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	9b02      	ldr	r3, [sp, #8]
 800ab50:	b96b      	cbnz	r3, 800ab6e <_dtoa_r+0x93e>
 800ab52:	4631      	mov	r1, r6
 800ab54:	2205      	movs	r2, #5
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 ff74 	bl	800ba44 <__multadd>
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	4606      	mov	r6, r0
 800ab60:	ee18 0a10 	vmov	r0, s16
 800ab64:	f001 f9d8 	bl	800bf18 <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f73f adbb 	bgt.w	800a6e4 <_dtoa_r+0x4b4>
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	9d01      	ldr	r5, [sp, #4]
 800ab72:	43db      	mvns	r3, r3
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	f04f 0800 	mov.w	r8, #0
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 ff3f 	bl	800ba00 <_Bfree>
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	f43f aea4 	beq.w	800a8d0 <_dtoa_r+0x6a0>
 800ab88:	f1b8 0f00 	cmp.w	r8, #0
 800ab8c:	d005      	beq.n	800ab9a <_dtoa_r+0x96a>
 800ab8e:	45b8      	cmp	r8, r7
 800ab90:	d003      	beq.n	800ab9a <_dtoa_r+0x96a>
 800ab92:	4641      	mov	r1, r8
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 ff33 	bl	800ba00 <_Bfree>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 ff2f 	bl	800ba00 <_Bfree>
 800aba2:	e695      	b.n	800a8d0 <_dtoa_r+0x6a0>
 800aba4:	2600      	movs	r6, #0
 800aba6:	4637      	mov	r7, r6
 800aba8:	e7e1      	b.n	800ab6e <_dtoa_r+0x93e>
 800abaa:	9700      	str	r7, [sp, #0]
 800abac:	4637      	mov	r7, r6
 800abae:	e599      	b.n	800a6e4 <_dtoa_r+0x4b4>
 800abb0:	40240000 	.word	0x40240000
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80ca 	beq.w	800ad50 <_dtoa_r+0xb20>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	9302      	str	r3, [sp, #8]
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x9a0>
 800abc4:	4639      	mov	r1, r7
 800abc6:	462a      	mov	r2, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f001 f935 	bl	800be38 <__lshift>
 800abce:	4607      	mov	r7, r0
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	d05b      	beq.n	800ac8e <_dtoa_r+0xa5e>
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fed1 	bl	800b980 <_Balloc>
 800abde:	4605      	mov	r5, r0
 800abe0:	b928      	cbnz	r0, 800abee <_dtoa_r+0x9be>
 800abe2:	4b87      	ldr	r3, [pc, #540]	; (800ae00 <_dtoa_r+0xbd0>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abea:	f7ff bb3b 	b.w	800a264 <_dtoa_r+0x34>
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	0092      	lsls	r2, r2, #2
 800abf4:	f107 010c 	add.w	r1, r7, #12
 800abf8:	300c      	adds	r0, #12
 800abfa:	f000 feb3 	bl	800b964 <memcpy>
 800abfe:	2201      	movs	r2, #1
 800ac00:	4629      	mov	r1, r5
 800ac02:	4620      	mov	r0, r4
 800ac04:	f001 f918 	bl	800be38 <__lshift>
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	f103 0901 	add.w	r9, r3, #1
 800ac0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac12:	4413      	add	r3, r2
 800ac14:	9305      	str	r3, [sp, #20]
 800ac16:	f00a 0301 	and.w	r3, sl, #1
 800ac1a:	46b8      	mov	r8, r7
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	4607      	mov	r7, r0
 800ac20:	4631      	mov	r1, r6
 800ac22:	ee18 0a10 	vmov	r0, s16
 800ac26:	f7ff fa77 	bl	800a118 <quorem>
 800ac2a:	4641      	mov	r1, r8
 800ac2c:	9002      	str	r0, [sp, #8]
 800ac2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac32:	ee18 0a10 	vmov	r0, s16
 800ac36:	f001 f96f 	bl	800bf18 <__mcmp>
 800ac3a:	463a      	mov	r2, r7
 800ac3c:	9003      	str	r0, [sp, #12]
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4620      	mov	r0, r4
 800ac42:	f001 f985 	bl	800bf50 <__mdiff>
 800ac46:	68c2      	ldr	r2, [r0, #12]
 800ac48:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	bb02      	cbnz	r2, 800ac92 <_dtoa_r+0xa62>
 800ac50:	4601      	mov	r1, r0
 800ac52:	ee18 0a10 	vmov	r0, s16
 800ac56:	f001 f95f 	bl	800bf18 <__mcmp>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	4620      	mov	r0, r4
 800ac60:	9207      	str	r2, [sp, #28]
 800ac62:	f000 fecd 	bl	800ba00 <_Bfree>
 800ac66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac6a:	ea43 0102 	orr.w	r1, r3, r2
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	430b      	orrs	r3, r1
 800ac72:	464d      	mov	r5, r9
 800ac74:	d10f      	bne.n	800ac96 <_dtoa_r+0xa66>
 800ac76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac7a:	d02a      	beq.n	800acd2 <_dtoa_r+0xaa2>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd02      	ble.n	800ac88 <_dtoa_r+0xa58>
 800ac82:	9b02      	ldr	r3, [sp, #8]
 800ac84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac88:	f88b a000 	strb.w	sl, [fp]
 800ac8c:	e775      	b.n	800ab7a <_dtoa_r+0x94a>
 800ac8e:	4638      	mov	r0, r7
 800ac90:	e7ba      	b.n	800ac08 <_dtoa_r+0x9d8>
 800ac92:	2201      	movs	r2, #1
 800ac94:	e7e2      	b.n	800ac5c <_dtoa_r+0xa2c>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	db04      	blt.n	800aca6 <_dtoa_r+0xa76>
 800ac9c:	9906      	ldr	r1, [sp, #24]
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	9904      	ldr	r1, [sp, #16]
 800aca2:	430b      	orrs	r3, r1
 800aca4:	d122      	bne.n	800acec <_dtoa_r+0xabc>
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	ddee      	ble.n	800ac88 <_dtoa_r+0xa58>
 800acaa:	ee18 1a10 	vmov	r1, s16
 800acae:	2201      	movs	r2, #1
 800acb0:	4620      	mov	r0, r4
 800acb2:	f001 f8c1 	bl	800be38 <__lshift>
 800acb6:	4631      	mov	r1, r6
 800acb8:	ee08 0a10 	vmov	s16, r0
 800acbc:	f001 f92c 	bl	800bf18 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	dc03      	bgt.n	800accc <_dtoa_r+0xa9c>
 800acc4:	d1e0      	bne.n	800ac88 <_dtoa_r+0xa58>
 800acc6:	f01a 0f01 	tst.w	sl, #1
 800acca:	d0dd      	beq.n	800ac88 <_dtoa_r+0xa58>
 800accc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acd0:	d1d7      	bne.n	800ac82 <_dtoa_r+0xa52>
 800acd2:	2339      	movs	r3, #57	; 0x39
 800acd4:	f88b 3000 	strb.w	r3, [fp]
 800acd8:	462b      	mov	r3, r5
 800acda:	461d      	mov	r5, r3
 800acdc:	3b01      	subs	r3, #1
 800acde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ace2:	2a39      	cmp	r2, #57	; 0x39
 800ace4:	d071      	beq.n	800adca <_dtoa_r+0xb9a>
 800ace6:	3201      	adds	r2, #1
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e746      	b.n	800ab7a <_dtoa_r+0x94a>
 800acec:	2a00      	cmp	r2, #0
 800acee:	dd07      	ble.n	800ad00 <_dtoa_r+0xad0>
 800acf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf4:	d0ed      	beq.n	800acd2 <_dtoa_r+0xaa2>
 800acf6:	f10a 0301 	add.w	r3, sl, #1
 800acfa:	f88b 3000 	strb.w	r3, [fp]
 800acfe:	e73c      	b.n	800ab7a <_dtoa_r+0x94a>
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad06:	4599      	cmp	r9, r3
 800ad08:	d047      	beq.n	800ad9a <_dtoa_r+0xb6a>
 800ad0a:	ee18 1a10 	vmov	r1, s16
 800ad0e:	2300      	movs	r3, #0
 800ad10:	220a      	movs	r2, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 fe96 	bl	800ba44 <__multadd>
 800ad18:	45b8      	cmp	r8, r7
 800ad1a:	ee08 0a10 	vmov	s16, r0
 800ad1e:	f04f 0300 	mov.w	r3, #0
 800ad22:	f04f 020a 	mov.w	r2, #10
 800ad26:	4641      	mov	r1, r8
 800ad28:	4620      	mov	r0, r4
 800ad2a:	d106      	bne.n	800ad3a <_dtoa_r+0xb0a>
 800ad2c:	f000 fe8a 	bl	800ba44 <__multadd>
 800ad30:	4680      	mov	r8, r0
 800ad32:	4607      	mov	r7, r0
 800ad34:	f109 0901 	add.w	r9, r9, #1
 800ad38:	e772      	b.n	800ac20 <_dtoa_r+0x9f0>
 800ad3a:	f000 fe83 	bl	800ba44 <__multadd>
 800ad3e:	4639      	mov	r1, r7
 800ad40:	4680      	mov	r8, r0
 800ad42:	2300      	movs	r3, #0
 800ad44:	220a      	movs	r2, #10
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 fe7c 	bl	800ba44 <__multadd>
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	e7f1      	b.n	800ad34 <_dtoa_r+0xb04>
 800ad50:	9b03      	ldr	r3, [sp, #12]
 800ad52:	9302      	str	r3, [sp, #8]
 800ad54:	9d01      	ldr	r5, [sp, #4]
 800ad56:	ee18 0a10 	vmov	r0, s16
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	f7ff f9dc 	bl	800a118 <quorem>
 800ad60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad64:	9b01      	ldr	r3, [sp, #4]
 800ad66:	f805 ab01 	strb.w	sl, [r5], #1
 800ad6a:	1aea      	subs	r2, r5, r3
 800ad6c:	9b02      	ldr	r3, [sp, #8]
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	dd09      	ble.n	800ad86 <_dtoa_r+0xb56>
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	2300      	movs	r3, #0
 800ad78:	220a      	movs	r2, #10
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 fe62 	bl	800ba44 <__multadd>
 800ad80:	ee08 0a10 	vmov	s16, r0
 800ad84:	e7e7      	b.n	800ad56 <_dtoa_r+0xb26>
 800ad86:	9b02      	ldr	r3, [sp, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bfc8      	it	gt
 800ad8c:	461d      	movgt	r5, r3
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	bfd8      	it	le
 800ad92:	2501      	movle	r5, #1
 800ad94:	441d      	add	r5, r3
 800ad96:	f04f 0800 	mov.w	r8, #0
 800ad9a:	ee18 1a10 	vmov	r1, s16
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4620      	mov	r0, r4
 800ada2:	f001 f849 	bl	800be38 <__lshift>
 800ada6:	4631      	mov	r1, r6
 800ada8:	ee08 0a10 	vmov	s16, r0
 800adac:	f001 f8b4 	bl	800bf18 <__mcmp>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	dc91      	bgt.n	800acd8 <_dtoa_r+0xaa8>
 800adb4:	d102      	bne.n	800adbc <_dtoa_r+0xb8c>
 800adb6:	f01a 0f01 	tst.w	sl, #1
 800adba:	d18d      	bne.n	800acd8 <_dtoa_r+0xaa8>
 800adbc:	462b      	mov	r3, r5
 800adbe:	461d      	mov	r5, r3
 800adc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adc4:	2a30      	cmp	r2, #48	; 0x30
 800adc6:	d0fa      	beq.n	800adbe <_dtoa_r+0xb8e>
 800adc8:	e6d7      	b.n	800ab7a <_dtoa_r+0x94a>
 800adca:	9a01      	ldr	r2, [sp, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d184      	bne.n	800acda <_dtoa_r+0xaaa>
 800add0:	9b00      	ldr	r3, [sp, #0]
 800add2:	3301      	adds	r3, #1
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	2331      	movs	r3, #49	; 0x31
 800add8:	7013      	strb	r3, [r2, #0]
 800adda:	e6ce      	b.n	800ab7a <_dtoa_r+0x94a>
 800addc:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <_dtoa_r+0xbd4>)
 800adde:	f7ff ba95 	b.w	800a30c <_dtoa_r+0xdc>
 800ade2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f47f aa6e 	bne.w	800a2c6 <_dtoa_r+0x96>
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <_dtoa_r+0xbd8>)
 800adec:	f7ff ba8e 	b.w	800a30c <_dtoa_r+0xdc>
 800adf0:	9b02      	ldr	r3, [sp, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dcae      	bgt.n	800ad54 <_dtoa_r+0xb24>
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	f73f aea8 	bgt.w	800ab4e <_dtoa_r+0x91e>
 800adfe:	e7a9      	b.n	800ad54 <_dtoa_r+0xb24>
 800ae00:	0800d238 	.word	0x0800d238
 800ae04:	0800d03c 	.word	0x0800d03c
 800ae08:	0800d1b9 	.word	0x0800d1b9

0800ae0c <__sflush_r>:
 800ae0c:	898a      	ldrh	r2, [r1, #12]
 800ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	4605      	mov	r5, r0
 800ae14:	0710      	lsls	r0, r2, #28
 800ae16:	460c      	mov	r4, r1
 800ae18:	d458      	bmi.n	800aecc <__sflush_r+0xc0>
 800ae1a:	684b      	ldr	r3, [r1, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dc05      	bgt.n	800ae2c <__sflush_r+0x20>
 800ae20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dc02      	bgt.n	800ae2c <__sflush_r+0x20>
 800ae26:	2000      	movs	r0, #0
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d0f9      	beq.n	800ae26 <__sflush_r+0x1a>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae38:	682f      	ldr	r7, [r5, #0]
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	d032      	beq.n	800aea4 <__sflush_r+0x98>
 800ae3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	075a      	lsls	r2, r3, #29
 800ae44:	d505      	bpl.n	800ae52 <__sflush_r+0x46>
 800ae46:	6863      	ldr	r3, [r4, #4]
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae4c:	b10b      	cbz	r3, 800ae52 <__sflush_r+0x46>
 800ae4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae50:	1ac0      	subs	r0, r0, r3
 800ae52:	2300      	movs	r3, #0
 800ae54:	4602      	mov	r2, r0
 800ae56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b0      	blx	r6
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	d106      	bne.n	800ae72 <__sflush_r+0x66>
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	291d      	cmp	r1, #29
 800ae68:	d82c      	bhi.n	800aec4 <__sflush_r+0xb8>
 800ae6a:	4a2a      	ldr	r2, [pc, #168]	; (800af14 <__sflush_r+0x108>)
 800ae6c:	40ca      	lsrs	r2, r1
 800ae6e:	07d6      	lsls	r6, r2, #31
 800ae70:	d528      	bpl.n	800aec4 <__sflush_r+0xb8>
 800ae72:	2200      	movs	r2, #0
 800ae74:	6062      	str	r2, [r4, #4]
 800ae76:	04d9      	lsls	r1, r3, #19
 800ae78:	6922      	ldr	r2, [r4, #16]
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	d504      	bpl.n	800ae88 <__sflush_r+0x7c>
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	d101      	bne.n	800ae86 <__sflush_r+0x7a>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b903      	cbnz	r3, 800ae88 <__sflush_r+0x7c>
 800ae86:	6560      	str	r0, [r4, #84]	; 0x54
 800ae88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8a:	602f      	str	r7, [r5, #0]
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d0ca      	beq.n	800ae26 <__sflush_r+0x1a>
 800ae90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d002      	beq.n	800ae9e <__sflush_r+0x92>
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f001 fa49 	bl	800c330 <_free_r>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	6360      	str	r0, [r4, #52]	; 0x34
 800aea2:	e7c1      	b.n	800ae28 <__sflush_r+0x1c>
 800aea4:	6a21      	ldr	r1, [r4, #32]
 800aea6:	2301      	movs	r3, #1
 800aea8:	4628      	mov	r0, r5
 800aeaa:	47b0      	blx	r6
 800aeac:	1c41      	adds	r1, r0, #1
 800aeae:	d1c7      	bne.n	800ae40 <__sflush_r+0x34>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0c4      	beq.n	800ae40 <__sflush_r+0x34>
 800aeb6:	2b1d      	cmp	r3, #29
 800aeb8:	d001      	beq.n	800aebe <__sflush_r+0xb2>
 800aeba:	2b16      	cmp	r3, #22
 800aebc:	d101      	bne.n	800aec2 <__sflush_r+0xb6>
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	e7b1      	b.n	800ae26 <__sflush_r+0x1a>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e7ad      	b.n	800ae28 <__sflush_r+0x1c>
 800aecc:	690f      	ldr	r7, [r1, #16]
 800aece:	2f00      	cmp	r7, #0
 800aed0:	d0a9      	beq.n	800ae26 <__sflush_r+0x1a>
 800aed2:	0793      	lsls	r3, r2, #30
 800aed4:	680e      	ldr	r6, [r1, #0]
 800aed6:	bf08      	it	eq
 800aed8:	694b      	ldreq	r3, [r1, #20]
 800aeda:	600f      	str	r7, [r1, #0]
 800aedc:	bf18      	it	ne
 800aede:	2300      	movne	r3, #0
 800aee0:	eba6 0807 	sub.w	r8, r6, r7
 800aee4:	608b      	str	r3, [r1, #8]
 800aee6:	f1b8 0f00 	cmp.w	r8, #0
 800aeea:	dd9c      	ble.n	800ae26 <__sflush_r+0x1a>
 800aeec:	6a21      	ldr	r1, [r4, #32]
 800aeee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aef0:	4643      	mov	r3, r8
 800aef2:	463a      	mov	r2, r7
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b0      	blx	r6
 800aef8:	2800      	cmp	r0, #0
 800aefa:	dc06      	bgt.n	800af0a <__sflush_r+0xfe>
 800aefc:	89a3      	ldrh	r3, [r4, #12]
 800aefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	e78e      	b.n	800ae28 <__sflush_r+0x1c>
 800af0a:	4407      	add	r7, r0
 800af0c:	eba8 0800 	sub.w	r8, r8, r0
 800af10:	e7e9      	b.n	800aee6 <__sflush_r+0xda>
 800af12:	bf00      	nop
 800af14:	20400001 	.word	0x20400001

0800af18 <_fflush_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	690b      	ldr	r3, [r1, #16]
 800af1c:	4605      	mov	r5, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	b913      	cbnz	r3, 800af28 <_fflush_r+0x10>
 800af22:	2500      	movs	r5, #0
 800af24:	4628      	mov	r0, r5
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	b118      	cbz	r0, 800af32 <_fflush_r+0x1a>
 800af2a:	6983      	ldr	r3, [r0, #24]
 800af2c:	b90b      	cbnz	r3, 800af32 <_fflush_r+0x1a>
 800af2e:	f000 f887 	bl	800b040 <__sinit>
 800af32:	4b14      	ldr	r3, [pc, #80]	; (800af84 <_fflush_r+0x6c>)
 800af34:	429c      	cmp	r4, r3
 800af36:	d11b      	bne.n	800af70 <_fflush_r+0x58>
 800af38:	686c      	ldr	r4, [r5, #4]
 800af3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0ef      	beq.n	800af22 <_fflush_r+0xa>
 800af42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af44:	07d0      	lsls	r0, r2, #31
 800af46:	d404      	bmi.n	800af52 <_fflush_r+0x3a>
 800af48:	0599      	lsls	r1, r3, #22
 800af4a:	d402      	bmi.n	800af52 <_fflush_r+0x3a>
 800af4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af4e:	f000 fc88 	bl	800b862 <__retarget_lock_acquire_recursive>
 800af52:	4628      	mov	r0, r5
 800af54:	4621      	mov	r1, r4
 800af56:	f7ff ff59 	bl	800ae0c <__sflush_r>
 800af5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af5c:	07da      	lsls	r2, r3, #31
 800af5e:	4605      	mov	r5, r0
 800af60:	d4e0      	bmi.n	800af24 <_fflush_r+0xc>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	059b      	lsls	r3, r3, #22
 800af66:	d4dd      	bmi.n	800af24 <_fflush_r+0xc>
 800af68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6a:	f000 fc7b 	bl	800b864 <__retarget_lock_release_recursive>
 800af6e:	e7d9      	b.n	800af24 <_fflush_r+0xc>
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <_fflush_r+0x70>)
 800af72:	429c      	cmp	r4, r3
 800af74:	d101      	bne.n	800af7a <_fflush_r+0x62>
 800af76:	68ac      	ldr	r4, [r5, #8]
 800af78:	e7df      	b.n	800af3a <_fflush_r+0x22>
 800af7a:	4b04      	ldr	r3, [pc, #16]	; (800af8c <_fflush_r+0x74>)
 800af7c:	429c      	cmp	r4, r3
 800af7e:	bf08      	it	eq
 800af80:	68ec      	ldreq	r4, [r5, #12]
 800af82:	e7da      	b.n	800af3a <_fflush_r+0x22>
 800af84:	0800d26c 	.word	0x0800d26c
 800af88:	0800d28c 	.word	0x0800d28c
 800af8c:	0800d24c 	.word	0x0800d24c

0800af90 <std>:
 800af90:	2300      	movs	r3, #0
 800af92:	b510      	push	{r4, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	e9c0 3300 	strd	r3, r3, [r0]
 800af9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9e:	6083      	str	r3, [r0, #8]
 800afa0:	8181      	strh	r1, [r0, #12]
 800afa2:	6643      	str	r3, [r0, #100]	; 0x64
 800afa4:	81c2      	strh	r2, [r0, #14]
 800afa6:	6183      	str	r3, [r0, #24]
 800afa8:	4619      	mov	r1, r3
 800afaa:	2208      	movs	r2, #8
 800afac:	305c      	adds	r0, #92	; 0x5c
 800afae:	f7fd f9f9 	bl	80083a4 <memset>
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <std+0x38>)
 800afb4:	6263      	str	r3, [r4, #36]	; 0x24
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x3c>)
 800afb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <std+0x40>)
 800afbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afbe:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <std+0x44>)
 800afc0:	6224      	str	r4, [r4, #32]
 800afc2:	6323      	str	r3, [r4, #48]	; 0x30
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	bf00      	nop
 800afc8:	0800ca91 	.word	0x0800ca91
 800afcc:	0800cab3 	.word	0x0800cab3
 800afd0:	0800caeb 	.word	0x0800caeb
 800afd4:	0800cb0f 	.word	0x0800cb0f

0800afd8 <_cleanup_r>:
 800afd8:	4901      	ldr	r1, [pc, #4]	; (800afe0 <_cleanup_r+0x8>)
 800afda:	f000 b8af 	b.w	800b13c <_fwalk_reent>
 800afde:	bf00      	nop
 800afe0:	0800af19 	.word	0x0800af19

0800afe4 <__sfmoreglue>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	2268      	movs	r2, #104	; 0x68
 800afe8:	1e4d      	subs	r5, r1, #1
 800afea:	4355      	muls	r5, r2
 800afec:	460e      	mov	r6, r1
 800afee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aff2:	f001 fa09 	bl	800c408 <_malloc_r>
 800aff6:	4604      	mov	r4, r0
 800aff8:	b140      	cbz	r0, 800b00c <__sfmoreglue+0x28>
 800affa:	2100      	movs	r1, #0
 800affc:	e9c0 1600 	strd	r1, r6, [r0]
 800b000:	300c      	adds	r0, #12
 800b002:	60a0      	str	r0, [r4, #8]
 800b004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b008:	f7fd f9cc 	bl	80083a4 <memset>
 800b00c:	4620      	mov	r0, r4
 800b00e:	bd70      	pop	{r4, r5, r6, pc}

0800b010 <__sfp_lock_acquire>:
 800b010:	4801      	ldr	r0, [pc, #4]	; (800b018 <__sfp_lock_acquire+0x8>)
 800b012:	f000 bc26 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800b016:	bf00      	nop
 800b018:	20000a91 	.word	0x20000a91

0800b01c <__sfp_lock_release>:
 800b01c:	4801      	ldr	r0, [pc, #4]	; (800b024 <__sfp_lock_release+0x8>)
 800b01e:	f000 bc21 	b.w	800b864 <__retarget_lock_release_recursive>
 800b022:	bf00      	nop
 800b024:	20000a91 	.word	0x20000a91

0800b028 <__sinit_lock_acquire>:
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__sinit_lock_acquire+0x8>)
 800b02a:	f000 bc1a 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800b02e:	bf00      	nop
 800b030:	20000a92 	.word	0x20000a92

0800b034 <__sinit_lock_release>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__sinit_lock_release+0x8>)
 800b036:	f000 bc15 	b.w	800b864 <__retarget_lock_release_recursive>
 800b03a:	bf00      	nop
 800b03c:	20000a92 	.word	0x20000a92

0800b040 <__sinit>:
 800b040:	b510      	push	{r4, lr}
 800b042:	4604      	mov	r4, r0
 800b044:	f7ff fff0 	bl	800b028 <__sinit_lock_acquire>
 800b048:	69a3      	ldr	r3, [r4, #24]
 800b04a:	b11b      	cbz	r3, 800b054 <__sinit+0x14>
 800b04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b050:	f7ff bff0 	b.w	800b034 <__sinit_lock_release>
 800b054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b058:	6523      	str	r3, [r4, #80]	; 0x50
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <__sinit+0x68>)
 800b05c:	4a13      	ldr	r2, [pc, #76]	; (800b0ac <__sinit+0x6c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	62a2      	str	r2, [r4, #40]	; 0x28
 800b062:	42a3      	cmp	r3, r4
 800b064:	bf04      	itt	eq
 800b066:	2301      	moveq	r3, #1
 800b068:	61a3      	streq	r3, [r4, #24]
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 f820 	bl	800b0b0 <__sfp>
 800b070:	6060      	str	r0, [r4, #4]
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f81c 	bl	800b0b0 <__sfp>
 800b078:	60a0      	str	r0, [r4, #8]
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f818 	bl	800b0b0 <__sfp>
 800b080:	2200      	movs	r2, #0
 800b082:	60e0      	str	r0, [r4, #12]
 800b084:	2104      	movs	r1, #4
 800b086:	6860      	ldr	r0, [r4, #4]
 800b088:	f7ff ff82 	bl	800af90 <std>
 800b08c:	68a0      	ldr	r0, [r4, #8]
 800b08e:	2201      	movs	r2, #1
 800b090:	2109      	movs	r1, #9
 800b092:	f7ff ff7d 	bl	800af90 <std>
 800b096:	68e0      	ldr	r0, [r4, #12]
 800b098:	2202      	movs	r2, #2
 800b09a:	2112      	movs	r1, #18
 800b09c:	f7ff ff78 	bl	800af90 <std>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	61a3      	str	r3, [r4, #24]
 800b0a4:	e7d2      	b.n	800b04c <__sinit+0xc>
 800b0a6:	bf00      	nop
 800b0a8:	0800d028 	.word	0x0800d028
 800b0ac:	0800afd9 	.word	0x0800afd9

0800b0b0 <__sfp>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	f7ff ffac 	bl	800b010 <__sfp_lock_acquire>
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <__sfp+0x84>)
 800b0ba:	681e      	ldr	r6, [r3, #0]
 800b0bc:	69b3      	ldr	r3, [r6, #24]
 800b0be:	b913      	cbnz	r3, 800b0c6 <__sfp+0x16>
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff ffbd 	bl	800b040 <__sinit>
 800b0c6:	3648      	adds	r6, #72	; 0x48
 800b0c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	d503      	bpl.n	800b0d8 <__sfp+0x28>
 800b0d0:	6833      	ldr	r3, [r6, #0]
 800b0d2:	b30b      	cbz	r3, 800b118 <__sfp+0x68>
 800b0d4:	6836      	ldr	r6, [r6, #0]
 800b0d6:	e7f7      	b.n	800b0c8 <__sfp+0x18>
 800b0d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0dc:	b9d5      	cbnz	r5, 800b114 <__sfp+0x64>
 800b0de:	4b16      	ldr	r3, [pc, #88]	; (800b138 <__sfp+0x88>)
 800b0e0:	60e3      	str	r3, [r4, #12]
 800b0e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b0e8:	f000 fbba 	bl	800b860 <__retarget_lock_init_recursive>
 800b0ec:	f7ff ff96 	bl	800b01c <__sfp_lock_release>
 800b0f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0f8:	6025      	str	r5, [r4, #0]
 800b0fa:	61a5      	str	r5, [r4, #24]
 800b0fc:	2208      	movs	r2, #8
 800b0fe:	4629      	mov	r1, r5
 800b100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b104:	f7fd f94e 	bl	80083a4 <memset>
 800b108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b10c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b110:	4620      	mov	r0, r4
 800b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b114:	3468      	adds	r4, #104	; 0x68
 800b116:	e7d9      	b.n	800b0cc <__sfp+0x1c>
 800b118:	2104      	movs	r1, #4
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7ff ff62 	bl	800afe4 <__sfmoreglue>
 800b120:	4604      	mov	r4, r0
 800b122:	6030      	str	r0, [r6, #0]
 800b124:	2800      	cmp	r0, #0
 800b126:	d1d5      	bne.n	800b0d4 <__sfp+0x24>
 800b128:	f7ff ff78 	bl	800b01c <__sfp_lock_release>
 800b12c:	230c      	movs	r3, #12
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	e7ee      	b.n	800b110 <__sfp+0x60>
 800b132:	bf00      	nop
 800b134:	0800d028 	.word	0x0800d028
 800b138:	ffff0001 	.word	0xffff0001

0800b13c <_fwalk_reent>:
 800b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b140:	4606      	mov	r6, r0
 800b142:	4688      	mov	r8, r1
 800b144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b148:	2700      	movs	r7, #0
 800b14a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b14e:	f1b9 0901 	subs.w	r9, r9, #1
 800b152:	d505      	bpl.n	800b160 <_fwalk_reent+0x24>
 800b154:	6824      	ldr	r4, [r4, #0]
 800b156:	2c00      	cmp	r4, #0
 800b158:	d1f7      	bne.n	800b14a <_fwalk_reent+0xe>
 800b15a:	4638      	mov	r0, r7
 800b15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b160:	89ab      	ldrh	r3, [r5, #12]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d907      	bls.n	800b176 <_fwalk_reent+0x3a>
 800b166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b16a:	3301      	adds	r3, #1
 800b16c:	d003      	beq.n	800b176 <_fwalk_reent+0x3a>
 800b16e:	4629      	mov	r1, r5
 800b170:	4630      	mov	r0, r6
 800b172:	47c0      	blx	r8
 800b174:	4307      	orrs	r7, r0
 800b176:	3568      	adds	r5, #104	; 0x68
 800b178:	e7e9      	b.n	800b14e <_fwalk_reent+0x12>

0800b17a <rshift>:
 800b17a:	6903      	ldr	r3, [r0, #16]
 800b17c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b184:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b188:	f100 0414 	add.w	r4, r0, #20
 800b18c:	dd45      	ble.n	800b21a <rshift+0xa0>
 800b18e:	f011 011f 	ands.w	r1, r1, #31
 800b192:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b196:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b19a:	d10c      	bne.n	800b1b6 <rshift+0x3c>
 800b19c:	f100 0710 	add.w	r7, r0, #16
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	42b1      	cmp	r1, r6
 800b1a4:	d334      	bcc.n	800b210 <rshift+0x96>
 800b1a6:	1a9b      	subs	r3, r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	1eea      	subs	r2, r5, #3
 800b1ac:	4296      	cmp	r6, r2
 800b1ae:	bf38      	it	cc
 800b1b0:	2300      	movcc	r3, #0
 800b1b2:	4423      	add	r3, r4
 800b1b4:	e015      	b.n	800b1e2 <rshift+0x68>
 800b1b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1ba:	f1c1 0820 	rsb	r8, r1, #32
 800b1be:	40cf      	lsrs	r7, r1
 800b1c0:	f105 0e04 	add.w	lr, r5, #4
 800b1c4:	46a1      	mov	r9, r4
 800b1c6:	4576      	cmp	r6, lr
 800b1c8:	46f4      	mov	ip, lr
 800b1ca:	d815      	bhi.n	800b1f8 <rshift+0x7e>
 800b1cc:	1a9a      	subs	r2, r3, r2
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	3a04      	subs	r2, #4
 800b1d2:	3501      	adds	r5, #1
 800b1d4:	42ae      	cmp	r6, r5
 800b1d6:	bf38      	it	cc
 800b1d8:	2200      	movcc	r2, #0
 800b1da:	18a3      	adds	r3, r4, r2
 800b1dc:	50a7      	str	r7, [r4, r2]
 800b1de:	b107      	cbz	r7, 800b1e2 <rshift+0x68>
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	1b1a      	subs	r2, r3, r4
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1ea:	bf08      	it	eq
 800b1ec:	2300      	moveq	r3, #0
 800b1ee:	6102      	str	r2, [r0, #16]
 800b1f0:	bf08      	it	eq
 800b1f2:	6143      	streq	r3, [r0, #20]
 800b1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f8:	f8dc c000 	ldr.w	ip, [ip]
 800b1fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800b200:	ea4c 0707 	orr.w	r7, ip, r7
 800b204:	f849 7b04 	str.w	r7, [r9], #4
 800b208:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b20c:	40cf      	lsrs	r7, r1
 800b20e:	e7da      	b.n	800b1c6 <rshift+0x4c>
 800b210:	f851 cb04 	ldr.w	ip, [r1], #4
 800b214:	f847 cf04 	str.w	ip, [r7, #4]!
 800b218:	e7c3      	b.n	800b1a2 <rshift+0x28>
 800b21a:	4623      	mov	r3, r4
 800b21c:	e7e1      	b.n	800b1e2 <rshift+0x68>

0800b21e <__hexdig_fun>:
 800b21e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b222:	2b09      	cmp	r3, #9
 800b224:	d802      	bhi.n	800b22c <__hexdig_fun+0xe>
 800b226:	3820      	subs	r0, #32
 800b228:	b2c0      	uxtb	r0, r0
 800b22a:	4770      	bx	lr
 800b22c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b230:	2b05      	cmp	r3, #5
 800b232:	d801      	bhi.n	800b238 <__hexdig_fun+0x1a>
 800b234:	3847      	subs	r0, #71	; 0x47
 800b236:	e7f7      	b.n	800b228 <__hexdig_fun+0xa>
 800b238:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b23c:	2b05      	cmp	r3, #5
 800b23e:	d801      	bhi.n	800b244 <__hexdig_fun+0x26>
 800b240:	3827      	subs	r0, #39	; 0x27
 800b242:	e7f1      	b.n	800b228 <__hexdig_fun+0xa>
 800b244:	2000      	movs	r0, #0
 800b246:	4770      	bx	lr

0800b248 <__gethex>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	ed2d 8b02 	vpush	{d8}
 800b250:	b089      	sub	sp, #36	; 0x24
 800b252:	ee08 0a10 	vmov	s16, r0
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	4bb4      	ldr	r3, [pc, #720]	; (800b52c <__gethex+0x2e4>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	4618      	mov	r0, r3
 800b260:	468b      	mov	fp, r1
 800b262:	4690      	mov	r8, r2
 800b264:	f7f4 ffbc 	bl	80001e0 <strlen>
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	f8db 2000 	ldr.w	r2, [fp]
 800b26e:	4403      	add	r3, r0
 800b270:	4682      	mov	sl, r0
 800b272:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b276:	9305      	str	r3, [sp, #20]
 800b278:	1c93      	adds	r3, r2, #2
 800b27a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b27e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b282:	32fe      	adds	r2, #254	; 0xfe
 800b284:	18d1      	adds	r1, r2, r3
 800b286:	461f      	mov	r7, r3
 800b288:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b28c:	9100      	str	r1, [sp, #0]
 800b28e:	2830      	cmp	r0, #48	; 0x30
 800b290:	d0f8      	beq.n	800b284 <__gethex+0x3c>
 800b292:	f7ff ffc4 	bl	800b21e <__hexdig_fun>
 800b296:	4604      	mov	r4, r0
 800b298:	2800      	cmp	r0, #0
 800b29a:	d13a      	bne.n	800b312 <__gethex+0xca>
 800b29c:	9901      	ldr	r1, [sp, #4]
 800b29e:	4652      	mov	r2, sl
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	f001 fc38 	bl	800cb16 <strncmp>
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d168      	bne.n	800b37e <__gethex+0x136>
 800b2ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2b0:	eb07 060a 	add.w	r6, r7, sl
 800b2b4:	f7ff ffb3 	bl	800b21e <__hexdig_fun>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d062      	beq.n	800b382 <__gethex+0x13a>
 800b2bc:	4633      	mov	r3, r6
 800b2be:	7818      	ldrb	r0, [r3, #0]
 800b2c0:	2830      	cmp	r0, #48	; 0x30
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	f103 0301 	add.w	r3, r3, #1
 800b2c8:	d0f9      	beq.n	800b2be <__gethex+0x76>
 800b2ca:	f7ff ffa8 	bl	800b21e <__hexdig_fun>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	fab0 f480 	clz	r4, r0
 800b2d4:	0964      	lsrs	r4, r4, #5
 800b2d6:	4635      	mov	r5, r6
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	463a      	mov	r2, r7
 800b2dc:	4616      	mov	r6, r2
 800b2de:	3201      	adds	r2, #1
 800b2e0:	7830      	ldrb	r0, [r6, #0]
 800b2e2:	f7ff ff9c 	bl	800b21e <__hexdig_fun>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d1f8      	bne.n	800b2dc <__gethex+0x94>
 800b2ea:	9901      	ldr	r1, [sp, #4]
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f001 fc11 	bl	800cb16 <strncmp>
 800b2f4:	b980      	cbnz	r0, 800b318 <__gethex+0xd0>
 800b2f6:	b94d      	cbnz	r5, 800b30c <__gethex+0xc4>
 800b2f8:	eb06 050a 	add.w	r5, r6, sl
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	4616      	mov	r6, r2
 800b300:	3201      	adds	r2, #1
 800b302:	7830      	ldrb	r0, [r6, #0]
 800b304:	f7ff ff8b 	bl	800b21e <__hexdig_fun>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d1f8      	bne.n	800b2fe <__gethex+0xb6>
 800b30c:	1bad      	subs	r5, r5, r6
 800b30e:	00ad      	lsls	r5, r5, #2
 800b310:	e004      	b.n	800b31c <__gethex+0xd4>
 800b312:	2400      	movs	r4, #0
 800b314:	4625      	mov	r5, r4
 800b316:	e7e0      	b.n	800b2da <__gethex+0x92>
 800b318:	2d00      	cmp	r5, #0
 800b31a:	d1f7      	bne.n	800b30c <__gethex+0xc4>
 800b31c:	7833      	ldrb	r3, [r6, #0]
 800b31e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b322:	2b50      	cmp	r3, #80	; 0x50
 800b324:	d13b      	bne.n	800b39e <__gethex+0x156>
 800b326:	7873      	ldrb	r3, [r6, #1]
 800b328:	2b2b      	cmp	r3, #43	; 0x2b
 800b32a:	d02c      	beq.n	800b386 <__gethex+0x13e>
 800b32c:	2b2d      	cmp	r3, #45	; 0x2d
 800b32e:	d02e      	beq.n	800b38e <__gethex+0x146>
 800b330:	1c71      	adds	r1, r6, #1
 800b332:	f04f 0900 	mov.w	r9, #0
 800b336:	7808      	ldrb	r0, [r1, #0]
 800b338:	f7ff ff71 	bl	800b21e <__hexdig_fun>
 800b33c:	1e43      	subs	r3, r0, #1
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b18      	cmp	r3, #24
 800b342:	d82c      	bhi.n	800b39e <__gethex+0x156>
 800b344:	f1a0 0210 	sub.w	r2, r0, #16
 800b348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b34c:	f7ff ff67 	bl	800b21e <__hexdig_fun>
 800b350:	1e43      	subs	r3, r0, #1
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b18      	cmp	r3, #24
 800b356:	d91d      	bls.n	800b394 <__gethex+0x14c>
 800b358:	f1b9 0f00 	cmp.w	r9, #0
 800b35c:	d000      	beq.n	800b360 <__gethex+0x118>
 800b35e:	4252      	negs	r2, r2
 800b360:	4415      	add	r5, r2
 800b362:	f8cb 1000 	str.w	r1, [fp]
 800b366:	b1e4      	cbz	r4, 800b3a2 <__gethex+0x15a>
 800b368:	9b00      	ldr	r3, [sp, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bf14      	ite	ne
 800b36e:	2700      	movne	r7, #0
 800b370:	2706      	moveq	r7, #6
 800b372:	4638      	mov	r0, r7
 800b374:	b009      	add	sp, #36	; 0x24
 800b376:	ecbd 8b02 	vpop	{d8}
 800b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37e:	463e      	mov	r6, r7
 800b380:	4625      	mov	r5, r4
 800b382:	2401      	movs	r4, #1
 800b384:	e7ca      	b.n	800b31c <__gethex+0xd4>
 800b386:	f04f 0900 	mov.w	r9, #0
 800b38a:	1cb1      	adds	r1, r6, #2
 800b38c:	e7d3      	b.n	800b336 <__gethex+0xee>
 800b38e:	f04f 0901 	mov.w	r9, #1
 800b392:	e7fa      	b.n	800b38a <__gethex+0x142>
 800b394:	230a      	movs	r3, #10
 800b396:	fb03 0202 	mla	r2, r3, r2, r0
 800b39a:	3a10      	subs	r2, #16
 800b39c:	e7d4      	b.n	800b348 <__gethex+0x100>
 800b39e:	4631      	mov	r1, r6
 800b3a0:	e7df      	b.n	800b362 <__gethex+0x11a>
 800b3a2:	1bf3      	subs	r3, r6, r7
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	2b07      	cmp	r3, #7
 800b3aa:	dc0b      	bgt.n	800b3c4 <__gethex+0x17c>
 800b3ac:	ee18 0a10 	vmov	r0, s16
 800b3b0:	f000 fae6 	bl	800b980 <_Balloc>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	b940      	cbnz	r0, 800b3ca <__gethex+0x182>
 800b3b8:	4b5d      	ldr	r3, [pc, #372]	; (800b530 <__gethex+0x2e8>)
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	21de      	movs	r1, #222	; 0xde
 800b3be:	485d      	ldr	r0, [pc, #372]	; (800b534 <__gethex+0x2ec>)
 800b3c0:	f001 fbdc 	bl	800cb7c <__assert_func>
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	105b      	asrs	r3, r3, #1
 800b3c8:	e7ee      	b.n	800b3a8 <__gethex+0x160>
 800b3ca:	f100 0914 	add.w	r9, r0, #20
 800b3ce:	f04f 0b00 	mov.w	fp, #0
 800b3d2:	f1ca 0301 	rsb	r3, sl, #1
 800b3d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3da:	f8cd b000 	str.w	fp, [sp]
 800b3de:	9306      	str	r3, [sp, #24]
 800b3e0:	42b7      	cmp	r7, r6
 800b3e2:	d340      	bcc.n	800b466 <__gethex+0x21e>
 800b3e4:	9802      	ldr	r0, [sp, #8]
 800b3e6:	9b00      	ldr	r3, [sp, #0]
 800b3e8:	f840 3b04 	str.w	r3, [r0], #4
 800b3ec:	eba0 0009 	sub.w	r0, r0, r9
 800b3f0:	1080      	asrs	r0, r0, #2
 800b3f2:	0146      	lsls	r6, r0, #5
 800b3f4:	6120      	str	r0, [r4, #16]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fbb4 	bl	800bb64 <__hi0bits>
 800b3fc:	1a30      	subs	r0, r6, r0
 800b3fe:	f8d8 6000 	ldr.w	r6, [r8]
 800b402:	42b0      	cmp	r0, r6
 800b404:	dd63      	ble.n	800b4ce <__gethex+0x286>
 800b406:	1b87      	subs	r7, r0, r6
 800b408:	4639      	mov	r1, r7
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 ff58 	bl	800c2c0 <__any_on>
 800b410:	4682      	mov	sl, r0
 800b412:	b1a8      	cbz	r0, 800b440 <__gethex+0x1f8>
 800b414:	1e7b      	subs	r3, r7, #1
 800b416:	1159      	asrs	r1, r3, #5
 800b418:	f003 021f 	and.w	r2, r3, #31
 800b41c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b420:	f04f 0a01 	mov.w	sl, #1
 800b424:	fa0a f202 	lsl.w	r2, sl, r2
 800b428:	420a      	tst	r2, r1
 800b42a:	d009      	beq.n	800b440 <__gethex+0x1f8>
 800b42c:	4553      	cmp	r3, sl
 800b42e:	dd05      	ble.n	800b43c <__gethex+0x1f4>
 800b430:	1eb9      	subs	r1, r7, #2
 800b432:	4620      	mov	r0, r4
 800b434:	f000 ff44 	bl	800c2c0 <__any_on>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d145      	bne.n	800b4c8 <__gethex+0x280>
 800b43c:	f04f 0a02 	mov.w	sl, #2
 800b440:	4639      	mov	r1, r7
 800b442:	4620      	mov	r0, r4
 800b444:	f7ff fe99 	bl	800b17a <rshift>
 800b448:	443d      	add	r5, r7
 800b44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b44e:	42ab      	cmp	r3, r5
 800b450:	da4c      	bge.n	800b4ec <__gethex+0x2a4>
 800b452:	ee18 0a10 	vmov	r0, s16
 800b456:	4621      	mov	r1, r4
 800b458:	f000 fad2 	bl	800ba00 <_Bfree>
 800b45c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b45e:	2300      	movs	r3, #0
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	27a3      	movs	r7, #163	; 0xa3
 800b464:	e785      	b.n	800b372 <__gethex+0x12a>
 800b466:	1e73      	subs	r3, r6, #1
 800b468:	9a05      	ldr	r2, [sp, #20]
 800b46a:	9303      	str	r3, [sp, #12]
 800b46c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b470:	4293      	cmp	r3, r2
 800b472:	d019      	beq.n	800b4a8 <__gethex+0x260>
 800b474:	f1bb 0f20 	cmp.w	fp, #32
 800b478:	d107      	bne.n	800b48a <__gethex+0x242>
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	9a00      	ldr	r2, [sp, #0]
 800b47e:	f843 2b04 	str.w	r2, [r3], #4
 800b482:	9302      	str	r3, [sp, #8]
 800b484:	2300      	movs	r3, #0
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	469b      	mov	fp, r3
 800b48a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b48e:	f7ff fec6 	bl	800b21e <__hexdig_fun>
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	f000 000f 	and.w	r0, r0, #15
 800b498:	fa00 f00b 	lsl.w	r0, r0, fp
 800b49c:	4303      	orrs	r3, r0
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	f10b 0b04 	add.w	fp, fp, #4
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	e00d      	b.n	800b4c4 <__gethex+0x27c>
 800b4a8:	9b03      	ldr	r3, [sp, #12]
 800b4aa:	9a06      	ldr	r2, [sp, #24]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	42bb      	cmp	r3, r7
 800b4b0:	d3e0      	bcc.n	800b474 <__gethex+0x22c>
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	9901      	ldr	r1, [sp, #4]
 800b4b6:	9307      	str	r3, [sp, #28]
 800b4b8:	4652      	mov	r2, sl
 800b4ba:	f001 fb2c 	bl	800cb16 <strncmp>
 800b4be:	9b07      	ldr	r3, [sp, #28]
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1d7      	bne.n	800b474 <__gethex+0x22c>
 800b4c4:	461e      	mov	r6, r3
 800b4c6:	e78b      	b.n	800b3e0 <__gethex+0x198>
 800b4c8:	f04f 0a03 	mov.w	sl, #3
 800b4cc:	e7b8      	b.n	800b440 <__gethex+0x1f8>
 800b4ce:	da0a      	bge.n	800b4e6 <__gethex+0x29e>
 800b4d0:	1a37      	subs	r7, r6, r0
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	ee18 0a10 	vmov	r0, s16
 800b4d8:	463a      	mov	r2, r7
 800b4da:	f000 fcad 	bl	800be38 <__lshift>
 800b4de:	1bed      	subs	r5, r5, r7
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	f100 0914 	add.w	r9, r0, #20
 800b4e6:	f04f 0a00 	mov.w	sl, #0
 800b4ea:	e7ae      	b.n	800b44a <__gethex+0x202>
 800b4ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4f0:	42a8      	cmp	r0, r5
 800b4f2:	dd72      	ble.n	800b5da <__gethex+0x392>
 800b4f4:	1b45      	subs	r5, r0, r5
 800b4f6:	42ae      	cmp	r6, r5
 800b4f8:	dc36      	bgt.n	800b568 <__gethex+0x320>
 800b4fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d02a      	beq.n	800b558 <__gethex+0x310>
 800b502:	2b03      	cmp	r3, #3
 800b504:	d02c      	beq.n	800b560 <__gethex+0x318>
 800b506:	2b01      	cmp	r3, #1
 800b508:	d11c      	bne.n	800b544 <__gethex+0x2fc>
 800b50a:	42ae      	cmp	r6, r5
 800b50c:	d11a      	bne.n	800b544 <__gethex+0x2fc>
 800b50e:	2e01      	cmp	r6, #1
 800b510:	d112      	bne.n	800b538 <__gethex+0x2f0>
 800b512:	9a04      	ldr	r2, [sp, #16]
 800b514:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	2301      	movs	r3, #1
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	f8c9 3000 	str.w	r3, [r9]
 800b522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b524:	2762      	movs	r7, #98	; 0x62
 800b526:	601c      	str	r4, [r3, #0]
 800b528:	e723      	b.n	800b372 <__gethex+0x12a>
 800b52a:	bf00      	nop
 800b52c:	0800d314 	.word	0x0800d314
 800b530:	0800d238 	.word	0x0800d238
 800b534:	0800d2ac 	.word	0x0800d2ac
 800b538:	1e71      	subs	r1, r6, #1
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 fec0 	bl	800c2c0 <__any_on>
 800b540:	2800      	cmp	r0, #0
 800b542:	d1e6      	bne.n	800b512 <__gethex+0x2ca>
 800b544:	ee18 0a10 	vmov	r0, s16
 800b548:	4621      	mov	r1, r4
 800b54a:	f000 fa59 	bl	800ba00 <_Bfree>
 800b54e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b550:	2300      	movs	r3, #0
 800b552:	6013      	str	r3, [r2, #0]
 800b554:	2750      	movs	r7, #80	; 0x50
 800b556:	e70c      	b.n	800b372 <__gethex+0x12a>
 800b558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1f2      	bne.n	800b544 <__gethex+0x2fc>
 800b55e:	e7d8      	b.n	800b512 <__gethex+0x2ca>
 800b560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1d5      	bne.n	800b512 <__gethex+0x2ca>
 800b566:	e7ed      	b.n	800b544 <__gethex+0x2fc>
 800b568:	1e6f      	subs	r7, r5, #1
 800b56a:	f1ba 0f00 	cmp.w	sl, #0
 800b56e:	d131      	bne.n	800b5d4 <__gethex+0x38c>
 800b570:	b127      	cbz	r7, 800b57c <__gethex+0x334>
 800b572:	4639      	mov	r1, r7
 800b574:	4620      	mov	r0, r4
 800b576:	f000 fea3 	bl	800c2c0 <__any_on>
 800b57a:	4682      	mov	sl, r0
 800b57c:	117b      	asrs	r3, r7, #5
 800b57e:	2101      	movs	r1, #1
 800b580:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b584:	f007 071f 	and.w	r7, r7, #31
 800b588:	fa01 f707 	lsl.w	r7, r1, r7
 800b58c:	421f      	tst	r7, r3
 800b58e:	4629      	mov	r1, r5
 800b590:	4620      	mov	r0, r4
 800b592:	bf18      	it	ne
 800b594:	f04a 0a02 	orrne.w	sl, sl, #2
 800b598:	1b76      	subs	r6, r6, r5
 800b59a:	f7ff fdee 	bl	800b17a <rshift>
 800b59e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5a2:	2702      	movs	r7, #2
 800b5a4:	f1ba 0f00 	cmp.w	sl, #0
 800b5a8:	d048      	beq.n	800b63c <__gethex+0x3f4>
 800b5aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d015      	beq.n	800b5de <__gethex+0x396>
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d017      	beq.n	800b5e6 <__gethex+0x39e>
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d109      	bne.n	800b5ce <__gethex+0x386>
 800b5ba:	f01a 0f02 	tst.w	sl, #2
 800b5be:	d006      	beq.n	800b5ce <__gethex+0x386>
 800b5c0:	f8d9 0000 	ldr.w	r0, [r9]
 800b5c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5c8:	f01a 0f01 	tst.w	sl, #1
 800b5cc:	d10e      	bne.n	800b5ec <__gethex+0x3a4>
 800b5ce:	f047 0710 	orr.w	r7, r7, #16
 800b5d2:	e033      	b.n	800b63c <__gethex+0x3f4>
 800b5d4:	f04f 0a01 	mov.w	sl, #1
 800b5d8:	e7d0      	b.n	800b57c <__gethex+0x334>
 800b5da:	2701      	movs	r7, #1
 800b5dc:	e7e2      	b.n	800b5a4 <__gethex+0x35c>
 800b5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5e0:	f1c3 0301 	rsb	r3, r3, #1
 800b5e4:	9315      	str	r3, [sp, #84]	; 0x54
 800b5e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0f0      	beq.n	800b5ce <__gethex+0x386>
 800b5ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5f0:	f104 0314 	add.w	r3, r4, #20
 800b5f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5fc:	f04f 0c00 	mov.w	ip, #0
 800b600:	4618      	mov	r0, r3
 800b602:	f853 2b04 	ldr.w	r2, [r3], #4
 800b606:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b60a:	d01c      	beq.n	800b646 <__gethex+0x3fe>
 800b60c:	3201      	adds	r2, #1
 800b60e:	6002      	str	r2, [r0, #0]
 800b610:	2f02      	cmp	r7, #2
 800b612:	f104 0314 	add.w	r3, r4, #20
 800b616:	d13f      	bne.n	800b698 <__gethex+0x450>
 800b618:	f8d8 2000 	ldr.w	r2, [r8]
 800b61c:	3a01      	subs	r2, #1
 800b61e:	42b2      	cmp	r2, r6
 800b620:	d10a      	bne.n	800b638 <__gethex+0x3f0>
 800b622:	1171      	asrs	r1, r6, #5
 800b624:	2201      	movs	r2, #1
 800b626:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b62a:	f006 061f 	and.w	r6, r6, #31
 800b62e:	fa02 f606 	lsl.w	r6, r2, r6
 800b632:	421e      	tst	r6, r3
 800b634:	bf18      	it	ne
 800b636:	4617      	movne	r7, r2
 800b638:	f047 0720 	orr.w	r7, r7, #32
 800b63c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b63e:	601c      	str	r4, [r3, #0]
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	601d      	str	r5, [r3, #0]
 800b644:	e695      	b.n	800b372 <__gethex+0x12a>
 800b646:	4299      	cmp	r1, r3
 800b648:	f843 cc04 	str.w	ip, [r3, #-4]
 800b64c:	d8d8      	bhi.n	800b600 <__gethex+0x3b8>
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	459b      	cmp	fp, r3
 800b652:	db19      	blt.n	800b688 <__gethex+0x440>
 800b654:	6861      	ldr	r1, [r4, #4]
 800b656:	ee18 0a10 	vmov	r0, s16
 800b65a:	3101      	adds	r1, #1
 800b65c:	f000 f990 	bl	800b980 <_Balloc>
 800b660:	4681      	mov	r9, r0
 800b662:	b918      	cbnz	r0, 800b66c <__gethex+0x424>
 800b664:	4b1a      	ldr	r3, [pc, #104]	; (800b6d0 <__gethex+0x488>)
 800b666:	4602      	mov	r2, r0
 800b668:	2184      	movs	r1, #132	; 0x84
 800b66a:	e6a8      	b.n	800b3be <__gethex+0x176>
 800b66c:	6922      	ldr	r2, [r4, #16]
 800b66e:	3202      	adds	r2, #2
 800b670:	f104 010c 	add.w	r1, r4, #12
 800b674:	0092      	lsls	r2, r2, #2
 800b676:	300c      	adds	r0, #12
 800b678:	f000 f974 	bl	800b964 <memcpy>
 800b67c:	4621      	mov	r1, r4
 800b67e:	ee18 0a10 	vmov	r0, s16
 800b682:	f000 f9bd 	bl	800ba00 <_Bfree>
 800b686:	464c      	mov	r4, r9
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b690:	6122      	str	r2, [r4, #16]
 800b692:	2201      	movs	r2, #1
 800b694:	615a      	str	r2, [r3, #20]
 800b696:	e7bb      	b.n	800b610 <__gethex+0x3c8>
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	455a      	cmp	r2, fp
 800b69c:	dd0b      	ble.n	800b6b6 <__gethex+0x46e>
 800b69e:	2101      	movs	r1, #1
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff fd6a 	bl	800b17a <rshift>
 800b6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6aa:	3501      	adds	r5, #1
 800b6ac:	42ab      	cmp	r3, r5
 800b6ae:	f6ff aed0 	blt.w	800b452 <__gethex+0x20a>
 800b6b2:	2701      	movs	r7, #1
 800b6b4:	e7c0      	b.n	800b638 <__gethex+0x3f0>
 800b6b6:	f016 061f 	ands.w	r6, r6, #31
 800b6ba:	d0fa      	beq.n	800b6b2 <__gethex+0x46a>
 800b6bc:	4453      	add	r3, sl
 800b6be:	f1c6 0620 	rsb	r6, r6, #32
 800b6c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6c6:	f000 fa4d 	bl	800bb64 <__hi0bits>
 800b6ca:	42b0      	cmp	r0, r6
 800b6cc:	dbe7      	blt.n	800b69e <__gethex+0x456>
 800b6ce:	e7f0      	b.n	800b6b2 <__gethex+0x46a>
 800b6d0:	0800d238 	.word	0x0800d238

0800b6d4 <L_shift>:
 800b6d4:	f1c2 0208 	rsb	r2, r2, #8
 800b6d8:	0092      	lsls	r2, r2, #2
 800b6da:	b570      	push	{r4, r5, r6, lr}
 800b6dc:	f1c2 0620 	rsb	r6, r2, #32
 800b6e0:	6843      	ldr	r3, [r0, #4]
 800b6e2:	6804      	ldr	r4, [r0, #0]
 800b6e4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6e8:	432c      	orrs	r4, r5
 800b6ea:	40d3      	lsrs	r3, r2
 800b6ec:	6004      	str	r4, [r0, #0]
 800b6ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6f2:	4288      	cmp	r0, r1
 800b6f4:	d3f4      	bcc.n	800b6e0 <L_shift+0xc>
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}

0800b6f8 <__match>:
 800b6f8:	b530      	push	{r4, r5, lr}
 800b6fa:	6803      	ldr	r3, [r0, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b702:	b914      	cbnz	r4, 800b70a <__match+0x12>
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	2001      	movs	r0, #1
 800b708:	bd30      	pop	{r4, r5, pc}
 800b70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b70e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b712:	2d19      	cmp	r5, #25
 800b714:	bf98      	it	ls
 800b716:	3220      	addls	r2, #32
 800b718:	42a2      	cmp	r2, r4
 800b71a:	d0f0      	beq.n	800b6fe <__match+0x6>
 800b71c:	2000      	movs	r0, #0
 800b71e:	e7f3      	b.n	800b708 <__match+0x10>

0800b720 <__hexnan>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	680b      	ldr	r3, [r1, #0]
 800b726:	115e      	asrs	r6, r3, #5
 800b728:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b72c:	f013 031f 	ands.w	r3, r3, #31
 800b730:	b087      	sub	sp, #28
 800b732:	bf18      	it	ne
 800b734:	3604      	addne	r6, #4
 800b736:	2500      	movs	r5, #0
 800b738:	1f37      	subs	r7, r6, #4
 800b73a:	4690      	mov	r8, r2
 800b73c:	6802      	ldr	r2, [r0, #0]
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	4682      	mov	sl, r0
 800b742:	f846 5c04 	str.w	r5, [r6, #-4]
 800b746:	46b9      	mov	r9, r7
 800b748:	463c      	mov	r4, r7
 800b74a:	9502      	str	r5, [sp, #8]
 800b74c:	46ab      	mov	fp, r5
 800b74e:	7851      	ldrb	r1, [r2, #1]
 800b750:	1c53      	adds	r3, r2, #1
 800b752:	9303      	str	r3, [sp, #12]
 800b754:	b341      	cbz	r1, 800b7a8 <__hexnan+0x88>
 800b756:	4608      	mov	r0, r1
 800b758:	9205      	str	r2, [sp, #20]
 800b75a:	9104      	str	r1, [sp, #16]
 800b75c:	f7ff fd5f 	bl	800b21e <__hexdig_fun>
 800b760:	2800      	cmp	r0, #0
 800b762:	d14f      	bne.n	800b804 <__hexnan+0xe4>
 800b764:	9904      	ldr	r1, [sp, #16]
 800b766:	9a05      	ldr	r2, [sp, #20]
 800b768:	2920      	cmp	r1, #32
 800b76a:	d818      	bhi.n	800b79e <__hexnan+0x7e>
 800b76c:	9b02      	ldr	r3, [sp, #8]
 800b76e:	459b      	cmp	fp, r3
 800b770:	dd13      	ble.n	800b79a <__hexnan+0x7a>
 800b772:	454c      	cmp	r4, r9
 800b774:	d206      	bcs.n	800b784 <__hexnan+0x64>
 800b776:	2d07      	cmp	r5, #7
 800b778:	dc04      	bgt.n	800b784 <__hexnan+0x64>
 800b77a:	462a      	mov	r2, r5
 800b77c:	4649      	mov	r1, r9
 800b77e:	4620      	mov	r0, r4
 800b780:	f7ff ffa8 	bl	800b6d4 <L_shift>
 800b784:	4544      	cmp	r4, r8
 800b786:	d950      	bls.n	800b82a <__hexnan+0x10a>
 800b788:	2300      	movs	r3, #0
 800b78a:	f1a4 0904 	sub.w	r9, r4, #4
 800b78e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b792:	f8cd b008 	str.w	fp, [sp, #8]
 800b796:	464c      	mov	r4, r9
 800b798:	461d      	mov	r5, r3
 800b79a:	9a03      	ldr	r2, [sp, #12]
 800b79c:	e7d7      	b.n	800b74e <__hexnan+0x2e>
 800b79e:	2929      	cmp	r1, #41	; 0x29
 800b7a0:	d156      	bne.n	800b850 <__hexnan+0x130>
 800b7a2:	3202      	adds	r2, #2
 800b7a4:	f8ca 2000 	str.w	r2, [sl]
 800b7a8:	f1bb 0f00 	cmp.w	fp, #0
 800b7ac:	d050      	beq.n	800b850 <__hexnan+0x130>
 800b7ae:	454c      	cmp	r4, r9
 800b7b0:	d206      	bcs.n	800b7c0 <__hexnan+0xa0>
 800b7b2:	2d07      	cmp	r5, #7
 800b7b4:	dc04      	bgt.n	800b7c0 <__hexnan+0xa0>
 800b7b6:	462a      	mov	r2, r5
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f7ff ff8a 	bl	800b6d4 <L_shift>
 800b7c0:	4544      	cmp	r4, r8
 800b7c2:	d934      	bls.n	800b82e <__hexnan+0x10e>
 800b7c4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7c8:	4623      	mov	r3, r4
 800b7ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7d2:	429f      	cmp	r7, r3
 800b7d4:	d2f9      	bcs.n	800b7ca <__hexnan+0xaa>
 800b7d6:	1b3b      	subs	r3, r7, r4
 800b7d8:	f023 0303 	bic.w	r3, r3, #3
 800b7dc:	3304      	adds	r3, #4
 800b7de:	3401      	adds	r4, #1
 800b7e0:	3e03      	subs	r6, #3
 800b7e2:	42b4      	cmp	r4, r6
 800b7e4:	bf88      	it	hi
 800b7e6:	2304      	movhi	r3, #4
 800b7e8:	4443      	add	r3, r8
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f843 2b04 	str.w	r2, [r3], #4
 800b7f0:	429f      	cmp	r7, r3
 800b7f2:	d2fb      	bcs.n	800b7ec <__hexnan+0xcc>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	b91b      	cbnz	r3, 800b800 <__hexnan+0xe0>
 800b7f8:	4547      	cmp	r7, r8
 800b7fa:	d127      	bne.n	800b84c <__hexnan+0x12c>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	2005      	movs	r0, #5
 800b802:	e026      	b.n	800b852 <__hexnan+0x132>
 800b804:	3501      	adds	r5, #1
 800b806:	2d08      	cmp	r5, #8
 800b808:	f10b 0b01 	add.w	fp, fp, #1
 800b80c:	dd06      	ble.n	800b81c <__hexnan+0xfc>
 800b80e:	4544      	cmp	r4, r8
 800b810:	d9c3      	bls.n	800b79a <__hexnan+0x7a>
 800b812:	2300      	movs	r3, #0
 800b814:	f844 3c04 	str.w	r3, [r4, #-4]
 800b818:	2501      	movs	r5, #1
 800b81a:	3c04      	subs	r4, #4
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	f000 000f 	and.w	r0, r0, #15
 800b822:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b826:	6022      	str	r2, [r4, #0]
 800b828:	e7b7      	b.n	800b79a <__hexnan+0x7a>
 800b82a:	2508      	movs	r5, #8
 800b82c:	e7b5      	b.n	800b79a <__hexnan+0x7a>
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0df      	beq.n	800b7f4 <__hexnan+0xd4>
 800b834:	f04f 32ff 	mov.w	r2, #4294967295
 800b838:	f1c3 0320 	rsb	r3, r3, #32
 800b83c:	fa22 f303 	lsr.w	r3, r2, r3
 800b840:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b844:	401a      	ands	r2, r3
 800b846:	f846 2c04 	str.w	r2, [r6, #-4]
 800b84a:	e7d3      	b.n	800b7f4 <__hexnan+0xd4>
 800b84c:	3f04      	subs	r7, #4
 800b84e:	e7d1      	b.n	800b7f4 <__hexnan+0xd4>
 800b850:	2004      	movs	r0, #4
 800b852:	b007      	add	sp, #28
 800b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b858 <_localeconv_r>:
 800b858:	4800      	ldr	r0, [pc, #0]	; (800b85c <_localeconv_r+0x4>)
 800b85a:	4770      	bx	lr
 800b85c:	20000168 	.word	0x20000168

0800b860 <__retarget_lock_init_recursive>:
 800b860:	4770      	bx	lr

0800b862 <__retarget_lock_acquire_recursive>:
 800b862:	4770      	bx	lr

0800b864 <__retarget_lock_release_recursive>:
 800b864:	4770      	bx	lr

0800b866 <__swhatbuf_r>:
 800b866:	b570      	push	{r4, r5, r6, lr}
 800b868:	460e      	mov	r6, r1
 800b86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86e:	2900      	cmp	r1, #0
 800b870:	b096      	sub	sp, #88	; 0x58
 800b872:	4614      	mov	r4, r2
 800b874:	461d      	mov	r5, r3
 800b876:	da08      	bge.n	800b88a <__swhatbuf_r+0x24>
 800b878:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	602a      	str	r2, [r5, #0]
 800b880:	061a      	lsls	r2, r3, #24
 800b882:	d410      	bmi.n	800b8a6 <__swhatbuf_r+0x40>
 800b884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b888:	e00e      	b.n	800b8a8 <__swhatbuf_r+0x42>
 800b88a:	466a      	mov	r2, sp
 800b88c:	f001 f9b6 	bl	800cbfc <_fstat_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	dbf1      	blt.n	800b878 <__swhatbuf_r+0x12>
 800b894:	9a01      	ldr	r2, [sp, #4]
 800b896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b89a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b89e:	425a      	negs	r2, r3
 800b8a0:	415a      	adcs	r2, r3
 800b8a2:	602a      	str	r2, [r5, #0]
 800b8a4:	e7ee      	b.n	800b884 <__swhatbuf_r+0x1e>
 800b8a6:	2340      	movs	r3, #64	; 0x40
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	6023      	str	r3, [r4, #0]
 800b8ac:	b016      	add	sp, #88	; 0x58
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}

0800b8b0 <__smakebuf_r>:
 800b8b0:	898b      	ldrh	r3, [r1, #12]
 800b8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8b4:	079d      	lsls	r5, r3, #30
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	d507      	bpl.n	800b8cc <__smakebuf_r+0x1c>
 800b8bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	6123      	str	r3, [r4, #16]
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	6163      	str	r3, [r4, #20]
 800b8c8:	b002      	add	sp, #8
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	ab01      	add	r3, sp, #4
 800b8ce:	466a      	mov	r2, sp
 800b8d0:	f7ff ffc9 	bl	800b866 <__swhatbuf_r>
 800b8d4:	9900      	ldr	r1, [sp, #0]
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 fd95 	bl	800c408 <_malloc_r>
 800b8de:	b948      	cbnz	r0, 800b8f4 <__smakebuf_r+0x44>
 800b8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e4:	059a      	lsls	r2, r3, #22
 800b8e6:	d4ef      	bmi.n	800b8c8 <__smakebuf_r+0x18>
 800b8e8:	f023 0303 	bic.w	r3, r3, #3
 800b8ec:	f043 0302 	orr.w	r3, r3, #2
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	e7e3      	b.n	800b8bc <__smakebuf_r+0xc>
 800b8f4:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <__smakebuf_r+0x7c>)
 800b8f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	6020      	str	r0, [r4, #0]
 800b8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	9b00      	ldr	r3, [sp, #0]
 800b904:	6163      	str	r3, [r4, #20]
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	6120      	str	r0, [r4, #16]
 800b90a:	b15b      	cbz	r3, 800b924 <__smakebuf_r+0x74>
 800b90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b910:	4630      	mov	r0, r6
 800b912:	f001 f985 	bl	800cc20 <_isatty_r>
 800b916:	b128      	cbz	r0, 800b924 <__smakebuf_r+0x74>
 800b918:	89a3      	ldrh	r3, [r4, #12]
 800b91a:	f023 0303 	bic.w	r3, r3, #3
 800b91e:	f043 0301 	orr.w	r3, r3, #1
 800b922:	81a3      	strh	r3, [r4, #12]
 800b924:	89a0      	ldrh	r0, [r4, #12]
 800b926:	4305      	orrs	r5, r0
 800b928:	81a5      	strh	r5, [r4, #12]
 800b92a:	e7cd      	b.n	800b8c8 <__smakebuf_r+0x18>
 800b92c:	0800afd9 	.word	0x0800afd9

0800b930 <malloc>:
 800b930:	4b02      	ldr	r3, [pc, #8]	; (800b93c <malloc+0xc>)
 800b932:	4601      	mov	r1, r0
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	f000 bd67 	b.w	800c408 <_malloc_r>
 800b93a:	bf00      	nop
 800b93c:	20000010 	.word	0x20000010

0800b940 <__ascii_mbtowc>:
 800b940:	b082      	sub	sp, #8
 800b942:	b901      	cbnz	r1, 800b946 <__ascii_mbtowc+0x6>
 800b944:	a901      	add	r1, sp, #4
 800b946:	b142      	cbz	r2, 800b95a <__ascii_mbtowc+0x1a>
 800b948:	b14b      	cbz	r3, 800b95e <__ascii_mbtowc+0x1e>
 800b94a:	7813      	ldrb	r3, [r2, #0]
 800b94c:	600b      	str	r3, [r1, #0]
 800b94e:	7812      	ldrb	r2, [r2, #0]
 800b950:	1e10      	subs	r0, r2, #0
 800b952:	bf18      	it	ne
 800b954:	2001      	movne	r0, #1
 800b956:	b002      	add	sp, #8
 800b958:	4770      	bx	lr
 800b95a:	4610      	mov	r0, r2
 800b95c:	e7fb      	b.n	800b956 <__ascii_mbtowc+0x16>
 800b95e:	f06f 0001 	mvn.w	r0, #1
 800b962:	e7f8      	b.n	800b956 <__ascii_mbtowc+0x16>

0800b964 <memcpy>:
 800b964:	440a      	add	r2, r1
 800b966:	4291      	cmp	r1, r2
 800b968:	f100 33ff 	add.w	r3, r0, #4294967295
 800b96c:	d100      	bne.n	800b970 <memcpy+0xc>
 800b96e:	4770      	bx	lr
 800b970:	b510      	push	{r4, lr}
 800b972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b97a:	4291      	cmp	r1, r2
 800b97c:	d1f9      	bne.n	800b972 <memcpy+0xe>
 800b97e:	bd10      	pop	{r4, pc}

0800b980 <_Balloc>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b984:	4604      	mov	r4, r0
 800b986:	460d      	mov	r5, r1
 800b988:	b976      	cbnz	r6, 800b9a8 <_Balloc+0x28>
 800b98a:	2010      	movs	r0, #16
 800b98c:	f7ff ffd0 	bl	800b930 <malloc>
 800b990:	4602      	mov	r2, r0
 800b992:	6260      	str	r0, [r4, #36]	; 0x24
 800b994:	b920      	cbnz	r0, 800b9a0 <_Balloc+0x20>
 800b996:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <_Balloc+0x78>)
 800b998:	4818      	ldr	r0, [pc, #96]	; (800b9fc <_Balloc+0x7c>)
 800b99a:	2166      	movs	r1, #102	; 0x66
 800b99c:	f001 f8ee 	bl	800cb7c <__assert_func>
 800b9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9a4:	6006      	str	r6, [r0, #0]
 800b9a6:	60c6      	str	r6, [r0, #12]
 800b9a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b9aa:	68f3      	ldr	r3, [r6, #12]
 800b9ac:	b183      	cbz	r3, 800b9d0 <_Balloc+0x50>
 800b9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9b6:	b9b8      	cbnz	r0, 800b9e8 <_Balloc+0x68>
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	fa01 f605 	lsl.w	r6, r1, r5
 800b9be:	1d72      	adds	r2, r6, #5
 800b9c0:	0092      	lsls	r2, r2, #2
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fc9d 	bl	800c302 <_calloc_r>
 800b9c8:	b160      	cbz	r0, 800b9e4 <_Balloc+0x64>
 800b9ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9ce:	e00e      	b.n	800b9ee <_Balloc+0x6e>
 800b9d0:	2221      	movs	r2, #33	; 0x21
 800b9d2:	2104      	movs	r1, #4
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 fc94 	bl	800c302 <_calloc_r>
 800b9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9dc:	60f0      	str	r0, [r6, #12]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1e4      	bne.n	800b9ae <_Balloc+0x2e>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	6802      	ldr	r2, [r0, #0]
 800b9ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9f4:	e7f7      	b.n	800b9e6 <_Balloc+0x66>
 800b9f6:	bf00      	nop
 800b9f8:	0800d1c6 	.word	0x0800d1c6
 800b9fc:	0800d328 	.word	0x0800d328

0800ba00 <_Bfree>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba04:	4605      	mov	r5, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	b976      	cbnz	r6, 800ba28 <_Bfree+0x28>
 800ba0a:	2010      	movs	r0, #16
 800ba0c:	f7ff ff90 	bl	800b930 <malloc>
 800ba10:	4602      	mov	r2, r0
 800ba12:	6268      	str	r0, [r5, #36]	; 0x24
 800ba14:	b920      	cbnz	r0, 800ba20 <_Bfree+0x20>
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <_Bfree+0x3c>)
 800ba18:	4809      	ldr	r0, [pc, #36]	; (800ba40 <_Bfree+0x40>)
 800ba1a:	218a      	movs	r1, #138	; 0x8a
 800ba1c:	f001 f8ae 	bl	800cb7c <__assert_func>
 800ba20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba24:	6006      	str	r6, [r0, #0]
 800ba26:	60c6      	str	r6, [r0, #12]
 800ba28:	b13c      	cbz	r4, 800ba3a <_Bfree+0x3a>
 800ba2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba2c:	6862      	ldr	r2, [r4, #4]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba34:	6021      	str	r1, [r4, #0]
 800ba36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	0800d1c6 	.word	0x0800d1c6
 800ba40:	0800d328 	.word	0x0800d328

0800ba44 <__multadd>:
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	690d      	ldr	r5, [r1, #16]
 800ba4a:	4607      	mov	r7, r0
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	461e      	mov	r6, r3
 800ba50:	f101 0c14 	add.w	ip, r1, #20
 800ba54:	2000      	movs	r0, #0
 800ba56:	f8dc 3000 	ldr.w	r3, [ip]
 800ba5a:	b299      	uxth	r1, r3
 800ba5c:	fb02 6101 	mla	r1, r2, r1, r6
 800ba60:	0c1e      	lsrs	r6, r3, #16
 800ba62:	0c0b      	lsrs	r3, r1, #16
 800ba64:	fb02 3306 	mla	r3, r2, r6, r3
 800ba68:	b289      	uxth	r1, r1
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba70:	4285      	cmp	r5, r0
 800ba72:	f84c 1b04 	str.w	r1, [ip], #4
 800ba76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba7a:	dcec      	bgt.n	800ba56 <__multadd+0x12>
 800ba7c:	b30e      	cbz	r6, 800bac2 <__multadd+0x7e>
 800ba7e:	68a3      	ldr	r3, [r4, #8]
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dc19      	bgt.n	800bab8 <__multadd+0x74>
 800ba84:	6861      	ldr	r1, [r4, #4]
 800ba86:	4638      	mov	r0, r7
 800ba88:	3101      	adds	r1, #1
 800ba8a:	f7ff ff79 	bl	800b980 <_Balloc>
 800ba8e:	4680      	mov	r8, r0
 800ba90:	b928      	cbnz	r0, 800ba9e <__multadd+0x5a>
 800ba92:	4602      	mov	r2, r0
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <__multadd+0x84>)
 800ba96:	480d      	ldr	r0, [pc, #52]	; (800bacc <__multadd+0x88>)
 800ba98:	21b5      	movs	r1, #181	; 0xb5
 800ba9a:	f001 f86f 	bl	800cb7c <__assert_func>
 800ba9e:	6922      	ldr	r2, [r4, #16]
 800baa0:	3202      	adds	r2, #2
 800baa2:	f104 010c 	add.w	r1, r4, #12
 800baa6:	0092      	lsls	r2, r2, #2
 800baa8:	300c      	adds	r0, #12
 800baaa:	f7ff ff5b 	bl	800b964 <memcpy>
 800baae:	4621      	mov	r1, r4
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff ffa5 	bl	800ba00 <_Bfree>
 800bab6:	4644      	mov	r4, r8
 800bab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800babc:	3501      	adds	r5, #1
 800babe:	615e      	str	r6, [r3, #20]
 800bac0:	6125      	str	r5, [r4, #16]
 800bac2:	4620      	mov	r0, r4
 800bac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac8:	0800d238 	.word	0x0800d238
 800bacc:	0800d328 	.word	0x0800d328

0800bad0 <__s2b>:
 800bad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	4615      	mov	r5, r2
 800bad8:	461f      	mov	r7, r3
 800bada:	2209      	movs	r2, #9
 800badc:	3308      	adds	r3, #8
 800bade:	4606      	mov	r6, r0
 800bae0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bae4:	2100      	movs	r1, #0
 800bae6:	2201      	movs	r2, #1
 800bae8:	429a      	cmp	r2, r3
 800baea:	db09      	blt.n	800bb00 <__s2b+0x30>
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff ff47 	bl	800b980 <_Balloc>
 800baf2:	b940      	cbnz	r0, 800bb06 <__s2b+0x36>
 800baf4:	4602      	mov	r2, r0
 800baf6:	4b19      	ldr	r3, [pc, #100]	; (800bb5c <__s2b+0x8c>)
 800baf8:	4819      	ldr	r0, [pc, #100]	; (800bb60 <__s2b+0x90>)
 800bafa:	21ce      	movs	r1, #206	; 0xce
 800bafc:	f001 f83e 	bl	800cb7c <__assert_func>
 800bb00:	0052      	lsls	r2, r2, #1
 800bb02:	3101      	adds	r1, #1
 800bb04:	e7f0      	b.n	800bae8 <__s2b+0x18>
 800bb06:	9b08      	ldr	r3, [sp, #32]
 800bb08:	6143      	str	r3, [r0, #20]
 800bb0a:	2d09      	cmp	r5, #9
 800bb0c:	f04f 0301 	mov.w	r3, #1
 800bb10:	6103      	str	r3, [r0, #16]
 800bb12:	dd16      	ble.n	800bb42 <__s2b+0x72>
 800bb14:	f104 0909 	add.w	r9, r4, #9
 800bb18:	46c8      	mov	r8, r9
 800bb1a:	442c      	add	r4, r5
 800bb1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb20:	4601      	mov	r1, r0
 800bb22:	3b30      	subs	r3, #48	; 0x30
 800bb24:	220a      	movs	r2, #10
 800bb26:	4630      	mov	r0, r6
 800bb28:	f7ff ff8c 	bl	800ba44 <__multadd>
 800bb2c:	45a0      	cmp	r8, r4
 800bb2e:	d1f5      	bne.n	800bb1c <__s2b+0x4c>
 800bb30:	f1a5 0408 	sub.w	r4, r5, #8
 800bb34:	444c      	add	r4, r9
 800bb36:	1b2d      	subs	r5, r5, r4
 800bb38:	1963      	adds	r3, r4, r5
 800bb3a:	42bb      	cmp	r3, r7
 800bb3c:	db04      	blt.n	800bb48 <__s2b+0x78>
 800bb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb42:	340a      	adds	r4, #10
 800bb44:	2509      	movs	r5, #9
 800bb46:	e7f6      	b.n	800bb36 <__s2b+0x66>
 800bb48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb4c:	4601      	mov	r1, r0
 800bb4e:	3b30      	subs	r3, #48	; 0x30
 800bb50:	220a      	movs	r2, #10
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7ff ff76 	bl	800ba44 <__multadd>
 800bb58:	e7ee      	b.n	800bb38 <__s2b+0x68>
 800bb5a:	bf00      	nop
 800bb5c:	0800d238 	.word	0x0800d238
 800bb60:	0800d328 	.word	0x0800d328

0800bb64 <__hi0bits>:
 800bb64:	0c03      	lsrs	r3, r0, #16
 800bb66:	041b      	lsls	r3, r3, #16
 800bb68:	b9d3      	cbnz	r3, 800bba0 <__hi0bits+0x3c>
 800bb6a:	0400      	lsls	r0, r0, #16
 800bb6c:	2310      	movs	r3, #16
 800bb6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb72:	bf04      	itt	eq
 800bb74:	0200      	lsleq	r0, r0, #8
 800bb76:	3308      	addeq	r3, #8
 800bb78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb7c:	bf04      	itt	eq
 800bb7e:	0100      	lsleq	r0, r0, #4
 800bb80:	3304      	addeq	r3, #4
 800bb82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb86:	bf04      	itt	eq
 800bb88:	0080      	lsleq	r0, r0, #2
 800bb8a:	3302      	addeq	r3, #2
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	db05      	blt.n	800bb9c <__hi0bits+0x38>
 800bb90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb94:	f103 0301 	add.w	r3, r3, #1
 800bb98:	bf08      	it	eq
 800bb9a:	2320      	moveq	r3, #32
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	4770      	bx	lr
 800bba0:	2300      	movs	r3, #0
 800bba2:	e7e4      	b.n	800bb6e <__hi0bits+0xa>

0800bba4 <__lo0bits>:
 800bba4:	6803      	ldr	r3, [r0, #0]
 800bba6:	f013 0207 	ands.w	r2, r3, #7
 800bbaa:	4601      	mov	r1, r0
 800bbac:	d00b      	beq.n	800bbc6 <__lo0bits+0x22>
 800bbae:	07da      	lsls	r2, r3, #31
 800bbb0:	d423      	bmi.n	800bbfa <__lo0bits+0x56>
 800bbb2:	0798      	lsls	r0, r3, #30
 800bbb4:	bf49      	itett	mi
 800bbb6:	085b      	lsrmi	r3, r3, #1
 800bbb8:	089b      	lsrpl	r3, r3, #2
 800bbba:	2001      	movmi	r0, #1
 800bbbc:	600b      	strmi	r3, [r1, #0]
 800bbbe:	bf5c      	itt	pl
 800bbc0:	600b      	strpl	r3, [r1, #0]
 800bbc2:	2002      	movpl	r0, #2
 800bbc4:	4770      	bx	lr
 800bbc6:	b298      	uxth	r0, r3
 800bbc8:	b9a8      	cbnz	r0, 800bbf6 <__lo0bits+0x52>
 800bbca:	0c1b      	lsrs	r3, r3, #16
 800bbcc:	2010      	movs	r0, #16
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	b90a      	cbnz	r2, 800bbd6 <__lo0bits+0x32>
 800bbd2:	3008      	adds	r0, #8
 800bbd4:	0a1b      	lsrs	r3, r3, #8
 800bbd6:	071a      	lsls	r2, r3, #28
 800bbd8:	bf04      	itt	eq
 800bbda:	091b      	lsreq	r3, r3, #4
 800bbdc:	3004      	addeq	r0, #4
 800bbde:	079a      	lsls	r2, r3, #30
 800bbe0:	bf04      	itt	eq
 800bbe2:	089b      	lsreq	r3, r3, #2
 800bbe4:	3002      	addeq	r0, #2
 800bbe6:	07da      	lsls	r2, r3, #31
 800bbe8:	d403      	bmi.n	800bbf2 <__lo0bits+0x4e>
 800bbea:	085b      	lsrs	r3, r3, #1
 800bbec:	f100 0001 	add.w	r0, r0, #1
 800bbf0:	d005      	beq.n	800bbfe <__lo0bits+0x5a>
 800bbf2:	600b      	str	r3, [r1, #0]
 800bbf4:	4770      	bx	lr
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	e7e9      	b.n	800bbce <__lo0bits+0x2a>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	4770      	bx	lr
 800bbfe:	2020      	movs	r0, #32
 800bc00:	4770      	bx	lr
	...

0800bc04 <__i2b>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	460c      	mov	r4, r1
 800bc08:	2101      	movs	r1, #1
 800bc0a:	f7ff feb9 	bl	800b980 <_Balloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	b928      	cbnz	r0, 800bc1e <__i2b+0x1a>
 800bc12:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <__i2b+0x24>)
 800bc14:	4805      	ldr	r0, [pc, #20]	; (800bc2c <__i2b+0x28>)
 800bc16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc1a:	f000 ffaf 	bl	800cb7c <__assert_func>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	6144      	str	r4, [r0, #20]
 800bc22:	6103      	str	r3, [r0, #16]
 800bc24:	bd10      	pop	{r4, pc}
 800bc26:	bf00      	nop
 800bc28:	0800d238 	.word	0x0800d238
 800bc2c:	0800d328 	.word	0x0800d328

0800bc30 <__multiply>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	4691      	mov	r9, r2
 800bc36:	690a      	ldr	r2, [r1, #16]
 800bc38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	bfb8      	it	lt
 800bc40:	460b      	movlt	r3, r1
 800bc42:	460c      	mov	r4, r1
 800bc44:	bfbc      	itt	lt
 800bc46:	464c      	movlt	r4, r9
 800bc48:	4699      	movlt	r9, r3
 800bc4a:	6927      	ldr	r7, [r4, #16]
 800bc4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc50:	68a3      	ldr	r3, [r4, #8]
 800bc52:	6861      	ldr	r1, [r4, #4]
 800bc54:	eb07 060a 	add.w	r6, r7, sl
 800bc58:	42b3      	cmp	r3, r6
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	bfb8      	it	lt
 800bc5e:	3101      	addlt	r1, #1
 800bc60:	f7ff fe8e 	bl	800b980 <_Balloc>
 800bc64:	b930      	cbnz	r0, 800bc74 <__multiply+0x44>
 800bc66:	4602      	mov	r2, r0
 800bc68:	4b44      	ldr	r3, [pc, #272]	; (800bd7c <__multiply+0x14c>)
 800bc6a:	4845      	ldr	r0, [pc, #276]	; (800bd80 <__multiply+0x150>)
 800bc6c:	f240 115d 	movw	r1, #349	; 0x15d
 800bc70:	f000 ff84 	bl	800cb7c <__assert_func>
 800bc74:	f100 0514 	add.w	r5, r0, #20
 800bc78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	2200      	movs	r2, #0
 800bc80:	4543      	cmp	r3, r8
 800bc82:	d321      	bcc.n	800bcc8 <__multiply+0x98>
 800bc84:	f104 0314 	add.w	r3, r4, #20
 800bc88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc8c:	f109 0314 	add.w	r3, r9, #20
 800bc90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc94:	9202      	str	r2, [sp, #8]
 800bc96:	1b3a      	subs	r2, r7, r4
 800bc98:	3a15      	subs	r2, #21
 800bc9a:	f022 0203 	bic.w	r2, r2, #3
 800bc9e:	3204      	adds	r2, #4
 800bca0:	f104 0115 	add.w	r1, r4, #21
 800bca4:	428f      	cmp	r7, r1
 800bca6:	bf38      	it	cc
 800bca8:	2204      	movcc	r2, #4
 800bcaa:	9201      	str	r2, [sp, #4]
 800bcac:	9a02      	ldr	r2, [sp, #8]
 800bcae:	9303      	str	r3, [sp, #12]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d80c      	bhi.n	800bcce <__multiply+0x9e>
 800bcb4:	2e00      	cmp	r6, #0
 800bcb6:	dd03      	ble.n	800bcc0 <__multiply+0x90>
 800bcb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d05a      	beq.n	800bd76 <__multiply+0x146>
 800bcc0:	6106      	str	r6, [r0, #16]
 800bcc2:	b005      	add	sp, #20
 800bcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc8:	f843 2b04 	str.w	r2, [r3], #4
 800bccc:	e7d8      	b.n	800bc80 <__multiply+0x50>
 800bcce:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcd2:	f1ba 0f00 	cmp.w	sl, #0
 800bcd6:	d024      	beq.n	800bd22 <__multiply+0xf2>
 800bcd8:	f104 0e14 	add.w	lr, r4, #20
 800bcdc:	46a9      	mov	r9, r5
 800bcde:	f04f 0c00 	mov.w	ip, #0
 800bce2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bce6:	f8d9 1000 	ldr.w	r1, [r9]
 800bcea:	fa1f fb82 	uxth.w	fp, r2
 800bcee:	b289      	uxth	r1, r1
 800bcf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bcf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bcf8:	f8d9 2000 	ldr.w	r2, [r9]
 800bcfc:	4461      	add	r1, ip
 800bcfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd02:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd0a:	b289      	uxth	r1, r1
 800bd0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd10:	4577      	cmp	r7, lr
 800bd12:	f849 1b04 	str.w	r1, [r9], #4
 800bd16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd1a:	d8e2      	bhi.n	800bce2 <__multiply+0xb2>
 800bd1c:	9a01      	ldr	r2, [sp, #4]
 800bd1e:	f845 c002 	str.w	ip, [r5, r2]
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	f1b9 0f00 	cmp.w	r9, #0
 800bd2e:	d020      	beq.n	800bd72 <__multiply+0x142>
 800bd30:	6829      	ldr	r1, [r5, #0]
 800bd32:	f104 0c14 	add.w	ip, r4, #20
 800bd36:	46ae      	mov	lr, r5
 800bd38:	f04f 0a00 	mov.w	sl, #0
 800bd3c:	f8bc b000 	ldrh.w	fp, [ip]
 800bd40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd44:	fb09 220b 	mla	r2, r9, fp, r2
 800bd48:	4492      	add	sl, r2
 800bd4a:	b289      	uxth	r1, r1
 800bd4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bd50:	f84e 1b04 	str.w	r1, [lr], #4
 800bd54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd58:	f8be 1000 	ldrh.w	r1, [lr]
 800bd5c:	0c12      	lsrs	r2, r2, #16
 800bd5e:	fb09 1102 	mla	r1, r9, r2, r1
 800bd62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bd66:	4567      	cmp	r7, ip
 800bd68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd6c:	d8e6      	bhi.n	800bd3c <__multiply+0x10c>
 800bd6e:	9a01      	ldr	r2, [sp, #4]
 800bd70:	50a9      	str	r1, [r5, r2]
 800bd72:	3504      	adds	r5, #4
 800bd74:	e79a      	b.n	800bcac <__multiply+0x7c>
 800bd76:	3e01      	subs	r6, #1
 800bd78:	e79c      	b.n	800bcb4 <__multiply+0x84>
 800bd7a:	bf00      	nop
 800bd7c:	0800d238 	.word	0x0800d238
 800bd80:	0800d328 	.word	0x0800d328

0800bd84 <__pow5mult>:
 800bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd88:	4615      	mov	r5, r2
 800bd8a:	f012 0203 	ands.w	r2, r2, #3
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	d007      	beq.n	800bda4 <__pow5mult+0x20>
 800bd94:	4c25      	ldr	r4, [pc, #148]	; (800be2c <__pow5mult+0xa8>)
 800bd96:	3a01      	subs	r2, #1
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd9e:	f7ff fe51 	bl	800ba44 <__multadd>
 800bda2:	4607      	mov	r7, r0
 800bda4:	10ad      	asrs	r5, r5, #2
 800bda6:	d03d      	beq.n	800be24 <__pow5mult+0xa0>
 800bda8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdaa:	b97c      	cbnz	r4, 800bdcc <__pow5mult+0x48>
 800bdac:	2010      	movs	r0, #16
 800bdae:	f7ff fdbf 	bl	800b930 <malloc>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	6270      	str	r0, [r6, #36]	; 0x24
 800bdb6:	b928      	cbnz	r0, 800bdc4 <__pow5mult+0x40>
 800bdb8:	4b1d      	ldr	r3, [pc, #116]	; (800be30 <__pow5mult+0xac>)
 800bdba:	481e      	ldr	r0, [pc, #120]	; (800be34 <__pow5mult+0xb0>)
 800bdbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bdc0:	f000 fedc 	bl	800cb7c <__assert_func>
 800bdc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdc8:	6004      	str	r4, [r0, #0]
 800bdca:	60c4      	str	r4, [r0, #12]
 800bdcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bdd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdd4:	b94c      	cbnz	r4, 800bdea <__pow5mult+0x66>
 800bdd6:	f240 2171 	movw	r1, #625	; 0x271
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7ff ff12 	bl	800bc04 <__i2b>
 800bde0:	2300      	movs	r3, #0
 800bde2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bde6:	4604      	mov	r4, r0
 800bde8:	6003      	str	r3, [r0, #0]
 800bdea:	f04f 0900 	mov.w	r9, #0
 800bdee:	07eb      	lsls	r3, r5, #31
 800bdf0:	d50a      	bpl.n	800be08 <__pow5mult+0x84>
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7ff ff1a 	bl	800bc30 <__multiply>
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	4680      	mov	r8, r0
 800be00:	4630      	mov	r0, r6
 800be02:	f7ff fdfd 	bl	800ba00 <_Bfree>
 800be06:	4647      	mov	r7, r8
 800be08:	106d      	asrs	r5, r5, #1
 800be0a:	d00b      	beq.n	800be24 <__pow5mult+0xa0>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	b938      	cbnz	r0, 800be20 <__pow5mult+0x9c>
 800be10:	4622      	mov	r2, r4
 800be12:	4621      	mov	r1, r4
 800be14:	4630      	mov	r0, r6
 800be16:	f7ff ff0b 	bl	800bc30 <__multiply>
 800be1a:	6020      	str	r0, [r4, #0]
 800be1c:	f8c0 9000 	str.w	r9, [r0]
 800be20:	4604      	mov	r4, r0
 800be22:	e7e4      	b.n	800bdee <__pow5mult+0x6a>
 800be24:	4638      	mov	r0, r7
 800be26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2a:	bf00      	nop
 800be2c:	0800d478 	.word	0x0800d478
 800be30:	0800d1c6 	.word	0x0800d1c6
 800be34:	0800d328 	.word	0x0800d328

0800be38 <__lshift>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	460c      	mov	r4, r1
 800be3e:	6849      	ldr	r1, [r1, #4]
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be46:	68a3      	ldr	r3, [r4, #8]
 800be48:	4607      	mov	r7, r0
 800be4a:	4691      	mov	r9, r2
 800be4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be50:	f108 0601 	add.w	r6, r8, #1
 800be54:	42b3      	cmp	r3, r6
 800be56:	db0b      	blt.n	800be70 <__lshift+0x38>
 800be58:	4638      	mov	r0, r7
 800be5a:	f7ff fd91 	bl	800b980 <_Balloc>
 800be5e:	4605      	mov	r5, r0
 800be60:	b948      	cbnz	r0, 800be76 <__lshift+0x3e>
 800be62:	4602      	mov	r2, r0
 800be64:	4b2a      	ldr	r3, [pc, #168]	; (800bf10 <__lshift+0xd8>)
 800be66:	482b      	ldr	r0, [pc, #172]	; (800bf14 <__lshift+0xdc>)
 800be68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be6c:	f000 fe86 	bl	800cb7c <__assert_func>
 800be70:	3101      	adds	r1, #1
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	e7ee      	b.n	800be54 <__lshift+0x1c>
 800be76:	2300      	movs	r3, #0
 800be78:	f100 0114 	add.w	r1, r0, #20
 800be7c:	f100 0210 	add.w	r2, r0, #16
 800be80:	4618      	mov	r0, r3
 800be82:	4553      	cmp	r3, sl
 800be84:	db37      	blt.n	800bef6 <__lshift+0xbe>
 800be86:	6920      	ldr	r0, [r4, #16]
 800be88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be8c:	f104 0314 	add.w	r3, r4, #20
 800be90:	f019 091f 	ands.w	r9, r9, #31
 800be94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be9c:	d02f      	beq.n	800befe <__lshift+0xc6>
 800be9e:	f1c9 0e20 	rsb	lr, r9, #32
 800bea2:	468a      	mov	sl, r1
 800bea4:	f04f 0c00 	mov.w	ip, #0
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	fa02 f209 	lsl.w	r2, r2, r9
 800beae:	ea42 020c 	orr.w	r2, r2, ip
 800beb2:	f84a 2b04 	str.w	r2, [sl], #4
 800beb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beba:	4298      	cmp	r0, r3
 800bebc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bec0:	d8f2      	bhi.n	800bea8 <__lshift+0x70>
 800bec2:	1b03      	subs	r3, r0, r4
 800bec4:	3b15      	subs	r3, #21
 800bec6:	f023 0303 	bic.w	r3, r3, #3
 800beca:	3304      	adds	r3, #4
 800becc:	f104 0215 	add.w	r2, r4, #21
 800bed0:	4290      	cmp	r0, r2
 800bed2:	bf38      	it	cc
 800bed4:	2304      	movcc	r3, #4
 800bed6:	f841 c003 	str.w	ip, [r1, r3]
 800beda:	f1bc 0f00 	cmp.w	ip, #0
 800bede:	d001      	beq.n	800bee4 <__lshift+0xac>
 800bee0:	f108 0602 	add.w	r6, r8, #2
 800bee4:	3e01      	subs	r6, #1
 800bee6:	4638      	mov	r0, r7
 800bee8:	612e      	str	r6, [r5, #16]
 800beea:	4621      	mov	r1, r4
 800beec:	f7ff fd88 	bl	800ba00 <_Bfree>
 800bef0:	4628      	mov	r0, r5
 800bef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef6:	f842 0f04 	str.w	r0, [r2, #4]!
 800befa:	3301      	adds	r3, #1
 800befc:	e7c1      	b.n	800be82 <__lshift+0x4a>
 800befe:	3904      	subs	r1, #4
 800bf00:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf04:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf08:	4298      	cmp	r0, r3
 800bf0a:	d8f9      	bhi.n	800bf00 <__lshift+0xc8>
 800bf0c:	e7ea      	b.n	800bee4 <__lshift+0xac>
 800bf0e:	bf00      	nop
 800bf10:	0800d238 	.word	0x0800d238
 800bf14:	0800d328 	.word	0x0800d328

0800bf18 <__mcmp>:
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	6902      	ldr	r2, [r0, #16]
 800bf1c:	690c      	ldr	r4, [r1, #16]
 800bf1e:	1b12      	subs	r2, r2, r4
 800bf20:	d10e      	bne.n	800bf40 <__mcmp+0x28>
 800bf22:	f100 0314 	add.w	r3, r0, #20
 800bf26:	3114      	adds	r1, #20
 800bf28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf38:	42a5      	cmp	r5, r4
 800bf3a:	d003      	beq.n	800bf44 <__mcmp+0x2c>
 800bf3c:	d305      	bcc.n	800bf4a <__mcmp+0x32>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4610      	mov	r0, r2
 800bf42:	bd30      	pop	{r4, r5, pc}
 800bf44:	4283      	cmp	r3, r0
 800bf46:	d3f3      	bcc.n	800bf30 <__mcmp+0x18>
 800bf48:	e7fa      	b.n	800bf40 <__mcmp+0x28>
 800bf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4e:	e7f7      	b.n	800bf40 <__mcmp+0x28>

0800bf50 <__mdiff>:
 800bf50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	460c      	mov	r4, r1
 800bf56:	4606      	mov	r6, r0
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	4690      	mov	r8, r2
 800bf5e:	f7ff ffdb 	bl	800bf18 <__mcmp>
 800bf62:	1e05      	subs	r5, r0, #0
 800bf64:	d110      	bne.n	800bf88 <__mdiff+0x38>
 800bf66:	4629      	mov	r1, r5
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff fd09 	bl	800b980 <_Balloc>
 800bf6e:	b930      	cbnz	r0, 800bf7e <__mdiff+0x2e>
 800bf70:	4b3a      	ldr	r3, [pc, #232]	; (800c05c <__mdiff+0x10c>)
 800bf72:	4602      	mov	r2, r0
 800bf74:	f240 2132 	movw	r1, #562	; 0x232
 800bf78:	4839      	ldr	r0, [pc, #228]	; (800c060 <__mdiff+0x110>)
 800bf7a:	f000 fdff 	bl	800cb7c <__assert_func>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf88:	bfa4      	itt	ge
 800bf8a:	4643      	movge	r3, r8
 800bf8c:	46a0      	movge	r8, r4
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf94:	bfa6      	itte	ge
 800bf96:	461c      	movge	r4, r3
 800bf98:	2500      	movge	r5, #0
 800bf9a:	2501      	movlt	r5, #1
 800bf9c:	f7ff fcf0 	bl	800b980 <_Balloc>
 800bfa0:	b920      	cbnz	r0, 800bfac <__mdiff+0x5c>
 800bfa2:	4b2e      	ldr	r3, [pc, #184]	; (800c05c <__mdiff+0x10c>)
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfaa:	e7e5      	b.n	800bf78 <__mdiff+0x28>
 800bfac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfb0:	6926      	ldr	r6, [r4, #16]
 800bfb2:	60c5      	str	r5, [r0, #12]
 800bfb4:	f104 0914 	add.w	r9, r4, #20
 800bfb8:	f108 0514 	add.w	r5, r8, #20
 800bfbc:	f100 0e14 	add.w	lr, r0, #20
 800bfc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bfc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfc8:	f108 0210 	add.w	r2, r8, #16
 800bfcc:	46f2      	mov	sl, lr
 800bfce:	2100      	movs	r1, #0
 800bfd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfd8:	fa1f f883 	uxth.w	r8, r3
 800bfdc:	fa11 f18b 	uxtah	r1, r1, fp
 800bfe0:	0c1b      	lsrs	r3, r3, #16
 800bfe2:	eba1 0808 	sub.w	r8, r1, r8
 800bfe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bfea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfee:	fa1f f888 	uxth.w	r8, r8
 800bff2:	1419      	asrs	r1, r3, #16
 800bff4:	454e      	cmp	r6, r9
 800bff6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bffa:	f84a 3b04 	str.w	r3, [sl], #4
 800bffe:	d8e7      	bhi.n	800bfd0 <__mdiff+0x80>
 800c000:	1b33      	subs	r3, r6, r4
 800c002:	3b15      	subs	r3, #21
 800c004:	f023 0303 	bic.w	r3, r3, #3
 800c008:	3304      	adds	r3, #4
 800c00a:	3415      	adds	r4, #21
 800c00c:	42a6      	cmp	r6, r4
 800c00e:	bf38      	it	cc
 800c010:	2304      	movcc	r3, #4
 800c012:	441d      	add	r5, r3
 800c014:	4473      	add	r3, lr
 800c016:	469e      	mov	lr, r3
 800c018:	462e      	mov	r6, r5
 800c01a:	4566      	cmp	r6, ip
 800c01c:	d30e      	bcc.n	800c03c <__mdiff+0xec>
 800c01e:	f10c 0203 	add.w	r2, ip, #3
 800c022:	1b52      	subs	r2, r2, r5
 800c024:	f022 0203 	bic.w	r2, r2, #3
 800c028:	3d03      	subs	r5, #3
 800c02a:	45ac      	cmp	ip, r5
 800c02c:	bf38      	it	cc
 800c02e:	2200      	movcc	r2, #0
 800c030:	441a      	add	r2, r3
 800c032:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c036:	b17b      	cbz	r3, 800c058 <__mdiff+0x108>
 800c038:	6107      	str	r7, [r0, #16]
 800c03a:	e7a3      	b.n	800bf84 <__mdiff+0x34>
 800c03c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c040:	fa11 f288 	uxtah	r2, r1, r8
 800c044:	1414      	asrs	r4, r2, #16
 800c046:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c04a:	b292      	uxth	r2, r2
 800c04c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c050:	f84e 2b04 	str.w	r2, [lr], #4
 800c054:	1421      	asrs	r1, r4, #16
 800c056:	e7e0      	b.n	800c01a <__mdiff+0xca>
 800c058:	3f01      	subs	r7, #1
 800c05a:	e7ea      	b.n	800c032 <__mdiff+0xe2>
 800c05c:	0800d238 	.word	0x0800d238
 800c060:	0800d328 	.word	0x0800d328

0800c064 <__ulp>:
 800c064:	b082      	sub	sp, #8
 800c066:	ed8d 0b00 	vstr	d0, [sp]
 800c06a:	9b01      	ldr	r3, [sp, #4]
 800c06c:	4912      	ldr	r1, [pc, #72]	; (800c0b8 <__ulp+0x54>)
 800c06e:	4019      	ands	r1, r3
 800c070:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c074:	2900      	cmp	r1, #0
 800c076:	dd05      	ble.n	800c084 <__ulp+0x20>
 800c078:	2200      	movs	r2, #0
 800c07a:	460b      	mov	r3, r1
 800c07c:	ec43 2b10 	vmov	d0, r2, r3
 800c080:	b002      	add	sp, #8
 800c082:	4770      	bx	lr
 800c084:	4249      	negs	r1, r1
 800c086:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c08a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c08e:	f04f 0200 	mov.w	r2, #0
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	da04      	bge.n	800c0a2 <__ulp+0x3e>
 800c098:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c09c:	fa41 f300 	asr.w	r3, r1, r0
 800c0a0:	e7ec      	b.n	800c07c <__ulp+0x18>
 800c0a2:	f1a0 0114 	sub.w	r1, r0, #20
 800c0a6:	291e      	cmp	r1, #30
 800c0a8:	bfda      	itte	le
 800c0aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c0ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800c0b2:	2101      	movgt	r1, #1
 800c0b4:	460a      	mov	r2, r1
 800c0b6:	e7e1      	b.n	800c07c <__ulp+0x18>
 800c0b8:	7ff00000 	.word	0x7ff00000

0800c0bc <__b2d>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	6905      	ldr	r5, [r0, #16]
 800c0c0:	f100 0714 	add.w	r7, r0, #20
 800c0c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c0c8:	1f2e      	subs	r6, r5, #4
 800c0ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f7ff fd48 	bl	800bb64 <__hi0bits>
 800c0d4:	f1c0 0320 	rsb	r3, r0, #32
 800c0d8:	280a      	cmp	r0, #10
 800c0da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c158 <__b2d+0x9c>
 800c0de:	600b      	str	r3, [r1, #0]
 800c0e0:	dc14      	bgt.n	800c10c <__b2d+0x50>
 800c0e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c0e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c0ea:	42b7      	cmp	r7, r6
 800c0ec:	ea41 030c 	orr.w	r3, r1, ip
 800c0f0:	bf34      	ite	cc
 800c0f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c0f6:	2100      	movcs	r1, #0
 800c0f8:	3015      	adds	r0, #21
 800c0fa:	fa04 f000 	lsl.w	r0, r4, r0
 800c0fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800c102:	ea40 0201 	orr.w	r2, r0, r1
 800c106:	ec43 2b10 	vmov	d0, r2, r3
 800c10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10c:	42b7      	cmp	r7, r6
 800c10e:	bf3a      	itte	cc
 800c110:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c114:	f1a5 0608 	subcc.w	r6, r5, #8
 800c118:	2100      	movcs	r1, #0
 800c11a:	380b      	subs	r0, #11
 800c11c:	d017      	beq.n	800c14e <__b2d+0x92>
 800c11e:	f1c0 0c20 	rsb	ip, r0, #32
 800c122:	fa04 f500 	lsl.w	r5, r4, r0
 800c126:	42be      	cmp	r6, r7
 800c128:	fa21 f40c 	lsr.w	r4, r1, ip
 800c12c:	ea45 0504 	orr.w	r5, r5, r4
 800c130:	bf8c      	ite	hi
 800c132:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c136:	2400      	movls	r4, #0
 800c138:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c13c:	fa01 f000 	lsl.w	r0, r1, r0
 800c140:	fa24 f40c 	lsr.w	r4, r4, ip
 800c144:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c148:	ea40 0204 	orr.w	r2, r0, r4
 800c14c:	e7db      	b.n	800c106 <__b2d+0x4a>
 800c14e:	ea44 030c 	orr.w	r3, r4, ip
 800c152:	460a      	mov	r2, r1
 800c154:	e7d7      	b.n	800c106 <__b2d+0x4a>
 800c156:	bf00      	nop
 800c158:	3ff00000 	.word	0x3ff00000

0800c15c <__d2b>:
 800c15c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c160:	4689      	mov	r9, r1
 800c162:	2101      	movs	r1, #1
 800c164:	ec57 6b10 	vmov	r6, r7, d0
 800c168:	4690      	mov	r8, r2
 800c16a:	f7ff fc09 	bl	800b980 <_Balloc>
 800c16e:	4604      	mov	r4, r0
 800c170:	b930      	cbnz	r0, 800c180 <__d2b+0x24>
 800c172:	4602      	mov	r2, r0
 800c174:	4b25      	ldr	r3, [pc, #148]	; (800c20c <__d2b+0xb0>)
 800c176:	4826      	ldr	r0, [pc, #152]	; (800c210 <__d2b+0xb4>)
 800c178:	f240 310a 	movw	r1, #778	; 0x30a
 800c17c:	f000 fcfe 	bl	800cb7c <__assert_func>
 800c180:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c184:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c188:	bb35      	cbnz	r5, 800c1d8 <__d2b+0x7c>
 800c18a:	2e00      	cmp	r6, #0
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	d028      	beq.n	800c1e2 <__d2b+0x86>
 800c190:	4668      	mov	r0, sp
 800c192:	9600      	str	r6, [sp, #0]
 800c194:	f7ff fd06 	bl	800bba4 <__lo0bits>
 800c198:	9900      	ldr	r1, [sp, #0]
 800c19a:	b300      	cbz	r0, 800c1de <__d2b+0x82>
 800c19c:	9a01      	ldr	r2, [sp, #4]
 800c19e:	f1c0 0320 	rsb	r3, r0, #32
 800c1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a6:	430b      	orrs	r3, r1
 800c1a8:	40c2      	lsrs	r2, r0
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	9201      	str	r2, [sp, #4]
 800c1ae:	9b01      	ldr	r3, [sp, #4]
 800c1b0:	61a3      	str	r3, [r4, #24]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	bf14      	ite	ne
 800c1b6:	2202      	movne	r2, #2
 800c1b8:	2201      	moveq	r2, #1
 800c1ba:	6122      	str	r2, [r4, #16]
 800c1bc:	b1d5      	cbz	r5, 800c1f4 <__d2b+0x98>
 800c1be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1c2:	4405      	add	r5, r0
 800c1c4:	f8c9 5000 	str.w	r5, [r9]
 800c1c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1cc:	f8c8 0000 	str.w	r0, [r8]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	b003      	add	sp, #12
 800c1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1dc:	e7d5      	b.n	800c18a <__d2b+0x2e>
 800c1de:	6161      	str	r1, [r4, #20]
 800c1e0:	e7e5      	b.n	800c1ae <__d2b+0x52>
 800c1e2:	a801      	add	r0, sp, #4
 800c1e4:	f7ff fcde 	bl	800bba4 <__lo0bits>
 800c1e8:	9b01      	ldr	r3, [sp, #4]
 800c1ea:	6163      	str	r3, [r4, #20]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	6122      	str	r2, [r4, #16]
 800c1f0:	3020      	adds	r0, #32
 800c1f2:	e7e3      	b.n	800c1bc <__d2b+0x60>
 800c1f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1fc:	f8c9 0000 	str.w	r0, [r9]
 800c200:	6918      	ldr	r0, [r3, #16]
 800c202:	f7ff fcaf 	bl	800bb64 <__hi0bits>
 800c206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c20a:	e7df      	b.n	800c1cc <__d2b+0x70>
 800c20c:	0800d238 	.word	0x0800d238
 800c210:	0800d328 	.word	0x0800d328

0800c214 <__ratio>:
 800c214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c218:	4688      	mov	r8, r1
 800c21a:	4669      	mov	r1, sp
 800c21c:	4681      	mov	r9, r0
 800c21e:	f7ff ff4d 	bl	800c0bc <__b2d>
 800c222:	a901      	add	r1, sp, #4
 800c224:	4640      	mov	r0, r8
 800c226:	ec55 4b10 	vmov	r4, r5, d0
 800c22a:	f7ff ff47 	bl	800c0bc <__b2d>
 800c22e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c232:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c236:	eba3 0c02 	sub.w	ip, r3, r2
 800c23a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c23e:	1a9b      	subs	r3, r3, r2
 800c240:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c244:	ec51 0b10 	vmov	r0, r1, d0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	bfd6      	itet	le
 800c24c:	460a      	movle	r2, r1
 800c24e:	462a      	movgt	r2, r5
 800c250:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c254:	468b      	mov	fp, r1
 800c256:	462f      	mov	r7, r5
 800c258:	bfd4      	ite	le
 800c25a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c25e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c262:	4620      	mov	r0, r4
 800c264:	ee10 2a10 	vmov	r2, s0
 800c268:	465b      	mov	r3, fp
 800c26a:	4639      	mov	r1, r7
 800c26c:	f7f4 faf6 	bl	800085c <__aeabi_ddiv>
 800c270:	ec41 0b10 	vmov	d0, r0, r1
 800c274:	b003      	add	sp, #12
 800c276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c27a <__copybits>:
 800c27a:	3901      	subs	r1, #1
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	1149      	asrs	r1, r1, #5
 800c280:	6914      	ldr	r4, [r2, #16]
 800c282:	3101      	adds	r1, #1
 800c284:	f102 0314 	add.w	r3, r2, #20
 800c288:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c28c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c290:	1f05      	subs	r5, r0, #4
 800c292:	42a3      	cmp	r3, r4
 800c294:	d30c      	bcc.n	800c2b0 <__copybits+0x36>
 800c296:	1aa3      	subs	r3, r4, r2
 800c298:	3b11      	subs	r3, #17
 800c29a:	f023 0303 	bic.w	r3, r3, #3
 800c29e:	3211      	adds	r2, #17
 800c2a0:	42a2      	cmp	r2, r4
 800c2a2:	bf88      	it	hi
 800c2a4:	2300      	movhi	r3, #0
 800c2a6:	4418      	add	r0, r3
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4288      	cmp	r0, r1
 800c2ac:	d305      	bcc.n	800c2ba <__copybits+0x40>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2b8:	e7eb      	b.n	800c292 <__copybits+0x18>
 800c2ba:	f840 3b04 	str.w	r3, [r0], #4
 800c2be:	e7f4      	b.n	800c2aa <__copybits+0x30>

0800c2c0 <__any_on>:
 800c2c0:	f100 0214 	add.w	r2, r0, #20
 800c2c4:	6900      	ldr	r0, [r0, #16]
 800c2c6:	114b      	asrs	r3, r1, #5
 800c2c8:	4298      	cmp	r0, r3
 800c2ca:	b510      	push	{r4, lr}
 800c2cc:	db11      	blt.n	800c2f2 <__any_on+0x32>
 800c2ce:	dd0a      	ble.n	800c2e6 <__any_on+0x26>
 800c2d0:	f011 011f 	ands.w	r1, r1, #31
 800c2d4:	d007      	beq.n	800c2e6 <__any_on+0x26>
 800c2d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2da:	fa24 f001 	lsr.w	r0, r4, r1
 800c2de:	fa00 f101 	lsl.w	r1, r0, r1
 800c2e2:	428c      	cmp	r4, r1
 800c2e4:	d10b      	bne.n	800c2fe <__any_on+0x3e>
 800c2e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d803      	bhi.n	800c2f6 <__any_on+0x36>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	e7f7      	b.n	800c2e6 <__any_on+0x26>
 800c2f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2fa:	2900      	cmp	r1, #0
 800c2fc:	d0f5      	beq.n	800c2ea <__any_on+0x2a>
 800c2fe:	2001      	movs	r0, #1
 800c300:	e7f6      	b.n	800c2f0 <__any_on+0x30>

0800c302 <_calloc_r>:
 800c302:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c304:	fba1 2402 	umull	r2, r4, r1, r2
 800c308:	b94c      	cbnz	r4, 800c31e <_calloc_r+0x1c>
 800c30a:	4611      	mov	r1, r2
 800c30c:	9201      	str	r2, [sp, #4]
 800c30e:	f000 f87b 	bl	800c408 <_malloc_r>
 800c312:	9a01      	ldr	r2, [sp, #4]
 800c314:	4605      	mov	r5, r0
 800c316:	b930      	cbnz	r0, 800c326 <_calloc_r+0x24>
 800c318:	4628      	mov	r0, r5
 800c31a:	b003      	add	sp, #12
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	220c      	movs	r2, #12
 800c320:	6002      	str	r2, [r0, #0]
 800c322:	2500      	movs	r5, #0
 800c324:	e7f8      	b.n	800c318 <_calloc_r+0x16>
 800c326:	4621      	mov	r1, r4
 800c328:	f7fc f83c 	bl	80083a4 <memset>
 800c32c:	e7f4      	b.n	800c318 <_calloc_r+0x16>
	...

0800c330 <_free_r>:
 800c330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c332:	2900      	cmp	r1, #0
 800c334:	d044      	beq.n	800c3c0 <_free_r+0x90>
 800c336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c33a:	9001      	str	r0, [sp, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f1a1 0404 	sub.w	r4, r1, #4
 800c342:	bfb8      	it	lt
 800c344:	18e4      	addlt	r4, r4, r3
 800c346:	f000 fca7 	bl	800cc98 <__malloc_lock>
 800c34a:	4a1e      	ldr	r2, [pc, #120]	; (800c3c4 <_free_r+0x94>)
 800c34c:	9801      	ldr	r0, [sp, #4]
 800c34e:	6813      	ldr	r3, [r2, #0]
 800c350:	b933      	cbnz	r3, 800c360 <_free_r+0x30>
 800c352:	6063      	str	r3, [r4, #4]
 800c354:	6014      	str	r4, [r2, #0]
 800c356:	b003      	add	sp, #12
 800c358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c35c:	f000 bca2 	b.w	800cca4 <__malloc_unlock>
 800c360:	42a3      	cmp	r3, r4
 800c362:	d908      	bls.n	800c376 <_free_r+0x46>
 800c364:	6825      	ldr	r5, [r4, #0]
 800c366:	1961      	adds	r1, r4, r5
 800c368:	428b      	cmp	r3, r1
 800c36a:	bf01      	itttt	eq
 800c36c:	6819      	ldreq	r1, [r3, #0]
 800c36e:	685b      	ldreq	r3, [r3, #4]
 800c370:	1949      	addeq	r1, r1, r5
 800c372:	6021      	streq	r1, [r4, #0]
 800c374:	e7ed      	b.n	800c352 <_free_r+0x22>
 800c376:	461a      	mov	r2, r3
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	b10b      	cbz	r3, 800c380 <_free_r+0x50>
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	d9fa      	bls.n	800c376 <_free_r+0x46>
 800c380:	6811      	ldr	r1, [r2, #0]
 800c382:	1855      	adds	r5, r2, r1
 800c384:	42a5      	cmp	r5, r4
 800c386:	d10b      	bne.n	800c3a0 <_free_r+0x70>
 800c388:	6824      	ldr	r4, [r4, #0]
 800c38a:	4421      	add	r1, r4
 800c38c:	1854      	adds	r4, r2, r1
 800c38e:	42a3      	cmp	r3, r4
 800c390:	6011      	str	r1, [r2, #0]
 800c392:	d1e0      	bne.n	800c356 <_free_r+0x26>
 800c394:	681c      	ldr	r4, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	6053      	str	r3, [r2, #4]
 800c39a:	4421      	add	r1, r4
 800c39c:	6011      	str	r1, [r2, #0]
 800c39e:	e7da      	b.n	800c356 <_free_r+0x26>
 800c3a0:	d902      	bls.n	800c3a8 <_free_r+0x78>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	6003      	str	r3, [r0, #0]
 800c3a6:	e7d6      	b.n	800c356 <_free_r+0x26>
 800c3a8:	6825      	ldr	r5, [r4, #0]
 800c3aa:	1961      	adds	r1, r4, r5
 800c3ac:	428b      	cmp	r3, r1
 800c3ae:	bf04      	itt	eq
 800c3b0:	6819      	ldreq	r1, [r3, #0]
 800c3b2:	685b      	ldreq	r3, [r3, #4]
 800c3b4:	6063      	str	r3, [r4, #4]
 800c3b6:	bf04      	itt	eq
 800c3b8:	1949      	addeq	r1, r1, r5
 800c3ba:	6021      	streq	r1, [r4, #0]
 800c3bc:	6054      	str	r4, [r2, #4]
 800c3be:	e7ca      	b.n	800c356 <_free_r+0x26>
 800c3c0:	b003      	add	sp, #12
 800c3c2:	bd30      	pop	{r4, r5, pc}
 800c3c4:	20000a94 	.word	0x20000a94

0800c3c8 <sbrk_aligned>:
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	4e0e      	ldr	r6, [pc, #56]	; (800c404 <sbrk_aligned+0x3c>)
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	6831      	ldr	r1, [r6, #0]
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	b911      	cbnz	r1, 800c3da <sbrk_aligned+0x12>
 800c3d4:	f000 fb4c 	bl	800ca70 <_sbrk_r>
 800c3d8:	6030      	str	r0, [r6, #0]
 800c3da:	4621      	mov	r1, r4
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f000 fb47 	bl	800ca70 <_sbrk_r>
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	d00a      	beq.n	800c3fc <sbrk_aligned+0x34>
 800c3e6:	1cc4      	adds	r4, r0, #3
 800c3e8:	f024 0403 	bic.w	r4, r4, #3
 800c3ec:	42a0      	cmp	r0, r4
 800c3ee:	d007      	beq.n	800c400 <sbrk_aligned+0x38>
 800c3f0:	1a21      	subs	r1, r4, r0
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 fb3c 	bl	800ca70 <_sbrk_r>
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d101      	bne.n	800c400 <sbrk_aligned+0x38>
 800c3fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c400:	4620      	mov	r0, r4
 800c402:	bd70      	pop	{r4, r5, r6, pc}
 800c404:	20000a98 	.word	0x20000a98

0800c408 <_malloc_r>:
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	1ccd      	adds	r5, r1, #3
 800c40e:	f025 0503 	bic.w	r5, r5, #3
 800c412:	3508      	adds	r5, #8
 800c414:	2d0c      	cmp	r5, #12
 800c416:	bf38      	it	cc
 800c418:	250c      	movcc	r5, #12
 800c41a:	2d00      	cmp	r5, #0
 800c41c:	4607      	mov	r7, r0
 800c41e:	db01      	blt.n	800c424 <_malloc_r+0x1c>
 800c420:	42a9      	cmp	r1, r5
 800c422:	d905      	bls.n	800c430 <_malloc_r+0x28>
 800c424:	230c      	movs	r3, #12
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	2600      	movs	r6, #0
 800c42a:	4630      	mov	r0, r6
 800c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c430:	4e2e      	ldr	r6, [pc, #184]	; (800c4ec <_malloc_r+0xe4>)
 800c432:	f000 fc31 	bl	800cc98 <__malloc_lock>
 800c436:	6833      	ldr	r3, [r6, #0]
 800c438:	461c      	mov	r4, r3
 800c43a:	bb34      	cbnz	r4, 800c48a <_malloc_r+0x82>
 800c43c:	4629      	mov	r1, r5
 800c43e:	4638      	mov	r0, r7
 800c440:	f7ff ffc2 	bl	800c3c8 <sbrk_aligned>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	4604      	mov	r4, r0
 800c448:	d14d      	bne.n	800c4e6 <_malloc_r+0xde>
 800c44a:	6834      	ldr	r4, [r6, #0]
 800c44c:	4626      	mov	r6, r4
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d140      	bne.n	800c4d4 <_malloc_r+0xcc>
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	4631      	mov	r1, r6
 800c456:	4638      	mov	r0, r7
 800c458:	eb04 0803 	add.w	r8, r4, r3
 800c45c:	f000 fb08 	bl	800ca70 <_sbrk_r>
 800c460:	4580      	cmp	r8, r0
 800c462:	d13a      	bne.n	800c4da <_malloc_r+0xd2>
 800c464:	6821      	ldr	r1, [r4, #0]
 800c466:	3503      	adds	r5, #3
 800c468:	1a6d      	subs	r5, r5, r1
 800c46a:	f025 0503 	bic.w	r5, r5, #3
 800c46e:	3508      	adds	r5, #8
 800c470:	2d0c      	cmp	r5, #12
 800c472:	bf38      	it	cc
 800c474:	250c      	movcc	r5, #12
 800c476:	4629      	mov	r1, r5
 800c478:	4638      	mov	r0, r7
 800c47a:	f7ff ffa5 	bl	800c3c8 <sbrk_aligned>
 800c47e:	3001      	adds	r0, #1
 800c480:	d02b      	beq.n	800c4da <_malloc_r+0xd2>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	442b      	add	r3, r5
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	e00e      	b.n	800c4a8 <_malloc_r+0xa0>
 800c48a:	6822      	ldr	r2, [r4, #0]
 800c48c:	1b52      	subs	r2, r2, r5
 800c48e:	d41e      	bmi.n	800c4ce <_malloc_r+0xc6>
 800c490:	2a0b      	cmp	r2, #11
 800c492:	d916      	bls.n	800c4c2 <_malloc_r+0xba>
 800c494:	1961      	adds	r1, r4, r5
 800c496:	42a3      	cmp	r3, r4
 800c498:	6025      	str	r5, [r4, #0]
 800c49a:	bf18      	it	ne
 800c49c:	6059      	strne	r1, [r3, #4]
 800c49e:	6863      	ldr	r3, [r4, #4]
 800c4a0:	bf08      	it	eq
 800c4a2:	6031      	streq	r1, [r6, #0]
 800c4a4:	5162      	str	r2, [r4, r5]
 800c4a6:	604b      	str	r3, [r1, #4]
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f104 060b 	add.w	r6, r4, #11
 800c4ae:	f000 fbf9 	bl	800cca4 <__malloc_unlock>
 800c4b2:	f026 0607 	bic.w	r6, r6, #7
 800c4b6:	1d23      	adds	r3, r4, #4
 800c4b8:	1af2      	subs	r2, r6, r3
 800c4ba:	d0b6      	beq.n	800c42a <_malloc_r+0x22>
 800c4bc:	1b9b      	subs	r3, r3, r6
 800c4be:	50a3      	str	r3, [r4, r2]
 800c4c0:	e7b3      	b.n	800c42a <_malloc_r+0x22>
 800c4c2:	6862      	ldr	r2, [r4, #4]
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	bf0c      	ite	eq
 800c4c8:	6032      	streq	r2, [r6, #0]
 800c4ca:	605a      	strne	r2, [r3, #4]
 800c4cc:	e7ec      	b.n	800c4a8 <_malloc_r+0xa0>
 800c4ce:	4623      	mov	r3, r4
 800c4d0:	6864      	ldr	r4, [r4, #4]
 800c4d2:	e7b2      	b.n	800c43a <_malloc_r+0x32>
 800c4d4:	4634      	mov	r4, r6
 800c4d6:	6876      	ldr	r6, [r6, #4]
 800c4d8:	e7b9      	b.n	800c44e <_malloc_r+0x46>
 800c4da:	230c      	movs	r3, #12
 800c4dc:	603b      	str	r3, [r7, #0]
 800c4de:	4638      	mov	r0, r7
 800c4e0:	f000 fbe0 	bl	800cca4 <__malloc_unlock>
 800c4e4:	e7a1      	b.n	800c42a <_malloc_r+0x22>
 800c4e6:	6025      	str	r5, [r4, #0]
 800c4e8:	e7de      	b.n	800c4a8 <_malloc_r+0xa0>
 800c4ea:	bf00      	nop
 800c4ec:	20000a94 	.word	0x20000a94

0800c4f0 <__ssputs_r>:
 800c4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f4:	688e      	ldr	r6, [r1, #8]
 800c4f6:	429e      	cmp	r6, r3
 800c4f8:	4682      	mov	sl, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	4690      	mov	r8, r2
 800c4fe:	461f      	mov	r7, r3
 800c500:	d838      	bhi.n	800c574 <__ssputs_r+0x84>
 800c502:	898a      	ldrh	r2, [r1, #12]
 800c504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c508:	d032      	beq.n	800c570 <__ssputs_r+0x80>
 800c50a:	6825      	ldr	r5, [r4, #0]
 800c50c:	6909      	ldr	r1, [r1, #16]
 800c50e:	eba5 0901 	sub.w	r9, r5, r1
 800c512:	6965      	ldr	r5, [r4, #20]
 800c514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c51c:	3301      	adds	r3, #1
 800c51e:	444b      	add	r3, r9
 800c520:	106d      	asrs	r5, r5, #1
 800c522:	429d      	cmp	r5, r3
 800c524:	bf38      	it	cc
 800c526:	461d      	movcc	r5, r3
 800c528:	0553      	lsls	r3, r2, #21
 800c52a:	d531      	bpl.n	800c590 <__ssputs_r+0xa0>
 800c52c:	4629      	mov	r1, r5
 800c52e:	f7ff ff6b 	bl	800c408 <_malloc_r>
 800c532:	4606      	mov	r6, r0
 800c534:	b950      	cbnz	r0, 800c54c <__ssputs_r+0x5c>
 800c536:	230c      	movs	r3, #12
 800c538:	f8ca 3000 	str.w	r3, [sl]
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54c:	6921      	ldr	r1, [r4, #16]
 800c54e:	464a      	mov	r2, r9
 800c550:	f7ff fa08 	bl	800b964 <memcpy>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	6126      	str	r6, [r4, #16]
 800c562:	6165      	str	r5, [r4, #20]
 800c564:	444e      	add	r6, r9
 800c566:	eba5 0509 	sub.w	r5, r5, r9
 800c56a:	6026      	str	r6, [r4, #0]
 800c56c:	60a5      	str	r5, [r4, #8]
 800c56e:	463e      	mov	r6, r7
 800c570:	42be      	cmp	r6, r7
 800c572:	d900      	bls.n	800c576 <__ssputs_r+0x86>
 800c574:	463e      	mov	r6, r7
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	4632      	mov	r2, r6
 800c57a:	4641      	mov	r1, r8
 800c57c:	f000 fb72 	bl	800cc64 <memmove>
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	1b9b      	subs	r3, r3, r6
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	4433      	add	r3, r6
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	2000      	movs	r0, #0
 800c58e:	e7db      	b.n	800c548 <__ssputs_r+0x58>
 800c590:	462a      	mov	r2, r5
 800c592:	f000 fb8d 	bl	800ccb0 <_realloc_r>
 800c596:	4606      	mov	r6, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	d1e1      	bne.n	800c560 <__ssputs_r+0x70>
 800c59c:	6921      	ldr	r1, [r4, #16]
 800c59e:	4650      	mov	r0, sl
 800c5a0:	f7ff fec6 	bl	800c330 <_free_r>
 800c5a4:	e7c7      	b.n	800c536 <__ssputs_r+0x46>
	...

0800c5a8 <_svfiprintf_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	4698      	mov	r8, r3
 800c5ae:	898b      	ldrh	r3, [r1, #12]
 800c5b0:	061b      	lsls	r3, r3, #24
 800c5b2:	b09d      	sub	sp, #116	; 0x74
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	d50e      	bpl.n	800c5da <_svfiprintf_r+0x32>
 800c5bc:	690b      	ldr	r3, [r1, #16]
 800c5be:	b963      	cbnz	r3, 800c5da <_svfiprintf_r+0x32>
 800c5c0:	2140      	movs	r1, #64	; 0x40
 800c5c2:	f7ff ff21 	bl	800c408 <_malloc_r>
 800c5c6:	6028      	str	r0, [r5, #0]
 800c5c8:	6128      	str	r0, [r5, #16]
 800c5ca:	b920      	cbnz	r0, 800c5d6 <_svfiprintf_r+0x2e>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d4:	e0d1      	b.n	800c77a <_svfiprintf_r+0x1d2>
 800c5d6:	2340      	movs	r3, #64	; 0x40
 800c5d8:	616b      	str	r3, [r5, #20]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5de:	2320      	movs	r3, #32
 800c5e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e8:	2330      	movs	r3, #48	; 0x30
 800c5ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c794 <_svfiprintf_r+0x1ec>
 800c5ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5f2:	f04f 0901 	mov.w	r9, #1
 800c5f6:	4623      	mov	r3, r4
 800c5f8:	469a      	mov	sl, r3
 800c5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5fe:	b10a      	cbz	r2, 800c604 <_svfiprintf_r+0x5c>
 800c600:	2a25      	cmp	r2, #37	; 0x25
 800c602:	d1f9      	bne.n	800c5f8 <_svfiprintf_r+0x50>
 800c604:	ebba 0b04 	subs.w	fp, sl, r4
 800c608:	d00b      	beq.n	800c622 <_svfiprintf_r+0x7a>
 800c60a:	465b      	mov	r3, fp
 800c60c:	4622      	mov	r2, r4
 800c60e:	4629      	mov	r1, r5
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff ff6d 	bl	800c4f0 <__ssputs_r>
 800c616:	3001      	adds	r0, #1
 800c618:	f000 80aa 	beq.w	800c770 <_svfiprintf_r+0x1c8>
 800c61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c61e:	445a      	add	r2, fp
 800c620:	9209      	str	r2, [sp, #36]	; 0x24
 800c622:	f89a 3000 	ldrb.w	r3, [sl]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 80a2 	beq.w	800c770 <_svfiprintf_r+0x1c8>
 800c62c:	2300      	movs	r3, #0
 800c62e:	f04f 32ff 	mov.w	r2, #4294967295
 800c632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c636:	f10a 0a01 	add.w	sl, sl, #1
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	9307      	str	r3, [sp, #28]
 800c63e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c642:	931a      	str	r3, [sp, #104]	; 0x68
 800c644:	4654      	mov	r4, sl
 800c646:	2205      	movs	r2, #5
 800c648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64c:	4851      	ldr	r0, [pc, #324]	; (800c794 <_svfiprintf_r+0x1ec>)
 800c64e:	f7f3 fdcf 	bl	80001f0 <memchr>
 800c652:	9a04      	ldr	r2, [sp, #16]
 800c654:	b9d8      	cbnz	r0, 800c68e <_svfiprintf_r+0xe6>
 800c656:	06d0      	lsls	r0, r2, #27
 800c658:	bf44      	itt	mi
 800c65a:	2320      	movmi	r3, #32
 800c65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c660:	0711      	lsls	r1, r2, #28
 800c662:	bf44      	itt	mi
 800c664:	232b      	movmi	r3, #43	; 0x2b
 800c666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c66a:	f89a 3000 	ldrb.w	r3, [sl]
 800c66e:	2b2a      	cmp	r3, #42	; 0x2a
 800c670:	d015      	beq.n	800c69e <_svfiprintf_r+0xf6>
 800c672:	9a07      	ldr	r2, [sp, #28]
 800c674:	4654      	mov	r4, sl
 800c676:	2000      	movs	r0, #0
 800c678:	f04f 0c0a 	mov.w	ip, #10
 800c67c:	4621      	mov	r1, r4
 800c67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c682:	3b30      	subs	r3, #48	; 0x30
 800c684:	2b09      	cmp	r3, #9
 800c686:	d94e      	bls.n	800c726 <_svfiprintf_r+0x17e>
 800c688:	b1b0      	cbz	r0, 800c6b8 <_svfiprintf_r+0x110>
 800c68a:	9207      	str	r2, [sp, #28]
 800c68c:	e014      	b.n	800c6b8 <_svfiprintf_r+0x110>
 800c68e:	eba0 0308 	sub.w	r3, r0, r8
 800c692:	fa09 f303 	lsl.w	r3, r9, r3
 800c696:	4313      	orrs	r3, r2
 800c698:	9304      	str	r3, [sp, #16]
 800c69a:	46a2      	mov	sl, r4
 800c69c:	e7d2      	b.n	800c644 <_svfiprintf_r+0x9c>
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	1d19      	adds	r1, r3, #4
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	9103      	str	r1, [sp, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bfbb      	ittet	lt
 800c6aa:	425b      	neglt	r3, r3
 800c6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b0:	9307      	strge	r3, [sp, #28]
 800c6b2:	9307      	strlt	r3, [sp, #28]
 800c6b4:	bfb8      	it	lt
 800c6b6:	9204      	strlt	r2, [sp, #16]
 800c6b8:	7823      	ldrb	r3, [r4, #0]
 800c6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c6bc:	d10c      	bne.n	800c6d8 <_svfiprintf_r+0x130>
 800c6be:	7863      	ldrb	r3, [r4, #1]
 800c6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c2:	d135      	bne.n	800c730 <_svfiprintf_r+0x188>
 800c6c4:	9b03      	ldr	r3, [sp, #12]
 800c6c6:	1d1a      	adds	r2, r3, #4
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	9203      	str	r2, [sp, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfb8      	it	lt
 800c6d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6d4:	3402      	adds	r4, #2
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7a4 <_svfiprintf_r+0x1fc>
 800c6dc:	7821      	ldrb	r1, [r4, #0]
 800c6de:	2203      	movs	r2, #3
 800c6e0:	4650      	mov	r0, sl
 800c6e2:	f7f3 fd85 	bl	80001f0 <memchr>
 800c6e6:	b140      	cbz	r0, 800c6fa <_svfiprintf_r+0x152>
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	eba0 000a 	sub.w	r0, r0, sl
 800c6ee:	fa03 f000 	lsl.w	r0, r3, r0
 800c6f2:	9b04      	ldr	r3, [sp, #16]
 800c6f4:	4303      	orrs	r3, r0
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	9304      	str	r3, [sp, #16]
 800c6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fe:	4826      	ldr	r0, [pc, #152]	; (800c798 <_svfiprintf_r+0x1f0>)
 800c700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c704:	2206      	movs	r2, #6
 800c706:	f7f3 fd73 	bl	80001f0 <memchr>
 800c70a:	2800      	cmp	r0, #0
 800c70c:	d038      	beq.n	800c780 <_svfiprintf_r+0x1d8>
 800c70e:	4b23      	ldr	r3, [pc, #140]	; (800c79c <_svfiprintf_r+0x1f4>)
 800c710:	bb1b      	cbnz	r3, 800c75a <_svfiprintf_r+0x1b2>
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	3307      	adds	r3, #7
 800c716:	f023 0307 	bic.w	r3, r3, #7
 800c71a:	3308      	adds	r3, #8
 800c71c:	9303      	str	r3, [sp, #12]
 800c71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c720:	4433      	add	r3, r6
 800c722:	9309      	str	r3, [sp, #36]	; 0x24
 800c724:	e767      	b.n	800c5f6 <_svfiprintf_r+0x4e>
 800c726:	fb0c 3202 	mla	r2, ip, r2, r3
 800c72a:	460c      	mov	r4, r1
 800c72c:	2001      	movs	r0, #1
 800c72e:	e7a5      	b.n	800c67c <_svfiprintf_r+0xd4>
 800c730:	2300      	movs	r3, #0
 800c732:	3401      	adds	r4, #1
 800c734:	9305      	str	r3, [sp, #20]
 800c736:	4619      	mov	r1, r3
 800c738:	f04f 0c0a 	mov.w	ip, #10
 800c73c:	4620      	mov	r0, r4
 800c73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c742:	3a30      	subs	r2, #48	; 0x30
 800c744:	2a09      	cmp	r2, #9
 800c746:	d903      	bls.n	800c750 <_svfiprintf_r+0x1a8>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d0c5      	beq.n	800c6d8 <_svfiprintf_r+0x130>
 800c74c:	9105      	str	r1, [sp, #20]
 800c74e:	e7c3      	b.n	800c6d8 <_svfiprintf_r+0x130>
 800c750:	fb0c 2101 	mla	r1, ip, r1, r2
 800c754:	4604      	mov	r4, r0
 800c756:	2301      	movs	r3, #1
 800c758:	e7f0      	b.n	800c73c <_svfiprintf_r+0x194>
 800c75a:	ab03      	add	r3, sp, #12
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	462a      	mov	r2, r5
 800c760:	4b0f      	ldr	r3, [pc, #60]	; (800c7a0 <_svfiprintf_r+0x1f8>)
 800c762:	a904      	add	r1, sp, #16
 800c764:	4638      	mov	r0, r7
 800c766:	f7fb fec5 	bl	80084f4 <_printf_float>
 800c76a:	1c42      	adds	r2, r0, #1
 800c76c:	4606      	mov	r6, r0
 800c76e:	d1d6      	bne.n	800c71e <_svfiprintf_r+0x176>
 800c770:	89ab      	ldrh	r3, [r5, #12]
 800c772:	065b      	lsls	r3, r3, #25
 800c774:	f53f af2c 	bmi.w	800c5d0 <_svfiprintf_r+0x28>
 800c778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c77a:	b01d      	add	sp, #116	; 0x74
 800c77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c780:	ab03      	add	r3, sp, #12
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	462a      	mov	r2, r5
 800c786:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <_svfiprintf_r+0x1f8>)
 800c788:	a904      	add	r1, sp, #16
 800c78a:	4638      	mov	r0, r7
 800c78c:	f7fc f956 	bl	8008a3c <_printf_i>
 800c790:	e7eb      	b.n	800c76a <_svfiprintf_r+0x1c2>
 800c792:	bf00      	nop
 800c794:	0800d484 	.word	0x0800d484
 800c798:	0800d48e 	.word	0x0800d48e
 800c79c:	080084f5 	.word	0x080084f5
 800c7a0:	0800c4f1 	.word	0x0800c4f1
 800c7a4:	0800d48a 	.word	0x0800d48a

0800c7a8 <__sfputc_r>:
 800c7a8:	6893      	ldr	r3, [r2, #8]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	b410      	push	{r4}
 800c7b0:	6093      	str	r3, [r2, #8]
 800c7b2:	da08      	bge.n	800c7c6 <__sfputc_r+0x1e>
 800c7b4:	6994      	ldr	r4, [r2, #24]
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	db01      	blt.n	800c7be <__sfputc_r+0x16>
 800c7ba:	290a      	cmp	r1, #10
 800c7bc:	d103      	bne.n	800c7c6 <__sfputc_r+0x1e>
 800c7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c2:	f7fd bbe9 	b.w	8009f98 <__swbuf_r>
 800c7c6:	6813      	ldr	r3, [r2, #0]
 800c7c8:	1c58      	adds	r0, r3, #1
 800c7ca:	6010      	str	r0, [r2, #0]
 800c7cc:	7019      	strb	r1, [r3, #0]
 800c7ce:	4608      	mov	r0, r1
 800c7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <__sfputs_r>:
 800c7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d8:	4606      	mov	r6, r0
 800c7da:	460f      	mov	r7, r1
 800c7dc:	4614      	mov	r4, r2
 800c7de:	18d5      	adds	r5, r2, r3
 800c7e0:	42ac      	cmp	r4, r5
 800c7e2:	d101      	bne.n	800c7e8 <__sfputs_r+0x12>
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	e007      	b.n	800c7f8 <__sfputs_r+0x22>
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	463a      	mov	r2, r7
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7ff ffda 	bl	800c7a8 <__sfputc_r>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d1f3      	bne.n	800c7e0 <__sfputs_r+0xa>
 800c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7fc <_vfiprintf_r>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	460d      	mov	r5, r1
 800c802:	b09d      	sub	sp, #116	; 0x74
 800c804:	4614      	mov	r4, r2
 800c806:	4698      	mov	r8, r3
 800c808:	4606      	mov	r6, r0
 800c80a:	b118      	cbz	r0, 800c814 <_vfiprintf_r+0x18>
 800c80c:	6983      	ldr	r3, [r0, #24]
 800c80e:	b90b      	cbnz	r3, 800c814 <_vfiprintf_r+0x18>
 800c810:	f7fe fc16 	bl	800b040 <__sinit>
 800c814:	4b89      	ldr	r3, [pc, #548]	; (800ca3c <_vfiprintf_r+0x240>)
 800c816:	429d      	cmp	r5, r3
 800c818:	d11b      	bne.n	800c852 <_vfiprintf_r+0x56>
 800c81a:	6875      	ldr	r5, [r6, #4]
 800c81c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c81e:	07d9      	lsls	r1, r3, #31
 800c820:	d405      	bmi.n	800c82e <_vfiprintf_r+0x32>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	059a      	lsls	r2, r3, #22
 800c826:	d402      	bmi.n	800c82e <_vfiprintf_r+0x32>
 800c828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82a:	f7ff f81a 	bl	800b862 <__retarget_lock_acquire_recursive>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	071b      	lsls	r3, r3, #28
 800c832:	d501      	bpl.n	800c838 <_vfiprintf_r+0x3c>
 800c834:	692b      	ldr	r3, [r5, #16]
 800c836:	b9eb      	cbnz	r3, 800c874 <_vfiprintf_r+0x78>
 800c838:	4629      	mov	r1, r5
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7fd fbfe 	bl	800a03c <__swsetup_r>
 800c840:	b1c0      	cbz	r0, 800c874 <_vfiprintf_r+0x78>
 800c842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c844:	07dc      	lsls	r4, r3, #31
 800c846:	d50e      	bpl.n	800c866 <_vfiprintf_r+0x6a>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	b01d      	add	sp, #116	; 0x74
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	4b7b      	ldr	r3, [pc, #492]	; (800ca40 <_vfiprintf_r+0x244>)
 800c854:	429d      	cmp	r5, r3
 800c856:	d101      	bne.n	800c85c <_vfiprintf_r+0x60>
 800c858:	68b5      	ldr	r5, [r6, #8]
 800c85a:	e7df      	b.n	800c81c <_vfiprintf_r+0x20>
 800c85c:	4b79      	ldr	r3, [pc, #484]	; (800ca44 <_vfiprintf_r+0x248>)
 800c85e:	429d      	cmp	r5, r3
 800c860:	bf08      	it	eq
 800c862:	68f5      	ldreq	r5, [r6, #12]
 800c864:	e7da      	b.n	800c81c <_vfiprintf_r+0x20>
 800c866:	89ab      	ldrh	r3, [r5, #12]
 800c868:	0598      	lsls	r0, r3, #22
 800c86a:	d4ed      	bmi.n	800c848 <_vfiprintf_r+0x4c>
 800c86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c86e:	f7fe fff9 	bl	800b864 <__retarget_lock_release_recursive>
 800c872:	e7e9      	b.n	800c848 <_vfiprintf_r+0x4c>
 800c874:	2300      	movs	r3, #0
 800c876:	9309      	str	r3, [sp, #36]	; 0x24
 800c878:	2320      	movs	r3, #32
 800c87a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c882:	2330      	movs	r3, #48	; 0x30
 800c884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca48 <_vfiprintf_r+0x24c>
 800c888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c88c:	f04f 0901 	mov.w	r9, #1
 800c890:	4623      	mov	r3, r4
 800c892:	469a      	mov	sl, r3
 800c894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c898:	b10a      	cbz	r2, 800c89e <_vfiprintf_r+0xa2>
 800c89a:	2a25      	cmp	r2, #37	; 0x25
 800c89c:	d1f9      	bne.n	800c892 <_vfiprintf_r+0x96>
 800c89e:	ebba 0b04 	subs.w	fp, sl, r4
 800c8a2:	d00b      	beq.n	800c8bc <_vfiprintf_r+0xc0>
 800c8a4:	465b      	mov	r3, fp
 800c8a6:	4622      	mov	r2, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f7ff ff93 	bl	800c7d6 <__sfputs_r>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	f000 80aa 	beq.w	800ca0a <_vfiprintf_r+0x20e>
 800c8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b8:	445a      	add	r2, fp
 800c8ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 80a2 	beq.w	800ca0a <_vfiprintf_r+0x20e>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8d0:	f10a 0a01 	add.w	sl, sl, #1
 800c8d4:	9304      	str	r3, [sp, #16]
 800c8d6:	9307      	str	r3, [sp, #28]
 800c8d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8dc:	931a      	str	r3, [sp, #104]	; 0x68
 800c8de:	4654      	mov	r4, sl
 800c8e0:	2205      	movs	r2, #5
 800c8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e6:	4858      	ldr	r0, [pc, #352]	; (800ca48 <_vfiprintf_r+0x24c>)
 800c8e8:	f7f3 fc82 	bl	80001f0 <memchr>
 800c8ec:	9a04      	ldr	r2, [sp, #16]
 800c8ee:	b9d8      	cbnz	r0, 800c928 <_vfiprintf_r+0x12c>
 800c8f0:	06d1      	lsls	r1, r2, #27
 800c8f2:	bf44      	itt	mi
 800c8f4:	2320      	movmi	r3, #32
 800c8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8fa:	0713      	lsls	r3, r2, #28
 800c8fc:	bf44      	itt	mi
 800c8fe:	232b      	movmi	r3, #43	; 0x2b
 800c900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c904:	f89a 3000 	ldrb.w	r3, [sl]
 800c908:	2b2a      	cmp	r3, #42	; 0x2a
 800c90a:	d015      	beq.n	800c938 <_vfiprintf_r+0x13c>
 800c90c:	9a07      	ldr	r2, [sp, #28]
 800c90e:	4654      	mov	r4, sl
 800c910:	2000      	movs	r0, #0
 800c912:	f04f 0c0a 	mov.w	ip, #10
 800c916:	4621      	mov	r1, r4
 800c918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c91c:	3b30      	subs	r3, #48	; 0x30
 800c91e:	2b09      	cmp	r3, #9
 800c920:	d94e      	bls.n	800c9c0 <_vfiprintf_r+0x1c4>
 800c922:	b1b0      	cbz	r0, 800c952 <_vfiprintf_r+0x156>
 800c924:	9207      	str	r2, [sp, #28]
 800c926:	e014      	b.n	800c952 <_vfiprintf_r+0x156>
 800c928:	eba0 0308 	sub.w	r3, r0, r8
 800c92c:	fa09 f303 	lsl.w	r3, r9, r3
 800c930:	4313      	orrs	r3, r2
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	46a2      	mov	sl, r4
 800c936:	e7d2      	b.n	800c8de <_vfiprintf_r+0xe2>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	1d19      	adds	r1, r3, #4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	9103      	str	r1, [sp, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	bfbb      	ittet	lt
 800c944:	425b      	neglt	r3, r3
 800c946:	f042 0202 	orrlt.w	r2, r2, #2
 800c94a:	9307      	strge	r3, [sp, #28]
 800c94c:	9307      	strlt	r3, [sp, #28]
 800c94e:	bfb8      	it	lt
 800c950:	9204      	strlt	r2, [sp, #16]
 800c952:	7823      	ldrb	r3, [r4, #0]
 800c954:	2b2e      	cmp	r3, #46	; 0x2e
 800c956:	d10c      	bne.n	800c972 <_vfiprintf_r+0x176>
 800c958:	7863      	ldrb	r3, [r4, #1]
 800c95a:	2b2a      	cmp	r3, #42	; 0x2a
 800c95c:	d135      	bne.n	800c9ca <_vfiprintf_r+0x1ce>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	1d1a      	adds	r2, r3, #4
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	9203      	str	r2, [sp, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfb8      	it	lt
 800c96a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c96e:	3402      	adds	r4, #2
 800c970:	9305      	str	r3, [sp, #20]
 800c972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca58 <_vfiprintf_r+0x25c>
 800c976:	7821      	ldrb	r1, [r4, #0]
 800c978:	2203      	movs	r2, #3
 800c97a:	4650      	mov	r0, sl
 800c97c:	f7f3 fc38 	bl	80001f0 <memchr>
 800c980:	b140      	cbz	r0, 800c994 <_vfiprintf_r+0x198>
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	eba0 000a 	sub.w	r0, r0, sl
 800c988:	fa03 f000 	lsl.w	r0, r3, r0
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	4303      	orrs	r3, r0
 800c990:	3401      	adds	r4, #1
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c998:	482c      	ldr	r0, [pc, #176]	; (800ca4c <_vfiprintf_r+0x250>)
 800c99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c99e:	2206      	movs	r2, #6
 800c9a0:	f7f3 fc26 	bl	80001f0 <memchr>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d03f      	beq.n	800ca28 <_vfiprintf_r+0x22c>
 800c9a8:	4b29      	ldr	r3, [pc, #164]	; (800ca50 <_vfiprintf_r+0x254>)
 800c9aa:	bb1b      	cbnz	r3, 800c9f4 <_vfiprintf_r+0x1f8>
 800c9ac:	9b03      	ldr	r3, [sp, #12]
 800c9ae:	3307      	adds	r3, #7
 800c9b0:	f023 0307 	bic.w	r3, r3, #7
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	9303      	str	r3, [sp, #12]
 800c9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ba:	443b      	add	r3, r7
 800c9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9be:	e767      	b.n	800c890 <_vfiprintf_r+0x94>
 800c9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	e7a5      	b.n	800c916 <_vfiprintf_r+0x11a>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	3401      	adds	r4, #1
 800c9ce:	9305      	str	r3, [sp, #20]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	f04f 0c0a 	mov.w	ip, #10
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9dc:	3a30      	subs	r2, #48	; 0x30
 800c9de:	2a09      	cmp	r2, #9
 800c9e0:	d903      	bls.n	800c9ea <_vfiprintf_r+0x1ee>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d0c5      	beq.n	800c972 <_vfiprintf_r+0x176>
 800c9e6:	9105      	str	r1, [sp, #20]
 800c9e8:	e7c3      	b.n	800c972 <_vfiprintf_r+0x176>
 800c9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e7f0      	b.n	800c9d6 <_vfiprintf_r+0x1da>
 800c9f4:	ab03      	add	r3, sp, #12
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	462a      	mov	r2, r5
 800c9fa:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <_vfiprintf_r+0x258>)
 800c9fc:	a904      	add	r1, sp, #16
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7fb fd78 	bl	80084f4 <_printf_float>
 800ca04:	4607      	mov	r7, r0
 800ca06:	1c78      	adds	r0, r7, #1
 800ca08:	d1d6      	bne.n	800c9b8 <_vfiprintf_r+0x1bc>
 800ca0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca0c:	07d9      	lsls	r1, r3, #31
 800ca0e:	d405      	bmi.n	800ca1c <_vfiprintf_r+0x220>
 800ca10:	89ab      	ldrh	r3, [r5, #12]
 800ca12:	059a      	lsls	r2, r3, #22
 800ca14:	d402      	bmi.n	800ca1c <_vfiprintf_r+0x220>
 800ca16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca18:	f7fe ff24 	bl	800b864 <__retarget_lock_release_recursive>
 800ca1c:	89ab      	ldrh	r3, [r5, #12]
 800ca1e:	065b      	lsls	r3, r3, #25
 800ca20:	f53f af12 	bmi.w	800c848 <_vfiprintf_r+0x4c>
 800ca24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca26:	e711      	b.n	800c84c <_vfiprintf_r+0x50>
 800ca28:	ab03      	add	r3, sp, #12
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	462a      	mov	r2, r5
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <_vfiprintf_r+0x258>)
 800ca30:	a904      	add	r1, sp, #16
 800ca32:	4630      	mov	r0, r6
 800ca34:	f7fc f802 	bl	8008a3c <_printf_i>
 800ca38:	e7e4      	b.n	800ca04 <_vfiprintf_r+0x208>
 800ca3a:	bf00      	nop
 800ca3c:	0800d26c 	.word	0x0800d26c
 800ca40:	0800d28c 	.word	0x0800d28c
 800ca44:	0800d24c 	.word	0x0800d24c
 800ca48:	0800d484 	.word	0x0800d484
 800ca4c:	0800d48e 	.word	0x0800d48e
 800ca50:	080084f5 	.word	0x080084f5
 800ca54:	0800c7d7 	.word	0x0800c7d7
 800ca58:	0800d48a 	.word	0x0800d48a
 800ca5c:	00000000 	.word	0x00000000

0800ca60 <nan>:
 800ca60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca68 <nan+0x8>
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	00000000 	.word	0x00000000
 800ca6c:	7ff80000 	.word	0x7ff80000

0800ca70 <_sbrk_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	4d06      	ldr	r5, [pc, #24]	; (800ca8c <_sbrk_r+0x1c>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	f7f6 feca 	bl	8003814 <_sbrk>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_sbrk_r+0x1a>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_sbrk_r+0x1a>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	20000a9c 	.word	0x20000a9c

0800ca90 <__sread>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	460c      	mov	r4, r1
 800ca94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca98:	f000 f93a 	bl	800cd10 <_read_r>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	bfab      	itete	ge
 800caa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caa2:	89a3      	ldrhlt	r3, [r4, #12]
 800caa4:	181b      	addge	r3, r3, r0
 800caa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800caaa:	bfac      	ite	ge
 800caac:	6563      	strge	r3, [r4, #84]	; 0x54
 800caae:	81a3      	strhlt	r3, [r4, #12]
 800cab0:	bd10      	pop	{r4, pc}

0800cab2 <__swrite>:
 800cab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab6:	461f      	mov	r7, r3
 800cab8:	898b      	ldrh	r3, [r1, #12]
 800caba:	05db      	lsls	r3, r3, #23
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	4616      	mov	r6, r2
 800cac2:	d505      	bpl.n	800cad0 <__swrite+0x1e>
 800cac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac8:	2302      	movs	r3, #2
 800caca:	2200      	movs	r2, #0
 800cacc:	f000 f8b8 	bl	800cc40 <_lseek_r>
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cada:	81a3      	strh	r3, [r4, #12]
 800cadc:	4632      	mov	r2, r6
 800cade:	463b      	mov	r3, r7
 800cae0:	4628      	mov	r0, r5
 800cae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cae6:	f000 b837 	b.w	800cb58 <_write_r>

0800caea <__sseek>:
 800caea:	b510      	push	{r4, lr}
 800caec:	460c      	mov	r4, r1
 800caee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf2:	f000 f8a5 	bl	800cc40 <_lseek_r>
 800caf6:	1c43      	adds	r3, r0, #1
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	bf15      	itete	ne
 800cafc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cafe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb06:	81a3      	strheq	r3, [r4, #12]
 800cb08:	bf18      	it	ne
 800cb0a:	81a3      	strhne	r3, [r4, #12]
 800cb0c:	bd10      	pop	{r4, pc}

0800cb0e <__sclose>:
 800cb0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb12:	f000 b851 	b.w	800cbb8 <_close_r>

0800cb16 <strncmp>:
 800cb16:	b510      	push	{r4, lr}
 800cb18:	b17a      	cbz	r2, 800cb3a <strncmp+0x24>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	3901      	subs	r1, #1
 800cb1e:	1884      	adds	r4, r0, r2
 800cb20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb28:	4290      	cmp	r0, r2
 800cb2a:	d101      	bne.n	800cb30 <strncmp+0x1a>
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d101      	bne.n	800cb34 <strncmp+0x1e>
 800cb30:	1a80      	subs	r0, r0, r2
 800cb32:	bd10      	pop	{r4, pc}
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d1f3      	bne.n	800cb20 <strncmp+0xa>
 800cb38:	e7fa      	b.n	800cb30 <strncmp+0x1a>
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	e7f9      	b.n	800cb32 <strncmp+0x1c>

0800cb3e <__ascii_wctomb>:
 800cb3e:	b149      	cbz	r1, 800cb54 <__ascii_wctomb+0x16>
 800cb40:	2aff      	cmp	r2, #255	; 0xff
 800cb42:	bf85      	ittet	hi
 800cb44:	238a      	movhi	r3, #138	; 0x8a
 800cb46:	6003      	strhi	r3, [r0, #0]
 800cb48:	700a      	strbls	r2, [r1, #0]
 800cb4a:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb4e:	bf98      	it	ls
 800cb50:	2001      	movls	r0, #1
 800cb52:	4770      	bx	lr
 800cb54:	4608      	mov	r0, r1
 800cb56:	4770      	bx	lr

0800cb58 <_write_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	4d07      	ldr	r5, [pc, #28]	; (800cb78 <_write_r+0x20>)
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	4608      	mov	r0, r1
 800cb60:	4611      	mov	r1, r2
 800cb62:	2200      	movs	r2, #0
 800cb64:	602a      	str	r2, [r5, #0]
 800cb66:	461a      	mov	r2, r3
 800cb68:	f7f6 fe03 	bl	8003772 <_write>
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	d102      	bne.n	800cb76 <_write_r+0x1e>
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	b103      	cbz	r3, 800cb76 <_write_r+0x1e>
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	20000a9c 	.word	0x20000a9c

0800cb7c <__assert_func>:
 800cb7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb7e:	4614      	mov	r4, r2
 800cb80:	461a      	mov	r2, r3
 800cb82:	4b09      	ldr	r3, [pc, #36]	; (800cba8 <__assert_func+0x2c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4605      	mov	r5, r0
 800cb88:	68d8      	ldr	r0, [r3, #12]
 800cb8a:	b14c      	cbz	r4, 800cba0 <__assert_func+0x24>
 800cb8c:	4b07      	ldr	r3, [pc, #28]	; (800cbac <__assert_func+0x30>)
 800cb8e:	9100      	str	r1, [sp, #0]
 800cb90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb94:	4906      	ldr	r1, [pc, #24]	; (800cbb0 <__assert_func+0x34>)
 800cb96:	462b      	mov	r3, r5
 800cb98:	f000 f81e 	bl	800cbd8 <fiprintf>
 800cb9c:	f000 f8ca 	bl	800cd34 <abort>
 800cba0:	4b04      	ldr	r3, [pc, #16]	; (800cbb4 <__assert_func+0x38>)
 800cba2:	461c      	mov	r4, r3
 800cba4:	e7f3      	b.n	800cb8e <__assert_func+0x12>
 800cba6:	bf00      	nop
 800cba8:	20000010 	.word	0x20000010
 800cbac:	0800d495 	.word	0x0800d495
 800cbb0:	0800d4a2 	.word	0x0800d4a2
 800cbb4:	0800d4d0 	.word	0x0800d4d0

0800cbb8 <_close_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d06      	ldr	r5, [pc, #24]	; (800cbd4 <_close_r+0x1c>)
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	602b      	str	r3, [r5, #0]
 800cbc4:	f7f6 fdf1 	bl	80037aa <_close>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	d102      	bne.n	800cbd2 <_close_r+0x1a>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b103      	cbz	r3, 800cbd2 <_close_r+0x1a>
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	20000a9c 	.word	0x20000a9c

0800cbd8 <fiprintf>:
 800cbd8:	b40e      	push	{r1, r2, r3}
 800cbda:	b503      	push	{r0, r1, lr}
 800cbdc:	4601      	mov	r1, r0
 800cbde:	ab03      	add	r3, sp, #12
 800cbe0:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <fiprintf+0x20>)
 800cbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe6:	6800      	ldr	r0, [r0, #0]
 800cbe8:	9301      	str	r3, [sp, #4]
 800cbea:	f7ff fe07 	bl	800c7fc <_vfiprintf_r>
 800cbee:	b002      	add	sp, #8
 800cbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbf4:	b003      	add	sp, #12
 800cbf6:	4770      	bx	lr
 800cbf8:	20000010 	.word	0x20000010

0800cbfc <_fstat_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d07      	ldr	r5, [pc, #28]	; (800cc1c <_fstat_r+0x20>)
 800cc00:	2300      	movs	r3, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	4611      	mov	r1, r2
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	f7f6 fdda 	bl	80037c2 <_fstat>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	d102      	bne.n	800cc18 <_fstat_r+0x1c>
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	b103      	cbz	r3, 800cc18 <_fstat_r+0x1c>
 800cc16:	6023      	str	r3, [r4, #0]
 800cc18:	bd38      	pop	{r3, r4, r5, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20000a9c 	.word	0x20000a9c

0800cc20 <_isatty_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d06      	ldr	r5, [pc, #24]	; (800cc3c <_isatty_r+0x1c>)
 800cc24:	2300      	movs	r3, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	602b      	str	r3, [r5, #0]
 800cc2c:	f7f6 fdd9 	bl	80037e2 <_isatty>
 800cc30:	1c43      	adds	r3, r0, #1
 800cc32:	d102      	bne.n	800cc3a <_isatty_r+0x1a>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	b103      	cbz	r3, 800cc3a <_isatty_r+0x1a>
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	20000a9c 	.word	0x20000a9c

0800cc40 <_lseek_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d07      	ldr	r5, [pc, #28]	; (800cc60 <_lseek_r+0x20>)
 800cc44:	4604      	mov	r4, r0
 800cc46:	4608      	mov	r0, r1
 800cc48:	4611      	mov	r1, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	602a      	str	r2, [r5, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	f7f6 fdd2 	bl	80037f8 <_lseek>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_lseek_r+0x1e>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_lseek_r+0x1e>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	20000a9c 	.word	0x20000a9c

0800cc64 <memmove>:
 800cc64:	4288      	cmp	r0, r1
 800cc66:	b510      	push	{r4, lr}
 800cc68:	eb01 0402 	add.w	r4, r1, r2
 800cc6c:	d902      	bls.n	800cc74 <memmove+0x10>
 800cc6e:	4284      	cmp	r4, r0
 800cc70:	4623      	mov	r3, r4
 800cc72:	d807      	bhi.n	800cc84 <memmove+0x20>
 800cc74:	1e43      	subs	r3, r0, #1
 800cc76:	42a1      	cmp	r1, r4
 800cc78:	d008      	beq.n	800cc8c <memmove+0x28>
 800cc7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc82:	e7f8      	b.n	800cc76 <memmove+0x12>
 800cc84:	4402      	add	r2, r0
 800cc86:	4601      	mov	r1, r0
 800cc88:	428a      	cmp	r2, r1
 800cc8a:	d100      	bne.n	800cc8e <memmove+0x2a>
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc96:	e7f7      	b.n	800cc88 <memmove+0x24>

0800cc98 <__malloc_lock>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__malloc_lock+0x8>)
 800cc9a:	f7fe bde2 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800cc9e:	bf00      	nop
 800cca0:	20000a90 	.word	0x20000a90

0800cca4 <__malloc_unlock>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__malloc_unlock+0x8>)
 800cca6:	f7fe bddd 	b.w	800b864 <__retarget_lock_release_recursive>
 800ccaa:	bf00      	nop
 800ccac:	20000a90 	.word	0x20000a90

0800ccb0 <_realloc_r>:
 800ccb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb4:	4680      	mov	r8, r0
 800ccb6:	4614      	mov	r4, r2
 800ccb8:	460e      	mov	r6, r1
 800ccba:	b921      	cbnz	r1, 800ccc6 <_realloc_r+0x16>
 800ccbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	f7ff bba1 	b.w	800c408 <_malloc_r>
 800ccc6:	b92a      	cbnz	r2, 800ccd4 <_realloc_r+0x24>
 800ccc8:	f7ff fb32 	bl	800c330 <_free_r>
 800cccc:	4625      	mov	r5, r4
 800ccce:	4628      	mov	r0, r5
 800ccd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd4:	f000 f835 	bl	800cd42 <_malloc_usable_size_r>
 800ccd8:	4284      	cmp	r4, r0
 800ccda:	4607      	mov	r7, r0
 800ccdc:	d802      	bhi.n	800cce4 <_realloc_r+0x34>
 800ccde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cce2:	d812      	bhi.n	800cd0a <_realloc_r+0x5a>
 800cce4:	4621      	mov	r1, r4
 800cce6:	4640      	mov	r0, r8
 800cce8:	f7ff fb8e 	bl	800c408 <_malloc_r>
 800ccec:	4605      	mov	r5, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d0ed      	beq.n	800ccce <_realloc_r+0x1e>
 800ccf2:	42bc      	cmp	r4, r7
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	bf28      	it	cs
 800ccfa:	463a      	movcs	r2, r7
 800ccfc:	f7fe fe32 	bl	800b964 <memcpy>
 800cd00:	4631      	mov	r1, r6
 800cd02:	4640      	mov	r0, r8
 800cd04:	f7ff fb14 	bl	800c330 <_free_r>
 800cd08:	e7e1      	b.n	800ccce <_realloc_r+0x1e>
 800cd0a:	4635      	mov	r5, r6
 800cd0c:	e7df      	b.n	800ccce <_realloc_r+0x1e>
	...

0800cd10 <_read_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4d07      	ldr	r5, [pc, #28]	; (800cd30 <_read_r+0x20>)
 800cd14:	4604      	mov	r4, r0
 800cd16:	4608      	mov	r0, r1
 800cd18:	4611      	mov	r1, r2
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	602a      	str	r2, [r5, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f7f6 fd0a 	bl	8003738 <_read>
 800cd24:	1c43      	adds	r3, r0, #1
 800cd26:	d102      	bne.n	800cd2e <_read_r+0x1e>
 800cd28:	682b      	ldr	r3, [r5, #0]
 800cd2a:	b103      	cbz	r3, 800cd2e <_read_r+0x1e>
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	bd38      	pop	{r3, r4, r5, pc}
 800cd30:	20000a9c 	.word	0x20000a9c

0800cd34 <abort>:
 800cd34:	b508      	push	{r3, lr}
 800cd36:	2006      	movs	r0, #6
 800cd38:	f000 f834 	bl	800cda4 <raise>
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	f7f6 fcf1 	bl	8003724 <_exit>

0800cd42 <_malloc_usable_size_r>:
 800cd42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd46:	1f18      	subs	r0, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bfbc      	itt	lt
 800cd4c:	580b      	ldrlt	r3, [r1, r0]
 800cd4e:	18c0      	addlt	r0, r0, r3
 800cd50:	4770      	bx	lr

0800cd52 <_raise_r>:
 800cd52:	291f      	cmp	r1, #31
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	d904      	bls.n	800cd66 <_raise_r+0x14>
 800cd5c:	2316      	movs	r3, #22
 800cd5e:	6003      	str	r3, [r0, #0]
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	bd38      	pop	{r3, r4, r5, pc}
 800cd66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd68:	b112      	cbz	r2, 800cd70 <_raise_r+0x1e>
 800cd6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd6e:	b94b      	cbnz	r3, 800cd84 <_raise_r+0x32>
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 f831 	bl	800cdd8 <_getpid_r>
 800cd76:	462a      	mov	r2, r5
 800cd78:	4601      	mov	r1, r0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd80:	f000 b818 	b.w	800cdb4 <_kill_r>
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d00a      	beq.n	800cd9e <_raise_r+0x4c>
 800cd88:	1c59      	adds	r1, r3, #1
 800cd8a:	d103      	bne.n	800cd94 <_raise_r+0x42>
 800cd8c:	2316      	movs	r3, #22
 800cd8e:	6003      	str	r3, [r0, #0]
 800cd90:	2001      	movs	r0, #1
 800cd92:	e7e7      	b.n	800cd64 <_raise_r+0x12>
 800cd94:	2400      	movs	r4, #0
 800cd96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	4798      	blx	r3
 800cd9e:	2000      	movs	r0, #0
 800cda0:	e7e0      	b.n	800cd64 <_raise_r+0x12>
	...

0800cda4 <raise>:
 800cda4:	4b02      	ldr	r3, [pc, #8]	; (800cdb0 <raise+0xc>)
 800cda6:	4601      	mov	r1, r0
 800cda8:	6818      	ldr	r0, [r3, #0]
 800cdaa:	f7ff bfd2 	b.w	800cd52 <_raise_r>
 800cdae:	bf00      	nop
 800cdb0:	20000010 	.word	0x20000010

0800cdb4 <_kill_r>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	4d07      	ldr	r5, [pc, #28]	; (800cdd4 <_kill_r+0x20>)
 800cdb8:	2300      	movs	r3, #0
 800cdba:	4604      	mov	r4, r0
 800cdbc:	4608      	mov	r0, r1
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	602b      	str	r3, [r5, #0]
 800cdc2:	f7f6 fc9f 	bl	8003704 <_kill>
 800cdc6:	1c43      	adds	r3, r0, #1
 800cdc8:	d102      	bne.n	800cdd0 <_kill_r+0x1c>
 800cdca:	682b      	ldr	r3, [r5, #0]
 800cdcc:	b103      	cbz	r3, 800cdd0 <_kill_r+0x1c>
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	bd38      	pop	{r3, r4, r5, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000a9c 	.word	0x20000a9c

0800cdd8 <_getpid_r>:
 800cdd8:	f7f6 bc8c 	b.w	80036f4 <_getpid>

0800cddc <_init>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr

0800cde8 <_fini>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr
